
Disco_F746G_DCMI_camera_AN5020_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016dd4  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002034  08016f9c  08016f9c  00026f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018fd0  08018fd0  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  08018fd0  08018fd0  00028fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018fd8  08018fd8  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018fd8  08018fd8  00028fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018fdc  08018fdc  00028fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08018fe0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000a8  08019088  000300a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000148  08019128  00030148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000013bc  200001e8  080191c8  000301e8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200015a4  080191c8  000315a4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004010a  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007af8  00000000  00000000  00070322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000032a8  00000000  00000000  00077e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00035c1e  00000000  00000000  0007b0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000440fa  00000000  00000000  000b0ce6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001269a4  00000000  00000000  000f4de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0021b784  2**0
                  CONTENTS, READONLY
 21 .debug_ranges 00002f50  00000000  00000000  0021b7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000da40  00000000  00000000  0021e728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200001e8 	.word	0x200001e8
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08016f84 	.word	0x08016f84

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200001ec 	.word	0x200001ec
 8000204:	08016f84 	.word	0x08016f84

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b5b0      	push	{r4, r5, r7, lr}
 800050e:	f5ad 3d81 	sub.w	sp, sp, #66048	; 0x10200
 8000512:	b0e2      	sub	sp, #392	; 0x188
 8000514:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	FATFS FatFs;
	FIL fil;
	FRESULT fres;
	UINT bytes_written;
	char filename[] = "spicy_potato.bmp";
 8000516:	4b80      	ldr	r3, [pc, #512]	; (8000718 <main+0x20c>)
 8000518:	443b      	add	r3, r7
 800051a:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 800051e:	4a7f      	ldr	r2, [pc, #508]	; (800071c <main+0x210>)
 8000520:	461c      	mov	r4, r3
 8000522:	4615      	mov	r5, r2
 8000524:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000526:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000528:	682b      	ldr	r3, [r5, #0]
 800052a:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052c:	f004 f943 	bl	80047b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000530:	f000 f904 	bl	800073c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000534:	f000 f974 	bl	8000820 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000538:	f001 f960 	bl	80017fc <MX_GPIO_Init>
  MX_DMA_Init();
 800053c:	f001 f8e0 	bl	8001700 <MX_DMA_Init>
  MX_ADC3_Init();
 8000540:	f000 f9a0 	bl	8000884 <MX_ADC3_Init>
  MX_CRC_Init();
 8000544:	f000 f9f0 	bl	8000928 <MX_CRC_Init>
  MX_DCMI_Init();
 8000548:	f000 fa10 	bl	800096c <MX_DCMI_Init>
  MX_ETH_Init();
 800054c:	f000 fa74 	bl	8000a38 <MX_ETH_Init>
  MX_FMC_Init();
 8000550:	f001 f904 	bl	800175c <MX_FMC_Init>
  MX_I2C1_Init();
 8000554:	f000 fabe 	bl	8000ad4 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000558:	f000 fafc 	bl	8000b54 <MX_I2C3_Init>
  MX_LTDC_Init();
 800055c:	f000 fb3a 	bl	8000bd4 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000560:	f000 fbba 	bl	8000cd8 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8000564:	f000 fbe4 	bl	8000d30 <MX_RTC_Init>
  MX_SAI2_Init();
 8000568:	f000 fc86 	bl	8000e78 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 800056c:	f000 fd2c 	bl	8000fc8 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8000570:	f000 fd4c 	bl	800100c <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8000574:	f000 fd7a 	bl	800106c <MX_SPI2_Init>
  MX_TIM1_Init();
 8000578:	f000 fdb6 	bl	80010e8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800057c:	f000 fe60 	bl	8001240 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000580:	f000 fed4 	bl	800132c <MX_TIM3_Init>
  MX_TIM5_Init();
 8000584:	f000 ff4a 	bl	800141c <MX_TIM5_Init>
  MX_TIM8_Init();
 8000588:	f000 ffc0 	bl	800150c <MX_TIM8_Init>
  MX_TIM12_Init();
 800058c:	f001 f812 	bl	80015b4 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8000590:	f001 f856 	bl	8001640 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000594:	f001 f884 	bl	80016a0 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000598:	f011 fca4 	bl	8011ee4 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 800059c:	f016 f8a8 	bl	80166f0 <MX_USB_HOST_Init>
  MX_DMA2D_Init();
 80005a0:	f000 fa18 	bl	80009d4 <MX_DMA2D_Init>
  /* USER CODE BEGIN 2 */

	/*##-2- LCD Initialization ############################*/
	LTDC_Init(FRAME_BUFFER, 0, 0, 480, 272);
 80005a4:	f44f 7388 	mov.w	r3, #272	; 0x110
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80005ae:	2200      	movs	r2, #0
 80005b0:	2100      	movs	r1, #0
 80005b2:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
 80005b6:	f001 fbe3 	bl	8001d80 <LTDC_Init>
	LCD_DisplayOff(); // mandatory to avoid parasites on the LCD screen
 80005ba:	f001 fd73 	bl	80020a4 <LCD_DisplayOff>

	CAMERA_PwrDown();
 80005be:	f001 fd27 	bl	8002010 <CAMERA_PwrDown>
	hal_status = BSP_SDRAM_Init();
 80005c2:	f002 fcc5 	bl	8002f50 <BSP_SDRAM_Init>
 80005c6:	4603      	mov	r3, r0
 80005c8:	461a      	mov	r2, r3
 80005ca:	4b55      	ldr	r3, [pc, #340]	; (8000720 <main+0x214>)
 80005cc:	701a      	strb	r2, [r3, #0]
	OnError_Handler(hal_status != HAL_OK);
 80005ce:	4b54      	ldr	r3, [pc, #336]	; (8000720 <main+0x214>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	bf14      	ite	ne
 80005d6:	2301      	movne	r3, #1
 80005d8:	2300      	moveq	r3, #0
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	4618      	mov	r0, r3
 80005de:	f001 fd8f 	bl	8002100 <OnError_Handler>

	/*##-3- Camera Initialization and start capture ############################*/
	/* Initialize the Camera in WQVGA mode */
	/* Init camera default resolution and format */
	CAMERA_PwrUp();
 80005e2:	f001 fce7 	bl	8001fb4 <CAMERA_PwrUp>
	HAL_Delay(1000);
 80005e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ea:	f004 f941 	bl	8004870 <HAL_Delay>
	hal_status = CAMERA_Init(CAMERA_R480x272);
 80005ee:	2002      	movs	r0, #2
 80005f0:	f001 fc92 	bl	8001f18 <CAMERA_Init>
 80005f4:	4603      	mov	r3, r0
 80005f6:	461a      	mov	r2, r3
 80005f8:	4b49      	ldr	r3, [pc, #292]	; (8000720 <main+0x214>)
 80005fa:	701a      	strb	r2, [r3, #0]

	OnError_Handler(hal_status != HAL_OK);
 80005fc:	4b48      	ldr	r3, [pc, #288]	; (8000720 <main+0x214>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	bf14      	ite	ne
 8000604:	2301      	movne	r3, #1
 8000606:	2300      	moveq	r3, #0
 8000608:	b2db      	uxtb	r3, r3
 800060a:	4618      	mov	r0, r3
 800060c:	f001 fd78 	bl	8002100 <OnError_Handler>

	HAL_Delay(1000); //Delay for the camera to output correct data
 8000610:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000614:	f004 f92c 	bl	8004870 <HAL_Delay>
	Im_size = 0xff00;  //size=480*272*2/4
 8000618:	4b42      	ldr	r3, [pc, #264]	; (8000724 <main+0x218>)
 800061a:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 800061e:	601a      	str	r2, [r3, #0]

	/*##-4- Camera Continuous capture start in QVGA resolution ############################*/
	/* Disable unwanted HSYNC (IT_LINE)/VSYNC interrupts */
	__HAL_DCMI_DISABLE_IT(&hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC);
 8000620:	4b41      	ldr	r3, [pc, #260]	; (8000728 <main+0x21c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	68da      	ldr	r2, [r3, #12]
 8000626:	4b40      	ldr	r3, [pc, #256]	; (8000728 <main+0x21c>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	f022 0218 	bic.w	r2, r2, #24
 800062e:	60da      	str	r2, [r3, #12]

	/* uncomment the following line in case of snapshot mode */
	HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t)CAMERA_FRAME_BUFFER, Im_size);
 8000630:	4b3c      	ldr	r3, [pc, #240]	; (8000724 <main+0x218>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8000638:	2102      	movs	r1, #2
 800063a:	483b      	ldr	r0, [pc, #236]	; (8000728 <main+0x21c>)
 800063c:	f004 fe66 	bl	800530c <HAL_DCMI_Start_DMA>
	/* uncomment the following line in case of continuous mode */
//	hal_status = HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS , (uint32_t)CAMERA_FRAME_BUFFER, Im_size);
	OnError_Handler(hal_status != HAL_OK);
 8000640:	4b37      	ldr	r3, [pc, #220]	; (8000720 <main+0x214>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	bf14      	ite	ne
 8000648:	2301      	movne	r3, #1
 800064a:	2300      	moveq	r3, #0
 800064c:	b2db      	uxtb	r3, r3
 800064e:	4618      	mov	r0, r3
 8000650:	f001 fd56 	bl	8002100 <OnError_Handler>

	/*##-5- LCD Initialization ############################*/
	LCD_DisplayOn();
 8000654:	f001 fd08 	bl	8002068 <LCD_DisplayOn>
	//LTDC_Init(FRAME_BUFFER, 0, 0, 480, 272);

	// Stock jolie image peut etre
	  fres = f_mount(&FatFs, "", 1); // mount the SD card
 8000658:	4b34      	ldr	r3, [pc, #208]	; (800072c <main+0x220>)
 800065a:	443b      	add	r3, r7
 800065c:	2201      	movs	r2, #1
 800065e:	4934      	ldr	r1, [pc, #208]	; (8000730 <main+0x224>)
 8000660:	4618      	mov	r0, r3
 8000662:	f015 fbc7 	bl	8015df4 <f_mount>
 8000666:	4603      	mov	r3, r0
 8000668:	4a32      	ldr	r2, [pc, #200]	; (8000734 <main+0x228>)
 800066a:	443a      	add	r2, r7
 800066c:	7013      	strb	r3, [r2, #0]

	  // Copy the image data to the buffer (replace this with your own code for capturing the image)
	   memcpy(buffer, CAMERA_FRAME_BUFFER, IMAGE_SIZE);
 800066e:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8000672:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8000676:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 800067a:	4618      	mov	r0, r3
 800067c:	4611      	mov	r1, r2
 800067e:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000682:	461a      	mov	r2, r3
 8000684:	f016 fb6a 	bl	8016d5c <memcpy>


	  // Open the file for writing
	  fres = f_open(&fil, filename, FA_CREATE_ALWAYS | FA_WRITE);
 8000688:	f64f 7104 	movw	r1, #65284	; 0xff04
 800068c:	4439      	add	r1, r7
 800068e:	f64f 731c 	movw	r3, #65308	; 0xff1c
 8000692:	443b      	add	r3, r7
 8000694:	220a      	movs	r2, #10
 8000696:	4618      	mov	r0, r3
 8000698:	f015 fbf2 	bl	8015e80 <f_open>
 800069c:	4603      	mov	r3, r0
 800069e:	4a25      	ldr	r2, [pc, #148]	; (8000734 <main+0x228>)
 80006a0:	443a      	add	r2, r7
 80006a2:	7013      	strb	r3, [r2, #0]

	  // Write the buffer to the file
	  fres = f_write(&fil, buffer, IMAGE_SIZE, &bytes_written);
 80006a4:	f64f 7318 	movw	r3, #65304	; 0xff18
 80006a8:	443b      	add	r3, r7
 80006aa:	4923      	ldr	r1, [pc, #140]	; (8000738 <main+0x22c>)
 80006ac:	4a1a      	ldr	r2, [pc, #104]	; (8000718 <main+0x20c>)
 80006ae:	440a      	add	r2, r1
 80006b0:	19d1      	adds	r1, r2, r7
 80006b2:	f64f 701c 	movw	r0, #65308	; 0xff1c
 80006b6:	4438      	add	r0, r7
 80006b8:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 80006bc:	f015 fd9e 	bl	80161fc <f_write>
 80006c0:	4603      	mov	r3, r0
 80006c2:	4a1c      	ldr	r2, [pc, #112]	; (8000734 <main+0x228>)
 80006c4:	443a      	add	r2, r7
 80006c6:	7013      	strb	r3, [r2, #0]

	  // Close the file
	  fres = f_close(&fil);
 80006c8:	f64f 731c 	movw	r3, #65308	; 0xff1c
 80006cc:	443b      	add	r3, r7
 80006ce:	4618      	mov	r0, r3
 80006d0:	f015 ff87 	bl	80165e2 <f_close>
 80006d4:	4603      	mov	r3, r0
 80006d6:	4a17      	ldr	r2, [pc, #92]	; (8000734 <main+0x228>)
 80006d8:	443a      	add	r2, r7
 80006da:	7013      	strb	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	// GO DODO
	HAL_SuspendTick();
 80006dc:	f004 f8ec 	bl	80048b8 <HAL_SuspendTick>
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80006e0:	2101      	movs	r1, #1
 80006e2:	2000      	movs	r0, #0
 80006e4:	f00a fcc2 	bl	800b06c <HAL_PWR_EnterSLEEPMode>
	HAL_PWR_EnableSleepOnExit();
 80006e8:	f00a fce2 	bl	800b0b0 <HAL_PWR_EnableSleepOnExit>
	while (1)
	{
//		DCMI -> CR |= DCMI_CR_CAPTURE; // Apparement marche pas
//		while(DCMI -> CR & DCMI_CR_CAPTURE);
		HAL_ResumeTick();
 80006ec:	f004 f8f4 	bl	80048d8 <HAL_ResumeTick>
		HAL_Delay(1000);
 80006f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006f4:	f004 f8bc 	bl	8004870 <HAL_Delay>

//		if (Test_potato_GPIO_Port->IDR & Test_potato_Pin){
			HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t)CAMERA_FRAME_BUFFER, Im_size);
 80006f8:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <main+0x218>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8000700:	2102      	movs	r1, #2
 8000702:	4809      	ldr	r0, [pc, #36]	; (8000728 <main+0x21c>)
 8000704:	f004 fe02 	bl	800530c <HAL_DCMI_Start_DMA>
			HAL_Delay(3000);
 8000708:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800070c:	f004 f8b0 	bl	8004870 <HAL_Delay>
//		}
//		HAL_Delay(3000);

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000710:	f016 f814 	bl	801673c <MX_USB_HOST_Process>
		HAL_ResumeTick();
 8000714:	e7ea      	b.n	80006ec <main+0x1e0>
 8000716:	bf00      	nop
 8000718:	00010380 	.word	0x00010380
 800071c:	08016fa0 	.word	0x08016fa0
 8000720:	20000cec 	.word	0x20000cec
 8000724:	20000ce8 	.word	0x20000ce8
 8000728:	200002a8 	.word	0x200002a8
 800072c:	0001014c 	.word	0x0001014c
 8000730:	08016f9c 	.word	0x08016f9c
 8000734:	0001037f 	.word	0x0001037f
 8000738:	fffefc84 	.word	0xfffefc84

0800073c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b094      	sub	sp, #80	; 0x50
 8000740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000742:	f107 0320 	add.w	r3, r7, #32
 8000746:	2230      	movs	r2, #48	; 0x30
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f016 fb14 	bl	8016d78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000760:	f00a fc74 	bl	800b04c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000764:	4b2c      	ldr	r3, [pc, #176]	; (8000818 <SystemClock_Config+0xdc>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000768:	4a2b      	ldr	r2, [pc, #172]	; (8000818 <SystemClock_Config+0xdc>)
 800076a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076e:	6413      	str	r3, [r2, #64]	; 0x40
 8000770:	4b29      	ldr	r3, [pc, #164]	; (8000818 <SystemClock_Config+0xdc>)
 8000772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800077c:	4b27      	ldr	r3, [pc, #156]	; (800081c <SystemClock_Config+0xe0>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a26      	ldr	r2, [pc, #152]	; (800081c <SystemClock_Config+0xe0>)
 8000782:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000786:	6013      	str	r3, [r2, #0]
 8000788:	4b24      	ldr	r3, [pc, #144]	; (800081c <SystemClock_Config+0xe0>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000794:	2309      	movs	r3, #9
 8000796:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000798:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800079c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800079e:	2301      	movs	r3, #1
 80007a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a2:	2302      	movs	r3, #2
 80007a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80007ac:	2319      	movs	r3, #25
 80007ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 80007b0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80007b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b6:	2302      	movs	r3, #2
 80007b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80007ba:	2309      	movs	r3, #9
 80007bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007be:	f107 0320 	add.w	r3, r7, #32
 80007c2:	4618      	mov	r0, r3
 80007c4:	f00a fd96 	bl	800b2f4 <HAL_RCC_OscConfig>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007ce:	f001 fca6 	bl	800211e <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007d2:	f00a fc7d 	bl	800b0d0 <HAL_PWREx_EnableOverDrive>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80007dc:	f001 fc9f 	bl	800211e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e0:	230f      	movs	r3, #15
 80007e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e4:	2302      	movs	r3, #2
 80007e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80007f8:	f107 030c 	add.w	r3, r7, #12
 80007fc:	2106      	movs	r1, #6
 80007fe:	4618      	mov	r0, r3
 8000800:	f00b f81c 	bl	800b83c <HAL_RCC_ClockConfig>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800080a:	f001 fc88 	bl	800211e <Error_Handler>
  }
}
 800080e:	bf00      	nop
 8000810:	3750      	adds	r7, #80	; 0x50
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40023800 	.word	0x40023800
 800081c:	40007000 	.word	0x40007000

08000820 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b0a2      	sub	sp, #136	; 0x88
 8000824:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	2284      	movs	r2, #132	; 0x84
 800082a:	2100      	movs	r1, #0
 800082c:	4618      	mov	r0, r3
 800082e:	f016 faa3 	bl	8016d78 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 8000832:	4b13      	ldr	r3, [pc, #76]	; (8000880 <PeriphCommonClock_Config+0x60>)
 8000834:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000836:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800083a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800083c:	2305      	movs	r3, #5
 800083e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000840:	2302      	movs	r3, #2
 8000842:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000844:	2303      	movs	r3, #3
 8000846:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000848:	2301      	movs	r3, #1
 800084a:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800084c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000850:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000852:	2300      	movs	r3, #0
 8000854:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000856:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800085a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800085e:	2300      	movs	r3, #0
 8000860:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	4618      	mov	r0, r3
 8000868:	f00b f9ce 	bl	800bc08 <HAL_RCCEx_PeriphCLKConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000872:	f001 fc54 	bl	800211e <Error_Handler>
  }
}
 8000876:	bf00      	nop
 8000878:	3788      	adds	r7, #136	; 0x88
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	00b00008 	.word	0x00b00008

08000884 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800088a:	463b      	mov	r3, r7
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000896:	4b21      	ldr	r3, [pc, #132]	; (800091c <MX_ADC3_Init+0x98>)
 8000898:	4a21      	ldr	r2, [pc, #132]	; (8000920 <MX_ADC3_Init+0x9c>)
 800089a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800089c:	4b1f      	ldr	r3, [pc, #124]	; (800091c <MX_ADC3_Init+0x98>)
 800089e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008a2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80008a4:	4b1d      	ldr	r3, [pc, #116]	; (800091c <MX_ADC3_Init+0x98>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008aa:	4b1c      	ldr	r3, [pc, #112]	; (800091c <MX_ADC3_Init+0x98>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80008b0:	4b1a      	ldr	r3, [pc, #104]	; (800091c <MX_ADC3_Init+0x98>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80008b6:	4b19      	ldr	r3, [pc, #100]	; (800091c <MX_ADC3_Init+0x98>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008be:	4b17      	ldr	r3, [pc, #92]	; (800091c <MX_ADC3_Init+0x98>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008c4:	4b15      	ldr	r3, [pc, #84]	; (800091c <MX_ADC3_Init+0x98>)
 80008c6:	4a17      	ldr	r2, [pc, #92]	; (8000924 <MX_ADC3_Init+0xa0>)
 80008c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008ca:	4b14      	ldr	r3, [pc, #80]	; (800091c <MX_ADC3_Init+0x98>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <MX_ADC3_Init+0x98>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80008d6:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_ADC3_Init+0x98>)
 80008d8:	2200      	movs	r2, #0
 80008da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008de:	4b0f      	ldr	r3, [pc, #60]	; (800091c <MX_ADC3_Init+0x98>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80008e4:	480d      	ldr	r0, [pc, #52]	; (800091c <MX_ADC3_Init+0x98>)
 80008e6:	f004 f807 	bl	80048f8 <HAL_ADC_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80008f0:	f001 fc15 	bl	800211e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80008f4:	2304      	movs	r3, #4
 80008f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008f8:	2301      	movs	r3, #1
 80008fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000900:	463b      	mov	r3, r7
 8000902:	4619      	mov	r1, r3
 8000904:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_ADC3_Init+0x98>)
 8000906:	f004 f83b 	bl	8004980 <HAL_ADC_ConfigChannel>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000910:	f001 fc05 	bl	800211e <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	2000023c 	.word	0x2000023c
 8000920:	40012200 	.word	0x40012200
 8000924:	0f000001 	.word	0x0f000001

08000928 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800092c:	4b0d      	ldr	r3, [pc, #52]	; (8000964 <MX_CRC_Init+0x3c>)
 800092e:	4a0e      	ldr	r2, [pc, #56]	; (8000968 <MX_CRC_Init+0x40>)
 8000930:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_CRC_Init+0x3c>)
 8000934:	2200      	movs	r2, #0
 8000936:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000938:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <MX_CRC_Init+0x3c>)
 800093a:	2200      	movs	r2, #0
 800093c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_CRC_Init+0x3c>)
 8000940:	2200      	movs	r2, #0
 8000942:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <MX_CRC_Init+0x3c>)
 8000946:	2200      	movs	r2, #0
 8000948:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_CRC_Init+0x3c>)
 800094c:	2201      	movs	r2, #1
 800094e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <MX_CRC_Init+0x3c>)
 8000952:	f004 fb77 	bl	8005044 <HAL_CRC_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800095c:	f001 fbdf 	bl	800211e <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000284 	.word	0x20000284
 8000968:	40023000 	.word	0x40023000

0800096c <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000970:	4b16      	ldr	r3, [pc, #88]	; (80009cc <MX_DCMI_Init+0x60>)
 8000972:	4a17      	ldr	r2, [pc, #92]	; (80009d0 <MX_DCMI_Init+0x64>)
 8000974:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000976:	4b15      	ldr	r3, [pc, #84]	; (80009cc <MX_DCMI_Init+0x60>)
 8000978:	2200      	movs	r2, #0
 800097a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 800097c:	4b13      	ldr	r3, [pc, #76]	; (80009cc <MX_DCMI_Init+0x60>)
 800097e:	2220      	movs	r2, #32
 8000980:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000982:	4b12      	ldr	r3, [pc, #72]	; (80009cc <MX_DCMI_Init+0x60>)
 8000984:	2280      	movs	r2, #128	; 0x80
 8000986:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 8000988:	4b10      	ldr	r3, [pc, #64]	; (80009cc <MX_DCMI_Init+0x60>)
 800098a:	2240      	movs	r2, #64	; 0x40
 800098c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800098e:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <MX_DCMI_Init+0x60>)
 8000990:	2200      	movs	r2, #0
 8000992:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000994:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <MX_DCMI_Init+0x60>)
 8000996:	2200      	movs	r2, #0
 8000998:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800099a:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <MX_DCMI_Init+0x60>)
 800099c:	2200      	movs	r2, #0
 800099e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80009a0:	4b0a      	ldr	r3, [pc, #40]	; (80009cc <MX_DCMI_Init+0x60>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <MX_DCMI_Init+0x60>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80009ac:	4b07      	ldr	r3, [pc, #28]	; (80009cc <MX_DCMI_Init+0x60>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80009b2:	4b06      	ldr	r3, [pc, #24]	; (80009cc <MX_DCMI_Init+0x60>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80009b8:	4804      	ldr	r0, [pc, #16]	; (80009cc <MX_DCMI_Init+0x60>)
 80009ba:	f004 fc2d 	bl	8005218 <HAL_DCMI_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80009c4:	f001 fbab 	bl	800211e <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	200002a8 	.word	0x200002a8
 80009d0:	50050000 	.word	0x50050000

080009d4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80009d8:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <MX_DMA2D_Init+0x5c>)
 80009da:	4a16      	ldr	r2, [pc, #88]	; (8000a34 <MX_DMA2D_Init+0x60>)
 80009dc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80009de:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_DMA2D_Init+0x5c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80009e4:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <MX_DMA2D_Init+0x5c>)
 80009e6:	2202      	movs	r2, #2
 80009e8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_DMA2D_Init+0x5c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <MX_DMA2D_Init+0x5c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MX_DMA2D_Init+0x5c>)
 80009f8:	2202      	movs	r2, #2
 80009fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MX_DMA2D_Init+0x5c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <MX_DMA2D_Init+0x5c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000a08:	4809      	ldr	r0, [pc, #36]	; (8000a30 <MX_DMA2D_Init+0x5c>)
 8000a0a:	f005 fab5 	bl	8005f78 <HAL_DMA2D_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000a14:	f001 fb83 	bl	800211e <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000a18:	2101      	movs	r1, #1
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <MX_DMA2D_Init+0x5c>)
 8000a1c:	f005 fc06 	bl	800622c <HAL_DMA2D_ConfigLayer>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000a26:	f001 fb7a 	bl	800211e <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000358 	.word	0x20000358
 8000a34:	4002b000 	.word	0x4002b000

08000a38 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a3c:	4b1f      	ldr	r3, [pc, #124]	; (8000abc <MX_ETH_Init+0x84>)
 8000a3e:	4a20      	ldr	r2, [pc, #128]	; (8000ac0 <MX_ETH_Init+0x88>)
 8000a40:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a42:	4b20      	ldr	r3, [pc, #128]	; (8000ac4 <MX_ETH_Init+0x8c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a48:	4b1e      	ldr	r3, [pc, #120]	; (8000ac4 <MX_ETH_Init+0x8c>)
 8000a4a:	2280      	movs	r2, #128	; 0x80
 8000a4c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a4e:	4b1d      	ldr	r3, [pc, #116]	; (8000ac4 <MX_ETH_Init+0x8c>)
 8000a50:	22e1      	movs	r2, #225	; 0xe1
 8000a52:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a54:	4b1b      	ldr	r3, [pc, #108]	; (8000ac4 <MX_ETH_Init+0x8c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a5a:	4b1a      	ldr	r3, [pc, #104]	; (8000ac4 <MX_ETH_Init+0x8c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a60:	4b18      	ldr	r3, [pc, #96]	; (8000ac4 <MX_ETH_Init+0x8c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <MX_ETH_Init+0x84>)
 8000a68:	4a16      	ldr	r2, [pc, #88]	; (8000ac4 <MX_ETH_Init+0x8c>)
 8000a6a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a6c:	4b13      	ldr	r3, [pc, #76]	; (8000abc <MX_ETH_Init+0x84>)
 8000a6e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a72:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a74:	4b11      	ldr	r3, [pc, #68]	; (8000abc <MX_ETH_Init+0x84>)
 8000a76:	4a14      	ldr	r2, [pc, #80]	; (8000ac8 <MX_ETH_Init+0x90>)
 8000a78:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a7a:	4b10      	ldr	r3, [pc, #64]	; (8000abc <MX_ETH_Init+0x84>)
 8000a7c:	4a13      	ldr	r2, [pc, #76]	; (8000acc <MX_ETH_Init+0x94>)
 8000a7e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a80:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <MX_ETH_Init+0x84>)
 8000a82:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000a86:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a88:	480c      	ldr	r0, [pc, #48]	; (8000abc <MX_ETH_Init+0x84>)
 8000a8a:	f006 fdd7 	bl	800763c <HAL_ETH_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000a94:	f001 fb43 	bl	800211e <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a98:	2238      	movs	r2, #56	; 0x38
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	480c      	ldr	r0, [pc, #48]	; (8000ad0 <MX_ETH_Init+0x98>)
 8000a9e:	f016 f96b 	bl	8016d78 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <MX_ETH_Init+0x98>)
 8000aa4:	2221      	movs	r2, #33	; 0x21
 8000aa6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000aa8:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <MX_ETH_Init+0x98>)
 8000aaa:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000aae:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000ab0:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <MX_ETH_Init+0x98>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000398 	.word	0x20000398
 8000ac0:	40028000 	.word	0x40028000
 8000ac4:	20000cf0 	.word	0x20000cf0
 8000ac8:	20000148 	.word	0x20000148
 8000acc:	200000a8 	.word	0x200000a8
 8000ad0:	20000204 	.word	0x20000204

08000ad4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ad8:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <MX_I2C1_Init+0x74>)
 8000ada:	4a1c      	ldr	r2, [pc, #112]	; (8000b4c <MX_I2C1_Init+0x78>)
 8000adc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000ade:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <MX_I2C1_Init+0x74>)
 8000ae0:	4a1b      	ldr	r2, [pc, #108]	; (8000b50 <MX_I2C1_Init+0x7c>)
 8000ae2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ae4:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <MX_I2C1_Init+0x74>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aea:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <MX_I2C1_Init+0x74>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000af0:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <MX_I2C1_Init+0x74>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000af6:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <MX_I2C1_Init+0x74>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <MX_I2C1_Init+0x74>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b02:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <MX_I2C1_Init+0x74>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <MX_I2C1_Init+0x74>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b0e:	480e      	ldr	r0, [pc, #56]	; (8000b48 <MX_I2C1_Init+0x74>)
 8000b10:	f009 f8f6 	bl	8009d00 <HAL_I2C_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b1a:	f001 fb00 	bl	800211e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4809      	ldr	r0, [pc, #36]	; (8000b48 <MX_I2C1_Init+0x74>)
 8000b22:	f009 fe83 	bl	800a82c <HAL_I2CEx_ConfigAnalogFilter>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b2c:	f001 faf7 	bl	800211e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b30:	2100      	movs	r1, #0
 8000b32:	4805      	ldr	r0, [pc, #20]	; (8000b48 <MX_I2C1_Init+0x74>)
 8000b34:	f009 fec5 	bl	800a8c2 <HAL_I2CEx_ConfigDigitalFilter>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b3e:	f001 faee 	bl	800211e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000448 	.word	0x20000448
 8000b4c:	40005400 	.word	0x40005400
 8000b50:	00c0eaff 	.word	0x00c0eaff

08000b54 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000b58:	4b1b      	ldr	r3, [pc, #108]	; (8000bc8 <MX_I2C3_Init+0x74>)
 8000b5a:	4a1c      	ldr	r2, [pc, #112]	; (8000bcc <MX_I2C3_Init+0x78>)
 8000b5c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000b5e:	4b1a      	ldr	r3, [pc, #104]	; (8000bc8 <MX_I2C3_Init+0x74>)
 8000b60:	4a1b      	ldr	r2, [pc, #108]	; (8000bd0 <MX_I2C3_Init+0x7c>)
 8000b62:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000b64:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <MX_I2C3_Init+0x74>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b6a:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <MX_I2C3_Init+0x74>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b70:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <MX_I2C3_Init+0x74>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000b76:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <MX_I2C3_Init+0x74>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b7c:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <MX_I2C3_Init+0x74>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <MX_I2C3_Init+0x74>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b88:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <MX_I2C3_Init+0x74>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b8e:	480e      	ldr	r0, [pc, #56]	; (8000bc8 <MX_I2C3_Init+0x74>)
 8000b90:	f009 f8b6 	bl	8009d00 <HAL_I2C_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000b9a:	f001 fac0 	bl	800211e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	4809      	ldr	r0, [pc, #36]	; (8000bc8 <MX_I2C3_Init+0x74>)
 8000ba2:	f009 fe43 	bl	800a82c <HAL_I2CEx_ConfigAnalogFilter>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000bac:	f001 fab7 	bl	800211e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_I2C3_Init+0x74>)
 8000bb4:	f009 fe85 	bl	800a8c2 <HAL_I2CEx_ConfigDigitalFilter>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000bbe:	f001 faae 	bl	800211e <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	2000049c 	.word	0x2000049c
 8000bcc:	40005c00 	.word	0x40005c00
 8000bd0:	00c0eaff 	.word	0x00c0eaff

08000bd4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08e      	sub	sp, #56	; 0x38
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	2234      	movs	r2, #52	; 0x34
 8000bde:	2100      	movs	r1, #0
 8000be0:	4618      	mov	r0, r3
 8000be2:	f016 f8c9 	bl	8016d78 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000be6:	4b3a      	ldr	r3, [pc, #232]	; (8000cd0 <MX_LTDC_Init+0xfc>)
 8000be8:	4a3a      	ldr	r2, [pc, #232]	; (8000cd4 <MX_LTDC_Init+0x100>)
 8000bea:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000bec:	4b38      	ldr	r3, [pc, #224]	; (8000cd0 <MX_LTDC_Init+0xfc>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000bf2:	4b37      	ldr	r3, [pc, #220]	; (8000cd0 <MX_LTDC_Init+0xfc>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000bf8:	4b35      	ldr	r3, [pc, #212]	; (8000cd0 <MX_LTDC_Init+0xfc>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000bfe:	4b34      	ldr	r3, [pc, #208]	; (8000cd0 <MX_LTDC_Init+0xfc>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000c04:	4b32      	ldr	r3, [pc, #200]	; (8000cd0 <MX_LTDC_Init+0xfc>)
 8000c06:	2228      	movs	r2, #40	; 0x28
 8000c08:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000c0a:	4b31      	ldr	r3, [pc, #196]	; (8000cd0 <MX_LTDC_Init+0xfc>)
 8000c0c:	2209      	movs	r2, #9
 8000c0e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000c10:	4b2f      	ldr	r3, [pc, #188]	; (8000cd0 <MX_LTDC_Init+0xfc>)
 8000c12:	2235      	movs	r2, #53	; 0x35
 8000c14:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000c16:	4b2e      	ldr	r3, [pc, #184]	; (8000cd0 <MX_LTDC_Init+0xfc>)
 8000c18:	220b      	movs	r2, #11
 8000c1a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000c1c:	4b2c      	ldr	r3, [pc, #176]	; (8000cd0 <MX_LTDC_Init+0xfc>)
 8000c1e:	f240 2215 	movw	r2, #533	; 0x215
 8000c22:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000c24:	4b2a      	ldr	r3, [pc, #168]	; (8000cd0 <MX_LTDC_Init+0xfc>)
 8000c26:	f240 121b 	movw	r2, #283	; 0x11b
 8000c2a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000c2c:	4b28      	ldr	r3, [pc, #160]	; (8000cd0 <MX_LTDC_Init+0xfc>)
 8000c2e:	f240 2235 	movw	r2, #565	; 0x235
 8000c32:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000c34:	4b26      	ldr	r3, [pc, #152]	; (8000cd0 <MX_LTDC_Init+0xfc>)
 8000c36:	f240 121d 	movw	r2, #285	; 0x11d
 8000c3a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000c3c:	4b24      	ldr	r3, [pc, #144]	; (8000cd0 <MX_LTDC_Init+0xfc>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000c44:	4b22      	ldr	r3, [pc, #136]	; (8000cd0 <MX_LTDC_Init+0xfc>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000c4c:	4b20      	ldr	r3, [pc, #128]	; (8000cd0 <MX_LTDC_Init+0xfc>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000c54:	481e      	ldr	r0, [pc, #120]	; (8000cd0 <MX_LTDC_Init+0xfc>)
 8000c56:	f009 fe81 	bl	800a95c <HAL_LTDC_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000c60:	f001 fa5d 	bl	800211e <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000c68:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000c6c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000c72:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000c76:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000c7c:	23ff      	movs	r3, #255	; 0xff
 8000c7e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000c84:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c88:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000c8a:	2307      	movs	r3, #7
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000c8e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000c94:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000c9a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000c9e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000cb2:	1d3b      	adds	r3, r7, #4
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <MX_LTDC_Init+0xfc>)
 8000cba:	f009 ffe1 	bl	800ac80 <HAL_LTDC_ConfigLayer>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000cc4:	f001 fa2b 	bl	800211e <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000cc8:	bf00      	nop
 8000cca:	3738      	adds	r7, #56	; 0x38
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	200004f0 	.word	0x200004f0
 8000cd4:	40016800 	.word	0x40016800

08000cd8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <MX_QUADSPI_Init+0x50>)
 8000cde:	4a13      	ldr	r2, [pc, #76]	; (8000d2c <MX_QUADSPI_Init+0x54>)
 8000ce0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000ce2:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <MX_QUADSPI_Init+0x50>)
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000ce8:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <MX_QUADSPI_Init+0x50>)
 8000cea:	2204      	movs	r2, #4
 8000cec:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <MX_QUADSPI_Init+0x50>)
 8000cf0:	2210      	movs	r2, #16
 8000cf2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <MX_QUADSPI_Init+0x50>)
 8000cf6:	2218      	movs	r2, #24
 8000cf8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8000cfa:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <MX_QUADSPI_Init+0x50>)
 8000cfc:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000d00:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000d02:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <MX_QUADSPI_Init+0x50>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000d08:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <MX_QUADSPI_Init+0x50>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <MX_QUADSPI_Init+0x50>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000d14:	4804      	ldr	r0, [pc, #16]	; (8000d28 <MX_QUADSPI_Init+0x50>)
 8000d16:	f00a fa2b 	bl	800b170 <HAL_QSPI_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000d20:	f001 f9fd 	bl	800211e <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000598 	.word	0x20000598
 8000d2c:	a0001000 	.word	0xa0001000

08000d30 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b090      	sub	sp, #64	; 0x40
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000d36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]
 8000d44:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000d46:	2300      	movs	r3, #0
 8000d48:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000d4a:	463b      	mov	r3, r7
 8000d4c:	2228      	movs	r2, #40	; 0x28
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4618      	mov	r0, r3
 8000d52:	f016 f811 	bl	8016d78 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d56:	4b46      	ldr	r3, [pc, #280]	; (8000e70 <MX_RTC_Init+0x140>)
 8000d58:	4a46      	ldr	r2, [pc, #280]	; (8000e74 <MX_RTC_Init+0x144>)
 8000d5a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d5c:	4b44      	ldr	r3, [pc, #272]	; (8000e70 <MX_RTC_Init+0x140>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d62:	4b43      	ldr	r3, [pc, #268]	; (8000e70 <MX_RTC_Init+0x140>)
 8000d64:	227f      	movs	r2, #127	; 0x7f
 8000d66:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d68:	4b41      	ldr	r3, [pc, #260]	; (8000e70 <MX_RTC_Init+0x140>)
 8000d6a:	22ff      	movs	r2, #255	; 0xff
 8000d6c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d6e:	4b40      	ldr	r3, [pc, #256]	; (8000e70 <MX_RTC_Init+0x140>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d74:	4b3e      	ldr	r3, [pc, #248]	; (8000e70 <MX_RTC_Init+0x140>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d7a:	4b3d      	ldr	r3, [pc, #244]	; (8000e70 <MX_RTC_Init+0x140>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d80:	483b      	ldr	r0, [pc, #236]	; (8000e70 <MX_RTC_Init+0x140>)
 8000d82:	f00b fc75 	bl	800c670 <HAL_RTC_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000d8c:	f001 f9c7 	bl	800211e <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000da2:	2300      	movs	r3, #0
 8000da4:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000da6:	2300      	movs	r3, #0
 8000da8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000daa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dae:	2201      	movs	r2, #1
 8000db0:	4619      	mov	r1, r3
 8000db2:	482f      	ldr	r0, [pc, #188]	; (8000e70 <MX_RTC_Init+0x140>)
 8000db4:	f00b fce0 	bl	800c778 <HAL_RTC_SetTime>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000dbe:	f001 f9ae 	bl	800211e <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000dda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dde:	2201      	movs	r2, #1
 8000de0:	4619      	mov	r1, r3
 8000de2:	4823      	ldr	r0, [pc, #140]	; (8000e70 <MX_RTC_Init+0x140>)
 8000de4:	f00b fd62 	bl	800c8ac <HAL_RTC_SetDate>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8000dee:	f001 f996 	bl	800211e <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e06:	2300      	movs	r3, #0
 8000e08:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000e16:	2301      	movs	r3, #1
 8000e18:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000e1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000e22:	463b      	mov	r3, r7
 8000e24:	2201      	movs	r2, #1
 8000e26:	4619      	mov	r1, r3
 8000e28:	4811      	ldr	r0, [pc, #68]	; (8000e70 <MX_RTC_Init+0x140>)
 8000e2a:	f00b fdc3 	bl	800c9b4 <HAL_RTC_SetAlarm>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8000e34:	f001 f973 	bl	800211e <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8000e38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000e3e:	463b      	mov	r3, r7
 8000e40:	2201      	movs	r2, #1
 8000e42:	4619      	mov	r1, r3
 8000e44:	480a      	ldr	r0, [pc, #40]	; (8000e70 <MX_RTC_Init+0x140>)
 8000e46:	f00b fdb5 	bl	800c9b4 <HAL_RTC_SetAlarm>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8000e50:	f001 f965 	bl	800211e <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000e54:	2202      	movs	r2, #2
 8000e56:	2100      	movs	r1, #0
 8000e58:	4805      	ldr	r0, [pc, #20]	; (8000e70 <MX_RTC_Init+0x140>)
 8000e5a:	f00b ff77 	bl	800cd4c <HAL_RTCEx_SetTimeStamp>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8000e64:	f001 f95b 	bl	800211e <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e68:	bf00      	nop
 8000e6a:	3740      	adds	r7, #64	; 0x40
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	200005e4 	.word	0x200005e4
 8000e74:	40002800 	.word	0x40002800

08000e78 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000e7c:	4b4d      	ldr	r3, [pc, #308]	; (8000fb4 <MX_SAI2_Init+0x13c>)
 8000e7e:	4a4e      	ldr	r2, [pc, #312]	; (8000fb8 <MX_SAI2_Init+0x140>)
 8000e80:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000e82:	4b4c      	ldr	r3, [pc, #304]	; (8000fb4 <MX_SAI2_Init+0x13c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000e88:	4b4a      	ldr	r3, [pc, #296]	; (8000fb4 <MX_SAI2_Init+0x13c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000e8e:	4b49      	ldr	r3, [pc, #292]	; (8000fb4 <MX_SAI2_Init+0x13c>)
 8000e90:	2240      	movs	r2, #64	; 0x40
 8000e92:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000e94:	4b47      	ldr	r3, [pc, #284]	; (8000fb4 <MX_SAI2_Init+0x13c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000e9a:	4b46      	ldr	r3, [pc, #280]	; (8000fb4 <MX_SAI2_Init+0x13c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000ea0:	4b44      	ldr	r3, [pc, #272]	; (8000fb4 <MX_SAI2_Init+0x13c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000ea6:	4b43      	ldr	r3, [pc, #268]	; (8000fb4 <MX_SAI2_Init+0x13c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000eac:	4b41      	ldr	r3, [pc, #260]	; (8000fb4 <MX_SAI2_Init+0x13c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000eb2:	4b40      	ldr	r3, [pc, #256]	; (8000fb4 <MX_SAI2_Init+0x13c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000eb8:	4b3e      	ldr	r3, [pc, #248]	; (8000fb4 <MX_SAI2_Init+0x13c>)
 8000eba:	4a40      	ldr	r2, [pc, #256]	; (8000fbc <MX_SAI2_Init+0x144>)
 8000ebc:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000ebe:	4b3d      	ldr	r3, [pc, #244]	; (8000fb4 <MX_SAI2_Init+0x13c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000ec4:	4b3b      	ldr	r3, [pc, #236]	; (8000fb4 <MX_SAI2_Init+0x13c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000eca:	4b3a      	ldr	r3, [pc, #232]	; (8000fb4 <MX_SAI2_Init+0x13c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000ed0:	4b38      	ldr	r3, [pc, #224]	; (8000fb4 <MX_SAI2_Init+0x13c>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000ed6:	4b37      	ldr	r3, [pc, #220]	; (8000fb4 <MX_SAI2_Init+0x13c>)
 8000ed8:	2208      	movs	r2, #8
 8000eda:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000edc:	4b35      	ldr	r3, [pc, #212]	; (8000fb4 <MX_SAI2_Init+0x13c>)
 8000ede:	2201      	movs	r2, #1
 8000ee0:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000ee2:	4b34      	ldr	r3, [pc, #208]	; (8000fb4 <MX_SAI2_Init+0x13c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000ee8:	4b32      	ldr	r3, [pc, #200]	; (8000fb4 <MX_SAI2_Init+0x13c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000eee:	4b31      	ldr	r3, [pc, #196]	; (8000fb4 <MX_SAI2_Init+0x13c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000ef4:	4b2f      	ldr	r3, [pc, #188]	; (8000fb4 <MX_SAI2_Init+0x13c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000efa:	4b2e      	ldr	r3, [pc, #184]	; (8000fb4 <MX_SAI2_Init+0x13c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000f00:	4b2c      	ldr	r3, [pc, #176]	; (8000fb4 <MX_SAI2_Init+0x13c>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000f06:	4b2b      	ldr	r3, [pc, #172]	; (8000fb4 <MX_SAI2_Init+0x13c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000f0c:	4829      	ldr	r0, [pc, #164]	; (8000fb4 <MX_SAI2_Init+0x13c>)
 8000f0e:	f00b ff85 	bl	800ce1c <HAL_SAI_Init>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8000f18:	f001 f901 	bl	800211e <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000f1c:	4b28      	ldr	r3, [pc, #160]	; (8000fc0 <MX_SAI2_Init+0x148>)
 8000f1e:	4a29      	ldr	r2, [pc, #164]	; (8000fc4 <MX_SAI2_Init+0x14c>)
 8000f20:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000f22:	4b27      	ldr	r3, [pc, #156]	; (8000fc0 <MX_SAI2_Init+0x148>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000f28:	4b25      	ldr	r3, [pc, #148]	; (8000fc0 <MX_SAI2_Init+0x148>)
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000f2e:	4b24      	ldr	r3, [pc, #144]	; (8000fc0 <MX_SAI2_Init+0x148>)
 8000f30:	2240      	movs	r2, #64	; 0x40
 8000f32:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000f34:	4b22      	ldr	r3, [pc, #136]	; (8000fc0 <MX_SAI2_Init+0x148>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000f3a:	4b21      	ldr	r3, [pc, #132]	; (8000fc0 <MX_SAI2_Init+0x148>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000f40:	4b1f      	ldr	r3, [pc, #124]	; (8000fc0 <MX_SAI2_Init+0x148>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000f46:	4b1e      	ldr	r3, [pc, #120]	; (8000fc0 <MX_SAI2_Init+0x148>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000f4c:	4b1c      	ldr	r3, [pc, #112]	; (8000fc0 <MX_SAI2_Init+0x148>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000f52:	4b1b      	ldr	r3, [pc, #108]	; (8000fc0 <MX_SAI2_Init+0x148>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000f58:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <MX_SAI2_Init+0x148>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000f5e:	4b18      	ldr	r3, [pc, #96]	; (8000fc0 <MX_SAI2_Init+0x148>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000f64:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <MX_SAI2_Init+0x148>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000f6a:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <MX_SAI2_Init+0x148>)
 8000f6c:	2208      	movs	r2, #8
 8000f6e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000f70:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <MX_SAI2_Init+0x148>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000f76:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <MX_SAI2_Init+0x148>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000f7c:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <MX_SAI2_Init+0x148>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000f82:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <MX_SAI2_Init+0x148>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000f88:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <MX_SAI2_Init+0x148>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <MX_SAI2_Init+0x148>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8000f94:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <MX_SAI2_Init+0x148>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <MX_SAI2_Init+0x148>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000fa0:	4807      	ldr	r0, [pc, #28]	; (8000fc0 <MX_SAI2_Init+0x148>)
 8000fa2:	f00b ff3b 	bl	800ce1c <HAL_SAI_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8000fac:	f001 f8b7 	bl	800211e <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000604 	.word	0x20000604
 8000fb8:	40015c04 	.word	0x40015c04
 8000fbc:	0002ee00 	.word	0x0002ee00
 8000fc0:	20000688 	.word	0x20000688
 8000fc4:	40015c24 	.word	0x40015c24

08000fc8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000fcc:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <MX_SDMMC1_SD_Init+0x3c>)
 8000fce:	4a0e      	ldr	r2, [pc, #56]	; (8001008 <MX_SDMMC1_SD_Init+0x40>)
 8000fd0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <MX_SDMMC1_SD_Init+0x3c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000fd8:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <MX_SDMMC1_SD_Init+0x3c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000fde:	4b09      	ldr	r3, [pc, #36]	; (8001004 <MX_SDMMC1_SD_Init+0x3c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000fe4:	4b07      	ldr	r3, [pc, #28]	; (8001004 <MX_SDMMC1_SD_Init+0x3c>)
 8000fe6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fea:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <MX_SDMMC1_SD_Init+0x3c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000ff2:	4b04      	ldr	r3, [pc, #16]	; (8001004 <MX_SDMMC1_SD_Init+0x3c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	2000070c 	.word	0x2000070c
 8001008:	40012c00 	.word	0x40012c00

0800100c <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001010:	4b15      	ldr	r3, [pc, #84]	; (8001068 <MX_SPDIFRX_Init+0x5c>)
 8001012:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001016:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001018:	4b13      	ldr	r3, [pc, #76]	; (8001068 <MX_SPDIFRX_Init+0x5c>)
 800101a:	2200      	movs	r2, #0
 800101c:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 800101e:	4b12      	ldr	r3, [pc, #72]	; (8001068 <MX_SPDIFRX_Init+0x5c>)
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001024:	4b10      	ldr	r3, [pc, #64]	; (8001068 <MX_SPDIFRX_Init+0x5c>)
 8001026:	2200      	movs	r2, #0
 8001028:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 800102a:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <MX_SPDIFRX_Init+0x5c>)
 800102c:	2200      	movs	r2, #0
 800102e:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001030:	4b0d      	ldr	r3, [pc, #52]	; (8001068 <MX_SPDIFRX_Init+0x5c>)
 8001032:	2200      	movs	r2, #0
 8001034:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001036:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <MX_SPDIFRX_Init+0x5c>)
 8001038:	2200      	movs	r2, #0
 800103a:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 800103c:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <MX_SPDIFRX_Init+0x5c>)
 800103e:	2200      	movs	r2, #0
 8001040:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <MX_SPDIFRX_Init+0x5c>)
 8001044:	2200      	movs	r2, #0
 8001046:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001048:	4b07      	ldr	r3, [pc, #28]	; (8001068 <MX_SPDIFRX_Init+0x5c>)
 800104a:	2200      	movs	r2, #0
 800104c:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <MX_SPDIFRX_Init+0x5c>)
 8001050:	2200      	movs	r2, #0
 8001052:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001054:	4804      	ldr	r0, [pc, #16]	; (8001068 <MX_SPDIFRX_Init+0x5c>)
 8001056:	f00d fc53 	bl	800e900 <HAL_SPDIFRX_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001060:	f001 f85d 	bl	800211e <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000850 	.word	0x20000850

0800106c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001070:	4b1b      	ldr	r3, [pc, #108]	; (80010e0 <MX_SPI2_Init+0x74>)
 8001072:	4a1c      	ldr	r2, [pc, #112]	; (80010e4 <MX_SPI2_Init+0x78>)
 8001074:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001076:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <MX_SPI2_Init+0x74>)
 8001078:	f44f 7282 	mov.w	r2, #260	; 0x104
 800107c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800107e:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <MX_SPI2_Init+0x74>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001084:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <MX_SPI2_Init+0x74>)
 8001086:	f44f 7240 	mov.w	r2, #768	; 0x300
 800108a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800108c:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <MX_SPI2_Init+0x74>)
 800108e:	2200      	movs	r2, #0
 8001090:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001092:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <MX_SPI2_Init+0x74>)
 8001094:	2200      	movs	r2, #0
 8001096:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <MX_SPI2_Init+0x74>)
 800109a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800109e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010a0:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <MX_SPI2_Init+0x74>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <MX_SPI2_Init+0x74>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80010ac:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <MX_SPI2_Init+0x74>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010b2:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <MX_SPI2_Init+0x74>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80010b8:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <MX_SPI2_Init+0x74>)
 80010ba:	2207      	movs	r2, #7
 80010bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010be:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <MX_SPI2_Init+0x74>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <MX_SPI2_Init+0x74>)
 80010c6:	2208      	movs	r2, #8
 80010c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010ca:	4805      	ldr	r0, [pc, #20]	; (80010e0 <MX_SPI2_Init+0x74>)
 80010cc:	f00d fc74 	bl	800e9b8 <HAL_SPI_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80010d6:	f001 f822 	bl	800211e <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	2000089c 	.word	0x2000089c
 80010e4:	40003800 	.word	0x40003800

080010e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b09a      	sub	sp, #104	; 0x68
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010fc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001108:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
 8001118:	615a      	str	r2, [r3, #20]
 800111a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	222c      	movs	r2, #44	; 0x2c
 8001120:	2100      	movs	r1, #0
 8001122:	4618      	mov	r0, r3
 8001124:	f015 fe28 	bl	8016d78 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001128:	4b43      	ldr	r3, [pc, #268]	; (8001238 <MX_TIM1_Init+0x150>)
 800112a:	4a44      	ldr	r2, [pc, #272]	; (800123c <MX_TIM1_Init+0x154>)
 800112c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800112e:	4b42      	ldr	r3, [pc, #264]	; (8001238 <MX_TIM1_Init+0x150>)
 8001130:	2200      	movs	r2, #0
 8001132:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001134:	4b40      	ldr	r3, [pc, #256]	; (8001238 <MX_TIM1_Init+0x150>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800113a:	4b3f      	ldr	r3, [pc, #252]	; (8001238 <MX_TIM1_Init+0x150>)
 800113c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001140:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001142:	4b3d      	ldr	r3, [pc, #244]	; (8001238 <MX_TIM1_Init+0x150>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001148:	4b3b      	ldr	r3, [pc, #236]	; (8001238 <MX_TIM1_Init+0x150>)
 800114a:	2200      	movs	r2, #0
 800114c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800114e:	4b3a      	ldr	r3, [pc, #232]	; (8001238 <MX_TIM1_Init+0x150>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001154:	4838      	ldr	r0, [pc, #224]	; (8001238 <MX_TIM1_Init+0x150>)
 8001156:	f00d fcda 	bl	800eb0e <HAL_TIM_Base_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001160:	f000 ffdd 	bl	800211e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001168:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800116a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800116e:	4619      	mov	r1, r3
 8001170:	4831      	ldr	r0, [pc, #196]	; (8001238 <MX_TIM1_Init+0x150>)
 8001172:	f00d fe8f 	bl	800ee94 <HAL_TIM_ConfigClockSource>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800117c:	f000 ffcf 	bl	800211e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001180:	482d      	ldr	r0, [pc, #180]	; (8001238 <MX_TIM1_Init+0x150>)
 8001182:	f00d fd1b 	bl	800ebbc <HAL_TIM_PWM_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800118c:	f000 ffc7 	bl	800211e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001190:	2300      	movs	r3, #0
 8001192:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001194:	2300      	movs	r3, #0
 8001196:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001198:	2300      	movs	r3, #0
 800119a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800119c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011a0:	4619      	mov	r1, r3
 80011a2:	4825      	ldr	r0, [pc, #148]	; (8001238 <MX_TIM1_Init+0x150>)
 80011a4:	f00e fad8 	bl	800f758 <HAL_TIMEx_MasterConfigSynchronization>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80011ae:	f000 ffb6 	bl	800211e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011b2:	2360      	movs	r3, #96	; 0x60
 80011b4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ba:	2300      	movs	r3, #0
 80011bc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011be:	2300      	movs	r3, #0
 80011c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011c2:	2300      	movs	r3, #0
 80011c4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011c6:	2300      	movs	r3, #0
 80011c8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011ca:	2300      	movs	r3, #0
 80011cc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011d2:	2200      	movs	r2, #0
 80011d4:	4619      	mov	r1, r3
 80011d6:	4818      	ldr	r0, [pc, #96]	; (8001238 <MX_TIM1_Init+0x150>)
 80011d8:	f00d fd48 	bl	800ec6c <HAL_TIM_PWM_ConfigChannel>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80011e2:	f000 ff9c 	bl	800211e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001204:	2300      	movs	r3, #0
 8001206:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001208:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001212:	2300      	movs	r3, #0
 8001214:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	4619      	mov	r1, r3
 800121a:	4807      	ldr	r0, [pc, #28]	; (8001238 <MX_TIM1_Init+0x150>)
 800121c:	f00e fb2a 	bl	800f874 <HAL_TIMEx_ConfigBreakDeadTime>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001226:	f000 ff7a 	bl	800211e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800122a:	4803      	ldr	r0, [pc, #12]	; (8001238 <MX_TIM1_Init+0x150>)
 800122c:	f002 ff36 	bl	800409c <HAL_TIM_MspPostInit>

}
 8001230:	bf00      	nop
 8001232:	3768      	adds	r7, #104	; 0x68
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000900 	.word	0x20000900
 800123c:	40010000 	.word	0x40010000

08001240 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08e      	sub	sp, #56	; 0x38
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001246:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001254:	f107 031c 	add.w	r3, r7, #28
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001260:	463b      	mov	r3, r7
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	609a      	str	r2, [r3, #8]
 800126a:	60da      	str	r2, [r3, #12]
 800126c:	611a      	str	r2, [r3, #16]
 800126e:	615a      	str	r2, [r3, #20]
 8001270:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001272:	4b2d      	ldr	r3, [pc, #180]	; (8001328 <MX_TIM2_Init+0xe8>)
 8001274:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001278:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800127a:	4b2b      	ldr	r3, [pc, #172]	; (8001328 <MX_TIM2_Init+0xe8>)
 800127c:	2200      	movs	r2, #0
 800127e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001280:	4b29      	ldr	r3, [pc, #164]	; (8001328 <MX_TIM2_Init+0xe8>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001286:	4b28      	ldr	r3, [pc, #160]	; (8001328 <MX_TIM2_Init+0xe8>)
 8001288:	f04f 32ff 	mov.w	r2, #4294967295
 800128c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800128e:	4b26      	ldr	r3, [pc, #152]	; (8001328 <MX_TIM2_Init+0xe8>)
 8001290:	2200      	movs	r2, #0
 8001292:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001294:	4b24      	ldr	r3, [pc, #144]	; (8001328 <MX_TIM2_Init+0xe8>)
 8001296:	2200      	movs	r2, #0
 8001298:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800129a:	4823      	ldr	r0, [pc, #140]	; (8001328 <MX_TIM2_Init+0xe8>)
 800129c:	f00d fc37 	bl	800eb0e <HAL_TIM_Base_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80012a6:	f000 ff3a 	bl	800211e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012b4:	4619      	mov	r1, r3
 80012b6:	481c      	ldr	r0, [pc, #112]	; (8001328 <MX_TIM2_Init+0xe8>)
 80012b8:	f00d fdec 	bl	800ee94 <HAL_TIM_ConfigClockSource>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80012c2:	f000 ff2c 	bl	800211e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012c6:	4818      	ldr	r0, [pc, #96]	; (8001328 <MX_TIM2_Init+0xe8>)
 80012c8:	f00d fc78 	bl	800ebbc <HAL_TIM_PWM_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80012d2:	f000 ff24 	bl	800211e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012da:	2300      	movs	r3, #0
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012de:	f107 031c 	add.w	r3, r7, #28
 80012e2:	4619      	mov	r1, r3
 80012e4:	4810      	ldr	r0, [pc, #64]	; (8001328 <MX_TIM2_Init+0xe8>)
 80012e6:	f00e fa37 	bl	800f758 <HAL_TIMEx_MasterConfigSynchronization>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80012f0:	f000 ff15 	bl	800211e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012f4:	2360      	movs	r3, #96	; 0x60
 80012f6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001300:	2300      	movs	r3, #0
 8001302:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001304:	463b      	mov	r3, r7
 8001306:	2200      	movs	r2, #0
 8001308:	4619      	mov	r1, r3
 800130a:	4807      	ldr	r0, [pc, #28]	; (8001328 <MX_TIM2_Init+0xe8>)
 800130c:	f00d fcae 	bl	800ec6c <HAL_TIM_PWM_ConfigChannel>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001316:	f000 ff02 	bl	800211e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800131a:	4803      	ldr	r0, [pc, #12]	; (8001328 <MX_TIM2_Init+0xe8>)
 800131c:	f002 febe 	bl	800409c <HAL_TIM_MspPostInit>

}
 8001320:	bf00      	nop
 8001322:	3738      	adds	r7, #56	; 0x38
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	2000094c 	.word	0x2000094c

0800132c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08e      	sub	sp, #56	; 0x38
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001332:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001340:	f107 031c 	add.w	r3, r7, #28
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800134c:	463b      	mov	r3, r7
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	611a      	str	r2, [r3, #16]
 800135a:	615a      	str	r2, [r3, #20]
 800135c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800135e:	4b2d      	ldr	r3, [pc, #180]	; (8001414 <MX_TIM3_Init+0xe8>)
 8001360:	4a2d      	ldr	r2, [pc, #180]	; (8001418 <MX_TIM3_Init+0xec>)
 8001362:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001364:	4b2b      	ldr	r3, [pc, #172]	; (8001414 <MX_TIM3_Init+0xe8>)
 8001366:	2200      	movs	r2, #0
 8001368:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136a:	4b2a      	ldr	r3, [pc, #168]	; (8001414 <MX_TIM3_Init+0xe8>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001370:	4b28      	ldr	r3, [pc, #160]	; (8001414 <MX_TIM3_Init+0xe8>)
 8001372:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001376:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001378:	4b26      	ldr	r3, [pc, #152]	; (8001414 <MX_TIM3_Init+0xe8>)
 800137a:	2200      	movs	r2, #0
 800137c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800137e:	4b25      	ldr	r3, [pc, #148]	; (8001414 <MX_TIM3_Init+0xe8>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001384:	4823      	ldr	r0, [pc, #140]	; (8001414 <MX_TIM3_Init+0xe8>)
 8001386:	f00d fbc2 	bl	800eb0e <HAL_TIM_Base_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001390:	f000 fec5 	bl	800211e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001394:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001398:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800139a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800139e:	4619      	mov	r1, r3
 80013a0:	481c      	ldr	r0, [pc, #112]	; (8001414 <MX_TIM3_Init+0xe8>)
 80013a2:	f00d fd77 	bl	800ee94 <HAL_TIM_ConfigClockSource>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80013ac:	f000 feb7 	bl	800211e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013b0:	4818      	ldr	r0, [pc, #96]	; (8001414 <MX_TIM3_Init+0xe8>)
 80013b2:	f00d fc03 	bl	800ebbc <HAL_TIM_PWM_Init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80013bc:	f000 feaf 	bl	800211e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c0:	2300      	movs	r3, #0
 80013c2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c4:	2300      	movs	r3, #0
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013c8:	f107 031c 	add.w	r3, r7, #28
 80013cc:	4619      	mov	r1, r3
 80013ce:	4811      	ldr	r0, [pc, #68]	; (8001414 <MX_TIM3_Init+0xe8>)
 80013d0:	f00e f9c2 	bl	800f758 <HAL_TIMEx_MasterConfigSynchronization>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80013da:	f000 fea0 	bl	800211e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013de:	2360      	movs	r3, #96	; 0x60
 80013e0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013ee:	463b      	mov	r3, r7
 80013f0:	2200      	movs	r2, #0
 80013f2:	4619      	mov	r1, r3
 80013f4:	4807      	ldr	r0, [pc, #28]	; (8001414 <MX_TIM3_Init+0xe8>)
 80013f6:	f00d fc39 	bl	800ec6c <HAL_TIM_PWM_ConfigChannel>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001400:	f000 fe8d 	bl	800211e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001404:	4803      	ldr	r0, [pc, #12]	; (8001414 <MX_TIM3_Init+0xe8>)
 8001406:	f002 fe49 	bl	800409c <HAL_TIM_MspPostInit>

}
 800140a:	bf00      	nop
 800140c:	3738      	adds	r7, #56	; 0x38
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000998 	.word	0x20000998
 8001418:	40000400 	.word	0x40000400

0800141c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08e      	sub	sp, #56	; 0x38
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001422:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001430:	f107 031c 	add.w	r3, r7, #28
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800143c:	463b      	mov	r3, r7
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
 8001448:	611a      	str	r2, [r3, #16]
 800144a:	615a      	str	r2, [r3, #20]
 800144c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800144e:	4b2d      	ldr	r3, [pc, #180]	; (8001504 <MX_TIM5_Init+0xe8>)
 8001450:	4a2d      	ldr	r2, [pc, #180]	; (8001508 <MX_TIM5_Init+0xec>)
 8001452:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001454:	4b2b      	ldr	r3, [pc, #172]	; (8001504 <MX_TIM5_Init+0xe8>)
 8001456:	2200      	movs	r2, #0
 8001458:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145a:	4b2a      	ldr	r3, [pc, #168]	; (8001504 <MX_TIM5_Init+0xe8>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001460:	4b28      	ldr	r3, [pc, #160]	; (8001504 <MX_TIM5_Init+0xe8>)
 8001462:	f04f 32ff 	mov.w	r2, #4294967295
 8001466:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001468:	4b26      	ldr	r3, [pc, #152]	; (8001504 <MX_TIM5_Init+0xe8>)
 800146a:	2200      	movs	r2, #0
 800146c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800146e:	4b25      	ldr	r3, [pc, #148]	; (8001504 <MX_TIM5_Init+0xe8>)
 8001470:	2200      	movs	r2, #0
 8001472:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001474:	4823      	ldr	r0, [pc, #140]	; (8001504 <MX_TIM5_Init+0xe8>)
 8001476:	f00d fb4a 	bl	800eb0e <HAL_TIM_Base_Init>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001480:	f000 fe4d 	bl	800211e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001488:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800148a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800148e:	4619      	mov	r1, r3
 8001490:	481c      	ldr	r0, [pc, #112]	; (8001504 <MX_TIM5_Init+0xe8>)
 8001492:	f00d fcff 	bl	800ee94 <HAL_TIM_ConfigClockSource>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 800149c:	f000 fe3f 	bl	800211e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80014a0:	4818      	ldr	r0, [pc, #96]	; (8001504 <MX_TIM5_Init+0xe8>)
 80014a2:	f00d fb8b 	bl	800ebbc <HAL_TIM_PWM_Init>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80014ac:	f000 fe37 	bl	800211e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80014b8:	f107 031c 	add.w	r3, r7, #28
 80014bc:	4619      	mov	r1, r3
 80014be:	4811      	ldr	r0, [pc, #68]	; (8001504 <MX_TIM5_Init+0xe8>)
 80014c0:	f00e f94a 	bl	800f758 <HAL_TIMEx_MasterConfigSynchronization>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80014ca:	f000 fe28 	bl	800211e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ce:	2360      	movs	r3, #96	; 0x60
 80014d0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014da:	2300      	movs	r3, #0
 80014dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014de:	463b      	mov	r3, r7
 80014e0:	220c      	movs	r2, #12
 80014e2:	4619      	mov	r1, r3
 80014e4:	4807      	ldr	r0, [pc, #28]	; (8001504 <MX_TIM5_Init+0xe8>)
 80014e6:	f00d fbc1 	bl	800ec6c <HAL_TIM_PWM_ConfigChannel>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80014f0:	f000 fe15 	bl	800211e <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80014f4:	4803      	ldr	r0, [pc, #12]	; (8001504 <MX_TIM5_Init+0xe8>)
 80014f6:	f002 fdd1 	bl	800409c <HAL_TIM_MspPostInit>

}
 80014fa:	bf00      	nop
 80014fc:	3738      	adds	r7, #56	; 0x38
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	200009e4 	.word	0x200009e4
 8001508:	40000c00 	.word	0x40000c00

0800150c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b088      	sub	sp, #32
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001512:	f107 0310 	add.w	r3, r7, #16
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001520:	1d3b      	adds	r3, r7, #4
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800152a:	4b20      	ldr	r3, [pc, #128]	; (80015ac <MX_TIM8_Init+0xa0>)
 800152c:	4a20      	ldr	r2, [pc, #128]	; (80015b0 <MX_TIM8_Init+0xa4>)
 800152e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001530:	4b1e      	ldr	r3, [pc, #120]	; (80015ac <MX_TIM8_Init+0xa0>)
 8001532:	2200      	movs	r2, #0
 8001534:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001536:	4b1d      	ldr	r3, [pc, #116]	; (80015ac <MX_TIM8_Init+0xa0>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800153c:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <MX_TIM8_Init+0xa0>)
 800153e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001542:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001544:	4b19      	ldr	r3, [pc, #100]	; (80015ac <MX_TIM8_Init+0xa0>)
 8001546:	2200      	movs	r2, #0
 8001548:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800154a:	4b18      	ldr	r3, [pc, #96]	; (80015ac <MX_TIM8_Init+0xa0>)
 800154c:	2200      	movs	r2, #0
 800154e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001550:	4b16      	ldr	r3, [pc, #88]	; (80015ac <MX_TIM8_Init+0xa0>)
 8001552:	2200      	movs	r2, #0
 8001554:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001556:	4815      	ldr	r0, [pc, #84]	; (80015ac <MX_TIM8_Init+0xa0>)
 8001558:	f00d fad9 	bl	800eb0e <HAL_TIM_Base_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001562:	f000 fddc 	bl	800211e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001566:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800156a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800156c:	f107 0310 	add.w	r3, r7, #16
 8001570:	4619      	mov	r1, r3
 8001572:	480e      	ldr	r0, [pc, #56]	; (80015ac <MX_TIM8_Init+0xa0>)
 8001574:	f00d fc8e 	bl	800ee94 <HAL_TIM_ConfigClockSource>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800157e:	f000 fdce 	bl	800211e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001582:	2300      	movs	r3, #0
 8001584:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001586:	2300      	movs	r3, #0
 8001588:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800158e:	1d3b      	adds	r3, r7, #4
 8001590:	4619      	mov	r1, r3
 8001592:	4806      	ldr	r0, [pc, #24]	; (80015ac <MX_TIM8_Init+0xa0>)
 8001594:	f00e f8e0 	bl	800f758 <HAL_TIMEx_MasterConfigSynchronization>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800159e:	f000 fdbe 	bl	800211e <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80015a2:	bf00      	nop
 80015a4:	3720      	adds	r7, #32
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000a30 	.word	0x20000a30
 80015b0:	40010400 	.word	0x40010400

080015b4 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b088      	sub	sp, #32
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]
 80015c8:	615a      	str	r2, [r3, #20]
 80015ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80015cc:	4b1a      	ldr	r3, [pc, #104]	; (8001638 <MX_TIM12_Init+0x84>)
 80015ce:	4a1b      	ldr	r2, [pc, #108]	; (800163c <MX_TIM12_Init+0x88>)
 80015d0:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80015d2:	4b19      	ldr	r3, [pc, #100]	; (8001638 <MX_TIM12_Init+0x84>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d8:	4b17      	ldr	r3, [pc, #92]	; (8001638 <MX_TIM12_Init+0x84>)
 80015da:	2200      	movs	r2, #0
 80015dc:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80015de:	4b16      	ldr	r3, [pc, #88]	; (8001638 <MX_TIM12_Init+0x84>)
 80015e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015e4:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e6:	4b14      	ldr	r3, [pc, #80]	; (8001638 <MX_TIM12_Init+0x84>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ec:	4b12      	ldr	r3, [pc, #72]	; (8001638 <MX_TIM12_Init+0x84>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80015f2:	4811      	ldr	r0, [pc, #68]	; (8001638 <MX_TIM12_Init+0x84>)
 80015f4:	f00d fae2 	bl	800ebbc <HAL_TIM_PWM_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80015fe:	f000 fd8e 	bl	800211e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001602:	2360      	movs	r3, #96	; 0x60
 8001604:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	2200      	movs	r2, #0
 8001616:	4619      	mov	r1, r3
 8001618:	4807      	ldr	r0, [pc, #28]	; (8001638 <MX_TIM12_Init+0x84>)
 800161a:	f00d fb27 	bl	800ec6c <HAL_TIM_PWM_ConfigChannel>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001624:	f000 fd7b 	bl	800211e <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001628:	4803      	ldr	r0, [pc, #12]	; (8001638 <MX_TIM12_Init+0x84>)
 800162a:	f002 fd37 	bl	800409c <HAL_TIM_MspPostInit>

}
 800162e:	bf00      	nop
 8001630:	3720      	adds	r7, #32
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000a7c 	.word	0x20000a7c
 800163c:	40001800 	.word	0x40001800

08001640 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001644:	4b14      	ldr	r3, [pc, #80]	; (8001698 <MX_USART1_UART_Init+0x58>)
 8001646:	4a15      	ldr	r2, [pc, #84]	; (800169c <MX_USART1_UART_Init+0x5c>)
 8001648:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800164a:	4b13      	ldr	r3, [pc, #76]	; (8001698 <MX_USART1_UART_Init+0x58>)
 800164c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001650:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001652:	4b11      	ldr	r3, [pc, #68]	; (8001698 <MX_USART1_UART_Init+0x58>)
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001658:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <MX_USART1_UART_Init+0x58>)
 800165a:	2200      	movs	r2, #0
 800165c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800165e:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <MX_USART1_UART_Init+0x58>)
 8001660:	2200      	movs	r2, #0
 8001662:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <MX_USART1_UART_Init+0x58>)
 8001666:	220c      	movs	r2, #12
 8001668:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800166a:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <MX_USART1_UART_Init+0x58>)
 800166c:	2200      	movs	r2, #0
 800166e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001670:	4b09      	ldr	r3, [pc, #36]	; (8001698 <MX_USART1_UART_Init+0x58>)
 8001672:	2200      	movs	r2, #0
 8001674:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001676:	4b08      	ldr	r3, [pc, #32]	; (8001698 <MX_USART1_UART_Init+0x58>)
 8001678:	2200      	movs	r2, #0
 800167a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <MX_USART1_UART_Init+0x58>)
 800167e:	2200      	movs	r2, #0
 8001680:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001682:	4805      	ldr	r0, [pc, #20]	; (8001698 <MX_USART1_UART_Init+0x58>)
 8001684:	f00e f974 	bl	800f970 <HAL_UART_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800168e:	f000 fd46 	bl	800211e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000ac8 	.word	0x20000ac8
 800169c:	40011000 	.word	0x40011000

080016a0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80016a4:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <MX_USART6_UART_Init+0x58>)
 80016a6:	4a15      	ldr	r2, [pc, #84]	; (80016fc <MX_USART6_UART_Init+0x5c>)
 80016a8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80016aa:	4b13      	ldr	r3, [pc, #76]	; (80016f8 <MX_USART6_UART_Init+0x58>)
 80016ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016b0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80016b2:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <MX_USART6_UART_Init+0x58>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80016b8:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <MX_USART6_UART_Init+0x58>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80016be:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <MX_USART6_UART_Init+0x58>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80016c4:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <MX_USART6_UART_Init+0x58>)
 80016c6:	220c      	movs	r2, #12
 80016c8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ca:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <MX_USART6_UART_Init+0x58>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80016d0:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <MX_USART6_UART_Init+0x58>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016d6:	4b08      	ldr	r3, [pc, #32]	; (80016f8 <MX_USART6_UART_Init+0x58>)
 80016d8:	2200      	movs	r2, #0
 80016da:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016dc:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <MX_USART6_UART_Init+0x58>)
 80016de:	2200      	movs	r2, #0
 80016e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80016e2:	4805      	ldr	r0, [pc, #20]	; (80016f8 <MX_USART6_UART_Init+0x58>)
 80016e4:	f00e f944 	bl	800f970 <HAL_UART_Init>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80016ee:	f000 fd16 	bl	800211e <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000b50 	.word	0x20000b50
 80016fc:	40011400 	.word	0x40011400

08001700 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001706:	4b14      	ldr	r3, [pc, #80]	; (8001758 <MX_DMA_Init+0x58>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4a13      	ldr	r2, [pc, #76]	; (8001758 <MX_DMA_Init+0x58>)
 800170c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4b11      	ldr	r3, [pc, #68]	; (8001758 <MX_DMA_Init+0x58>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800171e:	2200      	movs	r2, #0
 8001720:	2100      	movs	r1, #0
 8001722:	2039      	movs	r0, #57	; 0x39
 8001724:	f003 fc57 	bl	8004fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001728:	2039      	movs	r0, #57	; 0x39
 800172a:	f003 fc70 	bl	800500e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800172e:	2200      	movs	r2, #0
 8001730:	2100      	movs	r1, #0
 8001732:	203b      	movs	r0, #59	; 0x3b
 8001734:	f003 fc4f 	bl	8004fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001738:	203b      	movs	r0, #59	; 0x3b
 800173a:	f003 fc68 	bl	800500e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800173e:	2200      	movs	r2, #0
 8001740:	2100      	movs	r1, #0
 8001742:	2045      	movs	r0, #69	; 0x45
 8001744:	f003 fc47 	bl	8004fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001748:	2045      	movs	r0, #69	; 0x45
 800174a:	f003 fc60 	bl	800500e <HAL_NVIC_EnableIRQ>

}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40023800 	.word	0x40023800

0800175c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b088      	sub	sp, #32
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001762:	1d3b      	adds	r3, r7, #4
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]
 8001770:	615a      	str	r2, [r3, #20]
 8001772:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001774:	4b1f      	ldr	r3, [pc, #124]	; (80017f4 <MX_FMC_Init+0x98>)
 8001776:	4a20      	ldr	r2, [pc, #128]	; (80017f8 <MX_FMC_Init+0x9c>)
 8001778:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800177a:	4b1e      	ldr	r3, [pc, #120]	; (80017f4 <MX_FMC_Init+0x98>)
 800177c:	2200      	movs	r2, #0
 800177e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001780:	4b1c      	ldr	r3, [pc, #112]	; (80017f4 <MX_FMC_Init+0x98>)
 8001782:	2200      	movs	r2, #0
 8001784:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001786:	4b1b      	ldr	r3, [pc, #108]	; (80017f4 <MX_FMC_Init+0x98>)
 8001788:	2204      	movs	r2, #4
 800178a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800178c:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <MX_FMC_Init+0x98>)
 800178e:	2210      	movs	r2, #16
 8001790:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001792:	4b18      	ldr	r3, [pc, #96]	; (80017f4 <MX_FMC_Init+0x98>)
 8001794:	2240      	movs	r2, #64	; 0x40
 8001796:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001798:	4b16      	ldr	r3, [pc, #88]	; (80017f4 <MX_FMC_Init+0x98>)
 800179a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800179e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80017a0:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <MX_FMC_Init+0x98>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80017a6:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <MX_FMC_Init+0x98>)
 80017a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017ac:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80017ae:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <MX_FMC_Init+0x98>)
 80017b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017b4:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80017b6:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <MX_FMC_Init+0x98>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80017bc:	2302      	movs	r3, #2
 80017be:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80017c0:	2307      	movs	r3, #7
 80017c2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80017c4:	2304      	movs	r3, #4
 80017c6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80017c8:	2307      	movs	r3, #7
 80017ca:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80017cc:	2303      	movs	r3, #3
 80017ce:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80017d0:	2302      	movs	r3, #2
 80017d2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80017d4:	2302      	movs	r3, #2
 80017d6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80017d8:	1d3b      	adds	r3, r7, #4
 80017da:	4619      	mov	r1, r3
 80017dc:	4805      	ldr	r0, [pc, #20]	; (80017f4 <MX_FMC_Init+0x98>)
 80017de:	f00c fffe 	bl	800e7de <HAL_SDRAM_Init>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80017e8:	f000 fc99 	bl	800211e <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80017ec:	bf00      	nop
 80017ee:	3720      	adds	r7, #32
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000bd8 	.word	0x20000bd8
 80017f8:	a0000140 	.word	0xa0000140

080017fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b090      	sub	sp, #64	; 0x40
 8001800:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001802:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	609a      	str	r2, [r3, #8]
 800180e:	60da      	str	r2, [r3, #12]
 8001810:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001812:	4bb0      	ldr	r3, [pc, #704]	; (8001ad4 <MX_GPIO_Init+0x2d8>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4aaf      	ldr	r2, [pc, #700]	; (8001ad4 <MX_GPIO_Init+0x2d8>)
 8001818:	f043 0310 	orr.w	r3, r3, #16
 800181c:	6313      	str	r3, [r2, #48]	; 0x30
 800181e:	4bad      	ldr	r3, [pc, #692]	; (8001ad4 <MX_GPIO_Init+0x2d8>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	f003 0310 	and.w	r3, r3, #16
 8001826:	62bb      	str	r3, [r7, #40]	; 0x28
 8001828:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800182a:	4baa      	ldr	r3, [pc, #680]	; (8001ad4 <MX_GPIO_Init+0x2d8>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4aa9      	ldr	r2, [pc, #676]	; (8001ad4 <MX_GPIO_Init+0x2d8>)
 8001830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4ba7      	ldr	r3, [pc, #668]	; (8001ad4 <MX_GPIO_Init+0x2d8>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800183e:	627b      	str	r3, [r7, #36]	; 0x24
 8001840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001842:	4ba4      	ldr	r3, [pc, #656]	; (8001ad4 <MX_GPIO_Init+0x2d8>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	4aa3      	ldr	r2, [pc, #652]	; (8001ad4 <MX_GPIO_Init+0x2d8>)
 8001848:	f043 0302 	orr.w	r3, r3, #2
 800184c:	6313      	str	r3, [r2, #48]	; 0x30
 800184e:	4ba1      	ldr	r3, [pc, #644]	; (8001ad4 <MX_GPIO_Init+0x2d8>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	623b      	str	r3, [r7, #32]
 8001858:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800185a:	4b9e      	ldr	r3, [pc, #632]	; (8001ad4 <MX_GPIO_Init+0x2d8>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	4a9d      	ldr	r2, [pc, #628]	; (8001ad4 <MX_GPIO_Init+0x2d8>)
 8001860:	f043 0308 	orr.w	r3, r3, #8
 8001864:	6313      	str	r3, [r2, #48]	; 0x30
 8001866:	4b9b      	ldr	r3, [pc, #620]	; (8001ad4 <MX_GPIO_Init+0x2d8>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	f003 0308 	and.w	r3, r3, #8
 800186e:	61fb      	str	r3, [r7, #28]
 8001870:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001872:	4b98      	ldr	r3, [pc, #608]	; (8001ad4 <MX_GPIO_Init+0x2d8>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	4a97      	ldr	r2, [pc, #604]	; (8001ad4 <MX_GPIO_Init+0x2d8>)
 8001878:	f043 0304 	orr.w	r3, r3, #4
 800187c:	6313      	str	r3, [r2, #48]	; 0x30
 800187e:	4b95      	ldr	r3, [pc, #596]	; (8001ad4 <MX_GPIO_Init+0x2d8>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	f003 0304 	and.w	r3, r3, #4
 8001886:	61bb      	str	r3, [r7, #24]
 8001888:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800188a:	4b92      	ldr	r3, [pc, #584]	; (8001ad4 <MX_GPIO_Init+0x2d8>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	4a91      	ldr	r2, [pc, #580]	; (8001ad4 <MX_GPIO_Init+0x2d8>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	6313      	str	r3, [r2, #48]	; 0x30
 8001896:	4b8f      	ldr	r3, [pc, #572]	; (8001ad4 <MX_GPIO_Init+0x2d8>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80018a2:	4b8c      	ldr	r3, [pc, #560]	; (8001ad4 <MX_GPIO_Init+0x2d8>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a8b      	ldr	r2, [pc, #556]	; (8001ad4 <MX_GPIO_Init+0x2d8>)
 80018a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
 80018ae:	4b89      	ldr	r3, [pc, #548]	; (8001ad4 <MX_GPIO_Init+0x2d8>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018b6:	613b      	str	r3, [r7, #16]
 80018b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80018ba:	4b86      	ldr	r3, [pc, #536]	; (8001ad4 <MX_GPIO_Init+0x2d8>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	4a85      	ldr	r2, [pc, #532]	; (8001ad4 <MX_GPIO_Init+0x2d8>)
 80018c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c4:	6313      	str	r3, [r2, #48]	; 0x30
 80018c6:	4b83      	ldr	r3, [pc, #524]	; (8001ad4 <MX_GPIO_Init+0x2d8>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80018d2:	4b80      	ldr	r3, [pc, #512]	; (8001ad4 <MX_GPIO_Init+0x2d8>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	4a7f      	ldr	r2, [pc, #508]	; (8001ad4 <MX_GPIO_Init+0x2d8>)
 80018d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018dc:	6313      	str	r3, [r2, #48]	; 0x30
 80018de:	4b7d      	ldr	r3, [pc, #500]	; (8001ad4 <MX_GPIO_Init+0x2d8>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e6:	60bb      	str	r3, [r7, #8]
 80018e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018ea:	4b7a      	ldr	r3, [pc, #488]	; (8001ad4 <MX_GPIO_Init+0x2d8>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	4a79      	ldr	r2, [pc, #484]	; (8001ad4 <MX_GPIO_Init+0x2d8>)
 80018f0:	f043 0320 	orr.w	r3, r3, #32
 80018f4:	6313      	str	r3, [r2, #48]	; 0x30
 80018f6:	4b77      	ldr	r3, [pc, #476]	; (8001ad4 <MX_GPIO_Init+0x2d8>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	f003 0320 	and.w	r3, r3, #32
 80018fe:	607b      	str	r3, [r7, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001902:	4b74      	ldr	r3, [pc, #464]	; (8001ad4 <MX_GPIO_Init+0x2d8>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	4a73      	ldr	r2, [pc, #460]	; (8001ad4 <MX_GPIO_Init+0x2d8>)
 8001908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800190c:	6313      	str	r3, [r2, #48]	; 0x30
 800190e:	4b71      	ldr	r3, [pc, #452]	; (8001ad4 <MX_GPIO_Init+0x2d8>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001916:	603b      	str	r3, [r7, #0]
 8001918:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800191a:	2201      	movs	r2, #1
 800191c:	2120      	movs	r1, #32
 800191e:	486e      	ldr	r0, [pc, #440]	; (8001ad8 <MX_GPIO_Init+0x2dc>)
 8001920:	f006 fc82 	bl	8008228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8001924:	2200      	movs	r2, #0
 8001926:	210c      	movs	r1, #12
 8001928:	486c      	ldr	r0, [pc, #432]	; (8001adc <MX_GPIO_Init+0x2e0>)
 800192a:	f006 fc7d 	bl	8008228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800192e:	2201      	movs	r2, #1
 8001930:	2108      	movs	r1, #8
 8001932:	486b      	ldr	r0, [pc, #428]	; (8001ae0 <MX_GPIO_Init+0x2e4>)
 8001934:	f006 fc78 	bl	8008228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001938:	2201      	movs	r2, #1
 800193a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800193e:	4867      	ldr	r0, [pc, #412]	; (8001adc <MX_GPIO_Init+0x2e0>)
 8001940:	f006 fc72 	bl	8008228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001944:	2200      	movs	r2, #0
 8001946:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800194a:	4866      	ldr	r0, [pc, #408]	; (8001ae4 <MX_GPIO_Init+0x2e8>)
 800194c:	f006 fc6c 	bl	8008228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001950:	2200      	movs	r2, #0
 8001952:	21c8      	movs	r1, #200	; 0xc8
 8001954:	4864      	ldr	r0, [pc, #400]	; (8001ae8 <MX_GPIO_Init+0x2ec>)
 8001956:	f006 fc67 	bl	8008228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800195a:	2308      	movs	r3, #8
 800195c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800195e:	2300      	movs	r3, #0
 8001960:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001966:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800196a:	4619      	mov	r1, r3
 800196c:	485f      	ldr	r0, [pc, #380]	; (8001aec <MX_GPIO_Init+0x2f0>)
 800196e:	f006 f98b 	bl	8007c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001972:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001976:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001978:	2302      	movs	r3, #2
 800197a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001980:	2303      	movs	r3, #3
 8001982:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001984:	230a      	movs	r3, #10
 8001986:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001988:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800198c:	4619      	mov	r1, r3
 800198e:	4858      	ldr	r0, [pc, #352]	; (8001af0 <MX_GPIO_Init+0x2f4>)
 8001990:	f006 f97a 	bl	8007c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001994:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001998:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800199a:	2300      	movs	r3, #0
 800199c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80019a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019a6:	4619      	mov	r1, r3
 80019a8:	4852      	ldr	r0, [pc, #328]	; (8001af4 <MX_GPIO_Init+0x2f8>)
 80019aa:	f006 f96d 	bl	8007c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80019ae:	2340      	movs	r3, #64	; 0x40
 80019b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80019b2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80019b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80019bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019c0:	4619      	mov	r1, r3
 80019c2:	4845      	ldr	r0, [pc, #276]	; (8001ad8 <MX_GPIO_Init+0x2dc>)
 80019c4:	f006 f960 	bl	8007c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80019c8:	2320      	movs	r3, #32
 80019ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019cc:	2301      	movs	r3, #1
 80019ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d4:	2300      	movs	r3, #0
 80019d6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80019d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019dc:	4619      	mov	r1, r3
 80019de:	483e      	ldr	r0, [pc, #248]	; (8001ad8 <MX_GPIO_Init+0x2dc>)
 80019e0:	f006 f952 	bl	8007c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80019e4:	f241 030c 	movw	r3, #4108	; 0x100c
 80019e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ea:	2301      	movs	r3, #1
 80019ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f2:	2300      	movs	r3, #0
 80019f4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80019f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019fa:	4619      	mov	r1, r3
 80019fc:	4837      	ldr	r0, [pc, #220]	; (8001adc <MX_GPIO_Init+0x2e0>)
 80019fe:	f006 f943 	bl	8007c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001a02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001a10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a14:	4619      	mov	r1, r3
 8001a16:	4838      	ldr	r0, [pc, #224]	; (8001af8 <MX_GPIO_Init+0x2fc>)
 8001a18:	f006 f936 	bl	8007c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001a1c:	2308      	movs	r3, #8
 8001a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a20:	2301      	movs	r3, #1
 8001a22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001a2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a30:	4619      	mov	r1, r3
 8001a32:	482b      	ldr	r0, [pc, #172]	; (8001ae0 <MX_GPIO_Init+0x2e4>)
 8001a34:	f006 f928 	bl	8007c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001a38:	2310      	movs	r3, #16
 8001a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4823      	ldr	r0, [pc, #140]	; (8001ad8 <MX_GPIO_Init+0x2dc>)
 8001a4c:	f006 f91c 	bl	8007c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001a50:	f248 0304 	movw	r3, #32772	; 0x8004
 8001a54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a56:	2300      	movs	r3, #0
 8001a58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a62:	4619      	mov	r1, r3
 8001a64:	481f      	ldr	r0, [pc, #124]	; (8001ae4 <MX_GPIO_Init+0x2e8>)
 8001a66:	f006 f90f 	bl	8007c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001a6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a70:	2301      	movs	r3, #1
 8001a72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001a7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a80:	4619      	mov	r1, r3
 8001a82:	4818      	ldr	r0, [pc, #96]	; (8001ae4 <MX_GPIO_Init+0x2e8>)
 8001a84:	f006 f900 	bl	8007c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001a88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001a96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	480f      	ldr	r0, [pc, #60]	; (8001adc <MX_GPIO_Init+0x2e0>)
 8001a9e:	f006 f8f3 	bl	8007c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001aa2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001aa8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001aac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001ab2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4808      	ldr	r0, [pc, #32]	; (8001adc <MX_GPIO_Init+0x2e0>)
 8001aba:	f006 f8e5 	bl	8007c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001abe:	2310      	movs	r3, #16
 8001ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aca:	2303      	movs	r3, #3
 8001acc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001ace:	230a      	movs	r3, #10
 8001ad0:	e014      	b.n	8001afc <MX_GPIO_Init+0x300>
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40020c00 	.word	0x40020c00
 8001adc:	40022000 	.word	0x40022000
 8001ae0:	40022800 	.word	0x40022800
 8001ae4:	40021c00 	.word	0x40021c00
 8001ae8:	40021800 	.word	0x40021800
 8001aec:	40021000 	.word	0x40021000
 8001af0:	40020400 	.word	0x40020400
 8001af4:	40022400 	.word	0x40022400
 8001af8:	40020800 	.word	0x40020800
 8001afc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001afe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b02:	4619      	mov	r1, r3
 8001b04:	482a      	ldr	r0, [pc, #168]	; (8001bb0 <MX_GPIO_Init+0x3b4>)
 8001b06:	f006 f8bf 	bl	8007c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001b0a:	23c8      	movs	r3, #200	; 0xc8
 8001b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b16:	2300      	movs	r3, #0
 8001b18:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4824      	ldr	r0, [pc, #144]	; (8001bb4 <MX_GPIO_Init+0x3b8>)
 8001b22:	f006 f8b1 	bl	8007c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001b26:	2305      	movs	r3, #5
 8001b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b32:	2303      	movs	r3, #3
 8001b34:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b36:	230a      	movs	r3, #10
 8001b38:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b3e:	4619      	mov	r1, r3
 8001b40:	481d      	ldr	r0, [pc, #116]	; (8001bb8 <MX_GPIO_Init+0x3bc>)
 8001b42:	f006 f8a1 	bl	8007c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001b46:	2304      	movs	r3, #4
 8001b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001b52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b56:	4619      	mov	r1, r3
 8001b58:	4816      	ldr	r0, [pc, #88]	; (8001bb4 <MX_GPIO_Init+0x3b8>)
 8001b5a:	f006 f895 	bl	8007c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : Test_potato_Pin */
  GPIO_InitStruct.Pin = Test_potato_Pin;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b62:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001b66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Test_potato_GPIO_Port, &GPIO_InitStruct);
 8001b6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b70:	4619      	mov	r1, r3
 8001b72:	4812      	ldr	r0, [pc, #72]	; (8001bbc <MX_GPIO_Init+0x3c0>)
 8001b74:	f006 f888 	bl	8007c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 ULPI_D0_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5|ULPI_D0_Pin;
 8001b78:	2328      	movs	r3, #40	; 0x28
 8001b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b84:	2303      	movs	r3, #3
 8001b86:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b88:	230a      	movs	r3, #10
 8001b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b90:	4619      	mov	r1, r3
 8001b92:	480a      	ldr	r0, [pc, #40]	; (8001bbc <MX_GPIO_Init+0x3c0>)
 8001b94:	f006 f878 	bl	8007c88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	2006      	movs	r0, #6
 8001b9e:	f003 fa1a 	bl	8004fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001ba2:	2006      	movs	r0, #6
 8001ba4:	f003 fa33 	bl	800500e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ba8:	bf00      	nop
 8001baa:	3740      	adds	r7, #64	; 0x40
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40021c00 	.word	0x40021c00
 8001bb4:	40021800 	.word	0x40021800
 8001bb8:	40020800 	.word	0x40020800
 8001bbc:	40020000 	.word	0x40020000

08001bc0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == Test_potato_Pin) // If The INT Source Is EXTI Line9 (A9 Pin)
 8001bca:	88fb      	ldrh	r3, [r7, #6]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d10a      	bne.n	8001be6 <HAL_GPIO_EXTI_Callback+0x26>
    {
		HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t)CAMERA_FRAME_BUFFER, Im_size);
 8001bd0:	4b07      	ldr	r3, [pc, #28]	; (8001bf0 <HAL_GPIO_EXTI_Callback+0x30>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8001bd8:	2102      	movs	r1, #2
 8001bda:	4806      	ldr	r0, [pc, #24]	; (8001bf4 <HAL_GPIO_EXTI_Callback+0x34>)
 8001bdc:	f003 fb96 	bl	800530c <HAL_DCMI_Start_DMA>
		__HAL_GPIO_EXTI_CLEAR_FLAG(GPIO_Pin);
 8001be0:	4a05      	ldr	r2, [pc, #20]	; (8001bf8 <HAL_GPIO_EXTI_Callback+0x38>)
 8001be2:	88fb      	ldrh	r3, [r7, #6]
 8001be4:	6153      	str	r3, [r2, #20]
    }
//    HAL_Delay(100); // Ca casse tout apparement
//    printf("Here");
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000ce8 	.word	0x20000ce8
 8001bf4:	200002a8 	.word	0x200002a8
 8001bf8:	40013c00 	.word	0x40013c00

08001bfc <LCD_GPIO_Init>:
void LCD_GPIO_Init(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08e      	sub	sp, #56	; 0x38
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
	GPIO_InitTypeDef gpio_init_structure;
	/* Enable the LTDC and DMA2D clocks */
	__HAL_RCC_LTDC_CLK_ENABLE();
 8001c06:	4b58      	ldr	r3, [pc, #352]	; (8001d68 <LCD_GPIO_Init+0x16c>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0a:	4a57      	ldr	r2, [pc, #348]	; (8001d68 <LCD_GPIO_Init+0x16c>)
 8001c0c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001c10:	6453      	str	r3, [r2, #68]	; 0x44
 8001c12:	4b55      	ldr	r3, [pc, #340]	; (8001d68 <LCD_GPIO_Init+0x16c>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c16:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c1a:	623b      	str	r3, [r7, #32]
 8001c1c:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_DMA2D_CLK_ENABLE();
 8001c1e:	4b52      	ldr	r3, [pc, #328]	; (8001d68 <LCD_GPIO_Init+0x16c>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	4a51      	ldr	r2, [pc, #324]	; (8001d68 <LCD_GPIO_Init+0x16c>)
 8001c24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c28:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2a:	4b4f      	ldr	r3, [pc, #316]	; (8001d68 <LCD_GPIO_Init+0x16c>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c32:	61fb      	str	r3, [r7, #28]
 8001c34:	69fb      	ldr	r3, [r7, #28]
	/* Enable GPIOs clock */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001c36:	4b4c      	ldr	r3, [pc, #304]	; (8001d68 <LCD_GPIO_Init+0x16c>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	4a4b      	ldr	r2, [pc, #300]	; (8001d68 <LCD_GPIO_Init+0x16c>)
 8001c3c:	f043 0310 	orr.w	r3, r3, #16
 8001c40:	6313      	str	r3, [r2, #48]	; 0x30
 8001c42:	4b49      	ldr	r3, [pc, #292]	; (8001d68 <LCD_GPIO_Init+0x16c>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	f003 0310 	and.w	r3, r3, #16
 8001c4a:	61bb      	str	r3, [r7, #24]
 8001c4c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001c4e:	4b46      	ldr	r3, [pc, #280]	; (8001d68 <LCD_GPIO_Init+0x16c>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	4a45      	ldr	r2, [pc, #276]	; (8001d68 <LCD_GPIO_Init+0x16c>)
 8001c54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c58:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5a:	4b43      	ldr	r3, [pc, #268]	; (8001d68 <LCD_GPIO_Init+0x16c>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c62:	617b      	str	r3, [r7, #20]
 8001c64:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8001c66:	4b40      	ldr	r3, [pc, #256]	; (8001d68 <LCD_GPIO_Init+0x16c>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	4a3f      	ldr	r2, [pc, #252]	; (8001d68 <LCD_GPIO_Init+0x16c>)
 8001c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c70:	6313      	str	r3, [r2, #48]	; 0x30
 8001c72:	4b3d      	ldr	r3, [pc, #244]	; (8001d68 <LCD_GPIO_Init+0x16c>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 8001c7e:	4b3a      	ldr	r3, [pc, #232]	; (8001d68 <LCD_GPIO_Init+0x16c>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	4a39      	ldr	r2, [pc, #228]	; (8001d68 <LCD_GPIO_Init+0x16c>)
 8001c84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c88:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8a:	4b37      	ldr	r3, [pc, #220]	; (8001d68 <LCD_GPIO_Init+0x16c>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOK_CLK_ENABLE();
 8001c96:	4b34      	ldr	r3, [pc, #208]	; (8001d68 <LCD_GPIO_Init+0x16c>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	4a33      	ldr	r2, [pc, #204]	; (8001d68 <LCD_GPIO_Init+0x16c>)
 8001c9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca2:	4b31      	ldr	r3, [pc, #196]	; (8001d68 <LCD_GPIO_Init+0x16c>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	68bb      	ldr	r3, [r7, #8]
	/*** LTDC Pins configuration ***/
	/* GPIOE configuration */
	gpio_init_structure.Pin = GPIO_PIN_4;
 8001cae:	2310      	movs	r3, #16
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	62bb      	str	r3, [r7, #40]	; 0x28
	gpio_init_structure.Pull = GPIO_NOPULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
	gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	633b      	str	r3, [r7, #48]	; 0x30
	gpio_init_structure.Alternate = GPIO_AF14_LTDC; HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001cbe:	230e      	movs	r3, #14
 8001cc0:	637b      	str	r3, [r7, #52]	; 0x34
 8001cc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4828      	ldr	r0, [pc, #160]	; (8001d6c <LCD_GPIO_Init+0x170>)
 8001cca:	f005 ffdd 	bl	8007c88 <HAL_GPIO_Init>
	/* GPIOG configuration */
	gpio_init_structure.Pin = GPIO_PIN_12;
 8001cce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	62bb      	str	r3, [r7, #40]	; 0x28
	gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8001cd8:	2309      	movs	r3, #9
 8001cda:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4823      	ldr	r0, [pc, #140]	; (8001d70 <LCD_GPIO_Init+0x174>)
 8001ce4:	f005 ffd0 	bl	8007c88 <HAL_GPIO_Init>
	/* GPIOI LTDC alternate configuration */
	gpio_init_structure.Pin = GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8001ce8:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
	gpio_init_structure.Mode = GPIO_MODE_AF_PP; gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cf2:	230e      	movs	r3, #14
 8001cf4:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8001cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	481d      	ldr	r0, [pc, #116]	; (8001d74 <LCD_GPIO_Init+0x178>)
 8001cfe:	f005 ffc3 	bl	8007c88 <HAL_GPIO_Init>
	/* GPIOJ configuration */
	gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 |
 8001d02:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
			GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_5
			| GPIO_PIN_6 | GPIO_PIN_7 |GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	62bb      	str	r3, [r7, #40]	; 0x28
	gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001d0c:	230e      	movs	r3, #14
 8001d0e:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8001d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d14:	4619      	mov	r1, r3
 8001d16:	4818      	ldr	r0, [pc, #96]	; (8001d78 <LCD_GPIO_Init+0x17c>)
 8001d18:	f005 ffb6 	bl	8007c88 <HAL_GPIO_Init>
	/* GPIOK configuration */
	gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 8001d1c:	23f7      	movs	r3, #247	; 0xf7
 8001d1e:	627b      	str	r3, [r7, #36]	; 0x24
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001d20:	2302      	movs	r3, #2
 8001d22:	62bb      	str	r3, [r7, #40]	; 0x28
	gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001d24:	230e      	movs	r3, #14
 8001d26:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8001d28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4813      	ldr	r0, [pc, #76]	; (8001d7c <LCD_GPIO_Init+0x180>)
 8001d30:	f005 ffaa 	bl	8007c88 <HAL_GPIO_Init>
	/* LCD_DISP GPIO configuration */
	gpio_init_structure.Pin = GPIO_PIN_12; /* LCD_DISP pin has to be manually controlled */
 8001d34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
	gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8001d3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d42:	4619      	mov	r1, r3
 8001d44:	480b      	ldr	r0, [pc, #44]	; (8001d74 <LCD_GPIO_Init+0x178>)
 8001d46:	f005 ff9f 	bl	8007c88 <HAL_GPIO_Init>
	/* LCD_BL_CTRL GPIO configuration */
	gpio_init_structure.Pin = GPIO_PIN_3; /* LCD_BL_CTRL pin has to be manually controlled */
 8001d4a:	2308      	movs	r3, #8
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
	gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8001d52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d56:	4619      	mov	r1, r3
 8001d58:	4808      	ldr	r0, [pc, #32]	; (8001d7c <LCD_GPIO_Init+0x180>)
 8001d5a:	f005 ff95 	bl	8007c88 <HAL_GPIO_Init>
}
 8001d5e:	bf00      	nop
 8001d60:	3738      	adds	r7, #56	; 0x38
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	40021800 	.word	0x40021800
 8001d74:	40022000 	.word	0x40022000
 8001d78:	40022400 	.word	0x40022400
 8001d7c:	40022800 	.word	0x40022800

08001d80 <LTDC_Init>:

static void LTDC_Init(uint32_t FB_Address, uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	4608      	mov	r0, r1
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	4603      	mov	r3, r0
 8001d90:	817b      	strh	r3, [r7, #10]
 8001d92:	460b      	mov	r3, r1
 8001d94:	813b      	strh	r3, [r7, #8]
 8001d96:	4613      	mov	r3, r2
 8001d98:	80fb      	strh	r3, [r7, #6]
	/* Timing Configuration */
	hltdc.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8001d9a:	4b57      	ldr	r3, [pc, #348]	; (8001ef8 <LTDC_Init+0x178>)
 8001d9c:	2228      	movs	r2, #40	; 0x28
 8001d9e:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8001da0:	4b55      	ldr	r3, [pc, #340]	; (8001ef8 <LTDC_Init+0x178>)
 8001da2:	2209      	movs	r2, #9
 8001da4:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8001da6:	4b54      	ldr	r3, [pc, #336]	; (8001ef8 <LTDC_Init+0x178>)
 8001da8:	2235      	movs	r2, #53	; 0x35
 8001daa:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8001dac:	4b52      	ldr	r3, [pc, #328]	; (8001ef8 <LTDC_Init+0x178>)
 8001dae:	220b      	movs	r2, #11
 8001db0:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8001db2:	4b51      	ldr	r3, [pc, #324]	; (8001ef8 <LTDC_Init+0x178>)
 8001db4:	f240 121b 	movw	r2, #283	; 0x11b
 8001db8:	629a      	str	r2, [r3, #40]	; 0x28
	hltdc.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8001dba:	4b4f      	ldr	r3, [pc, #316]	; (8001ef8 <LTDC_Init+0x178>)
 8001dbc:	f240 2215 	movw	r2, #533	; 0x215
 8001dc0:	625a      	str	r2, [r3, #36]	; 0x24
	hltdc.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8001dc2:	4b4d      	ldr	r3, [pc, #308]	; (8001ef8 <LTDC_Init+0x178>)
 8001dc4:	f240 121d 	movw	r2, #285	; 0x11d
 8001dc8:	631a      	str	r2, [r3, #48]	; 0x30
	hltdc.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8001dca:	4b4b      	ldr	r3, [pc, #300]	; (8001ef8 <LTDC_Init+0x178>)
 8001dcc:	f240 2235 	movw	r2, #565	; 0x235
 8001dd0:	62da      	str	r2, [r3, #44]	; 0x2c

	/* LCD clock configuration */
	periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001dd2:	4b4a      	ldr	r3, [pc, #296]	; (8001efc <LTDC_Init+0x17c>)
 8001dd4:	2208      	movs	r2, #8
 8001dd6:	601a      	str	r2, [r3, #0]
	periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8001dd8:	4b48      	ldr	r3, [pc, #288]	; (8001efc <LTDC_Init+0x17c>)
 8001dda:	22c0      	movs	r2, #192	; 0xc0
 8001ddc:	615a      	str	r2, [r3, #20]
	periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8001dde:	4b47      	ldr	r3, [pc, #284]	; (8001efc <LTDC_Init+0x17c>)
 8001de0:	2205      	movs	r2, #5
 8001de2:	61da      	str	r2, [r3, #28]
	periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001de4:	4b45      	ldr	r3, [pc, #276]	; (8001efc <LTDC_Init+0x17c>)
 8001de6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001dea:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8001dec:	4843      	ldr	r0, [pc, #268]	; (8001efc <LTDC_Init+0x17c>)
 8001dee:	f009 ff0b 	bl	800bc08 <HAL_RCCEx_PeriphCLKConfig>

	/* Initialize the LCD pixel width and pixel height */
	hltdc.LayerCfg->ImageWidth = RK043FN48H_WIDTH;
 8001df2:	4b41      	ldr	r3, [pc, #260]	; (8001ef8 <LTDC_Init+0x178>)
 8001df4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001df8:	661a      	str	r2, [r3, #96]	; 0x60
	hltdc.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8001dfa:	4b3f      	ldr	r3, [pc, #252]	; (8001ef8 <LTDC_Init+0x178>)
 8001dfc:	f44f 7288 	mov.w	r2, #272	; 0x110
 8001e00:	665a      	str	r2, [r3, #100]	; 0x64
	hltdc.Init.Backcolor.Blue = 0;
 8001e02:	4b3d      	ldr	r3, [pc, #244]	; (8001ef8 <LTDC_Init+0x178>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	/* Background value */
	hltdc.Init.Backcolor.Green = 0;
 8001e0a:	4b3b      	ldr	r3, [pc, #236]	; (8001ef8 <LTDC_Init+0x178>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	hltdc.Init.Backcolor.Red = 0;
 8001e12:	4b39      	ldr	r3, [pc, #228]	; (8001ef8 <LTDC_Init+0x178>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001e1a:	4b37      	ldr	r3, [pc, #220]	; (8001ef8 <LTDC_Init+0x178>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001e20:	4b35      	ldr	r3, [pc, #212]	; (8001ef8 <LTDC_Init+0x178>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001e26:	4b34      	ldr	r3, [pc, #208]	; (8001ef8 <LTDC_Init+0x178>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001e2c:	4b32      	ldr	r3, [pc, #200]	; (8001ef8 <LTDC_Init+0x178>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	611a      	str	r2, [r3, #16]
	hltdc.Instance = LTDC;
 8001e32:	4b31      	ldr	r3, [pc, #196]	; (8001ef8 <LTDC_Init+0x178>)
 8001e34:	4a32      	ldr	r2, [pc, #200]	; (8001f00 <LTDC_Init+0x180>)
 8001e36:	601a      	str	r2, [r3, #0]
	if(HAL_LTDC_GetState(&hltdc) == HAL_LTDC_STATE_RESET)
 8001e38:	482f      	ldr	r0, [pc, #188]	; (8001ef8 <LTDC_Init+0x178>)
 8001e3a:	f008 ff5f 	bl	800acfc <HAL_LTDC_GetState>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d103      	bne.n	8001e4c <LTDC_Init+0xcc>
	{
		LCD_GPIO_Init(&hltdc, NULL);
 8001e44:	2100      	movs	r1, #0
 8001e46:	482c      	ldr	r0, [pc, #176]	; (8001ef8 <LTDC_Init+0x178>)
 8001e48:	f7ff fed8 	bl	8001bfc <LCD_GPIO_Init>
	}
	HAL_LTDC_Init(&hltdc);
 8001e4c:	482a      	ldr	r0, [pc, #168]	; (8001ef8 <LTDC_Init+0x178>)
 8001e4e:	f008 fd85 	bl	800a95c <HAL_LTDC_Init>

	/* Assert display enable LCD_DISP pin */
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_SET);
 8001e52:	2201      	movs	r2, #1
 8001e54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e58:	482a      	ldr	r0, [pc, #168]	; (8001f04 <LTDC_Init+0x184>)
 8001e5a:	f006 f9e5 	bl	8008228 <HAL_GPIO_WritePin>
	/* Assert backlight LCD_BL_CTRL pin */
	HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 8001e5e:	2201      	movs	r2, #1
 8001e60:	2108      	movs	r1, #8
 8001e62:	4829      	ldr	r0, [pc, #164]	; (8001f08 <LTDC_Init+0x188>)
 8001e64:	f006 f9e0 	bl	8008228 <HAL_GPIO_WritePin>
	DrawProp[0].pFont = &Font24 ;
 8001e68:	4b28      	ldr	r3, [pc, #160]	; (8001f0c <LTDC_Init+0x18c>)
 8001e6a:	4a29      	ldr	r2, [pc, #164]	; (8001f10 <LTDC_Init+0x190>)
 8001e6c:	609a      	str	r2, [r3, #8]
	/* Layer Init */
	layer_cfg.WindowX0 = Xpos;
 8001e6e:	897b      	ldrh	r3, [r7, #10]
 8001e70:	4a28      	ldr	r2, [pc, #160]	; (8001f14 <LTDC_Init+0x194>)
 8001e72:	6013      	str	r3, [r2, #0]
	layer_cfg.WindowX1 = Width;
 8001e74:	88fb      	ldrh	r3, [r7, #6]
 8001e76:	4a27      	ldr	r2, [pc, #156]	; (8001f14 <LTDC_Init+0x194>)
 8001e78:	6053      	str	r3, [r2, #4]
	layer_cfg.WindowY0 = Ypos;
 8001e7a:	893b      	ldrh	r3, [r7, #8]
 8001e7c:	4a25      	ldr	r2, [pc, #148]	; (8001f14 <LTDC_Init+0x194>)
 8001e7e:	6093      	str	r3, [r2, #8]
	layer_cfg.WindowY1 = Height;
 8001e80:	8b3b      	ldrh	r3, [r7, #24]
 8001e82:	4a24      	ldr	r2, [pc, #144]	; (8001f14 <LTDC_Init+0x194>)
 8001e84:	60d3      	str	r3, [r2, #12]
	layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001e86:	4b23      	ldr	r3, [pc, #140]	; (8001f14 <LTDC_Init+0x194>)
 8001e88:	2202      	movs	r2, #2
 8001e8a:	611a      	str	r2, [r3, #16]
	layer_cfg.FBStartAdress = FB_Address;
 8001e8c:	4a21      	ldr	r2, [pc, #132]	; (8001f14 <LTDC_Init+0x194>)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6253      	str	r3, [r2, #36]	; 0x24
	layer_cfg.Alpha = 255;
 8001e92:	4b20      	ldr	r3, [pc, #128]	; (8001f14 <LTDC_Init+0x194>)
 8001e94:	22ff      	movs	r2, #255	; 0xff
 8001e96:	615a      	str	r2, [r3, #20]
	layer_cfg.Alpha0 = 0;
 8001e98:	4b1e      	ldr	r3, [pc, #120]	; (8001f14 <LTDC_Init+0x194>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	619a      	str	r2, [r3, #24]
	layer_cfg.Backcolor.Blue = 0;
 8001e9e:	4b1d      	ldr	r3, [pc, #116]	; (8001f14 <LTDC_Init+0x194>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	layer_cfg.Backcolor.Green = 0;
 8001ea6:	4b1b      	ldr	r3, [pc, #108]	; (8001f14 <LTDC_Init+0x194>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	layer_cfg.Backcolor.Red = 0;
 8001eae:	4b19      	ldr	r3, [pc, #100]	; (8001f14 <LTDC_Init+0x194>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001eb6:	4b17      	ldr	r3, [pc, #92]	; (8001f14 <LTDC_Init+0x194>)
 8001eb8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001ebc:	61da      	str	r2, [r3, #28]
	layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001ebe:	4b15      	ldr	r3, [pc, #84]	; (8001f14 <LTDC_Init+0x194>)
 8001ec0:	2207      	movs	r2, #7
 8001ec2:	621a      	str	r2, [r3, #32]
	layer_cfg.ImageWidth = Width;
 8001ec4:	88fb      	ldrh	r3, [r7, #6]
 8001ec6:	4a13      	ldr	r2, [pc, #76]	; (8001f14 <LTDC_Init+0x194>)
 8001ec8:	6293      	str	r3, [r2, #40]	; 0x28
	layer_cfg.ImageHeight = Height;
 8001eca:	8b3b      	ldrh	r3, [r7, #24]
 8001ecc:	4a11      	ldr	r2, [pc, #68]	; (8001f14 <LTDC_Init+0x194>)
 8001ece:	62d3      	str	r3, [r2, #44]	; 0x2c
	HAL_LTDC_ConfigLayer(&hltdc, &layer_cfg, 1);
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	4910      	ldr	r1, [pc, #64]	; (8001f14 <LTDC_Init+0x194>)
 8001ed4:	4808      	ldr	r0, [pc, #32]	; (8001ef8 <LTDC_Init+0x178>)
 8001ed6:	f008 fed3 	bl	800ac80 <HAL_LTDC_ConfigLayer>

	DrawProp[1].BackColor = ((uint32_t)0xFFFFFFFF);
 8001eda:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <LTDC_Init+0x18c>)
 8001edc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ee0:	611a      	str	r2, [r3, #16]
	DrawProp[1].pFont = &Font24;
 8001ee2:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <LTDC_Init+0x18c>)
 8001ee4:	4a0a      	ldr	r2, [pc, #40]	; (8001f10 <LTDC_Init+0x190>)
 8001ee6:	615a      	str	r2, [r3, #20]
	DrawProp[1].TextColor = ((uint32_t)0xFF000000);
 8001ee8:	4b08      	ldr	r3, [pc, #32]	; (8001f0c <LTDC_Init+0x18c>)
 8001eea:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8001eee:	60da      	str	r2, [r3, #12]
}
 8001ef0:	bf00      	nop
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	200004f0 	.word	0x200004f0
 8001efc:	20000c5c 	.word	0x20000c5c
 8001f00:	40016800 	.word	0x40016800
 8001f04:	40022000 	.word	0x40022000
 8001f08:	40022800 	.word	0x40022800
 8001f0c:	20000c10 	.word	0x20000c10
 8001f10:	20000000 	.word	0x20000000
 8001f14:	20000c28 	.word	0x20000c28

08001f18 <CAMERA_Init>:
uint8_t CAMERA_Init(uint32_t Resolution) /*Camera initialization*/
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
	uint8_t status = CAMERA_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	73fb      	strb	r3, [r7, #15]
	/* Read ID of Camera module via I2C */
	if(ov5640_ReadID(CAMERA_I2C_ADDRESS) == OV5640_ID)
 8001f24:	2078      	movs	r0, #120	; 0x78
 8001f26:	f000 fd90 	bl	8002a4a <ov5640_ReadID>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	f245 6340 	movw	r3, #22080	; 0x5640
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d12e      	bne.n	8001f94 <CAMERA_Init+0x7c>
	{
		camera_driv = &ov5640_drv;
 8001f36:	4b1b      	ldr	r3, [pc, #108]	; (8001fa4 <CAMERA_Init+0x8c>)
 8001f38:	4a1b      	ldr	r2, [pc, #108]	; (8001fa8 <CAMERA_Init+0x90>)
 8001f3a:	601a      	str	r2, [r3, #0]
		/* Initialize the camera driver structure */
		CameraHwAddress = CAMERA_I2C_ADDRESS;
 8001f3c:	4b1b      	ldr	r3, [pc, #108]	; (8001fac <CAMERA_Init+0x94>)
 8001f3e:	2278      	movs	r2, #120	; 0x78
 8001f40:	601a      	str	r2, [r3, #0]
		if (Resolution == CAMERA_R320x240)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d10f      	bne.n	8001f68 <CAMERA_Init+0x50>
		{
			camera_driv->Init(CameraHwAddress, Resolution);
 8001f48:	4b16      	ldr	r3, [pc, #88]	; (8001fa4 <CAMERA_Init+0x8c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a17      	ldr	r2, [pc, #92]	; (8001fac <CAMERA_Init+0x94>)
 8001f50:	6812      	ldr	r2, [r2, #0]
 8001f52:	b292      	uxth	r2, r2
 8001f54:	6879      	ldr	r1, [r7, #4]
 8001f56:	4610      	mov	r0, r2
 8001f58:	4798      	blx	r3
			HAL_DCMI_DisableCROP(&hdcmi);
 8001f5a:	4815      	ldr	r0, [pc, #84]	; (8001fb0 <CAMERA_Init+0x98>)
 8001f5c:	f003 fb2c 	bl	80055b8 <HAL_DCMI_DisableCrop>
			HAL_Delay(500);
 8001f60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f64:	f002 fc84 	bl	8004870 <HAL_Delay>

		}
		if (Resolution == CAMERA_R480x272)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d10f      	bne.n	8001f8e <CAMERA_Init+0x76>
		{
			camera_driv->Init(CameraHwAddress, Resolution);
 8001f6e:	4b0d      	ldr	r3, [pc, #52]	; (8001fa4 <CAMERA_Init+0x8c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a0d      	ldr	r2, [pc, #52]	; (8001fac <CAMERA_Init+0x94>)
 8001f76:	6812      	ldr	r2, [r2, #0]
 8001f78:	b292      	uxth	r2, r2
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	4798      	blx	r3
			HAL_DCMI_DisableCROP(&hdcmi);
 8001f80:	480b      	ldr	r0, [pc, #44]	; (8001fb0 <CAMERA_Init+0x98>)
 8001f82:	f003 fb19 	bl	80055b8 <HAL_DCMI_DisableCrop>
			HAL_Delay(500);
 8001f86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f8a:	f002 fc71 	bl	8004870 <HAL_Delay>
		}

		status = CAMERA_OK; /* Return CAMERA_OK status */
 8001f8e:	2300      	movs	r3, #0
 8001f90:	73fb      	strb	r3, [r7, #15]
 8001f92:	e001      	b.n	8001f98 <CAMERA_Init+0x80>
	}
	else
	{
		status = CAMERA_NOT_SUPPORTED; /* Return CAMERA_NOT_SUPPORTED status */
 8001f94:	2304      	movs	r3, #4
 8001f96:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8001f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20000ce0 	.word	0x20000ce0
 8001fa8:	20000008 	.word	0x20000008
 8001fac:	20000ce4 	.word	0x20000ce4
 8001fb0:	200002a8 	.word	0x200002a8

08001fb4 <CAMERA_PwrUp>:
/**
 * @brief  CANERA power up
 * @retval None
 */
void CAMERA_PwrUp(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio_init_structure;

	/* Enable GPIO clock */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001fba:	4b13      	ldr	r3, [pc, #76]	; (8002008 <CAMERA_PwrUp+0x54>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	4a12      	ldr	r2, [pc, #72]	; (8002008 <CAMERA_PwrUp+0x54>)
 8001fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc6:	4b10      	ldr	r3, [pc, #64]	; (8002008 <CAMERA_PwrUp+0x54>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fce:	603b      	str	r3, [r7, #0]
 8001fd0:	683b      	ldr	r3, [r7, #0]

	/*** Configure the GPIO ***/
	/* Configure DCMI GPIO as alternate function */
	gpio_init_structure.Pin       = GPIO_PIN_13;
 8001fd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fd6:	607b      	str	r3, [r7, #4]
	gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	60bb      	str	r3, [r7, #8]
	gpio_init_structure.Pull      = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60fb      	str	r3, [r7, #12]
	gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8001fe4:	1d3b      	adds	r3, r7, #4
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4808      	ldr	r0, [pc, #32]	; (800200c <CAMERA_PwrUp+0x58>)
 8001fea:	f005 fe4d 	bl	8007c88 <HAL_GPIO_Init>

	/* De-assert the camera POWER_DOWN pin (active high) */
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_13, GPIO_PIN_RESET);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ff4:	4805      	ldr	r0, [pc, #20]	; (800200c <CAMERA_PwrUp+0x58>)
 8001ff6:	f006 f917 	bl	8008228 <HAL_GPIO_WritePin>

	HAL_Delay(3);     /* POWER_DOWN de-asserted during 3ms */
 8001ffa:	2003      	movs	r0, #3
 8001ffc:	f002 fc38 	bl	8004870 <HAL_Delay>
}
 8002000:	bf00      	nop
 8002002:	3718      	adds	r7, #24
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40023800 	.word	0x40023800
 800200c:	40021c00 	.word	0x40021c00

08002010 <CAMERA_PwrDown>:
/**
 * @brief  CAMERA power down
 * @retval None
 */
void CAMERA_PwrDown(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio_init_structure;

	/* Enable GPIO clock */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002016:	4b12      	ldr	r3, [pc, #72]	; (8002060 <CAMERA_PwrDown+0x50>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	4a11      	ldr	r2, [pc, #68]	; (8002060 <CAMERA_PwrDown+0x50>)
 800201c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002020:	6313      	str	r3, [r2, #48]	; 0x30
 8002022:	4b0f      	ldr	r3, [pc, #60]	; (8002060 <CAMERA_PwrDown+0x50>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800202a:	603b      	str	r3, [r7, #0]
 800202c:	683b      	ldr	r3, [r7, #0]

	/*** Configure the GPIO ***/
	/* Configure DCMI GPIO as alternate function */
	gpio_init_structure.Pin       = GPIO_PIN_13;
 800202e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002032:	607b      	str	r3, [r7, #4]
	gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002034:	2301      	movs	r3, #1
 8002036:	60bb      	str	r3, [r7, #8]
	gpio_init_structure.Pull      = GPIO_NOPULL;
 8002038:	2300      	movs	r3, #0
 800203a:	60fb      	str	r3, [r7, #12]
	gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 800203c:	2303      	movs	r3, #3
 800203e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8002040:	1d3b      	adds	r3, r7, #4
 8002042:	4619      	mov	r1, r3
 8002044:	4807      	ldr	r0, [pc, #28]	; (8002064 <CAMERA_PwrDown+0x54>)
 8002046:	f005 fe1f 	bl	8007c88 <HAL_GPIO_Init>

	/* Assert the camera POWER_DOWN pin (active high) */
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_13, GPIO_PIN_SET);
 800204a:	2201      	movs	r2, #1
 800204c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002050:	4804      	ldr	r0, [pc, #16]	; (8002064 <CAMERA_PwrDown+0x54>)
 8002052:	f006 f8e9 	bl	8008228 <HAL_GPIO_WritePin>
}
 8002056:	bf00      	nop
 8002058:	3718      	adds	r7, #24
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40023800 	.word	0x40023800
 8002064:	40021c00 	.word	0x40021c00

08002068 <LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void LCD_DisplayOn(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hltdc);
 800206c:	4b0a      	ldr	r3, [pc, #40]	; (8002098 <LCD_DisplayOn+0x30>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	699a      	ldr	r2, [r3, #24]
 8002072:	4b09      	ldr	r3, [pc, #36]	; (8002098 <LCD_DisplayOn+0x30>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f042 0201 	orr.w	r2, r2, #1
 800207a:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 800207c:	2201      	movs	r2, #1
 800207e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002082:	4806      	ldr	r0, [pc, #24]	; (800209c <LCD_DisplayOn+0x34>)
 8002084:	f006 f8d0 	bl	8008228 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8002088:	2201      	movs	r2, #1
 800208a:	2108      	movs	r1, #8
 800208c:	4804      	ldr	r0, [pc, #16]	; (80020a0 <LCD_DisplayOn+0x38>)
 800208e:	f006 f8cb 	bl	8008228 <HAL_GPIO_WritePin>
}
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	200004f0 	.word	0x200004f0
 800209c:	40022000 	.word	0x40022000
 80020a0:	40022800 	.word	0x40022800

080020a4 <LCD_DisplayOff>:
/**
  * @brief  Disables the display.
  * @retval None
  */
void LCD_DisplayOff(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* Display Off */
  __HAL_LTDC_DISABLE(&hltdc);
 80020a8:	4b0a      	ldr	r3, [pc, #40]	; (80020d4 <LCD_DisplayOff+0x30>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	699a      	ldr	r2, [r3, #24]
 80020ae:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <LCD_DisplayOff+0x30>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 0201 	bic.w	r2, r2, #1
 80020b6:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_RESET);      /* De-assert LCD_DISP pin */
 80020b8:	2200      	movs	r2, #0
 80020ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020be:	4806      	ldr	r0, [pc, #24]	; (80020d8 <LCD_DisplayOff+0x34>)
 80020c0:	f006 f8b2 	bl	8008228 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);/* De-assert LCD_BL_CTRL pin */
 80020c4:	2200      	movs	r2, #0
 80020c6:	2108      	movs	r1, #8
 80020c8:	4804      	ldr	r0, [pc, #16]	; (80020dc <LCD_DisplayOff+0x38>)
 80020ca:	f006 f8ad 	bl	8008228 <HAL_GPIO_WritePin>
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	200004f0 	.word	0x200004f0
 80020d8:	40022000 	.word	0x40022000
 80020dc:	40022800 	.word	0x40022800

080020e0 <HAL_DCMI_FrameEventCallback>:

/**
 * @brief  Camera Frame Event callback.
 */
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
	start_the_camera_capture = 1;
 80020e8:	4b04      	ldr	r3, [pc, #16]	; (80020fc <HAL_DCMI_FrameEventCallback+0x1c>)
 80020ea:	2201      	movs	r2, #1
 80020ec:	601a      	str	r2, [r3, #0]
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	20000c0c 	.word	0x20000c0c

08002100 <OnError_Handler>:
 * @brief  On Error Handler on condition TRUE.
 * @param  condition : Can be TRUE or FALSE
 * @retval None
 */
static void OnError_Handler(uint32_t condition)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
	if(condition)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <OnError_Handler+0x16>
	{
		BSP_LED_On(LED1);
 800210e:	2000      	movs	r0, #0
 8002110:	f000 fd62 	bl	8002bd8 <BSP_LED_On>
		while(1) { ; } /* Blocking on error */
 8002114:	e7fe      	b.n	8002114 <OnError_Handler+0x14>
	}
}
 8002116:	bf00      	nop
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002122:	b672      	cpsid	i
}
 8002124:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002126:	e7fe      	b.n	8002126 <Error_Handler+0x8>

08002128 <ov5640_Init>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  resolution: Camera resolution
  * @retval None
  */
void ov5640_Init(uint16_t DeviceAddr, uint32_t resolution)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	6039      	str	r1, [r7, #0]
 8002132:	80fb      	strh	r3, [r7, #6]
  uint32_t index = 0;
 8002134:	2300      	movs	r3, #0
 8002136:	60fb      	str	r3, [r7, #12]

  for(index=0; index< (sizeof(OV5640_Init)/4) ; index++)
 8002138:	2300      	movs	r3, #0
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	e010      	b.n	8002160 <ov5640_Init+0x38>
  {
    CAMERA_IO_Write(DeviceAddr, OV5640_Init[index][0], OV5640_Init[index][1]);
 800213e:	88fb      	ldrh	r3, [r7, #6]
 8002140:	b2d8      	uxtb	r0, r3
 8002142:	4a43      	ldr	r2, [pc, #268]	; (8002250 <ov5640_Init+0x128>)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800214a:	4a41      	ldr	r2, [pc, #260]	; (8002250 <ov5640_Init+0x128>)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	885b      	ldrh	r3, [r3, #2]
 8002154:	461a      	mov	r2, r3
 8002156:	f000 feb7 	bl	8002ec8 <CAMERA_IO_Write>
  for(index=0; index< (sizeof(OV5640_Init)/4) ; index++)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	3301      	adds	r3, #1
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2bfd      	cmp	r3, #253	; 0xfd
 8002164:	d9eb      	bls.n	800213e <ov5640_Init+0x16>
  }

  /* Initialize OV5640 */
  switch (resolution)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	2b03      	cmp	r3, #3
 800216a:	d86b      	bhi.n	8002244 <ov5640_Init+0x11c>
 800216c:	a201      	add	r2, pc, #4	; (adr r2, 8002174 <ov5640_Init+0x4c>)
 800216e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002172:	bf00      	nop
 8002174:	08002185 	.word	0x08002185
 8002178:	080021b5 	.word	0x080021b5
 800217c:	080021e5 	.word	0x080021e5
 8002180:	08002215 	.word	0x08002215
  {
  case CAMERA_R160x120:
    {
      for(index=0; index<(sizeof(OV5640_QQVGA)/4); index++)
 8002184:	2300      	movs	r3, #0
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	e010      	b.n	80021ac <ov5640_Init+0x84>
      {
        CAMERA_IO_Write(DeviceAddr, OV5640_QQVGA[index][0], OV5640_QQVGA[index][1]);
 800218a:	88fb      	ldrh	r3, [r7, #6]
 800218c:	b2d8      	uxtb	r0, r3
 800218e:	4a31      	ldr	r2, [pc, #196]	; (8002254 <ov5640_Init+0x12c>)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002196:	4a2f      	ldr	r2, [pc, #188]	; (8002254 <ov5640_Init+0x12c>)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	885b      	ldrh	r3, [r3, #2]
 80021a0:	461a      	mov	r2, r3
 80021a2:	f000 fe91 	bl	8002ec8 <CAMERA_IO_Write>
      for(index=0; index<(sizeof(OV5640_QQVGA)/4); index++)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	3301      	adds	r3, #1
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2b06      	cmp	r3, #6
 80021b0:	d9eb      	bls.n	800218a <ov5640_Init+0x62>
      }
      break;
 80021b2:	e048      	b.n	8002246 <ov5640_Init+0x11e>
    }
  case CAMERA_R320x240:
    {
      for(index=0; index< (sizeof(OV5640_QVGA)/4); index++)
 80021b4:	2300      	movs	r3, #0
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	e010      	b.n	80021dc <ov5640_Init+0xb4>
      {
        CAMERA_IO_Write(DeviceAddr, OV5640_QVGA[index][0], OV5640_QVGA[index][1]);
 80021ba:	88fb      	ldrh	r3, [r7, #6]
 80021bc:	b2d8      	uxtb	r0, r3
 80021be:	4a26      	ldr	r2, [pc, #152]	; (8002258 <ov5640_Init+0x130>)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80021c6:	4a24      	ldr	r2, [pc, #144]	; (8002258 <ov5640_Init+0x130>)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	885b      	ldrh	r3, [r3, #2]
 80021d0:	461a      	mov	r2, r3
 80021d2:	f000 fe79 	bl	8002ec8 <CAMERA_IO_Write>
      for(index=0; index< (sizeof(OV5640_QVGA)/4); index++)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	3301      	adds	r3, #1
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2b06      	cmp	r3, #6
 80021e0:	d9eb      	bls.n	80021ba <ov5640_Init+0x92>
      }

      break;
 80021e2:	e030      	b.n	8002246 <ov5640_Init+0x11e>
    }
  case CAMERA_R480x272:
    {
      for(index=0; index<(sizeof(OV5640_480x272)/4); index++)
 80021e4:	2300      	movs	r3, #0
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	e010      	b.n	800220c <ov5640_Init+0xe4>
      {
        CAMERA_IO_Write(DeviceAddr, OV5640_480x272[index][0], OV5640_480x272[index][1]);
 80021ea:	88fb      	ldrh	r3, [r7, #6]
 80021ec:	b2d8      	uxtb	r0, r3
 80021ee:	4a1b      	ldr	r2, [pc, #108]	; (800225c <ov5640_Init+0x134>)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80021f6:	4a19      	ldr	r2, [pc, #100]	; (800225c <ov5640_Init+0x134>)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4413      	add	r3, r2
 80021fe:	885b      	ldrh	r3, [r3, #2]
 8002200:	461a      	mov	r2, r3
 8002202:	f000 fe61 	bl	8002ec8 <CAMERA_IO_Write>
      for(index=0; index<(sizeof(OV5640_480x272)/4); index++)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	3301      	adds	r3, #1
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2b06      	cmp	r3, #6
 8002210:	d9eb      	bls.n	80021ea <ov5640_Init+0xc2>
      }
      break;
 8002212:	e018      	b.n	8002246 <ov5640_Init+0x11e>
    }
  case CAMERA_R640x480:
    {
      for(index=0; index<(sizeof(OV5640_VGA)/4); index++)
 8002214:	2300      	movs	r3, #0
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	e010      	b.n	800223c <ov5640_Init+0x114>
      {
        CAMERA_IO_Write(DeviceAddr, OV5640_VGA[index][0], OV5640_VGA[index][1]);
 800221a:	88fb      	ldrh	r3, [r7, #6]
 800221c:	b2d8      	uxtb	r0, r3
 800221e:	4a10      	ldr	r2, [pc, #64]	; (8002260 <ov5640_Init+0x138>)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002226:	4a0e      	ldr	r2, [pc, #56]	; (8002260 <ov5640_Init+0x138>)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	885b      	ldrh	r3, [r3, #2]
 8002230:	461a      	mov	r2, r3
 8002232:	f000 fe49 	bl	8002ec8 <CAMERA_IO_Write>
      for(index=0; index<(sizeof(OV5640_VGA)/4); index++)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	3301      	adds	r3, #1
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2b06      	cmp	r3, #6
 8002240:	d9eb      	bls.n	800221a <ov5640_Init+0xf2>
      }
      break;
 8002242:	e000      	b.n	8002246 <ov5640_Init+0x11e>
    }
  default:
    {
      break;
 8002244:	bf00      	nop
    }
  }
}
 8002246:	bf00      	nop
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	08018ab4 	.word	0x08018ab4
 8002254:	08018f00 	.word	0x08018f00
 8002258:	08018ee4 	.word	0x08018ee4
 800225c:	08018ec8 	.word	0x08018ec8
 8002260:	08018eac 	.word	0x08018eac

08002264 <OV5640_SetEffect>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  Effect: Effect to be configured
  * @retval None
  */
void OV5640_SetEffect(uint16_t DeviceAddr, uint32_t Effect)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	6039      	str	r1, [r7, #0]
 800226e:	80fb      	strh	r3, [r7, #6]
  switch(Effect)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002276:	f000 8167 	beq.w	8002548 <OV5640_SetEffect+0x2e4>
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002280:	f200 818b 	bhi.w	800259a <OV5640_SetEffect+0x336>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	2b80      	cmp	r3, #128	; 0x80
 8002288:	f000 813d 	beq.w	8002506 <OV5640_SetEffect+0x2a2>
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	2b80      	cmp	r3, #128	; 0x80
 8002290:	f200 8183 	bhi.w	800259a <OV5640_SetEffect+0x336>
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	2b20      	cmp	r3, #32
 8002298:	d848      	bhi.n	800232c <OV5640_SetEffect+0xc8>
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	2b20      	cmp	r3, #32
 800229e:	f200 817c 	bhi.w	800259a <OV5640_SetEffect+0x336>
 80022a2:	a201      	add	r2, pc, #4	; (adr r2, 80022a8 <OV5640_SetEffect+0x44>)
 80022a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a8:	08002337 	.word	0x08002337
 80022ac:	08002359 	.word	0x08002359
 80022b0:	0800239b 	.word	0x0800239b
 80022b4:	0800259b 	.word	0x0800259b
 80022b8:	080023dd 	.word	0x080023dd
 80022bc:	0800259b 	.word	0x0800259b
 80022c0:	0800259b 	.word	0x0800259b
 80022c4:	0800259b 	.word	0x0800259b
 80022c8:	0800241f 	.word	0x0800241f
 80022cc:	0800259b 	.word	0x0800259b
 80022d0:	0800259b 	.word	0x0800259b
 80022d4:	0800259b 	.word	0x0800259b
 80022d8:	0800259b 	.word	0x0800259b
 80022dc:	0800259b 	.word	0x0800259b
 80022e0:	0800259b 	.word	0x0800259b
 80022e4:	0800259b 	.word	0x0800259b
 80022e8:	08002461 	.word	0x08002461
 80022ec:	0800259b 	.word	0x0800259b
 80022f0:	0800259b 	.word	0x0800259b
 80022f4:	0800259b 	.word	0x0800259b
 80022f8:	0800259b 	.word	0x0800259b
 80022fc:	0800259b 	.word	0x0800259b
 8002300:	0800259b 	.word	0x0800259b
 8002304:	0800259b 	.word	0x0800259b
 8002308:	0800259b 	.word	0x0800259b
 800230c:	0800259b 	.word	0x0800259b
 8002310:	0800259b 	.word	0x0800259b
 8002314:	0800259b 	.word	0x0800259b
 8002318:	0800259b 	.word	0x0800259b
 800231c:	0800259b 	.word	0x0800259b
 8002320:	0800259b 	.word	0x0800259b
 8002324:	0800259b 	.word	0x0800259b
 8002328:	080024a3 	.word	0x080024a3
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	2b40      	cmp	r3, #64	; 0x40
 8002330:	f000 80c8 	beq.w	80024c4 <OV5640_SetEffect+0x260>
 8002334:	e131      	b.n	800259a <OV5640_SetEffect+0x336>
  {
  case OV5640_COLOR_EFFECT_NONE:
    CAMERA_IO_Write(DeviceAddr, 0x5001, 0x7F);
 8002336:	88fb      	ldrh	r3, [r7, #6]
 8002338:	b2db      	uxtb	r3, r3
 800233a:	227f      	movs	r2, #127	; 0x7f
 800233c:	f245 0101 	movw	r1, #20481	; 0x5001
 8002340:	4618      	mov	r0, r3
 8002342:	f000 fdc1 	bl	8002ec8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5580, 0x00);
 8002346:	88fb      	ldrh	r3, [r7, #6]
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2200      	movs	r2, #0
 800234c:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002350:	4618      	mov	r0, r3
 8002352:	f000 fdb9 	bl	8002ec8 <CAMERA_IO_Write>
    break;
 8002356:	e131      	b.n	80025bc <OV5640_SetEffect+0x358>

  case OV5640_COLOR_EFFECT_BLUE:
    CAMERA_IO_Write(DeviceAddr, 0x5001, 0xFF);
 8002358:	88fb      	ldrh	r3, [r7, #6]
 800235a:	b2db      	uxtb	r3, r3
 800235c:	22ff      	movs	r2, #255	; 0xff
 800235e:	f245 0101 	movw	r1, #20481	; 0x5001
 8002362:	4618      	mov	r0, r3
 8002364:	f000 fdb0 	bl	8002ec8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5580, 0x18);
 8002368:	88fb      	ldrh	r3, [r7, #6]
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2218      	movs	r2, #24
 800236e:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002372:	4618      	mov	r0, r3
 8002374:	f000 fda8 	bl	8002ec8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5583, 0xA0);
 8002378:	88fb      	ldrh	r3, [r7, #6]
 800237a:	b2db      	uxtb	r3, r3
 800237c:	22a0      	movs	r2, #160	; 0xa0
 800237e:	f245 5183 	movw	r1, #21891	; 0x5583
 8002382:	4618      	mov	r0, r3
 8002384:	f000 fda0 	bl	8002ec8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5584, 0x40);
 8002388:	88fb      	ldrh	r3, [r7, #6]
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2240      	movs	r2, #64	; 0x40
 800238e:	f245 5184 	movw	r1, #21892	; 0x5584
 8002392:	4618      	mov	r0, r3
 8002394:	f000 fd98 	bl	8002ec8 <CAMERA_IO_Write>
    break;
 8002398:	e110      	b.n	80025bc <OV5640_SetEffect+0x358>

  case OV5640_COLOR_EFFECT_RED:
    CAMERA_IO_Write(DeviceAddr, 0x5001, 0xFF);
 800239a:	88fb      	ldrh	r3, [r7, #6]
 800239c:	b2db      	uxtb	r3, r3
 800239e:	22ff      	movs	r2, #255	; 0xff
 80023a0:	f245 0101 	movw	r1, #20481	; 0x5001
 80023a4:	4618      	mov	r0, r3
 80023a6:	f000 fd8f 	bl	8002ec8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5580, 0x18);
 80023aa:	88fb      	ldrh	r3, [r7, #6]
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2218      	movs	r2, #24
 80023b0:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80023b4:	4618      	mov	r0, r3
 80023b6:	f000 fd87 	bl	8002ec8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5583, 0x80);
 80023ba:	88fb      	ldrh	r3, [r7, #6]
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2280      	movs	r2, #128	; 0x80
 80023c0:	f245 5183 	movw	r1, #21891	; 0x5583
 80023c4:	4618      	mov	r0, r3
 80023c6:	f000 fd7f 	bl	8002ec8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5584, 0xC0);
 80023ca:	88fb      	ldrh	r3, [r7, #6]
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	22c0      	movs	r2, #192	; 0xc0
 80023d0:	f245 5184 	movw	r1, #21892	; 0x5584
 80023d4:	4618      	mov	r0, r3
 80023d6:	f000 fd77 	bl	8002ec8 <CAMERA_IO_Write>
    break;
 80023da:	e0ef      	b.n	80025bc <OV5640_SetEffect+0x358>

  case OV5640_COLOR_EFFECT_GREEN:
    CAMERA_IO_Write(DeviceAddr, 0x5001, 0xFF);
 80023dc:	88fb      	ldrh	r3, [r7, #6]
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	22ff      	movs	r2, #255	; 0xff
 80023e2:	f245 0101 	movw	r1, #20481	; 0x5001
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 fd6e 	bl	8002ec8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5580, 0x18);
 80023ec:	88fb      	ldrh	r3, [r7, #6]
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2218      	movs	r2, #24
 80023f2:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80023f6:	4618      	mov	r0, r3
 80023f8:	f000 fd66 	bl	8002ec8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5583, 0x60);
 80023fc:	88fb      	ldrh	r3, [r7, #6]
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2260      	movs	r2, #96	; 0x60
 8002402:	f245 5183 	movw	r1, #21891	; 0x5583
 8002406:	4618      	mov	r0, r3
 8002408:	f000 fd5e 	bl	8002ec8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5584, 0x60);
 800240c:	88fb      	ldrh	r3, [r7, #6]
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2260      	movs	r2, #96	; 0x60
 8002412:	f245 5184 	movw	r1, #21892	; 0x5584
 8002416:	4618      	mov	r0, r3
 8002418:	f000 fd56 	bl	8002ec8 <CAMERA_IO_Write>
    break;
 800241c:	e0ce      	b.n	80025bc <OV5640_SetEffect+0x358>

  case OV5640_COLOR_EFFECT_BW:
    CAMERA_IO_Write(DeviceAddr, 0x5001, 0xFF);
 800241e:	88fb      	ldrh	r3, [r7, #6]
 8002420:	b2db      	uxtb	r3, r3
 8002422:	22ff      	movs	r2, #255	; 0xff
 8002424:	f245 0101 	movw	r1, #20481	; 0x5001
 8002428:	4618      	mov	r0, r3
 800242a:	f000 fd4d 	bl	8002ec8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5580, 0x18);
 800242e:	88fb      	ldrh	r3, [r7, #6]
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2218      	movs	r2, #24
 8002434:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002438:	4618      	mov	r0, r3
 800243a:	f000 fd45 	bl	8002ec8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5583, 0x80);
 800243e:	88fb      	ldrh	r3, [r7, #6]
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2280      	movs	r2, #128	; 0x80
 8002444:	f245 5183 	movw	r1, #21891	; 0x5583
 8002448:	4618      	mov	r0, r3
 800244a:	f000 fd3d 	bl	8002ec8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5584, 0x80);
 800244e:	88fb      	ldrh	r3, [r7, #6]
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2280      	movs	r2, #128	; 0x80
 8002454:	f245 5184 	movw	r1, #21892	; 0x5584
 8002458:	4618      	mov	r0, r3
 800245a:	f000 fd35 	bl	8002ec8 <CAMERA_IO_Write>
    break;
 800245e:	e0ad      	b.n	80025bc <OV5640_SetEffect+0x358>

  case OV5640_COLOR_EFFECT_SEPIA:
    CAMERA_IO_Write(DeviceAddr, 0x5001, 0xFF);
 8002460:	88fb      	ldrh	r3, [r7, #6]
 8002462:	b2db      	uxtb	r3, r3
 8002464:	22ff      	movs	r2, #255	; 0xff
 8002466:	f245 0101 	movw	r1, #20481	; 0x5001
 800246a:	4618      	mov	r0, r3
 800246c:	f000 fd2c 	bl	8002ec8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5580, 0x18);
 8002470:	88fb      	ldrh	r3, [r7, #6]
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2218      	movs	r2, #24
 8002476:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800247a:	4618      	mov	r0, r3
 800247c:	f000 fd24 	bl	8002ec8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5583, 0x40);
 8002480:	88fb      	ldrh	r3, [r7, #6]
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2240      	movs	r2, #64	; 0x40
 8002486:	f245 5183 	movw	r1, #21891	; 0x5583
 800248a:	4618      	mov	r0, r3
 800248c:	f000 fd1c 	bl	8002ec8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5584, 0xA0);
 8002490:	88fb      	ldrh	r3, [r7, #6]
 8002492:	b2db      	uxtb	r3, r3
 8002494:	22a0      	movs	r2, #160	; 0xa0
 8002496:	f245 5184 	movw	r1, #21892	; 0x5584
 800249a:	4618      	mov	r0, r3
 800249c:	f000 fd14 	bl	8002ec8 <CAMERA_IO_Write>
    break;
 80024a0:	e08c      	b.n	80025bc <OV5640_SetEffect+0x358>

  case OV5640_COLOR_EFFECT_NEGATIVE:
    CAMERA_IO_Write(DeviceAddr, 0x5001, 0xFF);
 80024a2:	88fb      	ldrh	r3, [r7, #6]
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	22ff      	movs	r2, #255	; 0xff
 80024a8:	f245 0101 	movw	r1, #20481	; 0x5001
 80024ac:	4618      	mov	r0, r3
 80024ae:	f000 fd0b 	bl	8002ec8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5580, 0x40);
 80024b2:	88fb      	ldrh	r3, [r7, #6]
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2240      	movs	r2, #64	; 0x40
 80024b8:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80024bc:	4618      	mov	r0, r3
 80024be:	f000 fd03 	bl	8002ec8 <CAMERA_IO_Write>
    break;
 80024c2:	e07b      	b.n	80025bc <OV5640_SetEffect+0x358>

  case OV5640_COLOR_EFFECT_BW_NEGATIVE:
    CAMERA_IO_Write(DeviceAddr, 0x5001, 0xFF);
 80024c4:	88fb      	ldrh	r3, [r7, #6]
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	22ff      	movs	r2, #255	; 0xff
 80024ca:	f245 0101 	movw	r1, #20481	; 0x5001
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 fcfa 	bl	8002ec8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5580, 0x58);
 80024d4:	88fb      	ldrh	r3, [r7, #6]
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2258      	movs	r2, #88	; 0x58
 80024da:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80024de:	4618      	mov	r0, r3
 80024e0:	f000 fcf2 	bl	8002ec8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5583, 0x40);
 80024e4:	88fb      	ldrh	r3, [r7, #6]
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2240      	movs	r2, #64	; 0x40
 80024ea:	f245 5183 	movw	r1, #21891	; 0x5583
 80024ee:	4618      	mov	r0, r3
 80024f0:	f000 fcea 	bl	8002ec8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5584, 0x40);
 80024f4:	88fb      	ldrh	r3, [r7, #6]
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2240      	movs	r2, #64	; 0x40
 80024fa:	f245 5184 	movw	r1, #21892	; 0x5584
 80024fe:	4618      	mov	r0, r3
 8002500:	f000 fce2 	bl	8002ec8 <CAMERA_IO_Write>
    break;
 8002504:	e05a      	b.n	80025bc <OV5640_SetEffect+0x358>

  case OV5640_COLOR_EFFECT_OVEREXPOSURE:
    CAMERA_IO_Write(DeviceAddr, 0x5001, 0xFF);
 8002506:	88fb      	ldrh	r3, [r7, #6]
 8002508:	b2db      	uxtb	r3, r3
 800250a:	22ff      	movs	r2, #255	; 0xff
 800250c:	f245 0101 	movw	r1, #20481	; 0x5001
 8002510:	4618      	mov	r0, r3
 8002512:	f000 fcd9 	bl	8002ec8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5580, 0x18);
 8002516:	88fb      	ldrh	r3, [r7, #6]
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2218      	movs	r2, #24
 800251c:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002520:	4618      	mov	r0, r3
 8002522:	f000 fcd1 	bl	8002ec8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5583, 0xF0);
 8002526:	88fb      	ldrh	r3, [r7, #6]
 8002528:	b2db      	uxtb	r3, r3
 800252a:	22f0      	movs	r2, #240	; 0xf0
 800252c:	f245 5183 	movw	r1, #21891	; 0x5583
 8002530:	4618      	mov	r0, r3
 8002532:	f000 fcc9 	bl	8002ec8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5584, 0xF0);
 8002536:	88fb      	ldrh	r3, [r7, #6]
 8002538:	b2db      	uxtb	r3, r3
 800253a:	22f0      	movs	r2, #240	; 0xf0
 800253c:	f245 5184 	movw	r1, #21892	; 0x5584
 8002540:	4618      	mov	r0, r3
 8002542:	f000 fcc1 	bl	8002ec8 <CAMERA_IO_Write>
    break;
 8002546:	e039      	b.n	80025bc <OV5640_SetEffect+0x358>

  case OV5640_COLOR_EFFECT_SOLARIZE:
    CAMERA_IO_Write(DeviceAddr, 0x5001, 0xFF);
 8002548:	88fb      	ldrh	r3, [r7, #6]
 800254a:	b2db      	uxtb	r3, r3
 800254c:	22ff      	movs	r2, #255	; 0xff
 800254e:	f245 0101 	movw	r1, #20481	; 0x5001
 8002552:	4618      	mov	r0, r3
 8002554:	f000 fcb8 	bl	8002ec8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5580, 0x06);
 8002558:	88fb      	ldrh	r3, [r7, #6]
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2206      	movs	r2, #6
 800255e:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002562:	4618      	mov	r0, r3
 8002564:	f000 fcb0 	bl	8002ec8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5583, 0x40);
 8002568:	88fb      	ldrh	r3, [r7, #6]
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2240      	movs	r2, #64	; 0x40
 800256e:	f245 5183 	movw	r1, #21891	; 0x5583
 8002572:	4618      	mov	r0, r3
 8002574:	f000 fca8 	bl	8002ec8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5584, 0x10);
 8002578:	88fb      	ldrh	r3, [r7, #6]
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2210      	movs	r2, #16
 800257e:	f245 5184 	movw	r1, #21892	; 0x5584
 8002582:	4618      	mov	r0, r3
 8002584:	f000 fca0 	bl	8002ec8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5003, 0x09);
 8002588:	88fb      	ldrh	r3, [r7, #6]
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2209      	movs	r2, #9
 800258e:	f245 0103 	movw	r1, #20483	; 0x5003
 8002592:	4618      	mov	r0, r3
 8002594:	f000 fc98 	bl	8002ec8 <CAMERA_IO_Write>
    break;
 8002598:	e010      	b.n	80025bc <OV5640_SetEffect+0x358>

  default :
    /* No effect */
    CAMERA_IO_Write(DeviceAddr, 0x5001, 0x7F);
 800259a:	88fb      	ldrh	r3, [r7, #6]
 800259c:	b2db      	uxtb	r3, r3
 800259e:	227f      	movs	r2, #127	; 0x7f
 80025a0:	f245 0101 	movw	r1, #20481	; 0x5001
 80025a4:	4618      	mov	r0, r3
 80025a6:	f000 fc8f 	bl	8002ec8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5580, 0x00);
 80025aa:	88fb      	ldrh	r3, [r7, #6]
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2200      	movs	r2, #0
 80025b0:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80025b4:	4618      	mov	r0, r3
 80025b6:	f000 fc87 	bl	8002ec8 <CAMERA_IO_Write>
    break;
 80025ba:	bf00      	nop
  }
}
 80025bc:	bf00      	nop
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <OV5640_SetBrightness>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  Level: Value to be configured
  * @retval None
  */
void OV5640_SetBrightness(uint16_t DeviceAddr, uint8_t Level)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4603      	mov	r3, r0
 80025cc:	460a      	mov	r2, r1
 80025ce:	80fb      	strh	r3, [r7, #6]
 80025d0:	4613      	mov	r3, r2
 80025d2:	717b      	strb	r3, [r7, #5]
  CAMERA_IO_Write(DeviceAddr, 0x5001, 0xFF);
 80025d4:	88fb      	ldrh	r3, [r7, #6]
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	22ff      	movs	r2, #255	; 0xff
 80025da:	f245 0101 	movw	r1, #20481	; 0x5001
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 fc72 	bl	8002ec8 <CAMERA_IO_Write>

  switch(Level)
 80025e4:	797b      	ldrb	r3, [r7, #5]
 80025e6:	2b80      	cmp	r3, #128	; 0x80
 80025e8:	f000 809b 	beq.w	8002722 <OV5640_SetBrightness+0x15e>
 80025ec:	2b80      	cmp	r3, #128	; 0x80
 80025ee:	f300 80a1 	bgt.w	8002734 <OV5640_SetBrightness+0x170>
 80025f2:	2b20      	cmp	r3, #32
 80025f4:	dc4a      	bgt.n	800268c <OV5640_SetBrightness+0xc8>
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f2c0 809c 	blt.w	8002734 <OV5640_SetBrightness+0x170>
 80025fc:	2b20      	cmp	r3, #32
 80025fe:	f200 8099 	bhi.w	8002734 <OV5640_SetBrightness+0x170>
 8002602:	a201      	add	r2, pc, #4	; (adr r2, 8002608 <OV5640_SetBrightness+0x44>)
 8002604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002608:	08002693 	.word	0x08002693
 800260c:	080026a5 	.word	0x080026a5
 8002610:	080026b7 	.word	0x080026b7
 8002614:	08002735 	.word	0x08002735
 8002618:	080026c9 	.word	0x080026c9
 800261c:	08002735 	.word	0x08002735
 8002620:	08002735 	.word	0x08002735
 8002624:	08002735 	.word	0x08002735
 8002628:	080026db 	.word	0x080026db
 800262c:	08002735 	.word	0x08002735
 8002630:	08002735 	.word	0x08002735
 8002634:	08002735 	.word	0x08002735
 8002638:	08002735 	.word	0x08002735
 800263c:	08002735 	.word	0x08002735
 8002640:	08002735 	.word	0x08002735
 8002644:	08002735 	.word	0x08002735
 8002648:	080026ed 	.word	0x080026ed
 800264c:	08002735 	.word	0x08002735
 8002650:	08002735 	.word	0x08002735
 8002654:	08002735 	.word	0x08002735
 8002658:	08002735 	.word	0x08002735
 800265c:	08002735 	.word	0x08002735
 8002660:	08002735 	.word	0x08002735
 8002664:	08002735 	.word	0x08002735
 8002668:	08002735 	.word	0x08002735
 800266c:	08002735 	.word	0x08002735
 8002670:	08002735 	.word	0x08002735
 8002674:	08002735 	.word	0x08002735
 8002678:	08002735 	.word	0x08002735
 800267c:	08002735 	.word	0x08002735
 8002680:	08002735 	.word	0x08002735
 8002684:	08002735 	.word	0x08002735
 8002688:	080026ff 	.word	0x080026ff
 800268c:	2b40      	cmp	r3, #64	; 0x40
 800268e:	d03f      	beq.n	8002710 <OV5640_SetBrightness+0x14c>
 8002690:	e050      	b.n	8002734 <OV5640_SetBrightness+0x170>
  {
  case OV5640_BRIGHTNESS_LEVEL4P:
    CAMERA_IO_Write(DeviceAddr, 0x5587, 0x40);
 8002692:	88fb      	ldrh	r3, [r7, #6]
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2240      	movs	r2, #64	; 0x40
 8002698:	f245 5187 	movw	r1, #21895	; 0x5587
 800269c:	4618      	mov	r0, r3
 800269e:	f000 fc13 	bl	8002ec8 <CAMERA_IO_Write>
    break;
 80026a2:	e052      	b.n	800274a <OV5640_SetBrightness+0x186>

  case OV5640_BRIGHTNESS_LEVEL3P:
    CAMERA_IO_Write(DeviceAddr, 0x5587, 0x30);
 80026a4:	88fb      	ldrh	r3, [r7, #6]
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2230      	movs	r2, #48	; 0x30
 80026aa:	f245 5187 	movw	r1, #21895	; 0x5587
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 fc0a 	bl	8002ec8 <CAMERA_IO_Write>
    break;
 80026b4:	e049      	b.n	800274a <OV5640_SetBrightness+0x186>

  case OV5640_BRIGHTNESS_LEVEL2P:
    CAMERA_IO_Write(DeviceAddr, 0x5587, 0x20);
 80026b6:	88fb      	ldrh	r3, [r7, #6]
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2220      	movs	r2, #32
 80026bc:	f245 5187 	movw	r1, #21895	; 0x5587
 80026c0:	4618      	mov	r0, r3
 80026c2:	f000 fc01 	bl	8002ec8 <CAMERA_IO_Write>
    break;
 80026c6:	e040      	b.n	800274a <OV5640_SetBrightness+0x186>

  case OV5640_BRIGHTNESS_LEVEL1P:
    CAMERA_IO_Write(DeviceAddr, 0x5587, 0x10);
 80026c8:	88fb      	ldrh	r3, [r7, #6]
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	2210      	movs	r2, #16
 80026ce:	f245 5187 	movw	r1, #21895	; 0x5587
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 fbf8 	bl	8002ec8 <CAMERA_IO_Write>
    break;
 80026d8:	e037      	b.n	800274a <OV5640_SetBrightness+0x186>

  case OV5640_BRIGHTNESS_LEVEL0:
    CAMERA_IO_Write(DeviceAddr, 0x5587, 0x00);
 80026da:	88fb      	ldrh	r3, [r7, #6]
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2200      	movs	r2, #0
 80026e0:	f245 5187 	movw	r1, #21895	; 0x5587
 80026e4:	4618      	mov	r0, r3
 80026e6:	f000 fbef 	bl	8002ec8 <CAMERA_IO_Write>
    break;
 80026ea:	e02e      	b.n	800274a <OV5640_SetBrightness+0x186>

  case OV5640_BRIGHTNESS_LEVEL1N:
    CAMERA_IO_Write(DeviceAddr, 0x5587, 0x10);
 80026ec:	88fb      	ldrh	r3, [r7, #6]
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2210      	movs	r2, #16
 80026f2:	f245 5187 	movw	r1, #21895	; 0x5587
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 fbe6 	bl	8002ec8 <CAMERA_IO_Write>
    break;
 80026fc:	e025      	b.n	800274a <OV5640_SetBrightness+0x186>

  case OV5640_BRIGHTNESS_LEVEL2N:
    CAMERA_IO_Write(DeviceAddr, 0x5587, 0x20);
 80026fe:	88fb      	ldrh	r3, [r7, #6]
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2220      	movs	r2, #32
 8002704:	f245 5187 	movw	r1, #21895	; 0x5587
 8002708:	4618      	mov	r0, r3
 800270a:	f000 fbdd 	bl	8002ec8 <CAMERA_IO_Write>
    break;
 800270e:	e01c      	b.n	800274a <OV5640_SetBrightness+0x186>

  case OV5640_BRIGHTNESS_LEVEL3N:
    CAMERA_IO_Write(DeviceAddr, 0x5587, 0x30);
 8002710:	88fb      	ldrh	r3, [r7, #6]
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2230      	movs	r2, #48	; 0x30
 8002716:	f245 5187 	movw	r1, #21895	; 0x5587
 800271a:	4618      	mov	r0, r3
 800271c:	f000 fbd4 	bl	8002ec8 <CAMERA_IO_Write>
    break;
 8002720:	e013      	b.n	800274a <OV5640_SetBrightness+0x186>

  case OV5640_BRIGHTNESS_LEVEL4N:
    CAMERA_IO_Write(DeviceAddr, 0x5587, 0x40);
 8002722:	88fb      	ldrh	r3, [r7, #6]
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2240      	movs	r2, #64	; 0x40
 8002728:	f245 5187 	movw	r1, #21895	; 0x5587
 800272c:	4618      	mov	r0, r3
 800272e:	f000 fbcb 	bl	8002ec8 <CAMERA_IO_Write>
    break;
 8002732:	e00a      	b.n	800274a <OV5640_SetBrightness+0x186>

  default:
    /* Level 0 as default */
    Level = OV5640_BRIGHTNESS_LEVEL0;
 8002734:	2308      	movs	r3, #8
 8002736:	717b      	strb	r3, [r7, #5]
    CAMERA_IO_Write(DeviceAddr, 0x5587, 0x00);
 8002738:	88fb      	ldrh	r3, [r7, #6]
 800273a:	b2db      	uxtb	r3, r3
 800273c:	2200      	movs	r2, #0
 800273e:	f245 5187 	movw	r1, #21895	; 0x5587
 8002742:	4618      	mov	r0, r3
 8002744:	f000 fbc0 	bl	8002ec8 <CAMERA_IO_Write>
    break;
 8002748:	bf00      	nop
  }

  CAMERA_IO_Write(DeviceAddr, 0x5580, 0x04);
 800274a:	88fb      	ldrh	r3, [r7, #6]
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2204      	movs	r2, #4
 8002750:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002754:	4618      	mov	r0, r3
 8002756:	f000 fbb7 	bl	8002ec8 <CAMERA_IO_Write>

  if(Level < OV5640_SATURATION_LEVEL1N)
 800275a:	797b      	ldrb	r3, [r7, #5]
 800275c:	2b0f      	cmp	r3, #15
 800275e:	d808      	bhi.n	8002772 <OV5640_SetBrightness+0x1ae>
  {
    CAMERA_IO_Write(DeviceAddr, 0x5588, 0x01);
 8002760:	88fb      	ldrh	r3, [r7, #6]
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2201      	movs	r2, #1
 8002766:	f245 5188 	movw	r1, #21896	; 0x5588
 800276a:	4618      	mov	r0, r3
 800276c:	f000 fbac 	bl	8002ec8 <CAMERA_IO_Write>
  }
  else
  {
    CAMERA_IO_Write(DeviceAddr, 0x5588, 0x09);
  }
}
 8002770:	e007      	b.n	8002782 <OV5640_SetBrightness+0x1be>
    CAMERA_IO_Write(DeviceAddr, 0x5588, 0x09);
 8002772:	88fb      	ldrh	r3, [r7, #6]
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2209      	movs	r2, #9
 8002778:	f245 5188 	movw	r1, #21896	; 0x5588
 800277c:	4618      	mov	r0, r3
 800277e:	f000 fba3 	bl	8002ec8 <CAMERA_IO_Write>
}
 8002782:	bf00      	nop
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop

0800278c <OV5640_SetContrast>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  Level: Value to be configured
  * @retval None
  */
void OV5640_SetContrast(uint16_t DeviceAddr, uint8_t Level)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	460a      	mov	r2, r1
 8002796:	80fb      	strh	r3, [r7, #6]
 8002798:	4613      	mov	r3, r2
 800279a:	717b      	strb	r3, [r7, #5]
  CAMERA_IO_Write(DeviceAddr, 0x5001, 0xFF);
 800279c:	88fb      	ldrh	r3, [r7, #6]
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	22ff      	movs	r2, #255	; 0xff
 80027a2:	f245 0101 	movw	r1, #20481	; 0x5001
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 fb8e 	bl	8002ec8 <CAMERA_IO_Write>
  CAMERA_IO_Write(DeviceAddr, 0x5580, 0x04);
 80027ac:	88fb      	ldrh	r3, [r7, #6]
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2204      	movs	r2, #4
 80027b2:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80027b6:	4618      	mov	r0, r3
 80027b8:	f000 fb86 	bl	8002ec8 <CAMERA_IO_Write>

  switch(Level)
 80027bc:	797b      	ldrb	r3, [r7, #5]
 80027be:	2b80      	cmp	r3, #128	; 0x80
 80027c0:	f000 80db 	beq.w	800297a <OV5640_SetContrast+0x1ee>
 80027c4:	2b80      	cmp	r3, #128	; 0x80
 80027c6:	f300 80e9 	bgt.w	800299c <OV5640_SetContrast+0x210>
 80027ca:	2b20      	cmp	r3, #32
 80027cc:	dc4a      	bgt.n	8002864 <OV5640_SetContrast+0xd8>
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f2c0 80e4 	blt.w	800299c <OV5640_SetContrast+0x210>
 80027d4:	2b20      	cmp	r3, #32
 80027d6:	f200 80e1 	bhi.w	800299c <OV5640_SetContrast+0x210>
 80027da:	a201      	add	r2, pc, #4	; (adr r2, 80027e0 <OV5640_SetContrast+0x54>)
 80027dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e0:	0800286b 	.word	0x0800286b
 80027e4:	0800288d 	.word	0x0800288d
 80027e8:	080028af 	.word	0x080028af
 80027ec:	0800299d 	.word	0x0800299d
 80027f0:	080028d1 	.word	0x080028d1
 80027f4:	0800299d 	.word	0x0800299d
 80027f8:	0800299d 	.word	0x0800299d
 80027fc:	0800299d 	.word	0x0800299d
 8002800:	080028f3 	.word	0x080028f3
 8002804:	0800299d 	.word	0x0800299d
 8002808:	0800299d 	.word	0x0800299d
 800280c:	0800299d 	.word	0x0800299d
 8002810:	0800299d 	.word	0x0800299d
 8002814:	0800299d 	.word	0x0800299d
 8002818:	0800299d 	.word	0x0800299d
 800281c:	0800299d 	.word	0x0800299d
 8002820:	08002915 	.word	0x08002915
 8002824:	0800299d 	.word	0x0800299d
 8002828:	0800299d 	.word	0x0800299d
 800282c:	0800299d 	.word	0x0800299d
 8002830:	0800299d 	.word	0x0800299d
 8002834:	0800299d 	.word	0x0800299d
 8002838:	0800299d 	.word	0x0800299d
 800283c:	0800299d 	.word	0x0800299d
 8002840:	0800299d 	.word	0x0800299d
 8002844:	0800299d 	.word	0x0800299d
 8002848:	0800299d 	.word	0x0800299d
 800284c:	0800299d 	.word	0x0800299d
 8002850:	0800299d 	.word	0x0800299d
 8002854:	0800299d 	.word	0x0800299d
 8002858:	0800299d 	.word	0x0800299d
 800285c:	0800299d 	.word	0x0800299d
 8002860:	08002937 	.word	0x08002937
 8002864:	2b40      	cmp	r3, #64	; 0x40
 8002866:	d077      	beq.n	8002958 <OV5640_SetContrast+0x1cc>
 8002868:	e098      	b.n	800299c <OV5640_SetContrast+0x210>
  {
  case OV5640_CONTRAST_LEVEL4P:
    CAMERA_IO_Write(DeviceAddr, 0x5586, 0x30);
 800286a:	88fb      	ldrh	r3, [r7, #6]
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2230      	movs	r2, #48	; 0x30
 8002870:	f245 5186 	movw	r1, #21894	; 0x5586
 8002874:	4618      	mov	r0, r3
 8002876:	f000 fb27 	bl	8002ec8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5585, 0x30);
 800287a:	88fb      	ldrh	r3, [r7, #6]
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2230      	movs	r2, #48	; 0x30
 8002880:	f245 5185 	movw	r1, #21893	; 0x5585
 8002884:	4618      	mov	r0, r3
 8002886:	f000 fb1f 	bl	8002ec8 <CAMERA_IO_Write>
    break;
 800288a:	e098      	b.n	80029be <OV5640_SetContrast+0x232>

  case OV5640_CONTRAST_LEVEL3P:
    CAMERA_IO_Write(DeviceAddr, 0x5586, 0x2C);
 800288c:	88fb      	ldrh	r3, [r7, #6]
 800288e:	b2db      	uxtb	r3, r3
 8002890:	222c      	movs	r2, #44	; 0x2c
 8002892:	f245 5186 	movw	r1, #21894	; 0x5586
 8002896:	4618      	mov	r0, r3
 8002898:	f000 fb16 	bl	8002ec8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5585, 0x2C);
 800289c:	88fb      	ldrh	r3, [r7, #6]
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	222c      	movs	r2, #44	; 0x2c
 80028a2:	f245 5185 	movw	r1, #21893	; 0x5585
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 fb0e 	bl	8002ec8 <CAMERA_IO_Write>
    break;
 80028ac:	e087      	b.n	80029be <OV5640_SetContrast+0x232>

  case OV5640_CONTRAST_LEVEL2P:
    CAMERA_IO_Write(DeviceAddr, 0x5586, 0x28);
 80028ae:	88fb      	ldrh	r3, [r7, #6]
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2228      	movs	r2, #40	; 0x28
 80028b4:	f245 5186 	movw	r1, #21894	; 0x5586
 80028b8:	4618      	mov	r0, r3
 80028ba:	f000 fb05 	bl	8002ec8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5585, 0x28);
 80028be:	88fb      	ldrh	r3, [r7, #6]
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2228      	movs	r2, #40	; 0x28
 80028c4:	f245 5185 	movw	r1, #21893	; 0x5585
 80028c8:	4618      	mov	r0, r3
 80028ca:	f000 fafd 	bl	8002ec8 <CAMERA_IO_Write>
    break;
 80028ce:	e076      	b.n	80029be <OV5640_SetContrast+0x232>

  case OV5640_CONTRAST_LEVEL1P:
    CAMERA_IO_Write(DeviceAddr, 0x5586, 0x24);
 80028d0:	88fb      	ldrh	r3, [r7, #6]
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2224      	movs	r2, #36	; 0x24
 80028d6:	f245 5186 	movw	r1, #21894	; 0x5586
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 faf4 	bl	8002ec8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5585, 0x24);
 80028e0:	88fb      	ldrh	r3, [r7, #6]
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2224      	movs	r2, #36	; 0x24
 80028e6:	f245 5185 	movw	r1, #21893	; 0x5585
 80028ea:	4618      	mov	r0, r3
 80028ec:	f000 faec 	bl	8002ec8 <CAMERA_IO_Write>
    break;
 80028f0:	e065      	b.n	80029be <OV5640_SetContrast+0x232>

  case OV5640_CONTRAST_LEVEL0:
    CAMERA_IO_Write(DeviceAddr, 0x5586, 0x20);
 80028f2:	88fb      	ldrh	r3, [r7, #6]
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2220      	movs	r2, #32
 80028f8:	f245 5186 	movw	r1, #21894	; 0x5586
 80028fc:	4618      	mov	r0, r3
 80028fe:	f000 fae3 	bl	8002ec8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5585, 0x20);
 8002902:	88fb      	ldrh	r3, [r7, #6]
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2220      	movs	r2, #32
 8002908:	f245 5185 	movw	r1, #21893	; 0x5585
 800290c:	4618      	mov	r0, r3
 800290e:	f000 fadb 	bl	8002ec8 <CAMERA_IO_Write>
    break;
 8002912:	e054      	b.n	80029be <OV5640_SetContrast+0x232>

  case OV5640_CONTRAST_LEVEL1N:
    CAMERA_IO_Write(DeviceAddr, 0x5586, 0x1C);
 8002914:	88fb      	ldrh	r3, [r7, #6]
 8002916:	b2db      	uxtb	r3, r3
 8002918:	221c      	movs	r2, #28
 800291a:	f245 5186 	movw	r1, #21894	; 0x5586
 800291e:	4618      	mov	r0, r3
 8002920:	f000 fad2 	bl	8002ec8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5585, 0x1C);
 8002924:	88fb      	ldrh	r3, [r7, #6]
 8002926:	b2db      	uxtb	r3, r3
 8002928:	221c      	movs	r2, #28
 800292a:	f245 5185 	movw	r1, #21893	; 0x5585
 800292e:	4618      	mov	r0, r3
 8002930:	f000 faca 	bl	8002ec8 <CAMERA_IO_Write>
    break;
 8002934:	e043      	b.n	80029be <OV5640_SetContrast+0x232>

  case OV5640_CONTRAST_LEVEL2N:
    CAMERA_IO_Write(DeviceAddr, 0x5586, 0x18);
 8002936:	88fb      	ldrh	r3, [r7, #6]
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2218      	movs	r2, #24
 800293c:	f245 5186 	movw	r1, #21894	; 0x5586
 8002940:	4618      	mov	r0, r3
 8002942:	f000 fac1 	bl	8002ec8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5585, 0x18);
 8002946:	88fb      	ldrh	r3, [r7, #6]
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2218      	movs	r2, #24
 800294c:	f245 5185 	movw	r1, #21893	; 0x5585
 8002950:	4618      	mov	r0, r3
 8002952:	f000 fab9 	bl	8002ec8 <CAMERA_IO_Write>
    break;
 8002956:	e032      	b.n	80029be <OV5640_SetContrast+0x232>

  case OV5640_CONTRAST_LEVEL3N:
    CAMERA_IO_Write(DeviceAddr, 0x5586, 0x14);
 8002958:	88fb      	ldrh	r3, [r7, #6]
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2214      	movs	r2, #20
 800295e:	f245 5186 	movw	r1, #21894	; 0x5586
 8002962:	4618      	mov	r0, r3
 8002964:	f000 fab0 	bl	8002ec8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5585, 0x14);
 8002968:	88fb      	ldrh	r3, [r7, #6]
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2214      	movs	r2, #20
 800296e:	f245 5185 	movw	r1, #21893	; 0x5585
 8002972:	4618      	mov	r0, r3
 8002974:	f000 faa8 	bl	8002ec8 <CAMERA_IO_Write>
    break;
 8002978:	e021      	b.n	80029be <OV5640_SetContrast+0x232>

  case OV5640_CONTRAST_LEVEL4N:
    CAMERA_IO_Write(DeviceAddr, 0x5586, 0x10);
 800297a:	88fb      	ldrh	r3, [r7, #6]
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2210      	movs	r2, #16
 8002980:	f245 5186 	movw	r1, #21894	; 0x5586
 8002984:	4618      	mov	r0, r3
 8002986:	f000 fa9f 	bl	8002ec8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5585, 0x10);
 800298a:	88fb      	ldrh	r3, [r7, #6]
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2210      	movs	r2, #16
 8002990:	f245 5185 	movw	r1, #21893	; 0x5585
 8002994:	4618      	mov	r0, r3
 8002996:	f000 fa97 	bl	8002ec8 <CAMERA_IO_Write>
    break;
 800299a:	e010      	b.n	80029be <OV5640_SetContrast+0x232>

  default:
    /* Level 0 as default */
    CAMERA_IO_Write(DeviceAddr, 0x5586, 0x20);
 800299c:	88fb      	ldrh	r3, [r7, #6]
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2220      	movs	r2, #32
 80029a2:	f245 5186 	movw	r1, #21894	; 0x5586
 80029a6:	4618      	mov	r0, r3
 80029a8:	f000 fa8e 	bl	8002ec8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5585, 0x20);
 80029ac:	88fb      	ldrh	r3, [r7, #6]
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2220      	movs	r2, #32
 80029b2:	f245 5185 	movw	r1, #21893	; 0x5585
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 fa86 	bl	8002ec8 <CAMERA_IO_Write>
    break;
 80029bc:	bf00      	nop
  }

  CAMERA_IO_Write(DeviceAddr, 0x5588, 0x41);
 80029be:	88fb      	ldrh	r3, [r7, #6]
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2241      	movs	r2, #65	; 0x41
 80029c4:	f245 5188 	movw	r1, #21896	; 0x5588
 80029c8:	4618      	mov	r0, r3
 80029ca:	f000 fa7d 	bl	8002ec8 <CAMERA_IO_Write>
}
 80029ce:	bf00      	nop
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop

080029d8 <ov5640_Config>:
  * @param  value: Value to be configured
  * @param  brightness_value: Brightness value to be configured
  * @retval None
  */
void ov5640_Config(uint16_t DeviceAddr, uint32_t feature, uint32_t value, uint32_t brightness_value)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	607a      	str	r2, [r7, #4]
 80029e2:	603b      	str	r3, [r7, #0]
 80029e4:	4603      	mov	r3, r0
 80029e6:	81fb      	strh	r3, [r7, #14]
  uint32_t value_tmp;
  uint32_t br_value;

  /* Convert the input value into ov5640 parameters */
  value_tmp = ov5640_ConvertValue(feature, value);
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	68b8      	ldr	r0, [r7, #8]
 80029ec:	f000 f860 	bl	8002ab0 <ov5640_ConvertValue>
 80029f0:	6178      	str	r0, [r7, #20]
  br_value = ov5640_ConvertValue(CAMERA_CONTRAST_BRIGHTNESS, brightness_value);
 80029f2:	6839      	ldr	r1, [r7, #0]
 80029f4:	2000      	movs	r0, #0
 80029f6:	f000 f85b 	bl	8002ab0 <ov5640_ConvertValue>
 80029fa:	6138      	str	r0, [r7, #16]

  switch(feature)
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	2b03      	cmp	r3, #3
 8002a00:	d018      	beq.n	8002a34 <ov5640_Config+0x5c>
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	2b03      	cmp	r3, #3
 8002a06:	d81b      	bhi.n	8002a40 <ov5640_Config+0x68>
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <ov5640_Config+0x3e>
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d00f      	beq.n	8002a34 <ov5640_Config+0x5c>
      OV5640_SetEffect(DeviceAddr, value_tmp);
      break;
    }
  default:
    {
      break;
 8002a14:	e014      	b.n	8002a40 <ov5640_Config+0x68>
      OV5640_SetContrast(DeviceAddr, value_tmp);
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	b2da      	uxtb	r2, r3
 8002a1a:	89fb      	ldrh	r3, [r7, #14]
 8002a1c:	4611      	mov	r1, r2
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff feb4 	bl	800278c <OV5640_SetContrast>
      OV5640_SetBrightness(DeviceAddr, br_value);   
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	b2da      	uxtb	r2, r3
 8002a28:	89fb      	ldrh	r3, [r7, #14]
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff fdc9 	bl	80025c4 <OV5640_SetBrightness>
      break;
 8002a32:	e006      	b.n	8002a42 <ov5640_Config+0x6a>
      OV5640_SetEffect(DeviceAddr, value_tmp);
 8002a34:	89fb      	ldrh	r3, [r7, #14]
 8002a36:	6979      	ldr	r1, [r7, #20]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff fc13 	bl	8002264 <OV5640_SetEffect>
      break;
 8002a3e:	e000      	b.n	8002a42 <ov5640_Config+0x6a>
      break;
 8002a40:	bf00      	nop
    }
  }
}
 8002a42:	bf00      	nop
 8002a44:	3718      	adds	r7, #24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <ov5640_ReadID>:
  * @brief  Read the OV5640 Camera identity.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval the OV5640 ID
  */
uint16_t ov5640_ReadID(uint16_t DeviceAddr)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b084      	sub	sp, #16
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	4603      	mov	r3, r0
 8002a52:	80fb      	strh	r3, [r7, #6]
  uint16_t read_val = 0;
 8002a54:	2300      	movs	r3, #0
 8002a56:	81fb      	strh	r3, [r7, #14]

  /* Initialize I2C */
  CAMERA_IO_Init();
 8002a58:	f000 fa2c 	bl	8002eb4 <CAMERA_IO_Init>

  /* Prepare the camera to be configured */
  CAMERA_IO_Write(DeviceAddr, 0x3008, 0x80);
 8002a5c:	88fb      	ldrh	r3, [r7, #6]
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2280      	movs	r2, #128	; 0x80
 8002a62:	f243 0108 	movw	r1, #12296	; 0x3008
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 fa2e 	bl	8002ec8 <CAMERA_IO_Write>
  CAMERA_Delay(500);
 8002a6c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a70:	f000 fa62 	bl	8002f38 <CAMERA_Delay>

  read_val = CAMERA_IO_Read(DeviceAddr, 0x300A);
 8002a74:	88fb      	ldrh	r3, [r7, #6]
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	f243 010a 	movw	r1, #12298	; 0x300a
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f000 fa3d 	bl	8002efc <CAMERA_IO_Read>
 8002a82:	4603      	mov	r3, r0
 8002a84:	81fb      	strh	r3, [r7, #14]
  read_val = read_val << 8;
 8002a86:	89fb      	ldrh	r3, [r7, #14]
 8002a88:	021b      	lsls	r3, r3, #8
 8002a8a:	81fb      	strh	r3, [r7, #14]
  read_val |= CAMERA_IO_Read(DeviceAddr, 0x300B);
 8002a8c:	88fb      	ldrh	r3, [r7, #6]
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	f243 010b 	movw	r1, #12299	; 0x300b
 8002a94:	4618      	mov	r0, r3
 8002a96:	f000 fa31 	bl	8002efc <CAMERA_IO_Read>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	89fb      	ldrh	r3, [r7, #14]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	81fb      	strh	r3, [r7, #14]
  /* Get the camera ID */
  return read_val;
 8002aa4:	89fb      	ldrh	r3, [r7, #14]
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
	...

08002ab0 <ov5640_ConvertValue>:
  * @param  feature: Camera feature to be configured
  * @param  value: Value to be configured
  * @retval The converted value
  */
static uint32_t ov5640_ConvertValue(uint32_t feature, uint32_t value)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8002aba:	2300      	movs	r3, #0
 8002abc:	60fb      	str	r3, [r7, #12]

  switch(feature)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2b03      	cmp	r3, #3
 8002ac2:	d05f      	beq.n	8002b84 <ov5640_ConvertValue+0xd4>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b03      	cmp	r3, #3
 8002ac8:	d87c      	bhi.n	8002bc4 <ov5640_ConvertValue+0x114>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d01c      	beq.n	8002b0a <ov5640_ConvertValue+0x5a>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d176      	bne.n	8002bc4 <ov5640_ConvertValue+0x114>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d00f      	beq.n	8002afc <ov5640_ConvertValue+0x4c>
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d80f      	bhi.n	8002b02 <ov5640_ConvertValue+0x52>
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d003      	beq.n	8002af0 <ov5640_ConvertValue+0x40>
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d003      	beq.n	8002af6 <ov5640_ConvertValue+0x46>
 8002aee:	e008      	b.n	8002b02 <ov5640_ConvertValue+0x52>
    {
      switch(value)
      {
      case CAMERA_BLACK_WHITE_BW:
        {
          ret =  OV5640_COLOR_EFFECT_BW;
 8002af0:	2308      	movs	r3, #8
 8002af2:	60fb      	str	r3, [r7, #12]
          break;
 8002af4:	e008      	b.n	8002b08 <ov5640_ConvertValue+0x58>
        }
      case CAMERA_BLACK_WHITE_NEGATIVE:
        {
          ret =  OV5640_COLOR_EFFECT_NEGATIVE;
 8002af6:	2320      	movs	r3, #32
 8002af8:	60fb      	str	r3, [r7, #12]
          break;
 8002afa:	e005      	b.n	8002b08 <ov5640_ConvertValue+0x58>
        }
      case CAMERA_BLACK_WHITE_BW_NEGATIVE:
        {
          ret =  OV5640_COLOR_EFFECT_BW_NEGATIVE;
 8002afc:	2340      	movs	r3, #64	; 0x40
 8002afe:	60fb      	str	r3, [r7, #12]
          break;
 8002b00:	e002      	b.n	8002b08 <ov5640_ConvertValue+0x58>
        }
      case CAMERA_BLACK_WHITE_NORMAL:
      default:
        {
          ret =  OV5640_COLOR_EFFECT_NONE;
 8002b02:	2300      	movs	r3, #0
 8002b04:	60fb      	str	r3, [r7, #12]
          break;
 8002b06:	bf00      	nop
        }
      }
      break;
 8002b08:	e05f      	b.n	8002bca <ov5640_ConvertValue+0x11a>
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	2b09      	cmp	r3, #9
 8002b0e:	d835      	bhi.n	8002b7c <ov5640_ConvertValue+0xcc>
 8002b10:	a201      	add	r2, pc, #4	; (adr r2, 8002b18 <ov5640_ConvertValue+0x68>)
 8002b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b16:	bf00      	nop
 8002b18:	08002b41 	.word	0x08002b41
 8002b1c:	08002b47 	.word	0x08002b47
 8002b20:	08002b4d 	.word	0x08002b4d
 8002b24:	08002b53 	.word	0x08002b53
 8002b28:	08002b59 	.word	0x08002b59
 8002b2c:	08002b5f 	.word	0x08002b5f
 8002b30:	08002b65 	.word	0x08002b65
 8002b34:	08002b6b 	.word	0x08002b6b
 8002b38:	08002b71 	.word	0x08002b71
 8002b3c:	08002b77 	.word	0x08002b77
    {
      switch(value)
      {
      case CAMERA_BRIGHTNESS_LEVEL0:
        {
          ret =  OV5640_BRIGHTNESS_LEVEL4N;
 8002b40:	2380      	movs	r3, #128	; 0x80
 8002b42:	60fb      	str	r3, [r7, #12]
          break;
 8002b44:	e01d      	b.n	8002b82 <ov5640_ConvertValue+0xd2>
        }
      case CAMERA_BRIGHTNESS_LEVEL1:
        {
          ret =  OV5640_BRIGHTNESS_LEVEL2N;
 8002b46:	2320      	movs	r3, #32
 8002b48:	60fb      	str	r3, [r7, #12]
          break;
 8002b4a:	e01a      	b.n	8002b82 <ov5640_ConvertValue+0xd2>
        }
      case CAMERA_BRIGHTNESS_LEVEL2:
        {
          ret =  OV5640_BRIGHTNESS_LEVEL0;
 8002b4c:	2308      	movs	r3, #8
 8002b4e:	60fb      	str	r3, [r7, #12]
          break;
 8002b50:	e017      	b.n	8002b82 <ov5640_ConvertValue+0xd2>
        }
      case CAMERA_BRIGHTNESS_LEVEL3:
        {
          ret =  OV5640_BRIGHTNESS_LEVEL2P;
 8002b52:	2302      	movs	r3, #2
 8002b54:	60fb      	str	r3, [r7, #12]
          break;
 8002b56:	e014      	b.n	8002b82 <ov5640_ConvertValue+0xd2>
        }
      case CAMERA_BRIGHTNESS_LEVEL4:
        {
          ret =  OV5640_BRIGHTNESS_LEVEL4P;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	60fb      	str	r3, [r7, #12]
          break;
 8002b5c:	e011      	b.n	8002b82 <ov5640_ConvertValue+0xd2>
        }
      case CAMERA_CONTRAST_LEVEL0:
        {
          ret =  OV5640_CONTRAST_LEVEL4N;
 8002b5e:	2380      	movs	r3, #128	; 0x80
 8002b60:	60fb      	str	r3, [r7, #12]
          break;
 8002b62:	e00e      	b.n	8002b82 <ov5640_ConvertValue+0xd2>
        }
      case CAMERA_CONTRAST_LEVEL1:
        {
          ret =  OV5640_CONTRAST_LEVEL2N;
 8002b64:	2320      	movs	r3, #32
 8002b66:	60fb      	str	r3, [r7, #12]
          break;
 8002b68:	e00b      	b.n	8002b82 <ov5640_ConvertValue+0xd2>
        }
      case CAMERA_CONTRAST_LEVEL2:
        {
          ret =  OV5640_CONTRAST_LEVEL0;
 8002b6a:	2308      	movs	r3, #8
 8002b6c:	60fb      	str	r3, [r7, #12]
          break;
 8002b6e:	e008      	b.n	8002b82 <ov5640_ConvertValue+0xd2>
        }
      case CAMERA_CONTRAST_LEVEL3:
        {
          ret =  OV5640_CONTRAST_LEVEL2P;
 8002b70:	2302      	movs	r3, #2
 8002b72:	60fb      	str	r3, [r7, #12]
          break;
 8002b74:	e005      	b.n	8002b82 <ov5640_ConvertValue+0xd2>
        }
      case CAMERA_CONTRAST_LEVEL4:
        {
          ret =  OV5640_CONTRAST_LEVEL4P;
 8002b76:	2300      	movs	r3, #0
 8002b78:	60fb      	str	r3, [r7, #12]
          break;
 8002b7a:	e002      	b.n	8002b82 <ov5640_ConvertValue+0xd2>
        }
      default:
        {
          ret =  OV5640_CONTRAST_LEVEL0;
 8002b7c:	2308      	movs	r3, #8
 8002b7e:	60fb      	str	r3, [r7, #12]
          break;
 8002b80:	bf00      	nop
        }        
      }
      break;
 8002b82:	e022      	b.n	8002bca <ov5640_ConvertValue+0x11a>
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	3b01      	subs	r3, #1
 8002b88:	2b03      	cmp	r3, #3
 8002b8a:	d817      	bhi.n	8002bbc <ov5640_ConvertValue+0x10c>
 8002b8c:	a201      	add	r2, pc, #4	; (adr r2, 8002b94 <ov5640_ConvertValue+0xe4>)
 8002b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b92:	bf00      	nop
 8002b94:	08002bab 	.word	0x08002bab
 8002b98:	08002bb1 	.word	0x08002bb1
 8002b9c:	08002bb7 	.word	0x08002bb7
 8002ba0:	08002ba5 	.word	0x08002ba5
    {
      switch(value)
      {
      case CAMERA_COLOR_EFFECT_ANTIQUE:
        {
          ret =  OV5640_COLOR_EFFECT_SEPIA;
 8002ba4:	2310      	movs	r3, #16
 8002ba6:	60fb      	str	r3, [r7, #12]
          break;
 8002ba8:	e00b      	b.n	8002bc2 <ov5640_ConvertValue+0x112>
        }
      case CAMERA_COLOR_EFFECT_BLUE:
        {
          ret =  OV5640_COLOR_EFFECT_BLUE;
 8002baa:	2301      	movs	r3, #1
 8002bac:	60fb      	str	r3, [r7, #12]
          break;
 8002bae:	e008      	b.n	8002bc2 <ov5640_ConvertValue+0x112>
        }
      case CAMERA_COLOR_EFFECT_GREEN:
        {
          ret =  OV5640_COLOR_EFFECT_GREEN;
 8002bb0:	2304      	movs	r3, #4
 8002bb2:	60fb      	str	r3, [r7, #12]
          break;
 8002bb4:	e005      	b.n	8002bc2 <ov5640_ConvertValue+0x112>
        }
      case CAMERA_COLOR_EFFECT_RED:
        {
          ret =  OV5640_COLOR_EFFECT_RED;
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	60fb      	str	r3, [r7, #12]
          break;
 8002bba:	e002      	b.n	8002bc2 <ov5640_ConvertValue+0x112>
        }        
      case CAMERA_COLOR_EFFECT_NONE:  
      default:
        {
          ret =  OV5640_COLOR_EFFECT_NONE;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60fb      	str	r3, [r7, #12]
          break;
 8002bc0:	bf00      	nop
        }
      }
      break;
 8002bc2:	e002      	b.n	8002bca <ov5640_ConvertValue+0x11a>
    default:
      {
        ret = 0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60fb      	str	r3, [r7, #12]
        break;
 8002bc8:	bf00      	nop
      }
    }
  }

  return ret;
 8002bca:	68fb      	ldr	r3, [r7, #12]
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3714      	adds	r7, #20
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <BSP_LED_On>:
  *          This parameter can be one of the following values:
  *            @arg  LED1
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	4603      	mov	r3, r0
 8002be0:	71fb      	strb	r3, [r7, #7]
  GPIO_TypeDef*     gpio_led;

  if (Led == LED1)	/* Switch On LED connected to GPIO */
 8002be2:	79fb      	ldrb	r3, [r7, #7]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d108      	bne.n	8002bfa <BSP_LED_On+0x22>
  {
    gpio_led = LED1_GPIO_PORT;
 8002be8:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <BSP_LED_On+0x2c>)
 8002bea:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_SET);
 8002bec:	2302      	movs	r3, #2
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f005 fb17 	bl	8008228 <HAL_GPIO_WritePin>
  }
}
 8002bfa:	bf00      	nop
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40022000 	.word	0x40022000

08002c08 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b08c      	sub	sp, #48	; 0x30
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a51      	ldr	r2, [pc, #324]	; (8002d58 <I2Cx_MspInit+0x150>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d14d      	bne.n	8002cb4 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002c18:	4b50      	ldr	r3, [pc, #320]	; (8002d5c <I2Cx_MspInit+0x154>)
 8002c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1c:	4a4f      	ldr	r2, [pc, #316]	; (8002d5c <I2Cx_MspInit+0x154>)
 8002c1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c22:	6313      	str	r3, [r2, #48]	; 0x30
 8002c24:	4b4d      	ldr	r3, [pc, #308]	; (8002d5c <I2Cx_MspInit+0x154>)
 8002c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c2c:	61bb      	str	r3, [r7, #24]
 8002c2e:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8002c30:	2380      	movs	r3, #128	; 0x80
 8002c32:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002c34:	2312      	movs	r3, #18
 8002c36:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8002c40:	2304      	movs	r3, #4
 8002c42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002c44:	f107 031c 	add.w	r3, r7, #28
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4845      	ldr	r0, [pc, #276]	; (8002d60 <I2Cx_MspInit+0x158>)
 8002c4c:	f005 f81c 	bl	8007c88 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8002c50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002c56:	f107 031c 	add.w	r3, r7, #28
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	4840      	ldr	r0, [pc, #256]	; (8002d60 <I2Cx_MspInit+0x158>)
 8002c5e:	f005 f813 	bl	8007c88 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8002c62:	4b3e      	ldr	r3, [pc, #248]	; (8002d5c <I2Cx_MspInit+0x154>)
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	4a3d      	ldr	r2, [pc, #244]	; (8002d5c <I2Cx_MspInit+0x154>)
 8002c68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c6e:	4b3b      	ldr	r3, [pc, #236]	; (8002d5c <I2Cx_MspInit+0x154>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c76:	617b      	str	r3, [r7, #20]
 8002c78:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8002c7a:	4b38      	ldr	r3, [pc, #224]	; (8002d5c <I2Cx_MspInit+0x154>)
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	4a37      	ldr	r2, [pc, #220]	; (8002d5c <I2Cx_MspInit+0x154>)
 8002c80:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c84:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8002c86:	4b35      	ldr	r3, [pc, #212]	; (8002d5c <I2Cx_MspInit+0x154>)
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	4a34      	ldr	r2, [pc, #208]	; (8002d5c <I2Cx_MspInit+0x154>)
 8002c8c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002c90:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8002c92:	2200      	movs	r2, #0
 8002c94:	210f      	movs	r1, #15
 8002c96:	2048      	movs	r0, #72	; 0x48
 8002c98:	f002 f99d 	bl	8004fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8002c9c:	2048      	movs	r0, #72	; 0x48
 8002c9e:	f002 f9b6 	bl	800500e <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	210f      	movs	r1, #15
 8002ca6:	2049      	movs	r0, #73	; 0x49
 8002ca8:	f002 f995 	bl	8004fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8002cac:	2049      	movs	r0, #73	; 0x49
 8002cae:	f002 f9ae 	bl	800500e <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8002cb2:	e04d      	b.n	8002d50 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002cb4:	4b29      	ldr	r3, [pc, #164]	; (8002d5c <I2Cx_MspInit+0x154>)
 8002cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb8:	4a28      	ldr	r2, [pc, #160]	; (8002d5c <I2Cx_MspInit+0x154>)
 8002cba:	f043 0302 	orr.w	r3, r3, #2
 8002cbe:	6313      	str	r3, [r2, #48]	; 0x30
 8002cc0:	4b26      	ldr	r3, [pc, #152]	; (8002d5c <I2Cx_MspInit+0x154>)
 8002cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	613b      	str	r3, [r7, #16]
 8002cca:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8002ccc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cd0:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002cd2:	2312      	movs	r3, #18
 8002cd4:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002cda:	2302      	movs	r3, #2
 8002cdc:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8002cde:	2304      	movs	r3, #4
 8002ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002ce2:	f107 031c 	add.w	r3, r7, #28
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	481e      	ldr	r0, [pc, #120]	; (8002d64 <I2Cx_MspInit+0x15c>)
 8002cea:	f004 ffcd 	bl	8007c88 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8002cee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cf2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002cf4:	f107 031c 	add.w	r3, r7, #28
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	481a      	ldr	r0, [pc, #104]	; (8002d64 <I2Cx_MspInit+0x15c>)
 8002cfc:	f004 ffc4 	bl	8007c88 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8002d00:	4b16      	ldr	r3, [pc, #88]	; (8002d5c <I2Cx_MspInit+0x154>)
 8002d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d04:	4a15      	ldr	r2, [pc, #84]	; (8002d5c <I2Cx_MspInit+0x154>)
 8002d06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d0a:	6413      	str	r3, [r2, #64]	; 0x40
 8002d0c:	4b13      	ldr	r3, [pc, #76]	; (8002d5c <I2Cx_MspInit+0x154>)
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002d18:	4b10      	ldr	r3, [pc, #64]	; (8002d5c <I2Cx_MspInit+0x154>)
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	4a0f      	ldr	r2, [pc, #60]	; (8002d5c <I2Cx_MspInit+0x154>)
 8002d1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d22:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8002d24:	4b0d      	ldr	r3, [pc, #52]	; (8002d5c <I2Cx_MspInit+0x154>)
 8002d26:	6a1b      	ldr	r3, [r3, #32]
 8002d28:	4a0c      	ldr	r2, [pc, #48]	; (8002d5c <I2Cx_MspInit+0x154>)
 8002d2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d2e:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8002d30:	2200      	movs	r2, #0
 8002d32:	210f      	movs	r1, #15
 8002d34:	201f      	movs	r0, #31
 8002d36:	f002 f94e 	bl	8004fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8002d3a:	201f      	movs	r0, #31
 8002d3c:	f002 f967 	bl	800500e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8002d40:	2200      	movs	r2, #0
 8002d42:	210f      	movs	r1, #15
 8002d44:	2020      	movs	r0, #32
 8002d46:	f002 f946 	bl	8004fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8002d4a:	2020      	movs	r0, #32
 8002d4c:	f002 f95f 	bl	800500e <HAL_NVIC_EnableIRQ>
}
 8002d50:	bf00      	nop
 8002d52:	3730      	adds	r7, #48	; 0x30
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	20000cf8 	.word	0x20000cf8
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	40021c00 	.word	0x40021c00
 8002d64:	40020400 	.word	0x40020400

08002d68 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f007 fab3 	bl	800a2dc <HAL_I2C_GetState>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d125      	bne.n	8002dc8 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a14      	ldr	r2, [pc, #80]	; (8002dd0 <I2Cx_Init+0x68>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d103      	bne.n	8002d8c <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a13      	ldr	r2, [pc, #76]	; (8002dd4 <I2Cx_Init+0x6c>)
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	e002      	b.n	8002d92 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a12      	ldr	r2, [pc, #72]	; (8002dd8 <I2Cx_Init+0x70>)
 8002d90:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a11      	ldr	r2, [pc, #68]	; (8002ddc <I2Cx_Init+0x74>)
 8002d96:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f7ff ff23 	bl	8002c08 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f006 ff9c 	bl	8009d00 <HAL_I2C_Init>
  }
}
 8002dc8:	bf00      	nop
 8002dca:	3708      	adds	r7, #8
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	20000cf8 	.word	0x20000cf8
 8002dd4:	40005c00 	.word	0x40005c00
 8002dd8:	40005400 	.word	0x40005400
 8002ddc:	40912732 	.word	0x40912732

08002de0 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b08a      	sub	sp, #40	; 0x28
 8002de4:	af04      	add	r7, sp, #16
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	4608      	mov	r0, r1
 8002dea:	4611      	mov	r1, r2
 8002dec:	461a      	mov	r2, r3
 8002dee:	4603      	mov	r3, r0
 8002df0:	72fb      	strb	r3, [r7, #11]
 8002df2:	460b      	mov	r3, r1
 8002df4:	813b      	strh	r3, [r7, #8]
 8002df6:	4613      	mov	r3, r2
 8002df8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002dfe:	7afb      	ldrb	r3, [r7, #11]
 8002e00:	b299      	uxth	r1, r3
 8002e02:	88f8      	ldrh	r0, [r7, #6]
 8002e04:	893a      	ldrh	r2, [r7, #8]
 8002e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e0a:	9302      	str	r3, [sp, #8]
 8002e0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e0e:	9301      	str	r3, [sp, #4]
 8002e10:	6a3b      	ldr	r3, [r7, #32]
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	4603      	mov	r3, r0
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f007 f946 	bl	800a0a8 <HAL_I2C_Mem_Read>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002e20:	7dfb      	ldrb	r3, [r7, #23]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d004      	beq.n	8002e30 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002e26:	7afb      	ldrb	r3, [r7, #11]
 8002e28:	4619      	mov	r1, r3
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	f000 f832 	bl	8002e94 <I2Cx_Error>
  }
  return status;    
 8002e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3718      	adds	r7, #24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b08a      	sub	sp, #40	; 0x28
 8002e3e:	af04      	add	r7, sp, #16
 8002e40:	60f8      	str	r0, [r7, #12]
 8002e42:	4608      	mov	r0, r1
 8002e44:	4611      	mov	r1, r2
 8002e46:	461a      	mov	r2, r3
 8002e48:	4603      	mov	r3, r0
 8002e4a:	72fb      	strb	r3, [r7, #11]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	813b      	strh	r3, [r7, #8]
 8002e50:	4613      	mov	r3, r2
 8002e52:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002e54:	2300      	movs	r3, #0
 8002e56:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002e58:	7afb      	ldrb	r3, [r7, #11]
 8002e5a:	b299      	uxth	r1, r3
 8002e5c:	88f8      	ldrh	r0, [r7, #6]
 8002e5e:	893a      	ldrh	r2, [r7, #8]
 8002e60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e64:	9302      	str	r3, [sp, #8]
 8002e66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e68:	9301      	str	r3, [sp, #4]
 8002e6a:	6a3b      	ldr	r3, [r7, #32]
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	4603      	mov	r3, r0
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f007 f805 	bl	8009e80 <HAL_I2C_Mem_Write>
 8002e76:	4603      	mov	r3, r0
 8002e78:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002e7a:	7dfb      	ldrb	r3, [r7, #23]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d004      	beq.n	8002e8a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002e80:	7afb      	ldrb	r3, [r7, #11]
 8002e82:	4619      	mov	r1, r3
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f000 f805 	bl	8002e94 <I2Cx_Error>
  }
  return status;
 8002e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3718      	adds	r7, #24
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f006 ffbd 	bl	8009e20 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f7ff ff5e 	bl	8002d68 <I2Cx_Init>
}
 8002eac:	bf00      	nop
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <CAMERA_IO_Init>:
/**
  * @brief  Initializes Camera low level.
  * @retval None
  */
void CAMERA_IO_Init(void) 
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cExtHandler);
 8002eb8:	4802      	ldr	r0, [pc, #8]	; (8002ec4 <CAMERA_IO_Init+0x10>)
 8002eba:	f7ff ff55 	bl	8002d68 <I2Cx_Init>
}
 8002ebe:	bf00      	nop
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	20000d4c 	.word	0x20000d4c

08002ec8 <CAMERA_IO_Write>:
  * @param  Reg: Register address
  * @param  Value: Data to be written
  * @retval None
  */
void CAMERA_IO_Write(uint16_t DeviceAddr, uint16_t Reg, uint8_t value)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af02      	add	r7, sp, #8
 8002ece:	4603      	mov	r3, r0
 8002ed0:	80fb      	strh	r3, [r7, #6]
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	80bb      	strh	r3, [r7, #4]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	70fb      	strb	r3, [r7, #3]
  I2Cx_WriteMultiple(&hI2cExtHandler, DeviceAddr, (uint16_t)Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&value, 1);
 8002eda:	88fb      	ldrh	r3, [r7, #6]
 8002edc:	b2d9      	uxtb	r1, r3
 8002ede:	88ba      	ldrh	r2, [r7, #4]
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	9301      	str	r3, [sp, #4]
 8002ee4:	1cfb      	adds	r3, r7, #3
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	2302      	movs	r3, #2
 8002eea:	4803      	ldr	r0, [pc, #12]	; (8002ef8 <CAMERA_IO_Write+0x30>)
 8002eec:	f7ff ffa5 	bl	8002e3a <I2Cx_WriteMultiple>
}
 8002ef0:	bf00      	nop
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	20000d4c 	.word	0x20000d4c

08002efc <CAMERA_IO_Read>:
  * @param  DeviceAddr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
uint8_t CAMERA_IO_Read(uint16_t DeviceAddr, uint16_t Reg)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af02      	add	r7, sp, #8
 8002f02:	4603      	mov	r3, r0
 8002f04:	460a      	mov	r2, r1
 8002f06:	80fb      	strh	r3, [r7, #6]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	80bb      	strh	r3, [r7, #4]
  uint8_t read_value = 0;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	73fb      	strb	r3, [r7, #15]
  I2Cx_ReadMultiple(&hI2cExtHandler, DeviceAddr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 1);
 8002f10:	88fb      	ldrh	r3, [r7, #6]
 8002f12:	b2d9      	uxtb	r1, r3
 8002f14:	88ba      	ldrh	r2, [r7, #4]
 8002f16:	2301      	movs	r3, #1
 8002f18:	9301      	str	r3, [sp, #4]
 8002f1a:	f107 030f 	add.w	r3, r7, #15
 8002f1e:	9300      	str	r3, [sp, #0]
 8002f20:	2302      	movs	r3, #2
 8002f22:	4804      	ldr	r0, [pc, #16]	; (8002f34 <CAMERA_IO_Read+0x38>)
 8002f24:	f7ff ff5c 	bl	8002de0 <I2Cx_ReadMultiple>
  return read_value;
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	20000d4c 	.word	0x20000d4c

08002f38 <CAMERA_Delay>:
  * @brief  Camera delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void CAMERA_Delay(uint32_t Delay)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f001 fc95 	bl	8004870 <HAL_Delay>
}
 8002f46:	bf00      	nop
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
	...

08002f50 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002f54:	4b29      	ldr	r3, [pc, #164]	; (8002ffc <BSP_SDRAM_Init+0xac>)
 8002f56:	4a2a      	ldr	r2, [pc, #168]	; (8003000 <BSP_SDRAM_Init+0xb0>)
 8002f58:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8002f5a:	4b2a      	ldr	r3, [pc, #168]	; (8003004 <BSP_SDRAM_Init+0xb4>)
 8002f5c:	2202      	movs	r2, #2
 8002f5e:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8002f60:	4b28      	ldr	r3, [pc, #160]	; (8003004 <BSP_SDRAM_Init+0xb4>)
 8002f62:	2207      	movs	r2, #7
 8002f64:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8002f66:	4b27      	ldr	r3, [pc, #156]	; (8003004 <BSP_SDRAM_Init+0xb4>)
 8002f68:	2204      	movs	r2, #4
 8002f6a:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8002f6c:	4b25      	ldr	r3, [pc, #148]	; (8003004 <BSP_SDRAM_Init+0xb4>)
 8002f6e:	2207      	movs	r2, #7
 8002f70:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8002f72:	4b24      	ldr	r3, [pc, #144]	; (8003004 <BSP_SDRAM_Init+0xb4>)
 8002f74:	2202      	movs	r2, #2
 8002f76:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8002f78:	4b22      	ldr	r3, [pc, #136]	; (8003004 <BSP_SDRAM_Init+0xb4>)
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8002f7e:	4b21      	ldr	r3, [pc, #132]	; (8003004 <BSP_SDRAM_Init+0xb4>)
 8002f80:	2202      	movs	r2, #2
 8002f82:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8002f84:	4b1d      	ldr	r3, [pc, #116]	; (8002ffc <BSP_SDRAM_Init+0xac>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002f8a:	4b1c      	ldr	r3, [pc, #112]	; (8002ffc <BSP_SDRAM_Init+0xac>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002f90:	4b1a      	ldr	r3, [pc, #104]	; (8002ffc <BSP_SDRAM_Init+0xac>)
 8002f92:	2204      	movs	r2, #4
 8002f94:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002f96:	4b19      	ldr	r3, [pc, #100]	; (8002ffc <BSP_SDRAM_Init+0xac>)
 8002f98:	2210      	movs	r2, #16
 8002f9a:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002f9c:	4b17      	ldr	r3, [pc, #92]	; (8002ffc <BSP_SDRAM_Init+0xac>)
 8002f9e:	2240      	movs	r2, #64	; 0x40
 8002fa0:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8002fa2:	4b16      	ldr	r3, [pc, #88]	; (8002ffc <BSP_SDRAM_Init+0xac>)
 8002fa4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fa8:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002faa:	4b14      	ldr	r3, [pc, #80]	; (8002ffc <BSP_SDRAM_Init+0xac>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002fb0:	4b12      	ldr	r3, [pc, #72]	; (8002ffc <BSP_SDRAM_Init+0xac>)
 8002fb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fb6:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002fb8:	4b10      	ldr	r3, [pc, #64]	; (8002ffc <BSP_SDRAM_Init+0xac>)
 8002fba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002fbe:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8002fc0:	4b0e      	ldr	r3, [pc, #56]	; (8002ffc <BSP_SDRAM_Init+0xac>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	480c      	ldr	r0, [pc, #48]	; (8002ffc <BSP_SDRAM_Init+0xac>)
 8002fca:	f000 f87f 	bl	80030cc <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8002fce:	490d      	ldr	r1, [pc, #52]	; (8003004 <BSP_SDRAM_Init+0xb4>)
 8002fd0:	480a      	ldr	r0, [pc, #40]	; (8002ffc <BSP_SDRAM_Init+0xac>)
 8002fd2:	f00b fc04 	bl	800e7de <HAL_SDRAM_Init>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d003      	beq.n	8002fe4 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002fdc:	4b0a      	ldr	r3, [pc, #40]	; (8003008 <BSP_SDRAM_Init+0xb8>)
 8002fde:	2201      	movs	r2, #1
 8002fe0:	701a      	strb	r2, [r3, #0]
 8002fe2:	e002      	b.n	8002fea <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002fe4:	4b08      	ldr	r3, [pc, #32]	; (8003008 <BSP_SDRAM_Init+0xb8>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002fea:	f240 6003 	movw	r0, #1539	; 0x603
 8002fee:	f000 f80d 	bl	800300c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002ff2:	4b05      	ldr	r3, [pc, #20]	; (8003008 <BSP_SDRAM_Init+0xb8>)
 8002ff4:	781b      	ldrb	r3, [r3, #0]
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	20000da0 	.word	0x20000da0
 8003000:	a0000140 	.word	0xa0000140
 8003004:	20000dd4 	.word	0x20000dd4
 8003008:	20000014 	.word	0x20000014

0800300c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003014:	2300      	movs	r3, #0
 8003016:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003018:	4b2a      	ldr	r3, [pc, #168]	; (80030c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800301a:	2201      	movs	r2, #1
 800301c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800301e:	4b29      	ldr	r3, [pc, #164]	; (80030c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003020:	2210      	movs	r2, #16
 8003022:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003024:	4b27      	ldr	r3, [pc, #156]	; (80030c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003026:	2201      	movs	r2, #1
 8003028:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800302a:	4b26      	ldr	r3, [pc, #152]	; (80030c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800302c:	2200      	movs	r2, #0
 800302e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003030:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003034:	4923      	ldr	r1, [pc, #140]	; (80030c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003036:	4824      	ldr	r0, [pc, #144]	; (80030c8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003038:	f00b fc05 	bl	800e846 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800303c:	2001      	movs	r0, #1
 800303e:	f001 fc17 	bl	8004870 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003042:	4b20      	ldr	r3, [pc, #128]	; (80030c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003044:	2202      	movs	r2, #2
 8003046:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003048:	4b1e      	ldr	r3, [pc, #120]	; (80030c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800304a:	2210      	movs	r2, #16
 800304c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800304e:	4b1d      	ldr	r3, [pc, #116]	; (80030c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003050:	2201      	movs	r2, #1
 8003052:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003054:	4b1b      	ldr	r3, [pc, #108]	; (80030c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003056:	2200      	movs	r2, #0
 8003058:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800305a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800305e:	4919      	ldr	r1, [pc, #100]	; (80030c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003060:	4819      	ldr	r0, [pc, #100]	; (80030c8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003062:	f00b fbf0 	bl	800e846 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003066:	4b17      	ldr	r3, [pc, #92]	; (80030c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003068:	2203      	movs	r2, #3
 800306a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800306c:	4b15      	ldr	r3, [pc, #84]	; (80030c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800306e:	2210      	movs	r2, #16
 8003070:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8003072:	4b14      	ldr	r3, [pc, #80]	; (80030c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003074:	2208      	movs	r2, #8
 8003076:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003078:	4b12      	ldr	r3, [pc, #72]	; (80030c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800307a:	2200      	movs	r2, #0
 800307c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800307e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003082:	4910      	ldr	r1, [pc, #64]	; (80030c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003084:	4810      	ldr	r0, [pc, #64]	; (80030c8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003086:	f00b fbde 	bl	800e846 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800308a:	f44f 7308 	mov.w	r3, #544	; 0x220
 800308e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003090:	4b0c      	ldr	r3, [pc, #48]	; (80030c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003092:	2204      	movs	r2, #4
 8003094:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003096:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003098:	2210      	movs	r2, #16
 800309a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800309c:	4b09      	ldr	r3, [pc, #36]	; (80030c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800309e:	2201      	movs	r2, #1
 80030a0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	4a07      	ldr	r2, [pc, #28]	; (80030c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80030a6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80030a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030ac:	4905      	ldr	r1, [pc, #20]	; (80030c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80030ae:	4806      	ldr	r0, [pc, #24]	; (80030c8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80030b0:	f00b fbc9 	bl	800e846 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	4804      	ldr	r0, [pc, #16]	; (80030c8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80030b8:	f00b fbfa 	bl	800e8b0 <HAL_SDRAM_ProgramRefreshRate>
}
 80030bc:	bf00      	nop
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	20000df0 	.word	0x20000df0
 80030c8:	20000da0 	.word	0x20000da0

080030cc <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b090      	sub	sp, #64	; 0x40
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80030d6:	4b70      	ldr	r3, [pc, #448]	; (8003298 <BSP_SDRAM_MspInit+0x1cc>)
 80030d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030da:	4a6f      	ldr	r2, [pc, #444]	; (8003298 <BSP_SDRAM_MspInit+0x1cc>)
 80030dc:	f043 0301 	orr.w	r3, r3, #1
 80030e0:	6393      	str	r3, [r2, #56]	; 0x38
 80030e2:	4b6d      	ldr	r3, [pc, #436]	; (8003298 <BSP_SDRAM_MspInit+0x1cc>)
 80030e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80030ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80030ee:	4b6a      	ldr	r3, [pc, #424]	; (8003298 <BSP_SDRAM_MspInit+0x1cc>)
 80030f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f2:	4a69      	ldr	r2, [pc, #420]	; (8003298 <BSP_SDRAM_MspInit+0x1cc>)
 80030f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030f8:	6313      	str	r3, [r2, #48]	; 0x30
 80030fa:	4b67      	ldr	r3, [pc, #412]	; (8003298 <BSP_SDRAM_MspInit+0x1cc>)
 80030fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003102:	627b      	str	r3, [r7, #36]	; 0x24
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003106:	4b64      	ldr	r3, [pc, #400]	; (8003298 <BSP_SDRAM_MspInit+0x1cc>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310a:	4a63      	ldr	r2, [pc, #396]	; (8003298 <BSP_SDRAM_MspInit+0x1cc>)
 800310c:	f043 0304 	orr.w	r3, r3, #4
 8003110:	6313      	str	r3, [r2, #48]	; 0x30
 8003112:	4b61      	ldr	r3, [pc, #388]	; (8003298 <BSP_SDRAM_MspInit+0x1cc>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003116:	f003 0304 	and.w	r3, r3, #4
 800311a:	623b      	str	r3, [r7, #32]
 800311c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800311e:	4b5e      	ldr	r3, [pc, #376]	; (8003298 <BSP_SDRAM_MspInit+0x1cc>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	4a5d      	ldr	r2, [pc, #372]	; (8003298 <BSP_SDRAM_MspInit+0x1cc>)
 8003124:	f043 0308 	orr.w	r3, r3, #8
 8003128:	6313      	str	r3, [r2, #48]	; 0x30
 800312a:	4b5b      	ldr	r3, [pc, #364]	; (8003298 <BSP_SDRAM_MspInit+0x1cc>)
 800312c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312e:	f003 0308 	and.w	r3, r3, #8
 8003132:	61fb      	str	r3, [r7, #28]
 8003134:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003136:	4b58      	ldr	r3, [pc, #352]	; (8003298 <BSP_SDRAM_MspInit+0x1cc>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	4a57      	ldr	r2, [pc, #348]	; (8003298 <BSP_SDRAM_MspInit+0x1cc>)
 800313c:	f043 0310 	orr.w	r3, r3, #16
 8003140:	6313      	str	r3, [r2, #48]	; 0x30
 8003142:	4b55      	ldr	r3, [pc, #340]	; (8003298 <BSP_SDRAM_MspInit+0x1cc>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	f003 0310 	and.w	r3, r3, #16
 800314a:	61bb      	str	r3, [r7, #24]
 800314c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800314e:	4b52      	ldr	r3, [pc, #328]	; (8003298 <BSP_SDRAM_MspInit+0x1cc>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	4a51      	ldr	r2, [pc, #324]	; (8003298 <BSP_SDRAM_MspInit+0x1cc>)
 8003154:	f043 0320 	orr.w	r3, r3, #32
 8003158:	6313      	str	r3, [r2, #48]	; 0x30
 800315a:	4b4f      	ldr	r3, [pc, #316]	; (8003298 <BSP_SDRAM_MspInit+0x1cc>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	f003 0320 	and.w	r3, r3, #32
 8003162:	617b      	str	r3, [r7, #20]
 8003164:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003166:	4b4c      	ldr	r3, [pc, #304]	; (8003298 <BSP_SDRAM_MspInit+0x1cc>)
 8003168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316a:	4a4b      	ldr	r2, [pc, #300]	; (8003298 <BSP_SDRAM_MspInit+0x1cc>)
 800316c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003170:	6313      	str	r3, [r2, #48]	; 0x30
 8003172:	4b49      	ldr	r3, [pc, #292]	; (8003298 <BSP_SDRAM_MspInit+0x1cc>)
 8003174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800317a:	613b      	str	r3, [r7, #16]
 800317c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800317e:	4b46      	ldr	r3, [pc, #280]	; (8003298 <BSP_SDRAM_MspInit+0x1cc>)
 8003180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003182:	4a45      	ldr	r2, [pc, #276]	; (8003298 <BSP_SDRAM_MspInit+0x1cc>)
 8003184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003188:	6313      	str	r3, [r2, #48]	; 0x30
 800318a:	4b43      	ldr	r3, [pc, #268]	; (8003298 <BSP_SDRAM_MspInit+0x1cc>)
 800318c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003192:	60fb      	str	r3, [r7, #12]
 8003194:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003196:	2302      	movs	r3, #2
 8003198:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800319a:	2301      	movs	r3, #1
 800319c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800319e:	2302      	movs	r3, #2
 80031a0:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80031a2:	230c      	movs	r3, #12
 80031a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80031a6:	2308      	movs	r3, #8
 80031a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80031aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031ae:	4619      	mov	r1, r3
 80031b0:	483a      	ldr	r0, [pc, #232]	; (800329c <BSP_SDRAM_MspInit+0x1d0>)
 80031b2:	f004 fd69 	bl	8007c88 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80031b6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80031ba:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80031bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031c0:	4619      	mov	r1, r3
 80031c2:	4837      	ldr	r0, [pc, #220]	; (80032a0 <BSP_SDRAM_MspInit+0x1d4>)
 80031c4:	f004 fd60 	bl	8007c88 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80031c8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80031cc:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80031ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031d2:	4619      	mov	r1, r3
 80031d4:	4833      	ldr	r0, [pc, #204]	; (80032a4 <BSP_SDRAM_MspInit+0x1d8>)
 80031d6:	f004 fd57 	bl	8007c88 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80031da:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80031de:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80031e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031e4:	4619      	mov	r1, r3
 80031e6:	4830      	ldr	r0, [pc, #192]	; (80032a8 <BSP_SDRAM_MspInit+0x1dc>)
 80031e8:	f004 fd4e 	bl	8007c88 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80031ec:	f248 1333 	movw	r3, #33075	; 0x8133
 80031f0:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80031f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031f6:	4619      	mov	r1, r3
 80031f8:	482c      	ldr	r0, [pc, #176]	; (80032ac <BSP_SDRAM_MspInit+0x1e0>)
 80031fa:	f004 fd45 	bl	8007c88 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80031fe:	2328      	movs	r3, #40	; 0x28
 8003200:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003202:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003206:	4619      	mov	r1, r3
 8003208:	4829      	ldr	r0, [pc, #164]	; (80032b0 <BSP_SDRAM_MspInit+0x1e4>)
 800320a:	f004 fd3d 	bl	8007c88 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800320e:	4b29      	ldr	r3, [pc, #164]	; (80032b4 <BSP_SDRAM_MspInit+0x1e8>)
 8003210:	2200      	movs	r2, #0
 8003212:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003214:	4b27      	ldr	r3, [pc, #156]	; (80032b4 <BSP_SDRAM_MspInit+0x1e8>)
 8003216:	2280      	movs	r2, #128	; 0x80
 8003218:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800321a:	4b26      	ldr	r3, [pc, #152]	; (80032b4 <BSP_SDRAM_MspInit+0x1e8>)
 800321c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003220:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003222:	4b24      	ldr	r3, [pc, #144]	; (80032b4 <BSP_SDRAM_MspInit+0x1e8>)
 8003224:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003228:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800322a:	4b22      	ldr	r3, [pc, #136]	; (80032b4 <BSP_SDRAM_MspInit+0x1e8>)
 800322c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003230:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003232:	4b20      	ldr	r3, [pc, #128]	; (80032b4 <BSP_SDRAM_MspInit+0x1e8>)
 8003234:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003238:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 800323a:	4b1e      	ldr	r3, [pc, #120]	; (80032b4 <BSP_SDRAM_MspInit+0x1e8>)
 800323c:	2200      	movs	r2, #0
 800323e:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003240:	4b1c      	ldr	r3, [pc, #112]	; (80032b4 <BSP_SDRAM_MspInit+0x1e8>)
 8003242:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003246:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003248:	4b1a      	ldr	r3, [pc, #104]	; (80032b4 <BSP_SDRAM_MspInit+0x1e8>)
 800324a:	2200      	movs	r2, #0
 800324c:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800324e:	4b19      	ldr	r3, [pc, #100]	; (80032b4 <BSP_SDRAM_MspInit+0x1e8>)
 8003250:	2203      	movs	r2, #3
 8003252:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003254:	4b17      	ldr	r3, [pc, #92]	; (80032b4 <BSP_SDRAM_MspInit+0x1e8>)
 8003256:	2200      	movs	r2, #0
 8003258:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800325a:	4b16      	ldr	r3, [pc, #88]	; (80032b4 <BSP_SDRAM_MspInit+0x1e8>)
 800325c:	2200      	movs	r2, #0
 800325e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8003260:	4b14      	ldr	r3, [pc, #80]	; (80032b4 <BSP_SDRAM_MspInit+0x1e8>)
 8003262:	4a15      	ldr	r2, [pc, #84]	; (80032b8 <BSP_SDRAM_MspInit+0x1ec>)
 8003264:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a12      	ldr	r2, [pc, #72]	; (80032b4 <BSP_SDRAM_MspInit+0x1e8>)
 800326a:	631a      	str	r2, [r3, #48]	; 0x30
 800326c:	4a11      	ldr	r2, [pc, #68]	; (80032b4 <BSP_SDRAM_MspInit+0x1e8>)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8003272:	4810      	ldr	r0, [pc, #64]	; (80032b4 <BSP_SDRAM_MspInit+0x1e8>)
 8003274:	f002 fb2a 	bl	80058cc <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003278:	480e      	ldr	r0, [pc, #56]	; (80032b4 <BSP_SDRAM_MspInit+0x1e8>)
 800327a:	f002 fa79 	bl	8005770 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800327e:	2200      	movs	r2, #0
 8003280:	210f      	movs	r1, #15
 8003282:	2038      	movs	r0, #56	; 0x38
 8003284:	f001 fea7 	bl	8004fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003288:	2038      	movs	r0, #56	; 0x38
 800328a:	f001 fec0 	bl	800500e <HAL_NVIC_EnableIRQ>
}
 800328e:	bf00      	nop
 8003290:	3740      	adds	r7, #64	; 0x40
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	40023800 	.word	0x40023800
 800329c:	40020800 	.word	0x40020800
 80032a0:	40020c00 	.word	0x40020c00
 80032a4:	40021000 	.word	0x40021000
 80032a8:	40021400 	.word	0x40021400
 80032ac:	40021800 	.word	0x40021800
 80032b0:	40021c00 	.word	0x40021c00
 80032b4:	20000e00 	.word	0x20000e00
 80032b8:	40026410 	.word	0x40026410

080032bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80032c2:	4b0f      	ldr	r3, [pc, #60]	; (8003300 <HAL_MspInit+0x44>)
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	4a0e      	ldr	r2, [pc, #56]	; (8003300 <HAL_MspInit+0x44>)
 80032c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032cc:	6413      	str	r3, [r2, #64]	; 0x40
 80032ce:	4b0c      	ldr	r3, [pc, #48]	; (8003300 <HAL_MspInit+0x44>)
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d6:	607b      	str	r3, [r7, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032da:	4b09      	ldr	r3, [pc, #36]	; (8003300 <HAL_MspInit+0x44>)
 80032dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032de:	4a08      	ldr	r2, [pc, #32]	; (8003300 <HAL_MspInit+0x44>)
 80032e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032e4:	6453      	str	r3, [r2, #68]	; 0x44
 80032e6:	4b06      	ldr	r3, [pc, #24]	; (8003300 <HAL_MspInit+0x44>)
 80032e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032ee:	603b      	str	r3, [r7, #0]
 80032f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	40023800 	.word	0x40023800

08003304 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b08a      	sub	sp, #40	; 0x28
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800330c:	f107 0314 	add.w	r3, r7, #20
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	605a      	str	r2, [r3, #4]
 8003316:	609a      	str	r2, [r3, #8]
 8003318:	60da      	str	r2, [r3, #12]
 800331a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a15      	ldr	r2, [pc, #84]	; (8003378 <HAL_ADC_MspInit+0x74>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d124      	bne.n	8003370 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003326:	4b15      	ldr	r3, [pc, #84]	; (800337c <HAL_ADC_MspInit+0x78>)
 8003328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332a:	4a14      	ldr	r2, [pc, #80]	; (800337c <HAL_ADC_MspInit+0x78>)
 800332c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003330:	6453      	str	r3, [r2, #68]	; 0x44
 8003332:	4b12      	ldr	r3, [pc, #72]	; (800337c <HAL_ADC_MspInit+0x78>)
 8003334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800333a:	613b      	str	r3, [r7, #16]
 800333c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800333e:	4b0f      	ldr	r3, [pc, #60]	; (800337c <HAL_ADC_MspInit+0x78>)
 8003340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003342:	4a0e      	ldr	r2, [pc, #56]	; (800337c <HAL_ADC_MspInit+0x78>)
 8003344:	f043 0320 	orr.w	r3, r3, #32
 8003348:	6313      	str	r3, [r2, #48]	; 0x30
 800334a:	4b0c      	ldr	r3, [pc, #48]	; (800337c <HAL_ADC_MspInit+0x78>)
 800334c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334e:	f003 0320 	and.w	r3, r3, #32
 8003352:	60fb      	str	r3, [r7, #12]
 8003354:	68fb      	ldr	r3, [r7, #12]
    PF6     ------> ADC3_IN4
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8003356:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800335a:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800335c:	2303      	movs	r3, #3
 800335e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003360:	2300      	movs	r3, #0
 8003362:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003364:	f107 0314 	add.w	r3, r7, #20
 8003368:	4619      	mov	r1, r3
 800336a:	4805      	ldr	r0, [pc, #20]	; (8003380 <HAL_ADC_MspInit+0x7c>)
 800336c:	f004 fc8c 	bl	8007c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003370:	bf00      	nop
 8003372:	3728      	adds	r7, #40	; 0x28
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40012200 	.word	0x40012200
 800337c:	40023800 	.word	0x40023800
 8003380:	40021400 	.word	0x40021400

08003384 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a0a      	ldr	r2, [pc, #40]	; (80033bc <HAL_CRC_MspInit+0x38>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d10b      	bne.n	80033ae <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003396:	4b0a      	ldr	r3, [pc, #40]	; (80033c0 <HAL_CRC_MspInit+0x3c>)
 8003398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339a:	4a09      	ldr	r2, [pc, #36]	; (80033c0 <HAL_CRC_MspInit+0x3c>)
 800339c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80033a0:	6313      	str	r3, [r2, #48]	; 0x30
 80033a2:	4b07      	ldr	r3, [pc, #28]	; (80033c0 <HAL_CRC_MspInit+0x3c>)
 80033a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80033ae:	bf00      	nop
 80033b0:	3714      	adds	r7, #20
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	40023000 	.word	0x40023000
 80033c0:	40023800 	.word	0x40023800

080033c4 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b08e      	sub	sp, #56	; 0x38
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	605a      	str	r2, [r3, #4]
 80033d6:	609a      	str	r2, [r3, #8]
 80033d8:	60da      	str	r2, [r3, #12]
 80033da:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a72      	ldr	r2, [pc, #456]	; (80035ac <HAL_DCMI_MspInit+0x1e8>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	f040 80dd 	bne.w	80035a2 <HAL_DCMI_MspInit+0x1de>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80033e8:	4b71      	ldr	r3, [pc, #452]	; (80035b0 <HAL_DCMI_MspInit+0x1ec>)
 80033ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ec:	4a70      	ldr	r2, [pc, #448]	; (80035b0 <HAL_DCMI_MspInit+0x1ec>)
 80033ee:	f043 0301 	orr.w	r3, r3, #1
 80033f2:	6353      	str	r3, [r2, #52]	; 0x34
 80033f4:	4b6e      	ldr	r3, [pc, #440]	; (80035b0 <HAL_DCMI_MspInit+0x1ec>)
 80033f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	623b      	str	r3, [r7, #32]
 80033fe:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003400:	4b6b      	ldr	r3, [pc, #428]	; (80035b0 <HAL_DCMI_MspInit+0x1ec>)
 8003402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003404:	4a6a      	ldr	r2, [pc, #424]	; (80035b0 <HAL_DCMI_MspInit+0x1ec>)
 8003406:	f043 0310 	orr.w	r3, r3, #16
 800340a:	6313      	str	r3, [r2, #48]	; 0x30
 800340c:	4b68      	ldr	r3, [pc, #416]	; (80035b0 <HAL_DCMI_MspInit+0x1ec>)
 800340e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003410:	f003 0310 	and.w	r3, r3, #16
 8003414:	61fb      	str	r3, [r7, #28]
 8003416:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003418:	4b65      	ldr	r3, [pc, #404]	; (80035b0 <HAL_DCMI_MspInit+0x1ec>)
 800341a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341c:	4a64      	ldr	r2, [pc, #400]	; (80035b0 <HAL_DCMI_MspInit+0x1ec>)
 800341e:	f043 0308 	orr.w	r3, r3, #8
 8003422:	6313      	str	r3, [r2, #48]	; 0x30
 8003424:	4b62      	ldr	r3, [pc, #392]	; (80035b0 <HAL_DCMI_MspInit+0x1ec>)
 8003426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003428:	f003 0308 	and.w	r3, r3, #8
 800342c:	61bb      	str	r3, [r7, #24]
 800342e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003430:	4b5f      	ldr	r3, [pc, #380]	; (80035b0 <HAL_DCMI_MspInit+0x1ec>)
 8003432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003434:	4a5e      	ldr	r2, [pc, #376]	; (80035b0 <HAL_DCMI_MspInit+0x1ec>)
 8003436:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800343a:	6313      	str	r3, [r2, #48]	; 0x30
 800343c:	4b5c      	ldr	r3, [pc, #368]	; (80035b0 <HAL_DCMI_MspInit+0x1ec>)
 800343e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003444:	617b      	str	r3, [r7, #20]
 8003446:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003448:	4b59      	ldr	r3, [pc, #356]	; (80035b0 <HAL_DCMI_MspInit+0x1ec>)
 800344a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344c:	4a58      	ldr	r2, [pc, #352]	; (80035b0 <HAL_DCMI_MspInit+0x1ec>)
 800344e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003452:	6313      	str	r3, [r2, #48]	; 0x30
 8003454:	4b56      	ldr	r3, [pc, #344]	; (80035b0 <HAL_DCMI_MspInit+0x1ec>)
 8003456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800345c:	613b      	str	r3, [r7, #16]
 800345e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003460:	4b53      	ldr	r3, [pc, #332]	; (80035b0 <HAL_DCMI_MspInit+0x1ec>)
 8003462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003464:	4a52      	ldr	r2, [pc, #328]	; (80035b0 <HAL_DCMI_MspInit+0x1ec>)
 8003466:	f043 0301 	orr.w	r3, r3, #1
 800346a:	6313      	str	r3, [r2, #48]	; 0x30
 800346c:	4b50      	ldr	r3, [pc, #320]	; (80035b0 <HAL_DCMI_MspInit+0x1ec>)
 800346e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	60fb      	str	r3, [r7, #12]
 8003476:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8003478:	2360      	movs	r3, #96	; 0x60
 800347a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800347c:	2302      	movs	r3, #2
 800347e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003480:	2300      	movs	r3, #0
 8003482:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003484:	2300      	movs	r3, #0
 8003486:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003488:	230d      	movs	r3, #13
 800348a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800348c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003490:	4619      	mov	r1, r3
 8003492:	4848      	ldr	r0, [pc, #288]	; (80035b4 <HAL_DCMI_MspInit+0x1f0>)
 8003494:	f004 fbf8 	bl	8007c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8003498:	2308      	movs	r3, #8
 800349a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800349c:	2302      	movs	r3, #2
 800349e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a0:	2300      	movs	r3, #0
 80034a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034a4:	2300      	movs	r3, #0
 80034a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80034a8:	230d      	movs	r3, #13
 80034aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80034ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034b0:	4619      	mov	r1, r3
 80034b2:	4841      	ldr	r0, [pc, #260]	; (80035b8 <HAL_DCMI_MspInit+0x1f4>)
 80034b4:	f004 fbe8 	bl	8007c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80034b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034be:	2302      	movs	r3, #2
 80034c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c2:	2300      	movs	r3, #0
 80034c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034c6:	2300      	movs	r3, #0
 80034c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80034ca:	230d      	movs	r3, #13
 80034cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80034ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034d2:	4619      	mov	r1, r3
 80034d4:	4839      	ldr	r0, [pc, #228]	; (80035bc <HAL_DCMI_MspInit+0x1f8>)
 80034d6:	f004 fbd7 	bl	8007c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80034da:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 80034de:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e0:	2302      	movs	r3, #2
 80034e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e4:	2300      	movs	r3, #0
 80034e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e8:	2300      	movs	r3, #0
 80034ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80034ec:	230d      	movs	r3, #13
 80034ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80034f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034f4:	4619      	mov	r1, r3
 80034f6:	4832      	ldr	r0, [pc, #200]	; (80035c0 <HAL_DCMI_MspInit+0x1fc>)
 80034f8:	f004 fbc6 	bl	8007c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80034fc:	2350      	movs	r3, #80	; 0x50
 80034fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003500:	2302      	movs	r3, #2
 8003502:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003504:	2300      	movs	r3, #0
 8003506:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003508:	2300      	movs	r3, #0
 800350a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800350c:	230d      	movs	r3, #13
 800350e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003510:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003514:	4619      	mov	r1, r3
 8003516:	482b      	ldr	r0, [pc, #172]	; (80035c4 <HAL_DCMI_MspInit+0x200>)
 8003518:	f004 fbb6 	bl	8007c88 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 800351c:	4b2a      	ldr	r3, [pc, #168]	; (80035c8 <HAL_DCMI_MspInit+0x204>)
 800351e:	4a2b      	ldr	r2, [pc, #172]	; (80035cc <HAL_DCMI_MspInit+0x208>)
 8003520:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8003522:	4b29      	ldr	r3, [pc, #164]	; (80035c8 <HAL_DCMI_MspInit+0x204>)
 8003524:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003528:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800352a:	4b27      	ldr	r3, [pc, #156]	; (80035c8 <HAL_DCMI_MspInit+0x204>)
 800352c:	2200      	movs	r2, #0
 800352e:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8003530:	4b25      	ldr	r3, [pc, #148]	; (80035c8 <HAL_DCMI_MspInit+0x204>)
 8003532:	2200      	movs	r2, #0
 8003534:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8003536:	4b24      	ldr	r3, [pc, #144]	; (80035c8 <HAL_DCMI_MspInit+0x204>)
 8003538:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800353c:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800353e:	4b22      	ldr	r3, [pc, #136]	; (80035c8 <HAL_DCMI_MspInit+0x204>)
 8003540:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003544:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003546:	4b20      	ldr	r3, [pc, #128]	; (80035c8 <HAL_DCMI_MspInit+0x204>)
 8003548:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800354c:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 800354e:	4b1e      	ldr	r3, [pc, #120]	; (80035c8 <HAL_DCMI_MspInit+0x204>)
 8003550:	2200      	movs	r2, #0
 8003552:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 8003554:	4b1c      	ldr	r3, [pc, #112]	; (80035c8 <HAL_DCMI_MspInit+0x204>)
 8003556:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800355a:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800355c:	4b1a      	ldr	r3, [pc, #104]	; (80035c8 <HAL_DCMI_MspInit+0x204>)
 800355e:	2204      	movs	r2, #4
 8003560:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003562:	4b19      	ldr	r3, [pc, #100]	; (80035c8 <HAL_DCMI_MspInit+0x204>)
 8003564:	2203      	movs	r2, #3
 8003566:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_INC4;
 8003568:	4b17      	ldr	r3, [pc, #92]	; (80035c8 <HAL_DCMI_MspInit+0x204>)
 800356a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800356e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003570:	4b15      	ldr	r3, [pc, #84]	; (80035c8 <HAL_DCMI_MspInit+0x204>)
 8003572:	2200      	movs	r2, #0
 8003574:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8003576:	4814      	ldr	r0, [pc, #80]	; (80035c8 <HAL_DCMI_MspInit+0x204>)
 8003578:	f002 f8fa 	bl	8005770 <HAL_DMA_Init>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <HAL_DCMI_MspInit+0x1c2>
    {
      Error_Handler();
 8003582:	f7fe fdcc 	bl	800211e <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a0f      	ldr	r2, [pc, #60]	; (80035c8 <HAL_DCMI_MspInit+0x204>)
 800358a:	649a      	str	r2, [r3, #72]	; 0x48
 800358c:	4a0e      	ldr	r2, [pc, #56]	; (80035c8 <HAL_DCMI_MspInit+0x204>)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8003592:	2200      	movs	r2, #0
 8003594:	2100      	movs	r1, #0
 8003596:	204e      	movs	r0, #78	; 0x4e
 8003598:	f001 fd1d 	bl	8004fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 800359c:	204e      	movs	r0, #78	; 0x4e
 800359e:	f001 fd36 	bl	800500e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80035a2:	bf00      	nop
 80035a4:	3738      	adds	r7, #56	; 0x38
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	50050000 	.word	0x50050000
 80035b0:	40023800 	.word	0x40023800
 80035b4:	40021000 	.word	0x40021000
 80035b8:	40020c00 	.word	0x40020c00
 80035bc:	40021800 	.word	0x40021800
 80035c0:	40021c00 	.word	0x40021c00
 80035c4:	40020000 	.word	0x40020000
 80035c8:	200002f8 	.word	0x200002f8
 80035cc:	40026428 	.word	0x40026428

080035d0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a0d      	ldr	r2, [pc, #52]	; (8003614 <HAL_DMA2D_MspInit+0x44>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d113      	bne.n	800360a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80035e2:	4b0d      	ldr	r3, [pc, #52]	; (8003618 <HAL_DMA2D_MspInit+0x48>)
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	4a0c      	ldr	r2, [pc, #48]	; (8003618 <HAL_DMA2D_MspInit+0x48>)
 80035e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80035ec:	6313      	str	r3, [r2, #48]	; 0x30
 80035ee:	4b0a      	ldr	r3, [pc, #40]	; (8003618 <HAL_DMA2D_MspInit+0x48>)
 80035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 80035fa:	2200      	movs	r2, #0
 80035fc:	2100      	movs	r1, #0
 80035fe:	205a      	movs	r0, #90	; 0x5a
 8003600:	f001 fce9 	bl	8004fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003604:	205a      	movs	r0, #90	; 0x5a
 8003606:	f001 fd02 	bl	800500e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800360a:	bf00      	nop
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	4002b000 	.word	0x4002b000
 8003618:	40023800 	.word	0x40023800

0800361c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b08e      	sub	sp, #56	; 0x38
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003624:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	609a      	str	r2, [r3, #8]
 8003630:	60da      	str	r2, [r3, #12]
 8003632:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a3f      	ldr	r2, [pc, #252]	; (8003738 <HAL_ETH_MspInit+0x11c>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d178      	bne.n	8003730 <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800363e:	4b3f      	ldr	r3, [pc, #252]	; (800373c <HAL_ETH_MspInit+0x120>)
 8003640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003642:	4a3e      	ldr	r2, [pc, #248]	; (800373c <HAL_ETH_MspInit+0x120>)
 8003644:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003648:	6313      	str	r3, [r2, #48]	; 0x30
 800364a:	4b3c      	ldr	r3, [pc, #240]	; (800373c <HAL_ETH_MspInit+0x120>)
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003652:	623b      	str	r3, [r7, #32]
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	4b39      	ldr	r3, [pc, #228]	; (800373c <HAL_ETH_MspInit+0x120>)
 8003658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365a:	4a38      	ldr	r2, [pc, #224]	; (800373c <HAL_ETH_MspInit+0x120>)
 800365c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003660:	6313      	str	r3, [r2, #48]	; 0x30
 8003662:	4b36      	ldr	r3, [pc, #216]	; (800373c <HAL_ETH_MspInit+0x120>)
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003666:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800366a:	61fb      	str	r3, [r7, #28]
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	4b33      	ldr	r3, [pc, #204]	; (800373c <HAL_ETH_MspInit+0x120>)
 8003670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003672:	4a32      	ldr	r2, [pc, #200]	; (800373c <HAL_ETH_MspInit+0x120>)
 8003674:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003678:	6313      	str	r3, [r2, #48]	; 0x30
 800367a:	4b30      	ldr	r3, [pc, #192]	; (800373c <HAL_ETH_MspInit+0x120>)
 800367c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003682:	61bb      	str	r3, [r7, #24]
 8003684:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003686:	4b2d      	ldr	r3, [pc, #180]	; (800373c <HAL_ETH_MspInit+0x120>)
 8003688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368a:	4a2c      	ldr	r2, [pc, #176]	; (800373c <HAL_ETH_MspInit+0x120>)
 800368c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003690:	6313      	str	r3, [r2, #48]	; 0x30
 8003692:	4b2a      	ldr	r3, [pc, #168]	; (800373c <HAL_ETH_MspInit+0x120>)
 8003694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369a:	617b      	str	r3, [r7, #20]
 800369c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800369e:	4b27      	ldr	r3, [pc, #156]	; (800373c <HAL_ETH_MspInit+0x120>)
 80036a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a2:	4a26      	ldr	r2, [pc, #152]	; (800373c <HAL_ETH_MspInit+0x120>)
 80036a4:	f043 0304 	orr.w	r3, r3, #4
 80036a8:	6313      	str	r3, [r2, #48]	; 0x30
 80036aa:	4b24      	ldr	r3, [pc, #144]	; (800373c <HAL_ETH_MspInit+0x120>)
 80036ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ae:	f003 0304 	and.w	r3, r3, #4
 80036b2:	613b      	str	r3, [r7, #16]
 80036b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036b6:	4b21      	ldr	r3, [pc, #132]	; (800373c <HAL_ETH_MspInit+0x120>)
 80036b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ba:	4a20      	ldr	r2, [pc, #128]	; (800373c <HAL_ETH_MspInit+0x120>)
 80036bc:	f043 0301 	orr.w	r3, r3, #1
 80036c0:	6313      	str	r3, [r2, #48]	; 0x30
 80036c2:	4b1e      	ldr	r3, [pc, #120]	; (800373c <HAL_ETH_MspInit+0x120>)
 80036c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80036ce:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80036d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d4:	2302      	movs	r3, #2
 80036d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d8:	2300      	movs	r3, #0
 80036da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036dc:	2303      	movs	r3, #3
 80036de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80036e0:	230b      	movs	r3, #11
 80036e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80036e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036e8:	4619      	mov	r1, r3
 80036ea:	4815      	ldr	r0, [pc, #84]	; (8003740 <HAL_ETH_MspInit+0x124>)
 80036ec:	f004 facc 	bl	8007c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80036f0:	2332      	movs	r3, #50	; 0x32
 80036f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f4:	2302      	movs	r3, #2
 80036f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f8:	2300      	movs	r3, #0
 80036fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036fc:	2303      	movs	r3, #3
 80036fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003700:	230b      	movs	r3, #11
 8003702:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003708:	4619      	mov	r1, r3
 800370a:	480e      	ldr	r0, [pc, #56]	; (8003744 <HAL_ETH_MspInit+0x128>)
 800370c:	f004 fabc 	bl	8007c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003710:	2386      	movs	r3, #134	; 0x86
 8003712:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003714:	2302      	movs	r3, #2
 8003716:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003718:	2300      	movs	r3, #0
 800371a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800371c:	2303      	movs	r3, #3
 800371e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003720:	230b      	movs	r3, #11
 8003722:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003724:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003728:	4619      	mov	r1, r3
 800372a:	4807      	ldr	r0, [pc, #28]	; (8003748 <HAL_ETH_MspInit+0x12c>)
 800372c:	f004 faac 	bl	8007c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8003730:	bf00      	nop
 8003732:	3738      	adds	r7, #56	; 0x38
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	40028000 	.word	0x40028000
 800373c:	40023800 	.word	0x40023800
 8003740:	40021800 	.word	0x40021800
 8003744:	40020800 	.word	0x40020800
 8003748:	40020000 	.word	0x40020000

0800374c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b0ac      	sub	sp, #176	; 0xb0
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003754:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003758:	2200      	movs	r2, #0
 800375a:	601a      	str	r2, [r3, #0]
 800375c:	605a      	str	r2, [r3, #4]
 800375e:	609a      	str	r2, [r3, #8]
 8003760:	60da      	str	r2, [r3, #12]
 8003762:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003764:	f107 0318 	add.w	r3, r7, #24
 8003768:	2284      	movs	r2, #132	; 0x84
 800376a:	2100      	movs	r1, #0
 800376c:	4618      	mov	r0, r3
 800376e:	f013 fb03 	bl	8016d78 <memset>
  if(hi2c->Instance==I2C1)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a44      	ldr	r2, [pc, #272]	; (8003888 <HAL_I2C_MspInit+0x13c>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d13d      	bne.n	80037f8 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800377c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003780:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003782:	2300      	movs	r3, #0
 8003784:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003786:	f107 0318 	add.w	r3, r7, #24
 800378a:	4618      	mov	r0, r3
 800378c:	f008 fa3c 	bl	800bc08 <HAL_RCCEx_PeriphCLKConfig>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003796:	f7fe fcc2 	bl	800211e <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800379a:	4b3c      	ldr	r3, [pc, #240]	; (800388c <HAL_I2C_MspInit+0x140>)
 800379c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379e:	4a3b      	ldr	r2, [pc, #236]	; (800388c <HAL_I2C_MspInit+0x140>)
 80037a0:	f043 0302 	orr.w	r3, r3, #2
 80037a4:	6313      	str	r3, [r2, #48]	; 0x30
 80037a6:	4b39      	ldr	r3, [pc, #228]	; (800388c <HAL_I2C_MspInit+0x140>)
 80037a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	617b      	str	r3, [r7, #20]
 80037b0:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80037b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80037b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037ba:	2312      	movs	r3, #18
 80037bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037c0:	2301      	movs	r3, #1
 80037c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037c6:	2300      	movs	r3, #0
 80037c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80037cc:	2304      	movs	r3, #4
 80037ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037d2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80037d6:	4619      	mov	r1, r3
 80037d8:	482d      	ldr	r0, [pc, #180]	; (8003890 <HAL_I2C_MspInit+0x144>)
 80037da:	f004 fa55 	bl	8007c88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80037de:	4b2b      	ldr	r3, [pc, #172]	; (800388c <HAL_I2C_MspInit+0x140>)
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	4a2a      	ldr	r2, [pc, #168]	; (800388c <HAL_I2C_MspInit+0x140>)
 80037e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80037e8:	6413      	str	r3, [r2, #64]	; 0x40
 80037ea:	4b28      	ldr	r3, [pc, #160]	; (800388c <HAL_I2C_MspInit+0x140>)
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037f2:	613b      	str	r3, [r7, #16]
 80037f4:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80037f6:	e042      	b.n	800387e <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a25      	ldr	r2, [pc, #148]	; (8003894 <HAL_I2C_MspInit+0x148>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d13d      	bne.n	800387e <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003802:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003806:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003808:	2300      	movs	r3, #0
 800380a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800380e:	f107 0318 	add.w	r3, r7, #24
 8003812:	4618      	mov	r0, r3
 8003814:	f008 f9f8 	bl	800bc08 <HAL_RCCEx_PeriphCLKConfig>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 800381e:	f7fe fc7e 	bl	800211e <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003822:	4b1a      	ldr	r3, [pc, #104]	; (800388c <HAL_I2C_MspInit+0x140>)
 8003824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003826:	4a19      	ldr	r2, [pc, #100]	; (800388c <HAL_I2C_MspInit+0x140>)
 8003828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800382c:	6313      	str	r3, [r2, #48]	; 0x30
 800382e:	4b17      	ldr	r3, [pc, #92]	; (800388c <HAL_I2C_MspInit+0x140>)
 8003830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003836:	60fb      	str	r3, [r7, #12]
 8003838:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800383a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800383e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003842:	2312      	movs	r3, #18
 8003844:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003848:	2301      	movs	r3, #1
 800384a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800384e:	2303      	movs	r3, #3
 8003850:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003854:	2304      	movs	r3, #4
 8003856:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800385a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800385e:	4619      	mov	r1, r3
 8003860:	480d      	ldr	r0, [pc, #52]	; (8003898 <HAL_I2C_MspInit+0x14c>)
 8003862:	f004 fa11 	bl	8007c88 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003866:	4b09      	ldr	r3, [pc, #36]	; (800388c <HAL_I2C_MspInit+0x140>)
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	4a08      	ldr	r2, [pc, #32]	; (800388c <HAL_I2C_MspInit+0x140>)
 800386c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003870:	6413      	str	r3, [r2, #64]	; 0x40
 8003872:	4b06      	ldr	r3, [pc, #24]	; (800388c <HAL_I2C_MspInit+0x140>)
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003876:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800387a:	60bb      	str	r3, [r7, #8]
 800387c:	68bb      	ldr	r3, [r7, #8]
}
 800387e:	bf00      	nop
 8003880:	37b0      	adds	r7, #176	; 0xb0
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	40005400 	.word	0x40005400
 800388c:	40023800 	.word	0x40023800
 8003890:	40020400 	.word	0x40020400
 8003894:	40005c00 	.word	0x40005c00
 8003898:	40021c00 	.word	0x40021c00

0800389c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a15      	ldr	r2, [pc, #84]	; (8003900 <HAL_I2C_MspDeInit+0x64>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d110      	bne.n	80038d0 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80038ae:	4b15      	ldr	r3, [pc, #84]	; (8003904 <HAL_I2C_MspDeInit+0x68>)
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	4a14      	ldr	r2, [pc, #80]	; (8003904 <HAL_I2C_MspDeInit+0x68>)
 80038b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80038b8:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 80038ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80038be:	4812      	ldr	r0, [pc, #72]	; (8003908 <HAL_I2C_MspDeInit+0x6c>)
 80038c0:	f004 fb8e 	bl	8007fe0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 80038c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80038c8:	480f      	ldr	r0, [pc, #60]	; (8003908 <HAL_I2C_MspDeInit+0x6c>)
 80038ca:	f004 fb89 	bl	8007fe0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80038ce:	e013      	b.n	80038f8 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a0d      	ldr	r2, [pc, #52]	; (800390c <HAL_I2C_MspDeInit+0x70>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d10e      	bne.n	80038f8 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80038da:	4b0a      	ldr	r3, [pc, #40]	; (8003904 <HAL_I2C_MspDeInit+0x68>)
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	4a09      	ldr	r2, [pc, #36]	; (8003904 <HAL_I2C_MspDeInit+0x68>)
 80038e0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80038e4:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 80038e6:	2180      	movs	r1, #128	; 0x80
 80038e8:	4809      	ldr	r0, [pc, #36]	; (8003910 <HAL_I2C_MspDeInit+0x74>)
 80038ea:	f004 fb79 	bl	8007fe0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 80038ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80038f2:	4807      	ldr	r0, [pc, #28]	; (8003910 <HAL_I2C_MspDeInit+0x74>)
 80038f4:	f004 fb74 	bl	8007fe0 <HAL_GPIO_DeInit>
}
 80038f8:	bf00      	nop
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	40005400 	.word	0x40005400
 8003904:	40023800 	.word	0x40023800
 8003908:	40020400 	.word	0x40020400
 800390c:	40005c00 	.word	0x40005c00
 8003910:	40021c00 	.word	0x40021c00

08003914 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b08e      	sub	sp, #56	; 0x38
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800391c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003920:	2200      	movs	r2, #0
 8003922:	601a      	str	r2, [r3, #0]
 8003924:	605a      	str	r2, [r3, #4]
 8003926:	609a      	str	r2, [r3, #8]
 8003928:	60da      	str	r2, [r3, #12]
 800392a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a55      	ldr	r2, [pc, #340]	; (8003a88 <HAL_LTDC_MspInit+0x174>)
 8003932:	4293      	cmp	r3, r2
 8003934:	f040 80a3 	bne.w	8003a7e <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003938:	4b54      	ldr	r3, [pc, #336]	; (8003a8c <HAL_LTDC_MspInit+0x178>)
 800393a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393c:	4a53      	ldr	r2, [pc, #332]	; (8003a8c <HAL_LTDC_MspInit+0x178>)
 800393e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003942:	6453      	str	r3, [r2, #68]	; 0x44
 8003944:	4b51      	ldr	r3, [pc, #324]	; (8003a8c <HAL_LTDC_MspInit+0x178>)
 8003946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003948:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800394c:	623b      	str	r3, [r7, #32]
 800394e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003950:	4b4e      	ldr	r3, [pc, #312]	; (8003a8c <HAL_LTDC_MspInit+0x178>)
 8003952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003954:	4a4d      	ldr	r2, [pc, #308]	; (8003a8c <HAL_LTDC_MspInit+0x178>)
 8003956:	f043 0310 	orr.w	r3, r3, #16
 800395a:	6313      	str	r3, [r2, #48]	; 0x30
 800395c:	4b4b      	ldr	r3, [pc, #300]	; (8003a8c <HAL_LTDC_MspInit+0x178>)
 800395e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003960:	f003 0310 	and.w	r3, r3, #16
 8003964:	61fb      	str	r3, [r7, #28]
 8003966:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003968:	4b48      	ldr	r3, [pc, #288]	; (8003a8c <HAL_LTDC_MspInit+0x178>)
 800396a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396c:	4a47      	ldr	r2, [pc, #284]	; (8003a8c <HAL_LTDC_MspInit+0x178>)
 800396e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003972:	6313      	str	r3, [r2, #48]	; 0x30
 8003974:	4b45      	ldr	r3, [pc, #276]	; (8003a8c <HAL_LTDC_MspInit+0x178>)
 8003976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003978:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800397c:	61bb      	str	r3, [r7, #24]
 800397e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003980:	4b42      	ldr	r3, [pc, #264]	; (8003a8c <HAL_LTDC_MspInit+0x178>)
 8003982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003984:	4a41      	ldr	r2, [pc, #260]	; (8003a8c <HAL_LTDC_MspInit+0x178>)
 8003986:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800398a:	6313      	str	r3, [r2, #48]	; 0x30
 800398c:	4b3f      	ldr	r3, [pc, #252]	; (8003a8c <HAL_LTDC_MspInit+0x178>)
 800398e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003994:	617b      	str	r3, [r7, #20]
 8003996:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003998:	4b3c      	ldr	r3, [pc, #240]	; (8003a8c <HAL_LTDC_MspInit+0x178>)
 800399a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399c:	4a3b      	ldr	r2, [pc, #236]	; (8003a8c <HAL_LTDC_MspInit+0x178>)
 800399e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039a2:	6313      	str	r3, [r2, #48]	; 0x30
 80039a4:	4b39      	ldr	r3, [pc, #228]	; (8003a8c <HAL_LTDC_MspInit+0x178>)
 80039a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ac:	613b      	str	r3, [r7, #16]
 80039ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80039b0:	4b36      	ldr	r3, [pc, #216]	; (8003a8c <HAL_LTDC_MspInit+0x178>)
 80039b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b4:	4a35      	ldr	r2, [pc, #212]	; (8003a8c <HAL_LTDC_MspInit+0x178>)
 80039b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ba:	6313      	str	r3, [r2, #48]	; 0x30
 80039bc:	4b33      	ldr	r3, [pc, #204]	; (8003a8c <HAL_LTDC_MspInit+0x178>)
 80039be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c4:	60fb      	str	r3, [r7, #12]
 80039c6:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80039c8:	2310      	movs	r3, #16
 80039ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039cc:	2302      	movs	r3, #2
 80039ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d0:	2300      	movs	r3, #0
 80039d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039d4:	2300      	movs	r3, #0
 80039d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80039d8:	230e      	movs	r3, #14
 80039da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80039dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039e0:	4619      	mov	r1, r3
 80039e2:	482b      	ldr	r0, [pc, #172]	; (8003a90 <HAL_LTDC_MspInit+0x17c>)
 80039e4:	f004 f950 	bl	8007c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80039e8:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80039ec:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ee:	2302      	movs	r3, #2
 80039f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f2:	2300      	movs	r3, #0
 80039f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039f6:	2300      	movs	r3, #0
 80039f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80039fa:	230e      	movs	r3, #14
 80039fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80039fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a02:	4619      	mov	r1, r3
 8003a04:	4823      	ldr	r0, [pc, #140]	; (8003a94 <HAL_LTDC_MspInit+0x180>)
 8003a06:	f004 f93f 	bl	8007c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8003a0a:	23f7      	movs	r3, #247	; 0xf7
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a0e:	2302      	movs	r3, #2
 8003a10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a12:	2300      	movs	r3, #0
 8003a14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a16:	2300      	movs	r3, #0
 8003a18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003a1a:	230e      	movs	r3, #14
 8003a1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a22:	4619      	mov	r1, r3
 8003a24:	481c      	ldr	r0, [pc, #112]	; (8003a98 <HAL_LTDC_MspInit+0x184>)
 8003a26:	f004 f92f 	bl	8007c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8003a2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a30:	2302      	movs	r3, #2
 8003a32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a34:	2300      	movs	r3, #0
 8003a36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003a3c:	2309      	movs	r3, #9
 8003a3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8003a40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a44:	4619      	mov	r1, r3
 8003a46:	4815      	ldr	r0, [pc, #84]	; (8003a9c <HAL_LTDC_MspInit+0x188>)
 8003a48:	f004 f91e 	bl	8007c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003a4c:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8003a50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a52:	2302      	movs	r3, #2
 8003a54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a56:	2300      	movs	r3, #0
 8003a58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003a5e:	230e      	movs	r3, #14
 8003a60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a66:	4619      	mov	r1, r3
 8003a68:	480d      	ldr	r0, [pc, #52]	; (8003aa0 <HAL_LTDC_MspInit+0x18c>)
 8003a6a:	f004 f90d 	bl	8007c88 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8003a6e:	2200      	movs	r2, #0
 8003a70:	2100      	movs	r1, #0
 8003a72:	2058      	movs	r0, #88	; 0x58
 8003a74:	f001 faaf 	bl	8004fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003a78:	2058      	movs	r0, #88	; 0x58
 8003a7a:	f001 fac8 	bl	800500e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8003a7e:	bf00      	nop
 8003a80:	3738      	adds	r7, #56	; 0x38
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	40016800 	.word	0x40016800
 8003a8c:	40023800 	.word	0x40023800
 8003a90:	40021000 	.word	0x40021000
 8003a94:	40022400 	.word	0x40022400
 8003a98:	40022800 	.word	0x40022800
 8003a9c:	40021800 	.word	0x40021800
 8003aa0:	40022000 	.word	0x40022000

08003aa4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b08c      	sub	sp, #48	; 0x30
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aac:	f107 031c 	add.w	r3, r7, #28
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	605a      	str	r2, [r3, #4]
 8003ab6:	609a      	str	r2, [r3, #8]
 8003ab8:	60da      	str	r2, [r3, #12]
 8003aba:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a3b      	ldr	r2, [pc, #236]	; (8003bb0 <HAL_QSPI_MspInit+0x10c>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d170      	bne.n	8003ba8 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003ac6:	4b3b      	ldr	r3, [pc, #236]	; (8003bb4 <HAL_QSPI_MspInit+0x110>)
 8003ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aca:	4a3a      	ldr	r2, [pc, #232]	; (8003bb4 <HAL_QSPI_MspInit+0x110>)
 8003acc:	f043 0302 	orr.w	r3, r3, #2
 8003ad0:	6393      	str	r3, [r2, #56]	; 0x38
 8003ad2:	4b38      	ldr	r3, [pc, #224]	; (8003bb4 <HAL_QSPI_MspInit+0x110>)
 8003ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	61bb      	str	r3, [r7, #24]
 8003adc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ade:	4b35      	ldr	r3, [pc, #212]	; (8003bb4 <HAL_QSPI_MspInit+0x110>)
 8003ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae2:	4a34      	ldr	r2, [pc, #208]	; (8003bb4 <HAL_QSPI_MspInit+0x110>)
 8003ae4:	f043 0310 	orr.w	r3, r3, #16
 8003ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8003aea:	4b32      	ldr	r3, [pc, #200]	; (8003bb4 <HAL_QSPI_MspInit+0x110>)
 8003aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aee:	f003 0310 	and.w	r3, r3, #16
 8003af2:	617b      	str	r3, [r7, #20]
 8003af4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003af6:	4b2f      	ldr	r3, [pc, #188]	; (8003bb4 <HAL_QSPI_MspInit+0x110>)
 8003af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afa:	4a2e      	ldr	r2, [pc, #184]	; (8003bb4 <HAL_QSPI_MspInit+0x110>)
 8003afc:	f043 0302 	orr.w	r3, r3, #2
 8003b00:	6313      	str	r3, [r2, #48]	; 0x30
 8003b02:	4b2c      	ldr	r3, [pc, #176]	; (8003bb4 <HAL_QSPI_MspInit+0x110>)
 8003b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	613b      	str	r3, [r7, #16]
 8003b0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b0e:	4b29      	ldr	r3, [pc, #164]	; (8003bb4 <HAL_QSPI_MspInit+0x110>)
 8003b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b12:	4a28      	ldr	r2, [pc, #160]	; (8003bb4 <HAL_QSPI_MspInit+0x110>)
 8003b14:	f043 0308 	orr.w	r3, r3, #8
 8003b18:	6313      	str	r3, [r2, #48]	; 0x30
 8003b1a:	4b26      	ldr	r3, [pc, #152]	; (8003bb4 <HAL_QSPI_MspInit+0x110>)
 8003b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1e:	f003 0308 	and.w	r3, r3, #8
 8003b22:	60fb      	str	r3, [r7, #12]
 8003b24:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8003b26:	2304      	movs	r3, #4
 8003b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b32:	2303      	movs	r3, #3
 8003b34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003b36:	2309      	movs	r3, #9
 8003b38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8003b3a:	f107 031c 	add.w	r3, r7, #28
 8003b3e:	4619      	mov	r1, r3
 8003b40:	481d      	ldr	r0, [pc, #116]	; (8003bb8 <HAL_QSPI_MspInit+0x114>)
 8003b42:	f004 f8a1 	bl	8007c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8003b46:	2340      	movs	r3, #64	; 0x40
 8003b48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b52:	2303      	movs	r3, #3
 8003b54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003b56:	230a      	movs	r3, #10
 8003b58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8003b5a:	f107 031c 	add.w	r3, r7, #28
 8003b5e:	4619      	mov	r1, r3
 8003b60:	4816      	ldr	r0, [pc, #88]	; (8003bbc <HAL_QSPI_MspInit+0x118>)
 8003b62:	f004 f891 	bl	8007c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003b66:	2304      	movs	r3, #4
 8003b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b72:	2303      	movs	r3, #3
 8003b74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003b76:	2309      	movs	r3, #9
 8003b78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b7a:	f107 031c 	add.w	r3, r7, #28
 8003b7e:	4619      	mov	r1, r3
 8003b80:	480e      	ldr	r0, [pc, #56]	; (8003bbc <HAL_QSPI_MspInit+0x118>)
 8003b82:	f004 f881 	bl	8007c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8003b86:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003b8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b90:	2300      	movs	r3, #0
 8003b92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b94:	2303      	movs	r3, #3
 8003b96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003b98:	2309      	movs	r3, #9
 8003b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b9c:	f107 031c 	add.w	r3, r7, #28
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	4807      	ldr	r0, [pc, #28]	; (8003bc0 <HAL_QSPI_MspInit+0x11c>)
 8003ba4:	f004 f870 	bl	8007c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8003ba8:	bf00      	nop
 8003baa:	3730      	adds	r7, #48	; 0x30
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	a0001000 	.word	0xa0001000
 8003bb4:	40023800 	.word	0x40023800
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	40020400 	.word	0x40020400
 8003bc0:	40020c00 	.word	0x40020c00

08003bc4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b0a4      	sub	sp, #144	; 0x90
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003bcc:	f107 030c 	add.w	r3, r7, #12
 8003bd0:	2284      	movs	r2, #132	; 0x84
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f013 f8cf 	bl	8016d78 <memset>
  if(hrtc->Instance==RTC)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a0e      	ldr	r2, [pc, #56]	; (8003c18 <HAL_RTC_MspInit+0x54>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d114      	bne.n	8003c0e <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003be4:	2320      	movs	r3, #32
 8003be6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003be8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bec:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003bee:	f107 030c 	add.w	r3, r7, #12
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f008 f808 	bl	800bc08 <HAL_RCCEx_PeriphCLKConfig>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8003bfe:	f7fe fa8e 	bl	800211e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003c02:	4b06      	ldr	r3, [pc, #24]	; (8003c1c <HAL_RTC_MspInit+0x58>)
 8003c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c06:	4a05      	ldr	r2, [pc, #20]	; (8003c1c <HAL_RTC_MspInit+0x58>)
 8003c08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c0c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003c0e:	bf00      	nop
 8003c10:	3790      	adds	r7, #144	; 0x90
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	40002800 	.word	0x40002800
 8003c1c:	40023800 	.word	0x40023800

08003c20 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b08a      	sub	sp, #40	; 0x28
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c28:	f107 0314 	add.w	r3, r7, #20
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	605a      	str	r2, [r3, #4]
 8003c32:	609a      	str	r2, [r3, #8]
 8003c34:	60da      	str	r2, [r3, #12]
 8003c36:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a65      	ldr	r2, [pc, #404]	; (8003dd4 <HAL_SD_MspInit+0x1b4>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	f040 80c3 	bne.w	8003dca <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003c44:	4b64      	ldr	r3, [pc, #400]	; (8003dd8 <HAL_SD_MspInit+0x1b8>)
 8003c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c48:	4a63      	ldr	r2, [pc, #396]	; (8003dd8 <HAL_SD_MspInit+0x1b8>)
 8003c4a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c4e:	6453      	str	r3, [r2, #68]	; 0x44
 8003c50:	4b61      	ldr	r3, [pc, #388]	; (8003dd8 <HAL_SD_MspInit+0x1b8>)
 8003c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c58:	613b      	str	r3, [r7, #16]
 8003c5a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c5c:	4b5e      	ldr	r3, [pc, #376]	; (8003dd8 <HAL_SD_MspInit+0x1b8>)
 8003c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c60:	4a5d      	ldr	r2, [pc, #372]	; (8003dd8 <HAL_SD_MspInit+0x1b8>)
 8003c62:	f043 0304 	orr.w	r3, r3, #4
 8003c66:	6313      	str	r3, [r2, #48]	; 0x30
 8003c68:	4b5b      	ldr	r3, [pc, #364]	; (8003dd8 <HAL_SD_MspInit+0x1b8>)
 8003c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6c:	f003 0304 	and.w	r3, r3, #4
 8003c70:	60fb      	str	r3, [r7, #12]
 8003c72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c74:	4b58      	ldr	r3, [pc, #352]	; (8003dd8 <HAL_SD_MspInit+0x1b8>)
 8003c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c78:	4a57      	ldr	r2, [pc, #348]	; (8003dd8 <HAL_SD_MspInit+0x1b8>)
 8003c7a:	f043 0308 	orr.w	r3, r3, #8
 8003c7e:	6313      	str	r3, [r2, #48]	; 0x30
 8003c80:	4b55      	ldr	r3, [pc, #340]	; (8003dd8 <HAL_SD_MspInit+0x1b8>)
 8003c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c84:	f003 0308 	and.w	r3, r3, #8
 8003c88:	60bb      	str	r3, [r7, #8]
 8003c8a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8003c8c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003c90:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c92:	2302      	movs	r3, #2
 8003c94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c96:	2300      	movs	r3, #0
 8003c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003c9e:	230c      	movs	r3, #12
 8003ca0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ca2:	f107 0314 	add.w	r3, r7, #20
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	484c      	ldr	r0, [pc, #304]	; (8003ddc <HAL_SD_MspInit+0x1bc>)
 8003caa:	f003 ffed 	bl	8007c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8003cae:	2304      	movs	r3, #4
 8003cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003cbe:	230c      	movs	r3, #12
 8003cc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8003cc2:	f107 0314 	add.w	r3, r7, #20
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	4845      	ldr	r0, [pc, #276]	; (8003de0 <HAL_SD_MspInit+0x1c0>)
 8003cca:	f003 ffdd 	bl	8007c88 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8003cce:	4b45      	ldr	r3, [pc, #276]	; (8003de4 <HAL_SD_MspInit+0x1c4>)
 8003cd0:	4a45      	ldr	r2, [pc, #276]	; (8003de8 <HAL_SD_MspInit+0x1c8>)
 8003cd2:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8003cd4:	4b43      	ldr	r3, [pc, #268]	; (8003de4 <HAL_SD_MspInit+0x1c4>)
 8003cd6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003cda:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003cdc:	4b41      	ldr	r3, [pc, #260]	; (8003de4 <HAL_SD_MspInit+0x1c4>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ce2:	4b40      	ldr	r3, [pc, #256]	; (8003de4 <HAL_SD_MspInit+0x1c4>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003ce8:	4b3e      	ldr	r3, [pc, #248]	; (8003de4 <HAL_SD_MspInit+0x1c4>)
 8003cea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003cee:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003cf0:	4b3c      	ldr	r3, [pc, #240]	; (8003de4 <HAL_SD_MspInit+0x1c4>)
 8003cf2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003cf6:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003cf8:	4b3a      	ldr	r3, [pc, #232]	; (8003de4 <HAL_SD_MspInit+0x1c4>)
 8003cfa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003cfe:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8003d00:	4b38      	ldr	r3, [pc, #224]	; (8003de4 <HAL_SD_MspInit+0x1c4>)
 8003d02:	2220      	movs	r2, #32
 8003d04:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003d06:	4b37      	ldr	r3, [pc, #220]	; (8003de4 <HAL_SD_MspInit+0x1c4>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003d0c:	4b35      	ldr	r3, [pc, #212]	; (8003de4 <HAL_SD_MspInit+0x1c4>)
 8003d0e:	2204      	movs	r2, #4
 8003d10:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003d12:	4b34      	ldr	r3, [pc, #208]	; (8003de4 <HAL_SD_MspInit+0x1c4>)
 8003d14:	2203      	movs	r2, #3
 8003d16:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8003d18:	4b32      	ldr	r3, [pc, #200]	; (8003de4 <HAL_SD_MspInit+0x1c4>)
 8003d1a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003d1e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003d20:	4b30      	ldr	r3, [pc, #192]	; (8003de4 <HAL_SD_MspInit+0x1c4>)
 8003d22:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003d26:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8003d28:	482e      	ldr	r0, [pc, #184]	; (8003de4 <HAL_SD_MspInit+0x1c4>)
 8003d2a:	f001 fd21 	bl	8005770 <HAL_DMA_Init>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 8003d34:	f7fe f9f3 	bl	800211e <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a2a      	ldr	r2, [pc, #168]	; (8003de4 <HAL_SD_MspInit+0x1c4>)
 8003d3c:	641a      	str	r2, [r3, #64]	; 0x40
 8003d3e:	4a29      	ldr	r2, [pc, #164]	; (8003de4 <HAL_SD_MspInit+0x1c4>)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8003d44:	4b29      	ldr	r3, [pc, #164]	; (8003dec <HAL_SD_MspInit+0x1cc>)
 8003d46:	4a2a      	ldr	r2, [pc, #168]	; (8003df0 <HAL_SD_MspInit+0x1d0>)
 8003d48:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8003d4a:	4b28      	ldr	r3, [pc, #160]	; (8003dec <HAL_SD_MspInit+0x1cc>)
 8003d4c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d50:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003d52:	4b26      	ldr	r3, [pc, #152]	; (8003dec <HAL_SD_MspInit+0x1cc>)
 8003d54:	2240      	movs	r2, #64	; 0x40
 8003d56:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d58:	4b24      	ldr	r3, [pc, #144]	; (8003dec <HAL_SD_MspInit+0x1cc>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003d5e:	4b23      	ldr	r3, [pc, #140]	; (8003dec <HAL_SD_MspInit+0x1cc>)
 8003d60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d64:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003d66:	4b21      	ldr	r3, [pc, #132]	; (8003dec <HAL_SD_MspInit+0x1cc>)
 8003d68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d6c:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003d6e:	4b1f      	ldr	r3, [pc, #124]	; (8003dec <HAL_SD_MspInit+0x1cc>)
 8003d70:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d74:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8003d76:	4b1d      	ldr	r3, [pc, #116]	; (8003dec <HAL_SD_MspInit+0x1cc>)
 8003d78:	2220      	movs	r2, #32
 8003d7a:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003d7c:	4b1b      	ldr	r3, [pc, #108]	; (8003dec <HAL_SD_MspInit+0x1cc>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003d82:	4b1a      	ldr	r3, [pc, #104]	; (8003dec <HAL_SD_MspInit+0x1cc>)
 8003d84:	2204      	movs	r2, #4
 8003d86:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003d88:	4b18      	ldr	r3, [pc, #96]	; (8003dec <HAL_SD_MspInit+0x1cc>)
 8003d8a:	2203      	movs	r2, #3
 8003d8c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8003d8e:	4b17      	ldr	r3, [pc, #92]	; (8003dec <HAL_SD_MspInit+0x1cc>)
 8003d90:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003d94:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003d96:	4b15      	ldr	r3, [pc, #84]	; (8003dec <HAL_SD_MspInit+0x1cc>)
 8003d98:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003d9c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8003d9e:	4813      	ldr	r0, [pc, #76]	; (8003dec <HAL_SD_MspInit+0x1cc>)
 8003da0:	f001 fce6 	bl	8005770 <HAL_DMA_Init>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 8003daa:	f7fe f9b8 	bl	800211e <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a0e      	ldr	r2, [pc, #56]	; (8003dec <HAL_SD_MspInit+0x1cc>)
 8003db2:	63da      	str	r2, [r3, #60]	; 0x3c
 8003db4:	4a0d      	ldr	r2, [pc, #52]	; (8003dec <HAL_SD_MspInit+0x1cc>)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8003dba:	2200      	movs	r2, #0
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	2031      	movs	r0, #49	; 0x31
 8003dc0:	f001 f909 	bl	8004fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8003dc4:	2031      	movs	r0, #49	; 0x31
 8003dc6:	f001 f922 	bl	800500e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8003dca:	bf00      	nop
 8003dcc:	3728      	adds	r7, #40	; 0x28
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	40012c00 	.word	0x40012c00
 8003dd8:	40023800 	.word	0x40023800
 8003ddc:	40020800 	.word	0x40020800
 8003de0:	40020c00 	.word	0x40020c00
 8003de4:	20000790 	.word	0x20000790
 8003de8:	40026458 	.word	0x40026458
 8003dec:	200007f0 	.word	0x200007f0
 8003df0:	400264a0 	.word	0x400264a0

08003df4 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b0aa      	sub	sp, #168	; 0xa8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dfc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003e00:	2200      	movs	r2, #0
 8003e02:	601a      	str	r2, [r3, #0]
 8003e04:	605a      	str	r2, [r3, #4]
 8003e06:	609a      	str	r2, [r3, #8]
 8003e08:	60da      	str	r2, [r3, #12]
 8003e0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003e0c:	f107 0310 	add.w	r3, r7, #16
 8003e10:	2284      	movs	r2, #132	; 0x84
 8003e12:	2100      	movs	r1, #0
 8003e14:	4618      	mov	r0, r3
 8003e16:	f012 ffaf 	bl	8016d78 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8003e22:	d143      	bne.n	8003eac <HAL_SPDIFRX_MspInit+0xb8>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8003e24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e28:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8003e2a:	2364      	movs	r3, #100	; 0x64
 8003e2c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8003e2e:	2302      	movs	r3, #2
 8003e30:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8003e32:	2302      	movs	r3, #2
 8003e34:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8003e36:	2302      	movs	r3, #2
 8003e38:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003e3e:	f107 0310 	add.w	r3, r7, #16
 8003e42:	4618      	mov	r0, r3
 8003e44:	f007 fee0 	bl	800bc08 <HAL_RCCEx_PeriphCLKConfig>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 8003e4e:	f7fe f966 	bl	800211e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8003e52:	4b18      	ldr	r3, [pc, #96]	; (8003eb4 <HAL_SPDIFRX_MspInit+0xc0>)
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	4a17      	ldr	r2, [pc, #92]	; (8003eb4 <HAL_SPDIFRX_MspInit+0xc0>)
 8003e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e5e:	4b15      	ldr	r3, [pc, #84]	; (8003eb4 <HAL_SPDIFRX_MspInit+0xc0>)
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e66:	60fb      	str	r3, [r7, #12]
 8003e68:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e6a:	4b12      	ldr	r3, [pc, #72]	; (8003eb4 <HAL_SPDIFRX_MspInit+0xc0>)
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6e:	4a11      	ldr	r2, [pc, #68]	; (8003eb4 <HAL_SPDIFRX_MspInit+0xc0>)
 8003e70:	f043 0308 	orr.w	r3, r3, #8
 8003e74:	6313      	str	r3, [r2, #48]	; 0x30
 8003e76:	4b0f      	ldr	r3, [pc, #60]	; (8003eb4 <HAL_SPDIFRX_MspInit+0xc0>)
 8003e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7a:	f003 0308 	and.w	r3, r3, #8
 8003e7e:	60bb      	str	r3, [r7, #8]
 8003e80:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8003e82:	2380      	movs	r3, #128	; 0x80
 8003e84:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e88:	2302      	movs	r3, #2
 8003e8a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e94:	2300      	movs	r3, #0
 8003e96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8003e9a:	2308      	movs	r3, #8
 8003e9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8003ea0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	4804      	ldr	r0, [pc, #16]	; (8003eb8 <HAL_SPDIFRX_MspInit+0xc4>)
 8003ea8:	f003 feee 	bl	8007c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8003eac:	bf00      	nop
 8003eae:	37a8      	adds	r7, #168	; 0xa8
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	40020c00 	.word	0x40020c00

08003ebc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b08a      	sub	sp, #40	; 0x28
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ec4:	f107 0314 	add.w	r3, r7, #20
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	605a      	str	r2, [r3, #4]
 8003ece:	609a      	str	r2, [r3, #8]
 8003ed0:	60da      	str	r2, [r3, #12]
 8003ed2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a25      	ldr	r2, [pc, #148]	; (8003f70 <HAL_SPI_MspInit+0xb4>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d144      	bne.n	8003f68 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003ede:	4b25      	ldr	r3, [pc, #148]	; (8003f74 <HAL_SPI_MspInit+0xb8>)
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee2:	4a24      	ldr	r2, [pc, #144]	; (8003f74 <HAL_SPI_MspInit+0xb8>)
 8003ee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8003eea:	4b22      	ldr	r3, [pc, #136]	; (8003f74 <HAL_SPI_MspInit+0xb8>)
 8003eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ef2:	613b      	str	r3, [r7, #16]
 8003ef4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003ef6:	4b1f      	ldr	r3, [pc, #124]	; (8003f74 <HAL_SPI_MspInit+0xb8>)
 8003ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efa:	4a1e      	ldr	r2, [pc, #120]	; (8003f74 <HAL_SPI_MspInit+0xb8>)
 8003efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f00:	6313      	str	r3, [r2, #48]	; 0x30
 8003f02:	4b1c      	ldr	r3, [pc, #112]	; (8003f74 <HAL_SPI_MspInit+0xb8>)
 8003f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f0a:	60fb      	str	r3, [r7, #12]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f0e:	4b19      	ldr	r3, [pc, #100]	; (8003f74 <HAL_SPI_MspInit+0xb8>)
 8003f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f12:	4a18      	ldr	r2, [pc, #96]	; (8003f74 <HAL_SPI_MspInit+0xb8>)
 8003f14:	f043 0302 	orr.w	r3, r3, #2
 8003f18:	6313      	str	r3, [r2, #48]	; 0x30
 8003f1a:	4b16      	ldr	r3, [pc, #88]	; (8003f74 <HAL_SPI_MspInit+0xb8>)
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	60bb      	str	r3, [r7, #8]
 8003f24:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8003f26:	2302      	movs	r3, #2
 8003f28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f32:	2300      	movs	r3, #0
 8003f34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003f36:	2305      	movs	r3, #5
 8003f38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8003f3a:	f107 0314 	add.w	r3, r7, #20
 8003f3e:	4619      	mov	r1, r3
 8003f40:	480d      	ldr	r0, [pc, #52]	; (8003f78 <HAL_SPI_MspInit+0xbc>)
 8003f42:	f003 fea1 	bl	8007c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8003f46:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f50:	2300      	movs	r3, #0
 8003f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f54:	2300      	movs	r3, #0
 8003f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003f58:	2305      	movs	r3, #5
 8003f5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f5c:	f107 0314 	add.w	r3, r7, #20
 8003f60:	4619      	mov	r1, r3
 8003f62:	4806      	ldr	r0, [pc, #24]	; (8003f7c <HAL_SPI_MspInit+0xc0>)
 8003f64:	f003 fe90 	bl	8007c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003f68:	bf00      	nop
 8003f6a:	3728      	adds	r7, #40	; 0x28
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	40003800 	.word	0x40003800
 8003f74:	40023800 	.word	0x40023800
 8003f78:	40022000 	.word	0x40022000
 8003f7c:	40020400 	.word	0x40020400

08003f80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b089      	sub	sp, #36	; 0x24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a2e      	ldr	r2, [pc, #184]	; (8004048 <HAL_TIM_Base_MspInit+0xc8>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d10c      	bne.n	8003fac <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003f92:	4b2e      	ldr	r3, [pc, #184]	; (800404c <HAL_TIM_Base_MspInit+0xcc>)
 8003f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f96:	4a2d      	ldr	r2, [pc, #180]	; (800404c <HAL_TIM_Base_MspInit+0xcc>)
 8003f98:	f043 0301 	orr.w	r3, r3, #1
 8003f9c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f9e:	4b2b      	ldr	r3, [pc, #172]	; (800404c <HAL_TIM_Base_MspInit+0xcc>)
 8003fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	61fb      	str	r3, [r7, #28]
 8003fa8:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003faa:	e046      	b.n	800403a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb4:	d10c      	bne.n	8003fd0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003fb6:	4b25      	ldr	r3, [pc, #148]	; (800404c <HAL_TIM_Base_MspInit+0xcc>)
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	4a24      	ldr	r2, [pc, #144]	; (800404c <HAL_TIM_Base_MspInit+0xcc>)
 8003fbc:	f043 0301 	orr.w	r3, r3, #1
 8003fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8003fc2:	4b22      	ldr	r3, [pc, #136]	; (800404c <HAL_TIM_Base_MspInit+0xcc>)
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	61bb      	str	r3, [r7, #24]
 8003fcc:	69bb      	ldr	r3, [r7, #24]
}
 8003fce:	e034      	b.n	800403a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a1e      	ldr	r2, [pc, #120]	; (8004050 <HAL_TIM_Base_MspInit+0xd0>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d10c      	bne.n	8003ff4 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003fda:	4b1c      	ldr	r3, [pc, #112]	; (800404c <HAL_TIM_Base_MspInit+0xcc>)
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fde:	4a1b      	ldr	r2, [pc, #108]	; (800404c <HAL_TIM_Base_MspInit+0xcc>)
 8003fe0:	f043 0302 	orr.w	r3, r3, #2
 8003fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8003fe6:	4b19      	ldr	r3, [pc, #100]	; (800404c <HAL_TIM_Base_MspInit+0xcc>)
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	617b      	str	r3, [r7, #20]
 8003ff0:	697b      	ldr	r3, [r7, #20]
}
 8003ff2:	e022      	b.n	800403a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a16      	ldr	r2, [pc, #88]	; (8004054 <HAL_TIM_Base_MspInit+0xd4>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d10c      	bne.n	8004018 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003ffe:	4b13      	ldr	r3, [pc, #76]	; (800404c <HAL_TIM_Base_MspInit+0xcc>)
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	4a12      	ldr	r2, [pc, #72]	; (800404c <HAL_TIM_Base_MspInit+0xcc>)
 8004004:	f043 0308 	orr.w	r3, r3, #8
 8004008:	6413      	str	r3, [r2, #64]	; 0x40
 800400a:	4b10      	ldr	r3, [pc, #64]	; (800404c <HAL_TIM_Base_MspInit+0xcc>)
 800400c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400e:	f003 0308 	and.w	r3, r3, #8
 8004012:	613b      	str	r3, [r7, #16]
 8004014:	693b      	ldr	r3, [r7, #16]
}
 8004016:	e010      	b.n	800403a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a0e      	ldr	r2, [pc, #56]	; (8004058 <HAL_TIM_Base_MspInit+0xd8>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d10b      	bne.n	800403a <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004022:	4b0a      	ldr	r3, [pc, #40]	; (800404c <HAL_TIM_Base_MspInit+0xcc>)
 8004024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004026:	4a09      	ldr	r2, [pc, #36]	; (800404c <HAL_TIM_Base_MspInit+0xcc>)
 8004028:	f043 0302 	orr.w	r3, r3, #2
 800402c:	6453      	str	r3, [r2, #68]	; 0x44
 800402e:	4b07      	ldr	r3, [pc, #28]	; (800404c <HAL_TIM_Base_MspInit+0xcc>)
 8004030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	60fb      	str	r3, [r7, #12]
 8004038:	68fb      	ldr	r3, [r7, #12]
}
 800403a:	bf00      	nop
 800403c:	3724      	adds	r7, #36	; 0x24
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	40010000 	.word	0x40010000
 800404c:	40023800 	.word	0x40023800
 8004050:	40000400 	.word	0x40000400
 8004054:	40000c00 	.word	0x40000c00
 8004058:	40010400 	.word	0x40010400

0800405c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a0a      	ldr	r2, [pc, #40]	; (8004094 <HAL_TIM_PWM_MspInit+0x38>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d10b      	bne.n	8004086 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800406e:	4b0a      	ldr	r3, [pc, #40]	; (8004098 <HAL_TIM_PWM_MspInit+0x3c>)
 8004070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004072:	4a09      	ldr	r2, [pc, #36]	; (8004098 <HAL_TIM_PWM_MspInit+0x3c>)
 8004074:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004078:	6413      	str	r3, [r2, #64]	; 0x40
 800407a:	4b07      	ldr	r3, [pc, #28]	; (8004098 <HAL_TIM_PWM_MspInit+0x3c>)
 800407c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004082:	60fb      	str	r3, [r7, #12]
 8004084:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8004086:	bf00      	nop
 8004088:	3714      	adds	r7, #20
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	40001800 	.word	0x40001800
 8004098:	40023800 	.word	0x40023800

0800409c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b08c      	sub	sp, #48	; 0x30
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040a4:	f107 031c 	add.w	r3, r7, #28
 80040a8:	2200      	movs	r2, #0
 80040aa:	601a      	str	r2, [r3, #0]
 80040ac:	605a      	str	r2, [r3, #4]
 80040ae:	609a      	str	r2, [r3, #8]
 80040b0:	60da      	str	r2, [r3, #12]
 80040b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a56      	ldr	r2, [pc, #344]	; (8004214 <HAL_TIM_MspPostInit+0x178>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d11d      	bne.n	80040fa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040be:	4b56      	ldr	r3, [pc, #344]	; (8004218 <HAL_TIM_MspPostInit+0x17c>)
 80040c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c2:	4a55      	ldr	r2, [pc, #340]	; (8004218 <HAL_TIM_MspPostInit+0x17c>)
 80040c4:	f043 0301 	orr.w	r3, r3, #1
 80040c8:	6313      	str	r3, [r2, #48]	; 0x30
 80040ca:	4b53      	ldr	r3, [pc, #332]	; (8004218 <HAL_TIM_MspPostInit+0x17c>)
 80040cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	61bb      	str	r3, [r7, #24]
 80040d4:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80040d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040dc:	2302      	movs	r3, #2
 80040de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040e0:	2300      	movs	r3, #0
 80040e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040e4:	2300      	movs	r3, #0
 80040e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80040e8:	2301      	movs	r3, #1
 80040ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80040ec:	f107 031c 	add.w	r3, r7, #28
 80040f0:	4619      	mov	r1, r3
 80040f2:	484a      	ldr	r0, [pc, #296]	; (800421c <HAL_TIM_MspPostInit+0x180>)
 80040f4:	f003 fdc8 	bl	8007c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80040f8:	e087      	b.n	800420a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004102:	d11d      	bne.n	8004140 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004104:	4b44      	ldr	r3, [pc, #272]	; (8004218 <HAL_TIM_MspPostInit+0x17c>)
 8004106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004108:	4a43      	ldr	r2, [pc, #268]	; (8004218 <HAL_TIM_MspPostInit+0x17c>)
 800410a:	f043 0301 	orr.w	r3, r3, #1
 800410e:	6313      	str	r3, [r2, #48]	; 0x30
 8004110:	4b41      	ldr	r3, [pc, #260]	; (8004218 <HAL_TIM_MspPostInit+0x17c>)
 8004112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	617b      	str	r3, [r7, #20]
 800411a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800411c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004120:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004122:	2302      	movs	r3, #2
 8004124:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004126:	2300      	movs	r3, #0
 8004128:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800412a:	2300      	movs	r3, #0
 800412c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800412e:	2301      	movs	r3, #1
 8004130:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8004132:	f107 031c 	add.w	r3, r7, #28
 8004136:	4619      	mov	r1, r3
 8004138:	4838      	ldr	r0, [pc, #224]	; (800421c <HAL_TIM_MspPostInit+0x180>)
 800413a:	f003 fda5 	bl	8007c88 <HAL_GPIO_Init>
}
 800413e:	e064      	b.n	800420a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a36      	ldr	r2, [pc, #216]	; (8004220 <HAL_TIM_MspPostInit+0x184>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d11c      	bne.n	8004184 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800414a:	4b33      	ldr	r3, [pc, #204]	; (8004218 <HAL_TIM_MspPostInit+0x17c>)
 800414c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414e:	4a32      	ldr	r2, [pc, #200]	; (8004218 <HAL_TIM_MspPostInit+0x17c>)
 8004150:	f043 0302 	orr.w	r3, r3, #2
 8004154:	6313      	str	r3, [r2, #48]	; 0x30
 8004156:	4b30      	ldr	r3, [pc, #192]	; (8004218 <HAL_TIM_MspPostInit+0x17c>)
 8004158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	613b      	str	r3, [r7, #16]
 8004160:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8004162:	2310      	movs	r3, #16
 8004164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004166:	2302      	movs	r3, #2
 8004168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800416a:	2300      	movs	r3, #0
 800416c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800416e:	2300      	movs	r3, #0
 8004170:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004172:	2302      	movs	r3, #2
 8004174:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8004176:	f107 031c 	add.w	r3, r7, #28
 800417a:	4619      	mov	r1, r3
 800417c:	4829      	ldr	r0, [pc, #164]	; (8004224 <HAL_TIM_MspPostInit+0x188>)
 800417e:	f003 fd83 	bl	8007c88 <HAL_GPIO_Init>
}
 8004182:	e042      	b.n	800420a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a27      	ldr	r2, [pc, #156]	; (8004228 <HAL_TIM_MspPostInit+0x18c>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d11c      	bne.n	80041c8 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800418e:	4b22      	ldr	r3, [pc, #136]	; (8004218 <HAL_TIM_MspPostInit+0x17c>)
 8004190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004192:	4a21      	ldr	r2, [pc, #132]	; (8004218 <HAL_TIM_MspPostInit+0x17c>)
 8004194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004198:	6313      	str	r3, [r2, #48]	; 0x30
 800419a:	4b1f      	ldr	r3, [pc, #124]	; (8004218 <HAL_TIM_MspPostInit+0x17c>)
 800419c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a2:	60fb      	str	r3, [r7, #12]
 80041a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80041a6:	2301      	movs	r3, #1
 80041a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041aa:	2302      	movs	r3, #2
 80041ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ae:	2300      	movs	r3, #0
 80041b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041b2:	2300      	movs	r3, #0
 80041b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80041b6:	2302      	movs	r3, #2
 80041b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80041ba:	f107 031c 	add.w	r3, r7, #28
 80041be:	4619      	mov	r1, r3
 80041c0:	481a      	ldr	r0, [pc, #104]	; (800422c <HAL_TIM_MspPostInit+0x190>)
 80041c2:	f003 fd61 	bl	8007c88 <HAL_GPIO_Init>
}
 80041c6:	e020      	b.n	800420a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a18      	ldr	r2, [pc, #96]	; (8004230 <HAL_TIM_MspPostInit+0x194>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d11b      	bne.n	800420a <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80041d2:	4b11      	ldr	r3, [pc, #68]	; (8004218 <HAL_TIM_MspPostInit+0x17c>)
 80041d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d6:	4a10      	ldr	r2, [pc, #64]	; (8004218 <HAL_TIM_MspPostInit+0x17c>)
 80041d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041dc:	6313      	str	r3, [r2, #48]	; 0x30
 80041de:	4b0e      	ldr	r3, [pc, #56]	; (8004218 <HAL_TIM_MspPostInit+0x17c>)
 80041e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e6:	60bb      	str	r3, [r7, #8]
 80041e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80041ea:	2340      	movs	r3, #64	; 0x40
 80041ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041ee:	2302      	movs	r3, #2
 80041f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f2:	2300      	movs	r3, #0
 80041f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041f6:	2300      	movs	r3, #0
 80041f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80041fa:	2309      	movs	r3, #9
 80041fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80041fe:	f107 031c 	add.w	r3, r7, #28
 8004202:	4619      	mov	r1, r3
 8004204:	480b      	ldr	r0, [pc, #44]	; (8004234 <HAL_TIM_MspPostInit+0x198>)
 8004206:	f003 fd3f 	bl	8007c88 <HAL_GPIO_Init>
}
 800420a:	bf00      	nop
 800420c:	3730      	adds	r7, #48	; 0x30
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	40010000 	.word	0x40010000
 8004218:	40023800 	.word	0x40023800
 800421c:	40020000 	.word	0x40020000
 8004220:	40000400 	.word	0x40000400
 8004224:	40020400 	.word	0x40020400
 8004228:	40000c00 	.word	0x40000c00
 800422c:	40022000 	.word	0x40022000
 8004230:	40001800 	.word	0x40001800
 8004234:	40021c00 	.word	0x40021c00

08004238 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b0ae      	sub	sp, #184	; 0xb8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004240:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004244:	2200      	movs	r2, #0
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	605a      	str	r2, [r3, #4]
 800424a:	609a      	str	r2, [r3, #8]
 800424c:	60da      	str	r2, [r3, #12]
 800424e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004250:	f107 0320 	add.w	r3, r7, #32
 8004254:	2284      	movs	r2, #132	; 0x84
 8004256:	2100      	movs	r1, #0
 8004258:	4618      	mov	r0, r3
 800425a:	f012 fd8d 	bl	8016d78 <memset>
  if(huart->Instance==USART1)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a53      	ldr	r2, [pc, #332]	; (80043b0 <HAL_UART_MspInit+0x178>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d15d      	bne.n	8004324 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004268:	2340      	movs	r3, #64	; 0x40
 800426a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800426c:	2300      	movs	r3, #0
 800426e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004270:	f107 0320 	add.w	r3, r7, #32
 8004274:	4618      	mov	r0, r3
 8004276:	f007 fcc7 	bl	800bc08 <HAL_RCCEx_PeriphCLKConfig>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004280:	f7fd ff4d 	bl	800211e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004284:	4b4b      	ldr	r3, [pc, #300]	; (80043b4 <HAL_UART_MspInit+0x17c>)
 8004286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004288:	4a4a      	ldr	r2, [pc, #296]	; (80043b4 <HAL_UART_MspInit+0x17c>)
 800428a:	f043 0310 	orr.w	r3, r3, #16
 800428e:	6453      	str	r3, [r2, #68]	; 0x44
 8004290:	4b48      	ldr	r3, [pc, #288]	; (80043b4 <HAL_UART_MspInit+0x17c>)
 8004292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004294:	f003 0310 	and.w	r3, r3, #16
 8004298:	61fb      	str	r3, [r7, #28]
 800429a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800429c:	4b45      	ldr	r3, [pc, #276]	; (80043b4 <HAL_UART_MspInit+0x17c>)
 800429e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a0:	4a44      	ldr	r2, [pc, #272]	; (80043b4 <HAL_UART_MspInit+0x17c>)
 80042a2:	f043 0302 	orr.w	r3, r3, #2
 80042a6:	6313      	str	r3, [r2, #48]	; 0x30
 80042a8:	4b42      	ldr	r3, [pc, #264]	; (80043b4 <HAL_UART_MspInit+0x17c>)
 80042aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	61bb      	str	r3, [r7, #24]
 80042b2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042b4:	4b3f      	ldr	r3, [pc, #252]	; (80043b4 <HAL_UART_MspInit+0x17c>)
 80042b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b8:	4a3e      	ldr	r2, [pc, #248]	; (80043b4 <HAL_UART_MspInit+0x17c>)
 80042ba:	f043 0301 	orr.w	r3, r3, #1
 80042be:	6313      	str	r3, [r2, #48]	; 0x30
 80042c0:	4b3c      	ldr	r3, [pc, #240]	; (80043b4 <HAL_UART_MspInit+0x17c>)
 80042c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	617b      	str	r3, [r7, #20]
 80042ca:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80042cc:	2380      	movs	r3, #128	; 0x80
 80042ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042d2:	2302      	movs	r3, #2
 80042d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042d8:	2300      	movs	r3, #0
 80042da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042de:	2300      	movs	r3, #0
 80042e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80042e4:	2307      	movs	r3, #7
 80042e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80042ea:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80042ee:	4619      	mov	r1, r3
 80042f0:	4831      	ldr	r0, [pc, #196]	; (80043b8 <HAL_UART_MspInit+0x180>)
 80042f2:	f003 fcc9 	bl	8007c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80042f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042fe:	2302      	movs	r3, #2
 8004300:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004304:	2300      	movs	r3, #0
 8004306:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800430a:	2300      	movs	r3, #0
 800430c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004310:	2307      	movs	r3, #7
 8004312:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8004316:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800431a:	4619      	mov	r1, r3
 800431c:	4827      	ldr	r0, [pc, #156]	; (80043bc <HAL_UART_MspInit+0x184>)
 800431e:	f003 fcb3 	bl	8007c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004322:	e040      	b.n	80043a6 <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART6)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a25      	ldr	r2, [pc, #148]	; (80043c0 <HAL_UART_MspInit+0x188>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d13b      	bne.n	80043a6 <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800432e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004332:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8004334:	2300      	movs	r3, #0
 8004336:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004338:	f107 0320 	add.w	r3, r7, #32
 800433c:	4618      	mov	r0, r3
 800433e:	f007 fc63 	bl	800bc08 <HAL_RCCEx_PeriphCLKConfig>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d001      	beq.n	800434c <HAL_UART_MspInit+0x114>
      Error_Handler();
 8004348:	f7fd fee9 	bl	800211e <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800434c:	4b19      	ldr	r3, [pc, #100]	; (80043b4 <HAL_UART_MspInit+0x17c>)
 800434e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004350:	4a18      	ldr	r2, [pc, #96]	; (80043b4 <HAL_UART_MspInit+0x17c>)
 8004352:	f043 0320 	orr.w	r3, r3, #32
 8004356:	6453      	str	r3, [r2, #68]	; 0x44
 8004358:	4b16      	ldr	r3, [pc, #88]	; (80043b4 <HAL_UART_MspInit+0x17c>)
 800435a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800435c:	f003 0320 	and.w	r3, r3, #32
 8004360:	613b      	str	r3, [r7, #16]
 8004362:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004364:	4b13      	ldr	r3, [pc, #76]	; (80043b4 <HAL_UART_MspInit+0x17c>)
 8004366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004368:	4a12      	ldr	r2, [pc, #72]	; (80043b4 <HAL_UART_MspInit+0x17c>)
 800436a:	f043 0304 	orr.w	r3, r3, #4
 800436e:	6313      	str	r3, [r2, #48]	; 0x30
 8004370:	4b10      	ldr	r3, [pc, #64]	; (80043b4 <HAL_UART_MspInit+0x17c>)
 8004372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004374:	f003 0304 	and.w	r3, r3, #4
 8004378:	60fb      	str	r3, [r7, #12]
 800437a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800437c:	23c0      	movs	r3, #192	; 0xc0
 800437e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004382:	2302      	movs	r3, #2
 8004384:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004388:	2300      	movs	r3, #0
 800438a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800438e:	2303      	movs	r3, #3
 8004390:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004394:	2308      	movs	r3, #8
 8004396:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800439a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800439e:	4619      	mov	r1, r3
 80043a0:	4808      	ldr	r0, [pc, #32]	; (80043c4 <HAL_UART_MspInit+0x18c>)
 80043a2:	f003 fc71 	bl	8007c88 <HAL_GPIO_Init>
}
 80043a6:	bf00      	nop
 80043a8:	37b8      	adds	r7, #184	; 0xb8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	40011000 	.word	0x40011000
 80043b4:	40023800 	.word	0x40023800
 80043b8:	40020400 	.word	0x40020400
 80043bc:	40020000 	.word	0x40020000
 80043c0:	40011400 	.word	0x40011400
 80043c4:	40020800 	.word	0x40020800

080043c8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80043ce:	1d3b      	adds	r3, r7, #4
 80043d0:	2200      	movs	r2, #0
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	605a      	str	r2, [r3, #4]
 80043d6:	609a      	str	r2, [r3, #8]
 80043d8:	60da      	str	r2, [r3, #12]
 80043da:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80043dc:	4b3a      	ldr	r3, [pc, #232]	; (80044c8 <HAL_FMC_MspInit+0x100>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d16d      	bne.n	80044c0 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80043e4:	4b38      	ldr	r3, [pc, #224]	; (80044c8 <HAL_FMC_MspInit+0x100>)
 80043e6:	2201      	movs	r2, #1
 80043e8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80043ea:	4b38      	ldr	r3, [pc, #224]	; (80044cc <HAL_FMC_MspInit+0x104>)
 80043ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ee:	4a37      	ldr	r2, [pc, #220]	; (80044cc <HAL_FMC_MspInit+0x104>)
 80043f0:	f043 0301 	orr.w	r3, r3, #1
 80043f4:	6393      	str	r3, [r2, #56]	; 0x38
 80043f6:	4b35      	ldr	r3, [pc, #212]	; (80044cc <HAL_FMC_MspInit+0x104>)
 80043f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	603b      	str	r3, [r7, #0]
 8004400:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8004402:	f64f 7383 	movw	r3, #65411	; 0xff83
 8004406:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004408:	2302      	movs	r3, #2
 800440a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800440c:	2300      	movs	r3, #0
 800440e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004410:	2303      	movs	r3, #3
 8004412:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004414:	230c      	movs	r3, #12
 8004416:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004418:	1d3b      	adds	r3, r7, #4
 800441a:	4619      	mov	r1, r3
 800441c:	482c      	ldr	r0, [pc, #176]	; (80044d0 <HAL_FMC_MspInit+0x108>)
 800441e:	f003 fc33 	bl	8007c88 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8004422:	f248 1333 	movw	r3, #33075	; 0x8133
 8004426:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004428:	2302      	movs	r3, #2
 800442a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800442c:	2300      	movs	r3, #0
 800442e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004430:	2303      	movs	r3, #3
 8004432:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004434:	230c      	movs	r3, #12
 8004436:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004438:	1d3b      	adds	r3, r7, #4
 800443a:	4619      	mov	r1, r3
 800443c:	4825      	ldr	r0, [pc, #148]	; (80044d4 <HAL_FMC_MspInit+0x10c>)
 800443e:	f003 fc23 	bl	8007c88 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8004442:	f24c 7303 	movw	r3, #50947	; 0xc703
 8004446:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004448:	2302      	movs	r3, #2
 800444a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800444c:	2300      	movs	r3, #0
 800444e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004450:	2303      	movs	r3, #3
 8004452:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004454:	230c      	movs	r3, #12
 8004456:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004458:	1d3b      	adds	r3, r7, #4
 800445a:	4619      	mov	r1, r3
 800445c:	481e      	ldr	r0, [pc, #120]	; (80044d8 <HAL_FMC_MspInit+0x110>)
 800445e:	f003 fc13 	bl	8007c88 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8004462:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8004466:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004468:	2302      	movs	r3, #2
 800446a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800446c:	2300      	movs	r3, #0
 800446e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004470:	2303      	movs	r3, #3
 8004472:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004474:	230c      	movs	r3, #12
 8004476:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004478:	1d3b      	adds	r3, r7, #4
 800447a:	4619      	mov	r1, r3
 800447c:	4817      	ldr	r0, [pc, #92]	; (80044dc <HAL_FMC_MspInit+0x114>)
 800447e:	f003 fc03 	bl	8007c88 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8004482:	2328      	movs	r3, #40	; 0x28
 8004484:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004486:	2302      	movs	r3, #2
 8004488:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800448a:	2300      	movs	r3, #0
 800448c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800448e:	2303      	movs	r3, #3
 8004490:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004492:	230c      	movs	r3, #12
 8004494:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004496:	1d3b      	adds	r3, r7, #4
 8004498:	4619      	mov	r1, r3
 800449a:	4811      	ldr	r0, [pc, #68]	; (80044e0 <HAL_FMC_MspInit+0x118>)
 800449c:	f003 fbf4 	bl	8007c88 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80044a0:	2308      	movs	r3, #8
 80044a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044a4:	2302      	movs	r3, #2
 80044a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a8:	2300      	movs	r3, #0
 80044aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044ac:	2303      	movs	r3, #3
 80044ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80044b0:	230c      	movs	r3, #12
 80044b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80044b4:	1d3b      	adds	r3, r7, #4
 80044b6:	4619      	mov	r1, r3
 80044b8:	480a      	ldr	r0, [pc, #40]	; (80044e4 <HAL_FMC_MspInit+0x11c>)
 80044ba:	f003 fbe5 	bl	8007c88 <HAL_GPIO_Init>
 80044be:	e000      	b.n	80044c2 <HAL_FMC_MspInit+0xfa>
    return;
 80044c0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80044c2:	3718      	adds	r7, #24
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	20000e60 	.word	0x20000e60
 80044cc:	40023800 	.word	0x40023800
 80044d0:	40021000 	.word	0x40021000
 80044d4:	40021800 	.word	0x40021800
 80044d8:	40020c00 	.word	0x40020c00
 80044dc:	40021400 	.word	0x40021400
 80044e0:	40021c00 	.word	0x40021c00
 80044e4:	40020800 	.word	0x40020800

080044e8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80044f0:	f7ff ff6a 	bl	80043c8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80044f4:	bf00      	nop
 80044f6:	3708      	adds	r7, #8
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b08a      	sub	sp, #40	; 0x28
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a2b      	ldr	r2, [pc, #172]	; (80045b8 <HAL_SAI_MspInit+0xbc>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d124      	bne.n	8004558 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800450e:	4b2b      	ldr	r3, [pc, #172]	; (80045bc <HAL_SAI_MspInit+0xc0>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10b      	bne.n	800452e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8004516:	4b2a      	ldr	r3, [pc, #168]	; (80045c0 <HAL_SAI_MspInit+0xc4>)
 8004518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800451a:	4a29      	ldr	r2, [pc, #164]	; (80045c0 <HAL_SAI_MspInit+0xc4>)
 800451c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004520:	6453      	str	r3, [r2, #68]	; 0x44
 8004522:	4b27      	ldr	r3, [pc, #156]	; (80045c0 <HAL_SAI_MspInit+0xc4>)
 8004524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004526:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800452a:	613b      	str	r3, [r7, #16]
 800452c:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 800452e:	4b23      	ldr	r3, [pc, #140]	; (80045bc <HAL_SAI_MspInit+0xc0>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	3301      	adds	r3, #1
 8004534:	4a21      	ldr	r2, [pc, #132]	; (80045bc <HAL_SAI_MspInit+0xc0>)
 8004536:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8004538:	23f0      	movs	r3, #240	; 0xf0
 800453a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800453c:	2302      	movs	r3, #2
 800453e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004540:	2300      	movs	r3, #0
 8004542:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004544:	2300      	movs	r3, #0
 8004546:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8004548:	230a      	movs	r3, #10
 800454a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800454c:	f107 0314 	add.w	r3, r7, #20
 8004550:	4619      	mov	r1, r3
 8004552:	481c      	ldr	r0, [pc, #112]	; (80045c4 <HAL_SAI_MspInit+0xc8>)
 8004554:	f003 fb98 	bl	8007c88 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a1a      	ldr	r2, [pc, #104]	; (80045c8 <HAL_SAI_MspInit+0xcc>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d125      	bne.n	80045ae <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8004562:	4b16      	ldr	r3, [pc, #88]	; (80045bc <HAL_SAI_MspInit+0xc0>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10b      	bne.n	8004582 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800456a:	4b15      	ldr	r3, [pc, #84]	; (80045c0 <HAL_SAI_MspInit+0xc4>)
 800456c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456e:	4a14      	ldr	r2, [pc, #80]	; (80045c0 <HAL_SAI_MspInit+0xc4>)
 8004570:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004574:	6453      	str	r3, [r2, #68]	; 0x44
 8004576:	4b12      	ldr	r3, [pc, #72]	; (80045c0 <HAL_SAI_MspInit+0xc4>)
 8004578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800457e:	60fb      	str	r3, [r7, #12]
 8004580:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8004582:	4b0e      	ldr	r3, [pc, #56]	; (80045bc <HAL_SAI_MspInit+0xc0>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	3301      	adds	r3, #1
 8004588:	4a0c      	ldr	r2, [pc, #48]	; (80045bc <HAL_SAI_MspInit+0xc0>)
 800458a:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800458c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004590:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004592:	2302      	movs	r3, #2
 8004594:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004596:	2300      	movs	r3, #0
 8004598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800459a:	2300      	movs	r3, #0
 800459c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800459e:	230a      	movs	r3, #10
 80045a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80045a2:	f107 0314 	add.w	r3, r7, #20
 80045a6:	4619      	mov	r1, r3
 80045a8:	4808      	ldr	r0, [pc, #32]	; (80045cc <HAL_SAI_MspInit+0xd0>)
 80045aa:	f003 fb6d 	bl	8007c88 <HAL_GPIO_Init>

    }
}
 80045ae:	bf00      	nop
 80045b0:	3728      	adds	r7, #40	; 0x28
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	40015c04 	.word	0x40015c04
 80045bc:	20000e64 	.word	0x20000e64
 80045c0:	40023800 	.word	0x40023800
 80045c4:	40022000 	.word	0x40022000
 80045c8:	40015c24 	.word	0x40015c24
 80045cc:	40021800 	.word	0x40021800

080045d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045d0:	b480      	push	{r7}
 80045d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80045d4:	e7fe      	b.n	80045d4 <NMI_Handler+0x4>

080045d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045d6:	b480      	push	{r7}
 80045d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045da:	e7fe      	b.n	80045da <HardFault_Handler+0x4>

080045dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80045dc:	b480      	push	{r7}
 80045de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80045e0:	e7fe      	b.n	80045e0 <MemManage_Handler+0x4>

080045e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80045e2:	b480      	push	{r7}
 80045e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80045e6:	e7fe      	b.n	80045e6 <BusFault_Handler+0x4>

080045e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80045e8:	b480      	push	{r7}
 80045ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80045ec:	e7fe      	b.n	80045ec <UsageFault_Handler+0x4>

080045ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80045ee:	b480      	push	{r7}
 80045f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80045f2:	bf00      	nop
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004600:	bf00      	nop
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr

0800460a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800460a:	b480      	push	{r7}
 800460c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800460e:	bf00      	nop
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800461c:	f000 f908 	bl	8004830 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004620:	bf00      	nop
 8004622:	bd80      	pop	{r7, pc}

08004624 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Test_potato_Pin);
 8004628:	2001      	movs	r0, #1
 800462a:	f003 fe17 	bl	800825c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800462e:	bf00      	nop
 8004630:	bd80      	pop	{r7, pc}
	...

08004634 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8004638:	4802      	ldr	r0, [pc, #8]	; (8004644 <SDMMC1_IRQHandler+0x10>)
 800463a:	f009 f825 	bl	800d688 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800463e:	bf00      	nop
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	2000070c 	.word	0x2000070c

08004648 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 800464c:	4802      	ldr	r0, [pc, #8]	; (8004658 <DMA2_Stream1_IRQHandler+0x10>)
 800464e:	f001 fa1d 	bl	8005a8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8004652:	bf00      	nop
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	200002f8 	.word	0x200002f8

0800465c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8004660:	4802      	ldr	r0, [pc, #8]	; (800466c <DMA2_Stream3_IRQHandler+0x10>)
 8004662:	f001 fa13 	bl	8005a8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8004666:	bf00      	nop
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	20000790 	.word	0x20000790

08004670 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8004674:	4802      	ldr	r0, [pc, #8]	; (8004680 <OTG_FS_IRQHandler+0x10>)
 8004676:	f004 f873 	bl	8008760 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800467a:	bf00      	nop
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	20001290 	.word	0x20001290

08004684 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8004688:	4802      	ldr	r0, [pc, #8]	; (8004694 <DMA2_Stream6_IRQHandler+0x10>)
 800468a:	f001 f9ff 	bl	8005a8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800468e:	bf00      	nop
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	200007f0 	.word	0x200007f0

08004698 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 800469c:	4802      	ldr	r0, [pc, #8]	; (80046a8 <DCMI_IRQHandler+0x10>)
 800469e:	f000 fee3 	bl	8005468 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 80046a2:	bf00      	nop
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	200002a8 	.word	0x200002a8

080046ac <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80046b0:	4802      	ldr	r0, [pc, #8]	; (80046bc <LTDC_IRQHandler+0x10>)
 80046b2:	f006 fa23 	bl	800aafc <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80046b6:	bf00      	nop
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	200004f0 	.word	0x200004f0

080046c0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80046c4:	4802      	ldr	r0, [pc, #8]	; (80046d0 <DMA2D_IRQHandler+0x10>)
 80046c6:	f001 fca1 	bl	800600c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80046ca:	bf00      	nop
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	20000358 	.word	0x20000358

080046d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80046dc:	4a14      	ldr	r2, [pc, #80]	; (8004730 <_sbrk+0x5c>)
 80046de:	4b15      	ldr	r3, [pc, #84]	; (8004734 <_sbrk+0x60>)
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80046e8:	4b13      	ldr	r3, [pc, #76]	; (8004738 <_sbrk+0x64>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d102      	bne.n	80046f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80046f0:	4b11      	ldr	r3, [pc, #68]	; (8004738 <_sbrk+0x64>)
 80046f2:	4a12      	ldr	r2, [pc, #72]	; (800473c <_sbrk+0x68>)
 80046f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80046f6:	4b10      	ldr	r3, [pc, #64]	; (8004738 <_sbrk+0x64>)
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4413      	add	r3, r2
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	429a      	cmp	r2, r3
 8004702:	d207      	bcs.n	8004714 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004704:	f012 faf0 	bl	8016ce8 <__errno>
 8004708:	4603      	mov	r3, r0
 800470a:	220c      	movs	r2, #12
 800470c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800470e:	f04f 33ff 	mov.w	r3, #4294967295
 8004712:	e009      	b.n	8004728 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004714:	4b08      	ldr	r3, [pc, #32]	; (8004738 <_sbrk+0x64>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800471a:	4b07      	ldr	r3, [pc, #28]	; (8004738 <_sbrk+0x64>)
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4413      	add	r3, r2
 8004722:	4a05      	ldr	r2, [pc, #20]	; (8004738 <_sbrk+0x64>)
 8004724:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004726:	68fb      	ldr	r3, [r7, #12]
}
 8004728:	4618      	mov	r0, r3
 800472a:	3718      	adds	r7, #24
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	20050000 	.word	0x20050000
 8004734:	00000400 	.word	0x00000400
 8004738:	20000e68 	.word	0x20000e68
 800473c:	200015a8 	.word	0x200015a8

08004740 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004740:	b480      	push	{r7}
 8004742:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004744:	4b06      	ldr	r3, [pc, #24]	; (8004760 <SystemInit+0x20>)
 8004746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800474a:	4a05      	ldr	r2, [pc, #20]	; (8004760 <SystemInit+0x20>)
 800474c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004750:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004754:	bf00      	nop
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	e000ed00 	.word	0xe000ed00

08004764 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004764:	f8df d034 	ldr.w	sp, [pc, #52]	; 800479c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004768:	480d      	ldr	r0, [pc, #52]	; (80047a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800476a:	490e      	ldr	r1, [pc, #56]	; (80047a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800476c:	4a0e      	ldr	r2, [pc, #56]	; (80047a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800476e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004770:	e002      	b.n	8004778 <LoopCopyDataInit>

08004772 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004772:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004774:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004776:	3304      	adds	r3, #4

08004778 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004778:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800477a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800477c:	d3f9      	bcc.n	8004772 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800477e:	4a0b      	ldr	r2, [pc, #44]	; (80047ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004780:	4c0b      	ldr	r4, [pc, #44]	; (80047b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004782:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004784:	e001      	b.n	800478a <LoopFillZerobss>

08004786 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004786:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004788:	3204      	adds	r2, #4

0800478a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800478a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800478c:	d3fb      	bcc.n	8004786 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800478e:	f7ff ffd7 	bl	8004740 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004792:	f012 faaf 	bl	8016cf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004796:	f7fb feb9 	bl	800050c <main>
  bx  lr    
 800479a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800479c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80047a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80047a4:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 80047a8:	08018fe0 	.word	0x08018fe0
  ldr r2, =_sbss
 80047ac:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80047b0:	200015a4 	.word	0x200015a4

080047b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80047b4:	e7fe      	b.n	80047b4 <ADC_IRQHandler>

080047b6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047ba:	2003      	movs	r0, #3
 80047bc:	f000 fc00 	bl	8004fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80047c0:	200f      	movs	r0, #15
 80047c2:	f000 f805 	bl	80047d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80047c6:	f7fe fd79 	bl	80032bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80047d8:	4b12      	ldr	r3, [pc, #72]	; (8004824 <HAL_InitTick+0x54>)
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	4b12      	ldr	r3, [pc, #72]	; (8004828 <HAL_InitTick+0x58>)
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	4619      	mov	r1, r3
 80047e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80047e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80047ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 fc1b 	bl	800502a <HAL_SYSTICK_Config>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e00e      	b.n	800481c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2b0f      	cmp	r3, #15
 8004802:	d80a      	bhi.n	800481a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004804:	2200      	movs	r2, #0
 8004806:	6879      	ldr	r1, [r7, #4]
 8004808:	f04f 30ff 	mov.w	r0, #4294967295
 800480c:	f000 fbe3 	bl	8004fd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004810:	4a06      	ldr	r2, [pc, #24]	; (800482c <HAL_InitTick+0x5c>)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004816:	2300      	movs	r3, #0
 8004818:	e000      	b.n	800481c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
}
 800481c:	4618      	mov	r0, r3
 800481e:	3708      	adds	r7, #8
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	20000018 	.word	0x20000018
 8004828:	20000020 	.word	0x20000020
 800482c:	2000001c 	.word	0x2000001c

08004830 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004830:	b480      	push	{r7}
 8004832:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004834:	4b06      	ldr	r3, [pc, #24]	; (8004850 <HAL_IncTick+0x20>)
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	461a      	mov	r2, r3
 800483a:	4b06      	ldr	r3, [pc, #24]	; (8004854 <HAL_IncTick+0x24>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4413      	add	r3, r2
 8004840:	4a04      	ldr	r2, [pc, #16]	; (8004854 <HAL_IncTick+0x24>)
 8004842:	6013      	str	r3, [r2, #0]
}
 8004844:	bf00      	nop
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	20000020 	.word	0x20000020
 8004854:	20000e6c 	.word	0x20000e6c

08004858 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004858:	b480      	push	{r7}
 800485a:	af00      	add	r7, sp, #0
  return uwTick;
 800485c:	4b03      	ldr	r3, [pc, #12]	; (800486c <HAL_GetTick+0x14>)
 800485e:	681b      	ldr	r3, [r3, #0]
}
 8004860:	4618      	mov	r0, r3
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	20000e6c 	.word	0x20000e6c

08004870 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004878:	f7ff ffee 	bl	8004858 <HAL_GetTick>
 800487c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004888:	d005      	beq.n	8004896 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800488a:	4b0a      	ldr	r3, [pc, #40]	; (80048b4 <HAL_Delay+0x44>)
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	461a      	mov	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	4413      	add	r3, r2
 8004894:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004896:	bf00      	nop
 8004898:	f7ff ffde 	bl	8004858 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d8f7      	bhi.n	8004898 <HAL_Delay+0x28>
  {
  }
}
 80048a8:	bf00      	nop
 80048aa:	bf00      	nop
 80048ac:	3710      	adds	r7, #16
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	20000020 	.word	0x20000020

080048b8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80048b8:	b480      	push	{r7}
 80048ba:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80048bc:	4b05      	ldr	r3, [pc, #20]	; (80048d4 <HAL_SuspendTick+0x1c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a04      	ldr	r2, [pc, #16]	; (80048d4 <HAL_SuspendTick+0x1c>)
 80048c2:	f023 0302 	bic.w	r3, r3, #2
 80048c6:	6013      	str	r3, [r2, #0]
}
 80048c8:	bf00      	nop
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	e000e010 	.word	0xe000e010

080048d8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80048d8:	b480      	push	{r7}
 80048da:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80048dc:	4b05      	ldr	r3, [pc, #20]	; (80048f4 <HAL_ResumeTick+0x1c>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a04      	ldr	r2, [pc, #16]	; (80048f4 <HAL_ResumeTick+0x1c>)
 80048e2:	f043 0302 	orr.w	r3, r3, #2
 80048e6:	6013      	str	r3, [r2, #0]
}
 80048e8:	bf00      	nop
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	e000e010 	.word	0xe000e010

080048f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004900:	2300      	movs	r3, #0
 8004902:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e031      	b.n	8004972 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004912:	2b00      	cmp	r3, #0
 8004914:	d109      	bne.n	800492a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7fe fcf4 	bl	8003304 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492e:	f003 0310 	and.w	r3, r3, #16
 8004932:	2b00      	cmp	r3, #0
 8004934:	d116      	bne.n	8004964 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800493a:	4b10      	ldr	r3, [pc, #64]	; (800497c <HAL_ADC_Init+0x84>)
 800493c:	4013      	ands	r3, r2
 800493e:	f043 0202 	orr.w	r2, r3, #2
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f970 	bl	8004c2c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004956:	f023 0303 	bic.w	r3, r3, #3
 800495a:	f043 0201 	orr.w	r2, r3, #1
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	641a      	str	r2, [r3, #64]	; 0x40
 8004962:	e001      	b.n	8004968 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004970:	7bfb      	ldrb	r3, [r7, #15]
}
 8004972:	4618      	mov	r0, r3
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	ffffeefd 	.word	0xffffeefd

08004980 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800498a:	2300      	movs	r3, #0
 800498c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004994:	2b01      	cmp	r3, #1
 8004996:	d101      	bne.n	800499c <HAL_ADC_ConfigChannel+0x1c>
 8004998:	2302      	movs	r3, #2
 800499a:	e136      	b.n	8004c0a <HAL_ADC_ConfigChannel+0x28a>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2b09      	cmp	r3, #9
 80049aa:	d93a      	bls.n	8004a22 <HAL_ADC_ConfigChannel+0xa2>
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049b4:	d035      	beq.n	8004a22 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68d9      	ldr	r1, [r3, #12]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	461a      	mov	r2, r3
 80049c4:	4613      	mov	r3, r2
 80049c6:	005b      	lsls	r3, r3, #1
 80049c8:	4413      	add	r3, r2
 80049ca:	3b1e      	subs	r3, #30
 80049cc:	2207      	movs	r2, #7
 80049ce:	fa02 f303 	lsl.w	r3, r2, r3
 80049d2:	43da      	mvns	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	400a      	ands	r2, r1
 80049da:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a8d      	ldr	r2, [pc, #564]	; (8004c18 <HAL_ADC_ConfigChannel+0x298>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d10a      	bne.n	80049fc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68d9      	ldr	r1, [r3, #12]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	061a      	lsls	r2, r3, #24
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	430a      	orrs	r2, r1
 80049f8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80049fa:	e035      	b.n	8004a68 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68d9      	ldr	r1, [r3, #12]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	689a      	ldr	r2, [r3, #8]
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	4603      	mov	r3, r0
 8004a10:	005b      	lsls	r3, r3, #1
 8004a12:	4403      	add	r3, r0
 8004a14:	3b1e      	subs	r3, #30
 8004a16:	409a      	lsls	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004a20:	e022      	b.n	8004a68 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	6919      	ldr	r1, [r3, #16]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	461a      	mov	r2, r3
 8004a30:	4613      	mov	r3, r2
 8004a32:	005b      	lsls	r3, r3, #1
 8004a34:	4413      	add	r3, r2
 8004a36:	2207      	movs	r2, #7
 8004a38:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3c:	43da      	mvns	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	400a      	ands	r2, r1
 8004a44:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	6919      	ldr	r1, [r3, #16]
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	689a      	ldr	r2, [r3, #8]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	4618      	mov	r0, r3
 8004a58:	4603      	mov	r3, r0
 8004a5a:	005b      	lsls	r3, r3, #1
 8004a5c:	4403      	add	r3, r0
 8004a5e:	409a      	lsls	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	430a      	orrs	r2, r1
 8004a66:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	2b06      	cmp	r3, #6
 8004a6e:	d824      	bhi.n	8004aba <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	4413      	add	r3, r2
 8004a80:	3b05      	subs	r3, #5
 8004a82:	221f      	movs	r2, #31
 8004a84:	fa02 f303 	lsl.w	r3, r2, r3
 8004a88:	43da      	mvns	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	400a      	ands	r2, r1
 8004a90:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	685a      	ldr	r2, [r3, #4]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	4413      	add	r3, r2
 8004aaa:	3b05      	subs	r3, #5
 8004aac:	fa00 f203 	lsl.w	r2, r0, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	635a      	str	r2, [r3, #52]	; 0x34
 8004ab8:	e04c      	b.n	8004b54 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	2b0c      	cmp	r3, #12
 8004ac0:	d824      	bhi.n	8004b0c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	4613      	mov	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	3b23      	subs	r3, #35	; 0x23
 8004ad4:	221f      	movs	r2, #31
 8004ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ada:	43da      	mvns	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	400a      	ands	r2, r1
 8004ae2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	4618      	mov	r0, r3
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	685a      	ldr	r2, [r3, #4]
 8004af6:	4613      	mov	r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4413      	add	r3, r2
 8004afc:	3b23      	subs	r3, #35	; 0x23
 8004afe:	fa00 f203 	lsl.w	r2, r0, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	631a      	str	r2, [r3, #48]	; 0x30
 8004b0a:	e023      	b.n	8004b54 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	685a      	ldr	r2, [r3, #4]
 8004b16:	4613      	mov	r3, r2
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	4413      	add	r3, r2
 8004b1c:	3b41      	subs	r3, #65	; 0x41
 8004b1e:	221f      	movs	r2, #31
 8004b20:	fa02 f303 	lsl.w	r3, r2, r3
 8004b24:	43da      	mvns	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	400a      	ands	r2, r1
 8004b2c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	685a      	ldr	r2, [r3, #4]
 8004b40:	4613      	mov	r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4413      	add	r3, r2
 8004b46:	3b41      	subs	r3, #65	; 0x41
 8004b48:	fa00 f203 	lsl.w	r2, r0, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	430a      	orrs	r2, r1
 8004b52:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a30      	ldr	r2, [pc, #192]	; (8004c1c <HAL_ADC_ConfigChannel+0x29c>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d10a      	bne.n	8004b74 <HAL_ADC_ConfigChannel+0x1f4>
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b66:	d105      	bne.n	8004b74 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004b68:	4b2d      	ldr	r3, [pc, #180]	; (8004c20 <HAL_ADC_ConfigChannel+0x2a0>)
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	4a2c      	ldr	r2, [pc, #176]	; (8004c20 <HAL_ADC_ConfigChannel+0x2a0>)
 8004b6e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004b72:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a28      	ldr	r2, [pc, #160]	; (8004c1c <HAL_ADC_ConfigChannel+0x29c>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d10f      	bne.n	8004b9e <HAL_ADC_ConfigChannel+0x21e>
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2b12      	cmp	r3, #18
 8004b84:	d10b      	bne.n	8004b9e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8004b86:	4b26      	ldr	r3, [pc, #152]	; (8004c20 <HAL_ADC_ConfigChannel+0x2a0>)
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	4a25      	ldr	r2, [pc, #148]	; (8004c20 <HAL_ADC_ConfigChannel+0x2a0>)
 8004b8c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004b90:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004b92:	4b23      	ldr	r3, [pc, #140]	; (8004c20 <HAL_ADC_ConfigChannel+0x2a0>)
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	4a22      	ldr	r2, [pc, #136]	; (8004c20 <HAL_ADC_ConfigChannel+0x2a0>)
 8004b98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b9c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a1e      	ldr	r2, [pc, #120]	; (8004c1c <HAL_ADC_ConfigChannel+0x29c>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d12b      	bne.n	8004c00 <HAL_ADC_ConfigChannel+0x280>
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a1a      	ldr	r2, [pc, #104]	; (8004c18 <HAL_ADC_ConfigChannel+0x298>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d003      	beq.n	8004bba <HAL_ADC_ConfigChannel+0x23a>
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2b11      	cmp	r3, #17
 8004bb8:	d122      	bne.n	8004c00 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8004bba:	4b19      	ldr	r3, [pc, #100]	; (8004c20 <HAL_ADC_ConfigChannel+0x2a0>)
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	4a18      	ldr	r2, [pc, #96]	; (8004c20 <HAL_ADC_ConfigChannel+0x2a0>)
 8004bc0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004bc4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004bc6:	4b16      	ldr	r3, [pc, #88]	; (8004c20 <HAL_ADC_ConfigChannel+0x2a0>)
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	4a15      	ldr	r2, [pc, #84]	; (8004c20 <HAL_ADC_ConfigChannel+0x2a0>)
 8004bcc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004bd0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a10      	ldr	r2, [pc, #64]	; (8004c18 <HAL_ADC_ConfigChannel+0x298>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d111      	bne.n	8004c00 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004bdc:	4b11      	ldr	r3, [pc, #68]	; (8004c24 <HAL_ADC_ConfigChannel+0x2a4>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a11      	ldr	r2, [pc, #68]	; (8004c28 <HAL_ADC_ConfigChannel+0x2a8>)
 8004be2:	fba2 2303 	umull	r2, r3, r2, r3
 8004be6:	0c9a      	lsrs	r2, r3, #18
 8004be8:	4613      	mov	r3, r2
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	4413      	add	r3, r2
 8004bee:	005b      	lsls	r3, r3, #1
 8004bf0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004bf2:	e002      	b.n	8004bfa <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1f9      	bne.n	8004bf4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3714      	adds	r7, #20
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	10000012 	.word	0x10000012
 8004c1c:	40012000 	.word	0x40012000
 8004c20:	40012300 	.word	0x40012300
 8004c24:	20000018 	.word	0x20000018
 8004c28:	431bde83 	.word	0x431bde83

08004c2c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004c34:	4b78      	ldr	r3, [pc, #480]	; (8004e18 <ADC_Init+0x1ec>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	4a77      	ldr	r2, [pc, #476]	; (8004e18 <ADC_Init+0x1ec>)
 8004c3a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004c3e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004c40:	4b75      	ldr	r3, [pc, #468]	; (8004e18 <ADC_Init+0x1ec>)
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	4973      	ldr	r1, [pc, #460]	; (8004e18 <ADC_Init+0x1ec>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	685a      	ldr	r2, [r3, #4]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	6859      	ldr	r1, [r3, #4]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	021a      	lsls	r2, r3, #8
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004c80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6859      	ldr	r1, [r3, #4]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689a      	ldr	r2, [r3, #8]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	430a      	orrs	r2, r1
 8004c92:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	689a      	ldr	r2, [r3, #8]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ca2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6899      	ldr	r1, [r3, #8]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	68da      	ldr	r2, [r3, #12]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cba:	4a58      	ldr	r2, [pc, #352]	; (8004e1c <ADC_Init+0x1f0>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d022      	beq.n	8004d06 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	689a      	ldr	r2, [r3, #8]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004cce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6899      	ldr	r1, [r3, #8]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	689a      	ldr	r2, [r3, #8]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004cf0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	6899      	ldr	r1, [r3, #8]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	430a      	orrs	r2, r1
 8004d02:	609a      	str	r2, [r3, #8]
 8004d04:	e00f      	b.n	8004d26 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689a      	ldr	r2, [r3, #8]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004d14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	689a      	ldr	r2, [r3, #8]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004d24:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	689a      	ldr	r2, [r3, #8]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f022 0202 	bic.w	r2, r2, #2
 8004d34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	6899      	ldr	r1, [r3, #8]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	005a      	lsls	r2, r3, #1
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	430a      	orrs	r2, r1
 8004d48:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d01b      	beq.n	8004d8c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685a      	ldr	r2, [r3, #4]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d62:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685a      	ldr	r2, [r3, #4]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004d72:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	6859      	ldr	r1, [r3, #4]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	035a      	lsls	r2, r3, #13
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	430a      	orrs	r2, r1
 8004d88:	605a      	str	r2, [r3, #4]
 8004d8a:	e007      	b.n	8004d9c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	685a      	ldr	r2, [r3, #4]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d9a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004daa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	69db      	ldr	r3, [r3, #28]
 8004db6:	3b01      	subs	r3, #1
 8004db8:	051a      	lsls	r2, r3, #20
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	689a      	ldr	r2, [r3, #8]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004dd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	6899      	ldr	r1, [r3, #8]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004dde:	025a      	lsls	r2, r3, #9
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	430a      	orrs	r2, r1
 8004de6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689a      	ldr	r2, [r3, #8]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004df6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6899      	ldr	r1, [r3, #8]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	029a      	lsls	r2, r3, #10
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	609a      	str	r2, [r3, #8]
}
 8004e0c:	bf00      	nop
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr
 8004e18:	40012300 	.word	0x40012300
 8004e1c:	0f000001 	.word	0x0f000001

08004e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f003 0307 	and.w	r3, r3, #7
 8004e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e30:	4b0b      	ldr	r3, [pc, #44]	; (8004e60 <__NVIC_SetPriorityGrouping+0x40>)
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004e48:	4b06      	ldr	r3, [pc, #24]	; (8004e64 <__NVIC_SetPriorityGrouping+0x44>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e4e:	4a04      	ldr	r2, [pc, #16]	; (8004e60 <__NVIC_SetPriorityGrouping+0x40>)
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	60d3      	str	r3, [r2, #12]
}
 8004e54:	bf00      	nop
 8004e56:	3714      	adds	r7, #20
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr
 8004e60:	e000ed00 	.word	0xe000ed00
 8004e64:	05fa0000 	.word	0x05fa0000

08004e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e6c:	4b04      	ldr	r3, [pc, #16]	; (8004e80 <__NVIC_GetPriorityGrouping+0x18>)
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	0a1b      	lsrs	r3, r3, #8
 8004e72:	f003 0307 	and.w	r3, r3, #7
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr
 8004e80:	e000ed00 	.word	0xe000ed00

08004e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	db0b      	blt.n	8004eae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e96:	79fb      	ldrb	r3, [r7, #7]
 8004e98:	f003 021f 	and.w	r2, r3, #31
 8004e9c:	4907      	ldr	r1, [pc, #28]	; (8004ebc <__NVIC_EnableIRQ+0x38>)
 8004e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ea2:	095b      	lsrs	r3, r3, #5
 8004ea4:	2001      	movs	r0, #1
 8004ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8004eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004eae:	bf00      	nop
 8004eb0:	370c      	adds	r7, #12
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	e000e100 	.word	0xe000e100

08004ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	6039      	str	r1, [r7, #0]
 8004eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	db0a      	blt.n	8004eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	b2da      	uxtb	r2, r3
 8004ed8:	490c      	ldr	r1, [pc, #48]	; (8004f0c <__NVIC_SetPriority+0x4c>)
 8004eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ede:	0112      	lsls	r2, r2, #4
 8004ee0:	b2d2      	uxtb	r2, r2
 8004ee2:	440b      	add	r3, r1
 8004ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ee8:	e00a      	b.n	8004f00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	b2da      	uxtb	r2, r3
 8004eee:	4908      	ldr	r1, [pc, #32]	; (8004f10 <__NVIC_SetPriority+0x50>)
 8004ef0:	79fb      	ldrb	r3, [r7, #7]
 8004ef2:	f003 030f 	and.w	r3, r3, #15
 8004ef6:	3b04      	subs	r3, #4
 8004ef8:	0112      	lsls	r2, r2, #4
 8004efa:	b2d2      	uxtb	r2, r2
 8004efc:	440b      	add	r3, r1
 8004efe:	761a      	strb	r2, [r3, #24]
}
 8004f00:	bf00      	nop
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr
 8004f0c:	e000e100 	.word	0xe000e100
 8004f10:	e000ed00 	.word	0xe000ed00

08004f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b089      	sub	sp, #36	; 0x24
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f003 0307 	and.w	r3, r3, #7
 8004f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	f1c3 0307 	rsb	r3, r3, #7
 8004f2e:	2b04      	cmp	r3, #4
 8004f30:	bf28      	it	cs
 8004f32:	2304      	movcs	r3, #4
 8004f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	3304      	adds	r3, #4
 8004f3a:	2b06      	cmp	r3, #6
 8004f3c:	d902      	bls.n	8004f44 <NVIC_EncodePriority+0x30>
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	3b03      	subs	r3, #3
 8004f42:	e000      	b.n	8004f46 <NVIC_EncodePriority+0x32>
 8004f44:	2300      	movs	r3, #0
 8004f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f48:	f04f 32ff 	mov.w	r2, #4294967295
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f52:	43da      	mvns	r2, r3
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	401a      	ands	r2, r3
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	fa01 f303 	lsl.w	r3, r1, r3
 8004f66:	43d9      	mvns	r1, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f6c:	4313      	orrs	r3, r2
         );
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3724      	adds	r7, #36	; 0x24
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
	...

08004f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	3b01      	subs	r3, #1
 8004f88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f8c:	d301      	bcc.n	8004f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e00f      	b.n	8004fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f92:	4a0a      	ldr	r2, [pc, #40]	; (8004fbc <SysTick_Config+0x40>)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	3b01      	subs	r3, #1
 8004f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f9a:	210f      	movs	r1, #15
 8004f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa0:	f7ff ff8e 	bl	8004ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004fa4:	4b05      	ldr	r3, [pc, #20]	; (8004fbc <SysTick_Config+0x40>)
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004faa:	4b04      	ldr	r3, [pc, #16]	; (8004fbc <SysTick_Config+0x40>)
 8004fac:	2207      	movs	r2, #7
 8004fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	e000e010 	.word	0xe000e010

08004fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f7ff ff29 	bl	8004e20 <__NVIC_SetPriorityGrouping>
}
 8004fce:	bf00      	nop
 8004fd0:	3708      	adds	r7, #8
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b086      	sub	sp, #24
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	4603      	mov	r3, r0
 8004fde:	60b9      	str	r1, [r7, #8]
 8004fe0:	607a      	str	r2, [r7, #4]
 8004fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004fe8:	f7ff ff3e 	bl	8004e68 <__NVIC_GetPriorityGrouping>
 8004fec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	68b9      	ldr	r1, [r7, #8]
 8004ff2:	6978      	ldr	r0, [r7, #20]
 8004ff4:	f7ff ff8e 	bl	8004f14 <NVIC_EncodePriority>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ffe:	4611      	mov	r1, r2
 8005000:	4618      	mov	r0, r3
 8005002:	f7ff ff5d 	bl	8004ec0 <__NVIC_SetPriority>
}
 8005006:	bf00      	nop
 8005008:	3718      	adds	r7, #24
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800500e:	b580      	push	{r7, lr}
 8005010:	b082      	sub	sp, #8
 8005012:	af00      	add	r7, sp, #0
 8005014:	4603      	mov	r3, r0
 8005016:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800501c:	4618      	mov	r0, r3
 800501e:	f7ff ff31 	bl	8004e84 <__NVIC_EnableIRQ>
}
 8005022:	bf00      	nop
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b082      	sub	sp, #8
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f7ff ffa2 	bl	8004f7c <SysTick_Config>
 8005038:	4603      	mov	r3, r0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3708      	adds	r7, #8
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
	...

08005044 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d101      	bne.n	8005056 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e054      	b.n	8005100 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	7f5b      	ldrb	r3, [r3, #29]
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b00      	cmp	r3, #0
 800505e:	d105      	bne.n	800506c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f7fe f98c 	bl	8003384 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2202      	movs	r2, #2
 8005070:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	791b      	ldrb	r3, [r3, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10c      	bne.n	8005094 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a22      	ldr	r2, [pc, #136]	; (8005108 <HAL_CRC_Init+0xc4>)
 8005080:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	689a      	ldr	r2, [r3, #8]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0218 	bic.w	r2, r2, #24
 8005090:	609a      	str	r2, [r3, #8]
 8005092:	e00c      	b.n	80050ae <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6899      	ldr	r1, [r3, #8]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	461a      	mov	r2, r3
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 f834 	bl	800510c <HAL_CRCEx_Polynomial_Set>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d001      	beq.n	80050ae <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e028      	b.n	8005100 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	795b      	ldrb	r3, [r3, #5]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d105      	bne.n	80050c2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f04f 32ff 	mov.w	r2, #4294967295
 80050be:	611a      	str	r2, [r3, #16]
 80050c0:	e004      	b.n	80050cc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	6912      	ldr	r2, [r2, #16]
 80050ca:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	695a      	ldr	r2, [r3, #20]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	430a      	orrs	r2, r1
 80050e0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	699a      	ldr	r2, [r3, #24]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	430a      	orrs	r2, r1
 80050f6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3708      	adds	r7, #8
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	04c11db7 	.word	0x04c11db7

0800510c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800510c:	b480      	push	{r7}
 800510e:	b087      	sub	sp, #28
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005118:	2300      	movs	r3, #0
 800511a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800511c:	231f      	movs	r3, #31
 800511e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005120:	bf00      	nop
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	1e5a      	subs	r2, r3, #1
 8005126:	613a      	str	r2, [r7, #16]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d009      	beq.n	8005140 <HAL_CRCEx_Polynomial_Set+0x34>
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	f003 031f 	and.w	r3, r3, #31
 8005132:	68ba      	ldr	r2, [r7, #8]
 8005134:	fa22 f303 	lsr.w	r3, r2, r3
 8005138:	f003 0301 	and.w	r3, r3, #1
 800513c:	2b00      	cmp	r3, #0
 800513e:	d0f0      	beq.n	8005122 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2b18      	cmp	r3, #24
 8005144:	d846      	bhi.n	80051d4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8005146:	a201      	add	r2, pc, #4	; (adr r2, 800514c <HAL_CRCEx_Polynomial_Set+0x40>)
 8005148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800514c:	080051db 	.word	0x080051db
 8005150:	080051d5 	.word	0x080051d5
 8005154:	080051d5 	.word	0x080051d5
 8005158:	080051d5 	.word	0x080051d5
 800515c:	080051d5 	.word	0x080051d5
 8005160:	080051d5 	.word	0x080051d5
 8005164:	080051d5 	.word	0x080051d5
 8005168:	080051d5 	.word	0x080051d5
 800516c:	080051c9 	.word	0x080051c9
 8005170:	080051d5 	.word	0x080051d5
 8005174:	080051d5 	.word	0x080051d5
 8005178:	080051d5 	.word	0x080051d5
 800517c:	080051d5 	.word	0x080051d5
 8005180:	080051d5 	.word	0x080051d5
 8005184:	080051d5 	.word	0x080051d5
 8005188:	080051d5 	.word	0x080051d5
 800518c:	080051bd 	.word	0x080051bd
 8005190:	080051d5 	.word	0x080051d5
 8005194:	080051d5 	.word	0x080051d5
 8005198:	080051d5 	.word	0x080051d5
 800519c:	080051d5 	.word	0x080051d5
 80051a0:	080051d5 	.word	0x080051d5
 80051a4:	080051d5 	.word	0x080051d5
 80051a8:	080051d5 	.word	0x080051d5
 80051ac:	080051b1 	.word	0x080051b1
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	2b06      	cmp	r3, #6
 80051b4:	d913      	bls.n	80051de <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80051ba:	e010      	b.n	80051de <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	2b07      	cmp	r3, #7
 80051c0:	d90f      	bls.n	80051e2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80051c6:	e00c      	b.n	80051e2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	2b0f      	cmp	r3, #15
 80051cc:	d90b      	bls.n	80051e6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80051d2:	e008      	b.n	80051e6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	75fb      	strb	r3, [r7, #23]
      break;
 80051d8:	e006      	b.n	80051e8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80051da:	bf00      	nop
 80051dc:	e004      	b.n	80051e8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80051de:	bf00      	nop
 80051e0:	e002      	b.n	80051e8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80051e2:	bf00      	nop
 80051e4:	e000      	b.n	80051e8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80051e6:	bf00      	nop
  }
  if (status == HAL_OK)
 80051e8:	7dfb      	ldrb	r3, [r7, #23]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10d      	bne.n	800520a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f023 0118 	bic.w	r1, r3, #24
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	430a      	orrs	r2, r1
 8005208:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800520a:	7dfb      	ldrb	r3, [r7, #23]
}
 800520c:	4618      	mov	r0, r3
 800520e:	371c      	adds	r7, #28
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e069      	b.n	80052fe <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d102      	bne.n	800523c <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f7fe f8c4 	bl	80033c4 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2202      	movs	r2, #2
 8005240:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d002      	beq.n	8005252 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	6819      	ldr	r1, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	4b2a      	ldr	r3, [pc, #168]	; (8005308 <HAL_DCMI_Init+0xf0>)
 800525e:	400b      	ands	r3, r1
 8005260:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	6819      	ldr	r1, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	695b      	ldr	r3, [r3, #20]
 8005270:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005276:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8005282:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800528e:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005294:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800529a:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a0:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80052a6:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	430a      	orrs	r2, r1
 80052ae:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	2b10      	cmp	r3, #16
 80052b6:	d112      	bne.n	80052de <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	7f1b      	ldrb	r3, [r3, #28]
 80052bc:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	7f5b      	ldrb	r3, [r3, #29]
 80052c2:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80052c4:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	7f9b      	ldrb	r3, [r3, #30]
 80052ca:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80052cc:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	7fdb      	ldrb	r3, [r3, #31]
 80052d4:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80052da:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80052dc:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68da      	ldr	r2, [r3, #12]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f042 021e 	orr.w	r2, r2, #30
 80052ec:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3708      	adds	r7, #8
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	ffe0f007 	.word	0xffe0f007

0800530c <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b088      	sub	sp, #32
 8005310:	af02      	add	r7, sp, #8
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
 8005318:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0;
 800531a:	2300      	movs	r3, #0
 800531c:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005324:	2b01      	cmp	r3, #1
 8005326:	d101      	bne.n	800532c <HAL_DCMI_Start_DMA+0x20>
 8005328:	2302      	movs	r3, #2
 800532a:	e095      	b.n	8005458 <HAL_DCMI_Start_DMA+0x14c>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2202      	movs	r2, #2
 8005338:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800534a:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f022 0202 	bic.w	r2, r2, #2
 800535a:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	6819      	ldr	r1, [r3, #0]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68ba      	ldr	r2, [r7, #8]
 8005368:	430a      	orrs	r2, r1
 800536a:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005370:	4a3b      	ldr	r2, [pc, #236]	; (8005460 <HAL_DCMI_Start_DMA+0x154>)
 8005372:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005378:	4a3a      	ldr	r2, [pc, #232]	; (8005464 <HAL_DCMI_Start_DMA+0x158>)
 800537a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005380:	2200      	movs	r2, #0
 8005382:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2200      	movs	r2, #0
 800538e:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053a2:	d20e      	bcs.n	80053c2 <HAL_DCMI_Start_DMA+0xb6>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	3328      	adds	r3, #40	; 0x28
 80053ae:	4619      	mov	r1, r3
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	f000 fae8 	bl	8005988 <HAL_DMA_Start_IT>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d03f      	beq.n	800543e <HAL_DCMI_Start_DMA+0x132>
    {
      return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e04a      	b.n	8005458 <HAL_DCMI_Start_DMA+0x14c>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053c6:	4a26      	ldr	r2, [pc, #152]	; (8005460 <HAL_DCMI_Start_DMA+0x154>)
 80053c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2201      	movs	r2, #1
 80053ce:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	683a      	ldr	r2, [r7, #0]
 80053d4:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 80053dc:	e009      	b.n	80053f2 <HAL_DCMI_Start_DMA+0xe6>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053e2:	085a      	lsrs	r2, r3, #1
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ec:	005a      	lsls	r2, r3, #1
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053fa:	d2f0      	bcs.n	80053de <HAL_DCMI_Start_DMA+0xd2>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005400:	1e9a      	subs	r2, r3, #2
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4 * hdcmi->XferSize));
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	4413      	add	r3, r2
 8005418:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	3328      	adds	r3, #40	; 0x28
 8005424:	4619      	mov	r1, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800542a:	9300      	str	r3, [sp, #0]
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	f000 ff8e 	bl	8006350 <HAL_DMAEx_MultiBufferStart_IT>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <HAL_DCMI_Start_DMA+0x132>
    {
      return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e00c      	b.n	8005458 <HAL_DCMI_Start_DMA+0x14c>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f042 0201 	orr.w	r2, r2, #1
 800544c:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	3718      	adds	r7, #24
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	0800560d 	.word	0x0800560d
 8005464:	08005737 	.word	0x08005737

08005468 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f003 0304 	and.w	r3, r3, #4
 800547e:	2b00      	cmp	r3, #0
 8005480:	d016      	beq.n	80054b0 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2204      	movs	r2, #4
 8005488:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800548e:	f043 0202 	orr.w	r2, r3, #2
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2204      	movs	r2, #4
 800549a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054a2:	4a35      	ldr	r2, [pc, #212]	; (8005578 <HAL_DCMI_IRQHandler+0x110>)
 80054a4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054aa:	4618      	mov	r0, r3
 80054ac:	f000 facc 	bl	8005a48 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f003 0302 	and.w	r3, r3, #2
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d01e      	beq.n	80054f8 <HAL_DCMI_IRQHandler+0x90>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2202      	movs	r2, #2
 80054c0:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054c6:	f043 0201 	orr.w	r2, r3, #1
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2204      	movs	r2, #4
 80054d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054da:	4a27      	ldr	r2, [pc, #156]	; (8005578 <HAL_DCMI_IRQHandler+0x110>)
 80054dc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054e2:	4618      	mov	r0, r3
 80054e4:	f000 fab0 	bl	8005a48 <HAL_DMA_Abort_IT>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d004      	beq.n	80054f8 <HAL_DCMI_IRQHandler+0x90>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054f2:	4618      	mov	r0, r3
 80054f4:	f000 f91f 	bl	8005736 <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f003 0310 	and.w	r3, r3, #16
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d006      	beq.n	8005510 <HAL_DCMI_IRQHandler+0xa8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2210      	movs	r2, #16
 8005508:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f840 	bl	8005590 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f003 0308 	and.w	r3, r3, #8
 8005516:	2b00      	cmp	r3, #0
 8005518:	d006      	beq.n	8005528 <HAL_DCMI_IRQHandler+0xc0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2208      	movs	r2, #8
 8005520:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 f83e 	bl	80055a4 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f003 0301 	and.w	r3, r3, #1
 800552e:	2b00      	cmp	r3, #0
 8005530:	d01d      	beq.n	800556e <HAL_DCMI_IRQHandler+0x106>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0302 	and.w	r3, r3, #2
 800553c:	2b02      	cmp	r3, #2
 800553e:	d107      	bne.n	8005550 <HAL_DCMI_IRQHandler+0xe8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68da      	ldr	r2, [r3, #12]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f022 021e 	bic.w	r2, r2, #30
 800554e:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68da      	ldr	r2, [r3, #12]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f022 0201 	bic.w	r2, r2, #1
 800555e:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2201      	movs	r2, #1
 8005566:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f7fc fdb9 	bl	80020e0 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 800556e:	bf00      	nop
 8005570:	3710      	adds	r7, #16
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	08005737 	.word	0x08005737

0800557c <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <HAL_DCMI_DisableCrop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_DisableCrop(DCMI_HandleTypeDef *hdcmi)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hdcmi);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d101      	bne.n	80055ce <HAL_DCMI_DisableCrop+0x16>
 80055ca:	2302      	movs	r3, #2
 80055cc:	e018      	b.n	8005600 <HAL_DCMI_DisableCrop+0x48>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2202      	movs	r2, #2
 80055da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI Crop feature */
  hdcmi->Instance->CR &= ~(uint32_t)DCMI_CR_CROP;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f022 0204 	bic.w	r2, r2, #4
 80055ec:	601a      	str	r2, [r3, #0]

  /* Change the DCMI state*/
  hdcmi->State = HAL_DCMI_STATE_READY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <DCMI_DMAXferCplt>:
* @param  hdma pointer to a DMA_HandleTypeDef structure that contains
*                the configuration information for the specified DMA module.
* @retval None
*/
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8005614:	2300      	movs	r3, #0
 8005616:	60fb      	str	r3, [r7, #12]

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561c:	60bb      	str	r3, [r7, #8]

  if (hdcmi->XferCount != 0)
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005622:	2b00      	cmp	r3, #0
 8005624:	d043      	beq.n	80056ae <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005632:	60fb      	str	r3, [r7, #12]
    if (((hdcmi->XferCount % 2) == 0) && (tmp != 0))
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005638:	f003 0301 	and.w	r3, r3, #1
 800563c:	2b00      	cmp	r3, #0
 800563e:	d118      	bne.n	8005672 <DCMI_DMAXferCplt+0x66>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d015      	beq.n	8005672 <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8 * hdcmi->XferSize)), MEMORY0);
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005658:	00da      	lsls	r2, r3, #3
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	4413      	add	r3, r2
 800565e:	2200      	movs	r2, #0
 8005660:	4619      	mov	r1, r3
 8005662:	f001 ffab 	bl	80075bc <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566a:	1e5a      	subs	r2, r3, #1
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	639a      	str	r2, [r3, #56]	; 0x38
 8005670:	e044      	b.n	80056fc <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if ((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0)
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d13c      	bne.n	80056fc <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8 * hdcmi->XferSize)), MEMORY1);
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005694:	00da      	lsls	r2, r3, #3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	4413      	add	r3, r2
 800569a:	2201      	movs	r2, #1
 800569c:	4619      	mov	r1, r3
 800569e:	f001 ff8d 	bl	80075bc <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a6:	1e5a      	subs	r2, r3, #1
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	639a      	str	r2, [r3, #56]	; 0x38
 80056ac:	e026      	b.n	80056fc <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if ((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0)
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d006      	beq.n	80056cc <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80056c8:	60da      	str	r2, [r3, #12]
 80056ca:	e017      	b.n	80056fc <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if ((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0)
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d10f      	bne.n	80056fc <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056e0:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4 * hdcmi->XferSize));
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e6:	0099      	lsls	r1, r3, #2
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	440a      	add	r2, r1
 80056f2:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005704:	429a      	cmp	r2, r3
 8005706:	d112      	bne.n	800572e <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68da      	ldr	r2, [r3, #12]
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f042 0201 	orr.w	r2, r2, #1
 8005716:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0302 	and.w	r3, r3, #2
 8005722:	2b02      	cmp	r3, #2
 8005724:	d103      	bne.n	800572e <DCMI_DMAXferCplt+0x122>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	2201      	movs	r2, #1
 800572a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 800572e:	bf00      	nop
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005736:	b580      	push	{r7, lr}
 8005738:	b084      	sub	sp, #16
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005742:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800574a:	2b02      	cmp	r3, #2
 800574c:	d009      	beq.n	8005762 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2201      	movs	r2, #1
 8005752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800575a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	f7ff ff0a 	bl	800557c <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 8005768:	bf00      	nop
 800576a:	3710      	adds	r7, #16
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005778:	2300      	movs	r3, #0
 800577a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800577c:	f7ff f86c 	bl	8004858 <HAL_GetTick>
 8005780:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d101      	bne.n	800578c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e099      	b.n	80058c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2202      	movs	r2, #2
 8005790:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f022 0201 	bic.w	r2, r2, #1
 80057aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80057ac:	e00f      	b.n	80057ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80057ae:	f7ff f853 	bl	8004858 <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	2b05      	cmp	r3, #5
 80057ba:	d908      	bls.n	80057ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2220      	movs	r2, #32
 80057c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2203      	movs	r2, #3
 80057c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e078      	b.n	80058c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0301 	and.w	r3, r3, #1
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1e8      	bne.n	80057ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80057e4:	697a      	ldr	r2, [r7, #20]
 80057e6:	4b38      	ldr	r3, [pc, #224]	; (80058c8 <HAL_DMA_Init+0x158>)
 80057e8:	4013      	ands	r3, r2
 80057ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685a      	ldr	r2, [r3, #4]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80057fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005806:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005812:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a1b      	ldr	r3, [r3, #32]
 8005818:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	4313      	orrs	r3, r2
 800581e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005824:	2b04      	cmp	r3, #4
 8005826:	d107      	bne.n	8005838 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005830:	4313      	orrs	r3, r2
 8005832:	697a      	ldr	r2, [r7, #20]
 8005834:	4313      	orrs	r3, r2
 8005836:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	f023 0307 	bic.w	r3, r3, #7
 800584e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005854:	697a      	ldr	r2, [r7, #20]
 8005856:	4313      	orrs	r3, r2
 8005858:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585e:	2b04      	cmp	r3, #4
 8005860:	d117      	bne.n	8005892 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	4313      	orrs	r3, r2
 800586a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00e      	beq.n	8005892 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 fb03 	bl	8005e80 <DMA_CheckFifoParam>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d008      	beq.n	8005892 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2240      	movs	r2, #64	; 0x40
 8005884:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2201      	movs	r2, #1
 800588a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800588e:	2301      	movs	r3, #1
 8005890:	e016      	b.n	80058c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 faba 	bl	8005e14 <DMA_CalcBaseAndBitshift>
 80058a0:	4603      	mov	r3, r0
 80058a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058a8:	223f      	movs	r2, #63	; 0x3f
 80058aa:	409a      	lsls	r2, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3718      	adds	r7, #24
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	f010803f 	.word	0xf010803f

080058cc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d101      	bne.n	80058de <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e050      	b.n	8005980 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d101      	bne.n	80058ee <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80058ea:	2302      	movs	r3, #2
 80058ec:	e048      	b.n	8005980 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f022 0201 	bic.w	r2, r2, #1
 80058fc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2200      	movs	r2, #0
 8005904:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2200      	movs	r2, #0
 800590c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2200      	movs	r2, #0
 8005914:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2200      	movs	r2, #0
 800591c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2200      	movs	r2, #0
 8005924:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2221      	movs	r2, #33	; 0x21
 800592c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 fa70 	bl	8005e14 <DMA_CalcBaseAndBitshift>
 8005934:	4603      	mov	r3, r0
 8005936:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800593c:	223f      	movs	r2, #63	; 0x3f
 800593e:	409a      	lsls	r2, r3
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b086      	sub	sp, #24
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
 8005994:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005996:	2300      	movs	r3, #0
 8005998:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800599e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d101      	bne.n	80059ae <HAL_DMA_Start_IT+0x26>
 80059aa:	2302      	movs	r3, #2
 80059ac:	e048      	b.n	8005a40 <HAL_DMA_Start_IT+0xb8>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d137      	bne.n	8005a32 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2202      	movs	r2, #2
 80059c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	68b9      	ldr	r1, [r7, #8]
 80059d6:	68f8      	ldr	r0, [r7, #12]
 80059d8:	f000 f9ee 	bl	8005db8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059e0:	223f      	movs	r2, #63	; 0x3f
 80059e2:	409a      	lsls	r2, r3
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f042 0216 	orr.w	r2, r2, #22
 80059f6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	695a      	ldr	r2, [r3, #20]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005a06:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d007      	beq.n	8005a20 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f042 0208 	orr.w	r2, r2, #8
 8005a1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f042 0201 	orr.w	r2, r2, #1
 8005a2e:	601a      	str	r2, [r3, #0]
 8005a30:	e005      	b.n	8005a3e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005a3a:	2302      	movs	r3, #2
 8005a3c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3718      	adds	r7, #24
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d004      	beq.n	8005a66 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2280      	movs	r2, #128	; 0x80
 8005a60:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e00c      	b.n	8005a80 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2205      	movs	r2, #5
 8005a6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f022 0201 	bic.w	r2, r2, #1
 8005a7c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b086      	sub	sp, #24
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8005a94:	2300      	movs	r3, #0
 8005a96:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8005a98:	4b8e      	ldr	r3, [pc, #568]	; (8005cd4 <HAL_DMA_IRQHandler+0x248>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a8e      	ldr	r2, [pc, #568]	; (8005cd8 <HAL_DMA_IRQHandler+0x24c>)
 8005a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa2:	0a9b      	lsrs	r3, r3, #10
 8005aa4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aaa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ab6:	2208      	movs	r2, #8
 8005ab8:	409a      	lsls	r2, r3
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	4013      	ands	r3, r2
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d01a      	beq.n	8005af8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0304 	and.w	r3, r3, #4
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d013      	beq.n	8005af8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f022 0204 	bic.w	r2, r2, #4
 8005ade:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ae4:	2208      	movs	r2, #8
 8005ae6:	409a      	lsls	r2, r3
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005af0:	f043 0201 	orr.w	r2, r3, #1
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005afc:	2201      	movs	r2, #1
 8005afe:	409a      	lsls	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	4013      	ands	r3, r2
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d012      	beq.n	8005b2e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00b      	beq.n	8005b2e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	409a      	lsls	r2, r3
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b26:	f043 0202 	orr.w	r2, r3, #2
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b32:	2204      	movs	r2, #4
 8005b34:	409a      	lsls	r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	4013      	ands	r3, r2
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d012      	beq.n	8005b64 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0302 	and.w	r3, r3, #2
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00b      	beq.n	8005b64 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b50:	2204      	movs	r2, #4
 8005b52:	409a      	lsls	r2, r3
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b5c:	f043 0204 	orr.w	r2, r3, #4
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b68:	2210      	movs	r2, #16
 8005b6a:	409a      	lsls	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	4013      	ands	r3, r2
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d043      	beq.n	8005bfc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0308 	and.w	r3, r3, #8
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d03c      	beq.n	8005bfc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b86:	2210      	movs	r2, #16
 8005b88:	409a      	lsls	r2, r3
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d018      	beq.n	8005bce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d108      	bne.n	8005bbc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d024      	beq.n	8005bfc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	4798      	blx	r3
 8005bba:	e01f      	b.n	8005bfc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d01b      	beq.n	8005bfc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	4798      	blx	r3
 8005bcc:	e016      	b.n	8005bfc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d107      	bne.n	8005bec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f022 0208 	bic.w	r2, r2, #8
 8005bea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d003      	beq.n	8005bfc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c00:	2220      	movs	r2, #32
 8005c02:	409a      	lsls	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	4013      	ands	r3, r2
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f000 808f 	beq.w	8005d2c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0310 	and.w	r3, r3, #16
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f000 8087 	beq.w	8005d2c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c22:	2220      	movs	r2, #32
 8005c24:	409a      	lsls	r2, r3
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b05      	cmp	r3, #5
 8005c34:	d136      	bne.n	8005ca4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f022 0216 	bic.w	r2, r2, #22
 8005c44:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	695a      	ldr	r2, [r3, #20]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c54:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d103      	bne.n	8005c66 <HAL_DMA_IRQHandler+0x1da>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d007      	beq.n	8005c76 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f022 0208 	bic.w	r2, r2, #8
 8005c74:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c7a:	223f      	movs	r2, #63	; 0x3f
 8005c7c:	409a      	lsls	r2, r3
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d07e      	beq.n	8005d98 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	4798      	blx	r3
        }
        return;
 8005ca2:	e079      	b.n	8005d98 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d01d      	beq.n	8005cee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d10d      	bne.n	8005cdc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d031      	beq.n	8005d2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	4798      	blx	r3
 8005cd0:	e02c      	b.n	8005d2c <HAL_DMA_IRQHandler+0x2a0>
 8005cd2:	bf00      	nop
 8005cd4:	20000018 	.word	0x20000018
 8005cd8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d023      	beq.n	8005d2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	4798      	blx	r3
 8005cec:	e01e      	b.n	8005d2c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d10f      	bne.n	8005d1c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f022 0210 	bic.w	r2, r2, #16
 8005d0a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d003      	beq.n	8005d2c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d032      	beq.n	8005d9a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d38:	f003 0301 	and.w	r3, r3, #1
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d022      	beq.n	8005d86 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2205      	movs	r2, #5
 8005d44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f022 0201 	bic.w	r2, r2, #1
 8005d56:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	60bb      	str	r3, [r7, #8]
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d307      	bcc.n	8005d74 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1f2      	bne.n	8005d58 <HAL_DMA_IRQHandler+0x2cc>
 8005d72:	e000      	b.n	8005d76 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005d74:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d005      	beq.n	8005d9a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	4798      	blx	r3
 8005d96:	e000      	b.n	8005d9a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005d98:	bf00      	nop
    }
  }
}
 8005d9a:	3718      	adds	r7, #24
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]
 8005dc4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005dd4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	683a      	ldr	r2, [r7, #0]
 8005ddc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	2b40      	cmp	r3, #64	; 0x40
 8005de4:	d108      	bne.n	8005df8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68ba      	ldr	r2, [r7, #8]
 8005df4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005df6:	e007      	b.n	8005e08 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68ba      	ldr	r2, [r7, #8]
 8005dfe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	60da      	str	r2, [r3, #12]
}
 8005e08:	bf00      	nop
 8005e0a:	3714      	adds	r7, #20
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b085      	sub	sp, #20
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	3b10      	subs	r3, #16
 8005e24:	4a13      	ldr	r2, [pc, #76]	; (8005e74 <DMA_CalcBaseAndBitshift+0x60>)
 8005e26:	fba2 2303 	umull	r2, r3, r2, r3
 8005e2a:	091b      	lsrs	r3, r3, #4
 8005e2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005e2e:	4a12      	ldr	r2, [pc, #72]	; (8005e78 <DMA_CalcBaseAndBitshift+0x64>)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	4413      	add	r3, r2
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	461a      	mov	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2b03      	cmp	r3, #3
 8005e40:	d908      	bls.n	8005e54 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	461a      	mov	r2, r3
 8005e48:	4b0c      	ldr	r3, [pc, #48]	; (8005e7c <DMA_CalcBaseAndBitshift+0x68>)
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	1d1a      	adds	r2, r3, #4
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	659a      	str	r2, [r3, #88]	; 0x58
 8005e52:	e006      	b.n	8005e62 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	461a      	mov	r2, r3
 8005e5a:	4b08      	ldr	r3, [pc, #32]	; (8005e7c <DMA_CalcBaseAndBitshift+0x68>)
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3714      	adds	r7, #20
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	aaaaaaab 	.word	0xaaaaaaab
 8005e78:	08018f34 	.word	0x08018f34
 8005e7c:	fffffc00 	.word	0xfffffc00

08005e80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	699b      	ldr	r3, [r3, #24]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d11f      	bne.n	8005eda <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	2b03      	cmp	r3, #3
 8005e9e:	d856      	bhi.n	8005f4e <DMA_CheckFifoParam+0xce>
 8005ea0:	a201      	add	r2, pc, #4	; (adr r2, 8005ea8 <DMA_CheckFifoParam+0x28>)
 8005ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea6:	bf00      	nop
 8005ea8:	08005eb9 	.word	0x08005eb9
 8005eac:	08005ecb 	.word	0x08005ecb
 8005eb0:	08005eb9 	.word	0x08005eb9
 8005eb4:	08005f4f 	.word	0x08005f4f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ebc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d046      	beq.n	8005f52 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ec8:	e043      	b.n	8005f52 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ece:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005ed2:	d140      	bne.n	8005f56 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ed8:	e03d      	b.n	8005f56 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ee2:	d121      	bne.n	8005f28 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	2b03      	cmp	r3, #3
 8005ee8:	d837      	bhi.n	8005f5a <DMA_CheckFifoParam+0xda>
 8005eea:	a201      	add	r2, pc, #4	; (adr r2, 8005ef0 <DMA_CheckFifoParam+0x70>)
 8005eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef0:	08005f01 	.word	0x08005f01
 8005ef4:	08005f07 	.word	0x08005f07
 8005ef8:	08005f01 	.word	0x08005f01
 8005efc:	08005f19 	.word	0x08005f19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	73fb      	strb	r3, [r7, #15]
      break;
 8005f04:	e030      	b.n	8005f68 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d025      	beq.n	8005f5e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f16:	e022      	b.n	8005f5e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005f20:	d11f      	bne.n	8005f62 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005f26:	e01c      	b.n	8005f62 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d903      	bls.n	8005f36 <DMA_CheckFifoParam+0xb6>
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	2b03      	cmp	r3, #3
 8005f32:	d003      	beq.n	8005f3c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005f34:	e018      	b.n	8005f68 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	73fb      	strb	r3, [r7, #15]
      break;
 8005f3a:	e015      	b.n	8005f68 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d00e      	beq.n	8005f66 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f4c:	e00b      	b.n	8005f66 <DMA_CheckFifoParam+0xe6>
      break;
 8005f4e:	bf00      	nop
 8005f50:	e00a      	b.n	8005f68 <DMA_CheckFifoParam+0xe8>
      break;
 8005f52:	bf00      	nop
 8005f54:	e008      	b.n	8005f68 <DMA_CheckFifoParam+0xe8>
      break;
 8005f56:	bf00      	nop
 8005f58:	e006      	b.n	8005f68 <DMA_CheckFifoParam+0xe8>
      break;
 8005f5a:	bf00      	nop
 8005f5c:	e004      	b.n	8005f68 <DMA_CheckFifoParam+0xe8>
      break;
 8005f5e:	bf00      	nop
 8005f60:	e002      	b.n	8005f68 <DMA_CheckFifoParam+0xe8>
      break;   
 8005f62:	bf00      	nop
 8005f64:	e000      	b.n	8005f68 <DMA_CheckFifoParam+0xe8>
      break;
 8005f66:	bf00      	nop
    }
  } 
  
  return status; 
 8005f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3714      	adds	r7, #20
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop

08005f78 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d101      	bne.n	8005f8a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e039      	b.n	8005ffe <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d106      	bne.n	8005fa4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7fd fb16 	bl	80035d0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685a      	ldr	r2, [r3, #4]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc8:	f023 0107 	bic.w	r1, r3, #7
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	689a      	ldr	r2, [r3, #8]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	430a      	orrs	r2, r1
 8005fd6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fde:	4b0a      	ldr	r3, [pc, #40]	; (8006008 <HAL_DMA2D_Init+0x90>)
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	68d1      	ldr	r1, [r2, #12]
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	6812      	ldr	r2, [r2, #0]
 8005fea:	430b      	orrs	r3, r1
 8005fec:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3708      	adds	r7, #8
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	ffffc000 	.word	0xffffc000

0800600c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f003 0301 	and.w	r3, r3, #1
 800602a:	2b00      	cmp	r3, #0
 800602c:	d026      	beq.n	800607c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006034:	2b00      	cmp	r3, #0
 8006036:	d021      	beq.n	800607c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006046:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800604c:	f043 0201 	orr.w	r2, r3, #1
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2201      	movs	r2, #1
 800605a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2204      	movs	r2, #4
 8006060:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	695b      	ldr	r3, [r3, #20]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d003      	beq.n	800607c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	695b      	ldr	r3, [r3, #20]
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f003 0320 	and.w	r3, r3, #32
 8006082:	2b00      	cmp	r3, #0
 8006084:	d026      	beq.n	80060d4 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d021      	beq.n	80060d4 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800609e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2220      	movs	r2, #32
 80060a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ac:	f043 0202 	orr.w	r2, r3, #2
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2204      	movs	r2, #4
 80060b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	695b      	ldr	r3, [r3, #20]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d003      	beq.n	80060d4 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	695b      	ldr	r3, [r3, #20]
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f003 0308 	and.w	r3, r3, #8
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d026      	beq.n	800612c <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d021      	beq.n	800612c <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060f6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2208      	movs	r2, #8
 80060fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006104:	f043 0204 	orr.w	r2, r3, #4
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2204      	movs	r2, #4
 8006110:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	695b      	ldr	r3, [r3, #20]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d003      	beq.n	800612c <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	695b      	ldr	r3, [r3, #20]
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f003 0304 	and.w	r3, r3, #4
 8006132:	2b00      	cmp	r3, #0
 8006134:	d013      	beq.n	800615e <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00e      	beq.n	800615e <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800614e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2204      	movs	r2, #4
 8006156:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 f853 	bl	8006204 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f003 0302 	and.w	r3, r3, #2
 8006164:	2b00      	cmp	r3, #0
 8006166:	d024      	beq.n	80061b2 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800616e:	2b00      	cmp	r3, #0
 8006170:	d01f      	beq.n	80061b2 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006180:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2202      	movs	r2, #2
 8006188:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2201      	movs	r2, #1
 8006196:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d003      	beq.n	80061b2 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f003 0310 	and.w	r3, r3, #16
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d01f      	beq.n	80061fc <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d01a      	beq.n	80061fc <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80061d4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2210      	movs	r2, #16
 80061dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 f80e 	bl	8006218 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80061fc:	bf00      	nop
 80061fe:	3710      	adds	r7, #16
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800620c:	bf00      	nop
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800622c:	b480      	push	{r7}
 800622e:	b087      	sub	sp, #28
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006244:	2b01      	cmp	r3, #1
 8006246:	d101      	bne.n	800624c <HAL_DMA2D_ConfigLayer+0x20>
 8006248:	2302      	movs	r3, #2
 800624a:	e079      	b.n	8006340 <HAL_DMA2D_ConfigLayer+0x114>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2202      	movs	r2, #2
 8006258:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	011b      	lsls	r3, r3, #4
 8006260:	3318      	adds	r3, #24
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	4413      	add	r3, r2
 8006266:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	685a      	ldr	r2, [r3, #4]
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	041b      	lsls	r3, r3, #16
 8006272:	4313      	orrs	r3, r2
 8006274:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8006276:	4b35      	ldr	r3, [pc, #212]	; (800634c <HAL_DMA2D_ConfigLayer+0x120>)
 8006278:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	2b0a      	cmp	r3, #10
 8006280:	d003      	beq.n	800628a <HAL_DMA2D_ConfigLayer+0x5e>
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	2b09      	cmp	r3, #9
 8006288:	d107      	bne.n	800629a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	4313      	orrs	r3, r2
 8006296:	617b      	str	r3, [r7, #20]
 8006298:	e005      	b.n	80062a6 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	061b      	lsls	r3, r3, #24
 80062a0:	697a      	ldr	r2, [r7, #20]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d120      	bne.n	80062ee <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	43db      	mvns	r3, r3
 80062b6:	ea02 0103 	and.w	r1, r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	697a      	ldr	r2, [r7, #20]
 80062c0:	430a      	orrs	r2, r1
 80062c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	6812      	ldr	r2, [r2, #0]
 80062cc:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	2b0a      	cmp	r3, #10
 80062d4:	d003      	beq.n	80062de <HAL_DMA2D_ConfigLayer+0xb2>
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	2b09      	cmp	r3, #9
 80062dc:	d127      	bne.n	800632e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	68da      	ldr	r2, [r3, #12]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80062ea:	629a      	str	r2, [r3, #40]	; 0x28
 80062ec:	e01f      	b.n	800632e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	69da      	ldr	r2, [r3, #28]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	43db      	mvns	r3, r3
 80062f8:	ea02 0103 	and.w	r1, r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	430a      	orrs	r2, r1
 8006304:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	6812      	ldr	r2, [r2, #0]
 800630e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	2b0a      	cmp	r3, #10
 8006316:	d003      	beq.n	8006320 <HAL_DMA2D_ConfigLayer+0xf4>
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	2b09      	cmp	r3, #9
 800631e:	d106      	bne.n	800632e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	68da      	ldr	r2, [r3, #12]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800632c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2201      	movs	r2, #1
 8006332:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	371c      	adds	r7, #28
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr
 800634c:	ff03000f 	.word	0xff03000f

08006350 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b086      	sub	sp, #24
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	607a      	str	r2, [r7, #4]
 800635c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800635e:	2300      	movs	r3, #0
 8006360:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	2b80      	cmp	r3, #128	; 0x80
 8006368:	d106      	bne.n	8006378 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006370:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	f001 b8ff 	b.w	8007576 <HAL_DMAEx_MultiBufferStart_IT+0x1226>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800637e:	2b01      	cmp	r3, #1
 8006380:	d102      	bne.n	8006388 <HAL_DMAEx_MultiBufferStart_IT+0x38>
 8006382:	2302      	movs	r3, #2
 8006384:	f001 b8f7 	b.w	8007576 <HAL_DMAEx_MultiBufferStart_IT+0x1226>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006396:	b2db      	uxtb	r3, r3
 8006398:	2b01      	cmp	r3, #1
 800639a:	f041 80e5 	bne.w	8007568 <HAL_DMAEx_MultiBufferStart_IT+0x1218>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2202      	movs	r2, #2
 80063a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80063ba:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	683a      	ldr	r2, [r7, #0]
 80063c2:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 80063c4:	6a3b      	ldr	r3, [r7, #32]
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	68b9      	ldr	r1, [r7, #8]
 80063ca:	68f8      	ldr	r0, [r7, #12]
 80063cc:	f001 f910 	bl	80075f0 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	461a      	mov	r2, r3
 80063d6:	4b8d      	ldr	r3, [pc, #564]	; (800660c <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 80063d8:	429a      	cmp	r2, r3
 80063da:	d960      	bls.n	800649e <HAL_DMAEx_MultiBufferStart_IT+0x14e>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a8b      	ldr	r2, [pc, #556]	; (8006610 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d057      	beq.n	8006496 <HAL_DMAEx_MultiBufferStart_IT+0x146>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a8a      	ldr	r2, [pc, #552]	; (8006614 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d050      	beq.n	8006492 <HAL_DMAEx_MultiBufferStart_IT+0x142>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a88      	ldr	r2, [pc, #544]	; (8006618 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d049      	beq.n	800648e <HAL_DMAEx_MultiBufferStart_IT+0x13e>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a87      	ldr	r2, [pc, #540]	; (800661c <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d042      	beq.n	800648a <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a85      	ldr	r2, [pc, #532]	; (8006620 <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d03a      	beq.n	8006484 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a84      	ldr	r2, [pc, #528]	; (8006624 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d032      	beq.n	800647e <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a82      	ldr	r2, [pc, #520]	; (8006628 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d02a      	beq.n	8006478 <HAL_DMAEx_MultiBufferStart_IT+0x128>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a81      	ldr	r2, [pc, #516]	; (800662c <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d022      	beq.n	8006472 <HAL_DMAEx_MultiBufferStart_IT+0x122>
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a7f      	ldr	r2, [pc, #508]	; (8006630 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d01a      	beq.n	800646c <HAL_DMAEx_MultiBufferStart_IT+0x11c>
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a7e      	ldr	r2, [pc, #504]	; (8006634 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d012      	beq.n	8006466 <HAL_DMAEx_MultiBufferStart_IT+0x116>
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a7c      	ldr	r2, [pc, #496]	; (8006638 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d00a      	beq.n	8006460 <HAL_DMAEx_MultiBufferStart_IT+0x110>
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a7b      	ldr	r2, [pc, #492]	; (800663c <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d102      	bne.n	800645a <HAL_DMAEx_MultiBufferStart_IT+0x10a>
 8006454:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006458:	e01e      	b.n	8006498 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 800645a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800645e:	e01b      	b.n	8006498 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8006460:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006464:	e018      	b.n	8006498 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8006466:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800646a:	e015      	b.n	8006498 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 800646c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006470:	e012      	b.n	8006498 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8006472:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006476:	e00f      	b.n	8006498 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8006478:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800647c:	e00c      	b.n	8006498 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 800647e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006482:	e009      	b.n	8006498 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8006484:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006488:	e006      	b.n	8006498 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 800648a:	2320      	movs	r3, #32
 800648c:	e004      	b.n	8006498 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 800648e:	2320      	movs	r3, #32
 8006490:	e002      	b.n	8006498 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8006492:	2320      	movs	r3, #32
 8006494:	e000      	b.n	8006498 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8006496:	2320      	movs	r3, #32
 8006498:	4a69      	ldr	r2, [pc, #420]	; (8006640 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 800649a:	60d3      	str	r3, [r2, #12]
 800649c:	e14f      	b.n	800673e <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	461a      	mov	r2, r3
 80064a4:	4b67      	ldr	r3, [pc, #412]	; (8006644 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d960      	bls.n	800656c <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a58      	ldr	r2, [pc, #352]	; (8006610 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d057      	beq.n	8006564 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a56      	ldr	r2, [pc, #344]	; (8006614 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d050      	beq.n	8006560 <HAL_DMAEx_MultiBufferStart_IT+0x210>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a55      	ldr	r2, [pc, #340]	; (8006618 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d049      	beq.n	800655c <HAL_DMAEx_MultiBufferStart_IT+0x20c>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a53      	ldr	r2, [pc, #332]	; (800661c <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d042      	beq.n	8006558 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a52      	ldr	r2, [pc, #328]	; (8006620 <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d03a      	beq.n	8006552 <HAL_DMAEx_MultiBufferStart_IT+0x202>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a50      	ldr	r2, [pc, #320]	; (8006624 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d032      	beq.n	800654c <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a4f      	ldr	r2, [pc, #316]	; (8006628 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d02a      	beq.n	8006546 <HAL_DMAEx_MultiBufferStart_IT+0x1f6>
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a4d      	ldr	r2, [pc, #308]	; (800662c <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d022      	beq.n	8006540 <HAL_DMAEx_MultiBufferStart_IT+0x1f0>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a4c      	ldr	r2, [pc, #304]	; (8006630 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d01a      	beq.n	800653a <HAL_DMAEx_MultiBufferStart_IT+0x1ea>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a4a      	ldr	r2, [pc, #296]	; (8006634 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d012      	beq.n	8006534 <HAL_DMAEx_MultiBufferStart_IT+0x1e4>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a49      	ldr	r2, [pc, #292]	; (8006638 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d00a      	beq.n	800652e <HAL_DMAEx_MultiBufferStart_IT+0x1de>
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a47      	ldr	r2, [pc, #284]	; (800663c <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d102      	bne.n	8006528 <HAL_DMAEx_MultiBufferStart_IT+0x1d8>
 8006522:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006526:	e01e      	b.n	8006566 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8006528:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800652c:	e01b      	b.n	8006566 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 800652e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006532:	e018      	b.n	8006566 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8006534:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006538:	e015      	b.n	8006566 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 800653a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800653e:	e012      	b.n	8006566 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8006540:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006544:	e00f      	b.n	8006566 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8006546:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800654a:	e00c      	b.n	8006566 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 800654c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006550:	e009      	b.n	8006566 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8006552:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006556:	e006      	b.n	8006566 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8006558:	2320      	movs	r3, #32
 800655a:	e004      	b.n	8006566 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 800655c:	2320      	movs	r3, #32
 800655e:	e002      	b.n	8006566 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8006560:	2320      	movs	r3, #32
 8006562:	e000      	b.n	8006566 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8006564:	2320      	movs	r3, #32
 8006566:	4a36      	ldr	r2, [pc, #216]	; (8006640 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8006568:	6093      	str	r3, [r2, #8]
 800656a:	e0e8      	b.n	800673e <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	461a      	mov	r2, r3
 8006572:	4b35      	ldr	r3, [pc, #212]	; (8006648 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8006574:	429a      	cmp	r2, r3
 8006576:	f240 8082 	bls.w	800667e <HAL_DMAEx_MultiBufferStart_IT+0x32e>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a24      	ldr	r2, [pc, #144]	; (8006610 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d078      	beq.n	8006676 <HAL_DMAEx_MultiBufferStart_IT+0x326>
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a22      	ldr	r2, [pc, #136]	; (8006614 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d071      	beq.n	8006672 <HAL_DMAEx_MultiBufferStart_IT+0x322>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a21      	ldr	r2, [pc, #132]	; (8006618 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d06a      	beq.n	800666e <HAL_DMAEx_MultiBufferStart_IT+0x31e>
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a1f      	ldr	r2, [pc, #124]	; (800661c <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d063      	beq.n	800666a <HAL_DMAEx_MultiBufferStart_IT+0x31a>
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a1e      	ldr	r2, [pc, #120]	; (8006620 <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d05b      	beq.n	8006664 <HAL_DMAEx_MultiBufferStart_IT+0x314>
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a1c      	ldr	r2, [pc, #112]	; (8006624 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d053      	beq.n	800665e <HAL_DMAEx_MultiBufferStart_IT+0x30e>
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a1b      	ldr	r2, [pc, #108]	; (8006628 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d04b      	beq.n	8006658 <HAL_DMAEx_MultiBufferStart_IT+0x308>
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a19      	ldr	r2, [pc, #100]	; (800662c <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d043      	beq.n	8006652 <HAL_DMAEx_MultiBufferStart_IT+0x302>
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a18      	ldr	r2, [pc, #96]	; (8006630 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d03b      	beq.n	800664c <HAL_DMAEx_MultiBufferStart_IT+0x2fc>
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a16      	ldr	r2, [pc, #88]	; (8006634 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d012      	beq.n	8006604 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a15      	ldr	r2, [pc, #84]	; (8006638 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d00a      	beq.n	80065fe <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a13      	ldr	r2, [pc, #76]	; (800663c <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d102      	bne.n	80065f8 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>
 80065f2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80065f6:	e03f      	b.n	8006678 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 80065f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80065fc:	e03c      	b.n	8006678 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 80065fe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006602:	e039      	b.n	8006678 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 8006604:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006608:	e036      	b.n	8006678 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 800660a:	bf00      	nop
 800660c:	40026458 	.word	0x40026458
 8006610:	40026010 	.word	0x40026010
 8006614:	40026410 	.word	0x40026410
 8006618:	40026070 	.word	0x40026070
 800661c:	40026470 	.word	0x40026470
 8006620:	40026028 	.word	0x40026028
 8006624:	40026428 	.word	0x40026428
 8006628:	40026088 	.word	0x40026088
 800662c:	40026488 	.word	0x40026488
 8006630:	40026040 	.word	0x40026040
 8006634:	40026440 	.word	0x40026440
 8006638:	400260a0 	.word	0x400260a0
 800663c:	400264a0 	.word	0x400264a0
 8006640:	40026400 	.word	0x40026400
 8006644:	400260b8 	.word	0x400260b8
 8006648:	40026058 	.word	0x40026058
 800664c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006650:	e012      	b.n	8006678 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 8006652:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006656:	e00f      	b.n	8006678 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 8006658:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800665c:	e00c      	b.n	8006678 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 800665e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006662:	e009      	b.n	8006678 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 8006664:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006668:	e006      	b.n	8006678 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 800666a:	2320      	movs	r3, #32
 800666c:	e004      	b.n	8006678 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 800666e:	2320      	movs	r3, #32
 8006670:	e002      	b.n	8006678 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 8006672:	2320      	movs	r3, #32
 8006674:	e000      	b.n	8006678 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 8006676:	2320      	movs	r3, #32
 8006678:	4a8c      	ldr	r2, [pc, #560]	; (80068ac <HAL_DMAEx_MultiBufferStart_IT+0x55c>)
 800667a:	60d3      	str	r3, [r2, #12]
 800667c:	e05f      	b.n	800673e <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a8b      	ldr	r2, [pc, #556]	; (80068b0 <HAL_DMAEx_MultiBufferStart_IT+0x560>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d057      	beq.n	8006738 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a89      	ldr	r2, [pc, #548]	; (80068b4 <HAL_DMAEx_MultiBufferStart_IT+0x564>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d050      	beq.n	8006734 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a88      	ldr	r2, [pc, #544]	; (80068b8 <HAL_DMAEx_MultiBufferStart_IT+0x568>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d049      	beq.n	8006730 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a86      	ldr	r2, [pc, #536]	; (80068bc <HAL_DMAEx_MultiBufferStart_IT+0x56c>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d042      	beq.n	800672c <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a85      	ldr	r2, [pc, #532]	; (80068c0 <HAL_DMAEx_MultiBufferStart_IT+0x570>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d03a      	beq.n	8006726 <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a83      	ldr	r2, [pc, #524]	; (80068c4 <HAL_DMAEx_MultiBufferStart_IT+0x574>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d032      	beq.n	8006720 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a82      	ldr	r2, [pc, #520]	; (80068c8 <HAL_DMAEx_MultiBufferStart_IT+0x578>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d02a      	beq.n	800671a <HAL_DMAEx_MultiBufferStart_IT+0x3ca>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a80      	ldr	r2, [pc, #512]	; (80068cc <HAL_DMAEx_MultiBufferStart_IT+0x57c>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d022      	beq.n	8006714 <HAL_DMAEx_MultiBufferStart_IT+0x3c4>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a7f      	ldr	r2, [pc, #508]	; (80068d0 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d01a      	beq.n	800670e <HAL_DMAEx_MultiBufferStart_IT+0x3be>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a7d      	ldr	r2, [pc, #500]	; (80068d4 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d012      	beq.n	8006708 <HAL_DMAEx_MultiBufferStart_IT+0x3b8>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a7c      	ldr	r2, [pc, #496]	; (80068d8 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d00a      	beq.n	8006702 <HAL_DMAEx_MultiBufferStart_IT+0x3b2>
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a7a      	ldr	r2, [pc, #488]	; (80068dc <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d102      	bne.n	80066fc <HAL_DMAEx_MultiBufferStart_IT+0x3ac>
 80066f6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80066fa:	e01e      	b.n	800673a <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 80066fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006700:	e01b      	b.n	800673a <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8006702:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006706:	e018      	b.n	800673a <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8006708:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800670c:	e015      	b.n	800673a <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 800670e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006712:	e012      	b.n	800673a <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8006714:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006718:	e00f      	b.n	800673a <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 800671a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800671e:	e00c      	b.n	800673a <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8006720:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006724:	e009      	b.n	800673a <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8006726:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800672a:	e006      	b.n	800673a <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 800672c:	2320      	movs	r3, #32
 800672e:	e004      	b.n	800673a <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8006730:	2320      	movs	r3, #32
 8006732:	e002      	b.n	800673a <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8006734:	2320      	movs	r3, #32
 8006736:	e000      	b.n	800673a <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8006738:	2320      	movs	r3, #32
 800673a:	4a5c      	ldr	r2, [pc, #368]	; (80068ac <HAL_DMAEx_MultiBufferStart_IT+0x55c>)
 800673c:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	461a      	mov	r2, r3
 8006744:	4b66      	ldr	r3, [pc, #408]	; (80068e0 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8006746:	429a      	cmp	r2, r3
 8006748:	d960      	bls.n	800680c <HAL_DMAEx_MultiBufferStart_IT+0x4bc>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a58      	ldr	r2, [pc, #352]	; (80068b0 <HAL_DMAEx_MultiBufferStart_IT+0x560>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d057      	beq.n	8006804 <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a56      	ldr	r2, [pc, #344]	; (80068b4 <HAL_DMAEx_MultiBufferStart_IT+0x564>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d050      	beq.n	8006800 <HAL_DMAEx_MultiBufferStart_IT+0x4b0>
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a55      	ldr	r2, [pc, #340]	; (80068b8 <HAL_DMAEx_MultiBufferStart_IT+0x568>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d049      	beq.n	80067fc <HAL_DMAEx_MultiBufferStart_IT+0x4ac>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a53      	ldr	r2, [pc, #332]	; (80068bc <HAL_DMAEx_MultiBufferStart_IT+0x56c>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d042      	beq.n	80067f8 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a52      	ldr	r2, [pc, #328]	; (80068c0 <HAL_DMAEx_MultiBufferStart_IT+0x570>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d03a      	beq.n	80067f2 <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a50      	ldr	r2, [pc, #320]	; (80068c4 <HAL_DMAEx_MultiBufferStart_IT+0x574>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d032      	beq.n	80067ec <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a4f      	ldr	r2, [pc, #316]	; (80068c8 <HAL_DMAEx_MultiBufferStart_IT+0x578>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d02a      	beq.n	80067e6 <HAL_DMAEx_MultiBufferStart_IT+0x496>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a4d      	ldr	r2, [pc, #308]	; (80068cc <HAL_DMAEx_MultiBufferStart_IT+0x57c>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d022      	beq.n	80067e0 <HAL_DMAEx_MultiBufferStart_IT+0x490>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a4c      	ldr	r2, [pc, #304]	; (80068d0 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d01a      	beq.n	80067da <HAL_DMAEx_MultiBufferStart_IT+0x48a>
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a4a      	ldr	r2, [pc, #296]	; (80068d4 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d012      	beq.n	80067d4 <HAL_DMAEx_MultiBufferStart_IT+0x484>
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a49      	ldr	r2, [pc, #292]	; (80068d8 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d00a      	beq.n	80067ce <HAL_DMAEx_MultiBufferStart_IT+0x47e>
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a47      	ldr	r2, [pc, #284]	; (80068dc <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d102      	bne.n	80067c8 <HAL_DMAEx_MultiBufferStart_IT+0x478>
 80067c2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80067c6:	e01e      	b.n	8006806 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 80067c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80067cc:	e01b      	b.n	8006806 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 80067ce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80067d2:	e018      	b.n	8006806 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 80067d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80067d8:	e015      	b.n	8006806 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 80067da:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80067de:	e012      	b.n	8006806 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 80067e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067e4:	e00f      	b.n	8006806 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 80067e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067ea:	e00c      	b.n	8006806 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 80067ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067f0:	e009      	b.n	8006806 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 80067f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067f6:	e006      	b.n	8006806 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 80067f8:	2310      	movs	r3, #16
 80067fa:	e004      	b.n	8006806 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 80067fc:	2310      	movs	r3, #16
 80067fe:	e002      	b.n	8006806 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8006800:	2310      	movs	r3, #16
 8006802:	e000      	b.n	8006806 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8006804:	2310      	movs	r3, #16
 8006806:	4a37      	ldr	r2, [pc, #220]	; (80068e4 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8006808:	60d3      	str	r3, [r2, #12]
 800680a:	e14f      	b.n	8006aac <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	461a      	mov	r2, r3
 8006812:	4b35      	ldr	r3, [pc, #212]	; (80068e8 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8006814:	429a      	cmp	r2, r3
 8006816:	f240 8082 	bls.w	800691e <HAL_DMAEx_MultiBufferStart_IT+0x5ce>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a24      	ldr	r2, [pc, #144]	; (80068b0 <HAL_DMAEx_MultiBufferStart_IT+0x560>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d078      	beq.n	8006916 <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a22      	ldr	r2, [pc, #136]	; (80068b4 <HAL_DMAEx_MultiBufferStart_IT+0x564>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d071      	beq.n	8006912 <HAL_DMAEx_MultiBufferStart_IT+0x5c2>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a21      	ldr	r2, [pc, #132]	; (80068b8 <HAL_DMAEx_MultiBufferStart_IT+0x568>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d06a      	beq.n	800690e <HAL_DMAEx_MultiBufferStart_IT+0x5be>
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a1f      	ldr	r2, [pc, #124]	; (80068bc <HAL_DMAEx_MultiBufferStart_IT+0x56c>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d063      	beq.n	800690a <HAL_DMAEx_MultiBufferStart_IT+0x5ba>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a1e      	ldr	r2, [pc, #120]	; (80068c0 <HAL_DMAEx_MultiBufferStart_IT+0x570>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d05b      	beq.n	8006904 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a1c      	ldr	r2, [pc, #112]	; (80068c4 <HAL_DMAEx_MultiBufferStart_IT+0x574>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d053      	beq.n	80068fe <HAL_DMAEx_MultiBufferStart_IT+0x5ae>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a1b      	ldr	r2, [pc, #108]	; (80068c8 <HAL_DMAEx_MultiBufferStart_IT+0x578>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d04b      	beq.n	80068f8 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a19      	ldr	r2, [pc, #100]	; (80068cc <HAL_DMAEx_MultiBufferStart_IT+0x57c>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d043      	beq.n	80068f2 <HAL_DMAEx_MultiBufferStart_IT+0x5a2>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a18      	ldr	r2, [pc, #96]	; (80068d0 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d03b      	beq.n	80068ec <HAL_DMAEx_MultiBufferStart_IT+0x59c>
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a16      	ldr	r2, [pc, #88]	; (80068d4 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d012      	beq.n	80068a4 <HAL_DMAEx_MultiBufferStart_IT+0x554>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a15      	ldr	r2, [pc, #84]	; (80068d8 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d00a      	beq.n	800689e <HAL_DMAEx_MultiBufferStart_IT+0x54e>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a13      	ldr	r2, [pc, #76]	; (80068dc <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d102      	bne.n	8006898 <HAL_DMAEx_MultiBufferStart_IT+0x548>
 8006892:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006896:	e03f      	b.n	8006918 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8006898:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800689c:	e03c      	b.n	8006918 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 800689e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80068a2:	e039      	b.n	8006918 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 80068a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80068a8:	e036      	b.n	8006918 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 80068aa:	bf00      	nop
 80068ac:	40026000 	.word	0x40026000
 80068b0:	40026010 	.word	0x40026010
 80068b4:	40026410 	.word	0x40026410
 80068b8:	40026070 	.word	0x40026070
 80068bc:	40026470 	.word	0x40026470
 80068c0:	40026028 	.word	0x40026028
 80068c4:	40026428 	.word	0x40026428
 80068c8:	40026088 	.word	0x40026088
 80068cc:	40026488 	.word	0x40026488
 80068d0:	40026040 	.word	0x40026040
 80068d4:	40026440 	.word	0x40026440
 80068d8:	400260a0 	.word	0x400260a0
 80068dc:	400264a0 	.word	0x400264a0
 80068e0:	40026458 	.word	0x40026458
 80068e4:	40026400 	.word	0x40026400
 80068e8:	400260b8 	.word	0x400260b8
 80068ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80068f0:	e012      	b.n	8006918 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 80068f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068f6:	e00f      	b.n	8006918 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 80068f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068fc:	e00c      	b.n	8006918 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 80068fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006902:	e009      	b.n	8006918 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8006904:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006908:	e006      	b.n	8006918 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 800690a:	2310      	movs	r3, #16
 800690c:	e004      	b.n	8006918 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 800690e:	2310      	movs	r3, #16
 8006910:	e002      	b.n	8006918 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8006912:	2310      	movs	r3, #16
 8006914:	e000      	b.n	8006918 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8006916:	2310      	movs	r3, #16
 8006918:	4a8c      	ldr	r2, [pc, #560]	; (8006b4c <HAL_DMAEx_MultiBufferStart_IT+0x7fc>)
 800691a:	6093      	str	r3, [r2, #8]
 800691c:	e0c6      	b.n	8006aac <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	461a      	mov	r2, r3
 8006924:	4b8a      	ldr	r3, [pc, #552]	; (8006b50 <HAL_DMAEx_MultiBufferStart_IT+0x800>)
 8006926:	429a      	cmp	r2, r3
 8006928:	d960      	bls.n	80069ec <HAL_DMAEx_MultiBufferStart_IT+0x69c>
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a89      	ldr	r2, [pc, #548]	; (8006b54 <HAL_DMAEx_MultiBufferStart_IT+0x804>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d057      	beq.n	80069e4 <HAL_DMAEx_MultiBufferStart_IT+0x694>
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a87      	ldr	r2, [pc, #540]	; (8006b58 <HAL_DMAEx_MultiBufferStart_IT+0x808>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d050      	beq.n	80069e0 <HAL_DMAEx_MultiBufferStart_IT+0x690>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a86      	ldr	r2, [pc, #536]	; (8006b5c <HAL_DMAEx_MultiBufferStart_IT+0x80c>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d049      	beq.n	80069dc <HAL_DMAEx_MultiBufferStart_IT+0x68c>
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a84      	ldr	r2, [pc, #528]	; (8006b60 <HAL_DMAEx_MultiBufferStart_IT+0x810>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d042      	beq.n	80069d8 <HAL_DMAEx_MultiBufferStart_IT+0x688>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a83      	ldr	r2, [pc, #524]	; (8006b64 <HAL_DMAEx_MultiBufferStart_IT+0x814>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d03a      	beq.n	80069d2 <HAL_DMAEx_MultiBufferStart_IT+0x682>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a81      	ldr	r2, [pc, #516]	; (8006b68 <HAL_DMAEx_MultiBufferStart_IT+0x818>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d032      	beq.n	80069cc <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a80      	ldr	r2, [pc, #512]	; (8006b6c <HAL_DMAEx_MultiBufferStart_IT+0x81c>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d02a      	beq.n	80069c6 <HAL_DMAEx_MultiBufferStart_IT+0x676>
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a7e      	ldr	r2, [pc, #504]	; (8006b70 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d022      	beq.n	80069c0 <HAL_DMAEx_MultiBufferStart_IT+0x670>
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a7d      	ldr	r2, [pc, #500]	; (8006b74 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d01a      	beq.n	80069ba <HAL_DMAEx_MultiBufferStart_IT+0x66a>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a7b      	ldr	r2, [pc, #492]	; (8006b78 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d012      	beq.n	80069b4 <HAL_DMAEx_MultiBufferStart_IT+0x664>
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a7a      	ldr	r2, [pc, #488]	; (8006b7c <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d00a      	beq.n	80069ae <HAL_DMAEx_MultiBufferStart_IT+0x65e>
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a78      	ldr	r2, [pc, #480]	; (8006b80 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d102      	bne.n	80069a8 <HAL_DMAEx_MultiBufferStart_IT+0x658>
 80069a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80069a6:	e01e      	b.n	80069e6 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 80069a8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80069ac:	e01b      	b.n	80069e6 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 80069ae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80069b2:	e018      	b.n	80069e6 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 80069b4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80069b8:	e015      	b.n	80069e6 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 80069ba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80069be:	e012      	b.n	80069e6 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 80069c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069c4:	e00f      	b.n	80069e6 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 80069c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069ca:	e00c      	b.n	80069e6 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 80069cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069d0:	e009      	b.n	80069e6 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 80069d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069d6:	e006      	b.n	80069e6 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 80069d8:	2310      	movs	r3, #16
 80069da:	e004      	b.n	80069e6 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 80069dc:	2310      	movs	r3, #16
 80069de:	e002      	b.n	80069e6 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 80069e0:	2310      	movs	r3, #16
 80069e2:	e000      	b.n	80069e6 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 80069e4:	2310      	movs	r3, #16
 80069e6:	4a67      	ldr	r2, [pc, #412]	; (8006b84 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 80069e8:	60d3      	str	r3, [r2, #12]
 80069ea:	e05f      	b.n	8006aac <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a58      	ldr	r2, [pc, #352]	; (8006b54 <HAL_DMAEx_MultiBufferStart_IT+0x804>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d057      	beq.n	8006aa6 <HAL_DMAEx_MultiBufferStart_IT+0x756>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a57      	ldr	r2, [pc, #348]	; (8006b58 <HAL_DMAEx_MultiBufferStart_IT+0x808>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d050      	beq.n	8006aa2 <HAL_DMAEx_MultiBufferStart_IT+0x752>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a55      	ldr	r2, [pc, #340]	; (8006b5c <HAL_DMAEx_MultiBufferStart_IT+0x80c>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d049      	beq.n	8006a9e <HAL_DMAEx_MultiBufferStart_IT+0x74e>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a54      	ldr	r2, [pc, #336]	; (8006b60 <HAL_DMAEx_MultiBufferStart_IT+0x810>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d042      	beq.n	8006a9a <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a52      	ldr	r2, [pc, #328]	; (8006b64 <HAL_DMAEx_MultiBufferStart_IT+0x814>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d03a      	beq.n	8006a94 <HAL_DMAEx_MultiBufferStart_IT+0x744>
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a51      	ldr	r2, [pc, #324]	; (8006b68 <HAL_DMAEx_MultiBufferStart_IT+0x818>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d032      	beq.n	8006a8e <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a4f      	ldr	r2, [pc, #316]	; (8006b6c <HAL_DMAEx_MultiBufferStart_IT+0x81c>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d02a      	beq.n	8006a88 <HAL_DMAEx_MultiBufferStart_IT+0x738>
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a4e      	ldr	r2, [pc, #312]	; (8006b70 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d022      	beq.n	8006a82 <HAL_DMAEx_MultiBufferStart_IT+0x732>
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a4c      	ldr	r2, [pc, #304]	; (8006b74 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d01a      	beq.n	8006a7c <HAL_DMAEx_MultiBufferStart_IT+0x72c>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a4b      	ldr	r2, [pc, #300]	; (8006b78 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d012      	beq.n	8006a76 <HAL_DMAEx_MultiBufferStart_IT+0x726>
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a49      	ldr	r2, [pc, #292]	; (8006b7c <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d00a      	beq.n	8006a70 <HAL_DMAEx_MultiBufferStart_IT+0x720>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a48      	ldr	r2, [pc, #288]	; (8006b80 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d102      	bne.n	8006a6a <HAL_DMAEx_MultiBufferStart_IT+0x71a>
 8006a64:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006a68:	e01e      	b.n	8006aa8 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8006a6a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006a6e:	e01b      	b.n	8006aa8 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8006a70:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006a74:	e018      	b.n	8006aa8 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8006a76:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006a7a:	e015      	b.n	8006aa8 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8006a7c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006a80:	e012      	b.n	8006aa8 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8006a82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a86:	e00f      	b.n	8006aa8 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8006a88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a8c:	e00c      	b.n	8006aa8 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8006a8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a92:	e009      	b.n	8006aa8 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8006a94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a98:	e006      	b.n	8006aa8 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8006a9a:	2310      	movs	r3, #16
 8006a9c:	e004      	b.n	8006aa8 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8006a9e:	2310      	movs	r3, #16
 8006aa0:	e002      	b.n	8006aa8 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8006aa2:	2310      	movs	r3, #16
 8006aa4:	e000      	b.n	8006aa8 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8006aa6:	2310      	movs	r3, #16
 8006aa8:	4a36      	ldr	r2, [pc, #216]	; (8006b84 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8006aaa:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	4b35      	ldr	r3, [pc, #212]	; (8006b88 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	f240 8082 	bls.w	8006bbe <HAL_DMAEx_MultiBufferStart_IT+0x86e>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a25      	ldr	r2, [pc, #148]	; (8006b54 <HAL_DMAEx_MultiBufferStart_IT+0x804>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d078      	beq.n	8006bb6 <HAL_DMAEx_MultiBufferStart_IT+0x866>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a23      	ldr	r2, [pc, #140]	; (8006b58 <HAL_DMAEx_MultiBufferStart_IT+0x808>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d071      	beq.n	8006bb2 <HAL_DMAEx_MultiBufferStart_IT+0x862>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a22      	ldr	r2, [pc, #136]	; (8006b5c <HAL_DMAEx_MultiBufferStart_IT+0x80c>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d06a      	beq.n	8006bae <HAL_DMAEx_MultiBufferStart_IT+0x85e>
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a20      	ldr	r2, [pc, #128]	; (8006b60 <HAL_DMAEx_MultiBufferStart_IT+0x810>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d063      	beq.n	8006baa <HAL_DMAEx_MultiBufferStart_IT+0x85a>
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a1f      	ldr	r2, [pc, #124]	; (8006b64 <HAL_DMAEx_MultiBufferStart_IT+0x814>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d05b      	beq.n	8006ba4 <HAL_DMAEx_MultiBufferStart_IT+0x854>
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a1d      	ldr	r2, [pc, #116]	; (8006b68 <HAL_DMAEx_MultiBufferStart_IT+0x818>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d053      	beq.n	8006b9e <HAL_DMAEx_MultiBufferStart_IT+0x84e>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a1c      	ldr	r2, [pc, #112]	; (8006b6c <HAL_DMAEx_MultiBufferStart_IT+0x81c>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d04b      	beq.n	8006b98 <HAL_DMAEx_MultiBufferStart_IT+0x848>
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a1a      	ldr	r2, [pc, #104]	; (8006b70 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d043      	beq.n	8006b92 <HAL_DMAEx_MultiBufferStart_IT+0x842>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a19      	ldr	r2, [pc, #100]	; (8006b74 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d03b      	beq.n	8006b8c <HAL_DMAEx_MultiBufferStart_IT+0x83c>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a17      	ldr	r2, [pc, #92]	; (8006b78 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d012      	beq.n	8006b44 <HAL_DMAEx_MultiBufferStart_IT+0x7f4>
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a16      	ldr	r2, [pc, #88]	; (8006b7c <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d00a      	beq.n	8006b3e <HAL_DMAEx_MultiBufferStart_IT+0x7ee>
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a14      	ldr	r2, [pc, #80]	; (8006b80 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d102      	bne.n	8006b38 <HAL_DMAEx_MultiBufferStart_IT+0x7e8>
 8006b32:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006b36:	e03f      	b.n	8006bb8 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8006b38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b3c:	e03c      	b.n	8006bb8 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8006b3e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006b42:	e039      	b.n	8006bb8 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8006b44:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006b48:	e036      	b.n	8006bb8 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8006b4a:	bf00      	nop
 8006b4c:	40026400 	.word	0x40026400
 8006b50:	40026058 	.word	0x40026058
 8006b54:	40026010 	.word	0x40026010
 8006b58:	40026410 	.word	0x40026410
 8006b5c:	40026070 	.word	0x40026070
 8006b60:	40026470 	.word	0x40026470
 8006b64:	40026028 	.word	0x40026028
 8006b68:	40026428 	.word	0x40026428
 8006b6c:	40026088 	.word	0x40026088
 8006b70:	40026488 	.word	0x40026488
 8006b74:	40026040 	.word	0x40026040
 8006b78:	40026440 	.word	0x40026440
 8006b7c:	400260a0 	.word	0x400260a0
 8006b80:	400264a0 	.word	0x400264a0
 8006b84:	40026000 	.word	0x40026000
 8006b88:	40026458 	.word	0x40026458
 8006b8c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006b90:	e012      	b.n	8006bb8 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8006b92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b96:	e00f      	b.n	8006bb8 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8006b98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b9c:	e00c      	b.n	8006bb8 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8006b9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ba2:	e009      	b.n	8006bb8 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8006ba4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ba8:	e006      	b.n	8006bb8 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8006baa:	2308      	movs	r3, #8
 8006bac:	e004      	b.n	8006bb8 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8006bae:	2308      	movs	r3, #8
 8006bb0:	e002      	b.n	8006bb8 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8006bb2:	2308      	movs	r3, #8
 8006bb4:	e000      	b.n	8006bb8 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8006bb6:	2308      	movs	r3, #8
 8006bb8:	4a8c      	ldr	r2, [pc, #560]	; (8006dec <HAL_DMAEx_MultiBufferStart_IT+0xa9c>)
 8006bba:	60d3      	str	r3, [r2, #12]
 8006bbc:	e14e      	b.n	8006e5c <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	4b8a      	ldr	r3, [pc, #552]	; (8006df0 <HAL_DMAEx_MultiBufferStart_IT+0xaa0>)
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d960      	bls.n	8006c8c <HAL_DMAEx_MultiBufferStart_IT+0x93c>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a89      	ldr	r2, [pc, #548]	; (8006df4 <HAL_DMAEx_MultiBufferStart_IT+0xaa4>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d057      	beq.n	8006c84 <HAL_DMAEx_MultiBufferStart_IT+0x934>
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a87      	ldr	r2, [pc, #540]	; (8006df8 <HAL_DMAEx_MultiBufferStart_IT+0xaa8>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d050      	beq.n	8006c80 <HAL_DMAEx_MultiBufferStart_IT+0x930>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a86      	ldr	r2, [pc, #536]	; (8006dfc <HAL_DMAEx_MultiBufferStart_IT+0xaac>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d049      	beq.n	8006c7c <HAL_DMAEx_MultiBufferStart_IT+0x92c>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a84      	ldr	r2, [pc, #528]	; (8006e00 <HAL_DMAEx_MultiBufferStart_IT+0xab0>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d042      	beq.n	8006c78 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a83      	ldr	r2, [pc, #524]	; (8006e04 <HAL_DMAEx_MultiBufferStart_IT+0xab4>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d03a      	beq.n	8006c72 <HAL_DMAEx_MultiBufferStart_IT+0x922>
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a81      	ldr	r2, [pc, #516]	; (8006e08 <HAL_DMAEx_MultiBufferStart_IT+0xab8>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d032      	beq.n	8006c6c <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a80      	ldr	r2, [pc, #512]	; (8006e0c <HAL_DMAEx_MultiBufferStart_IT+0xabc>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d02a      	beq.n	8006c66 <HAL_DMAEx_MultiBufferStart_IT+0x916>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a7e      	ldr	r2, [pc, #504]	; (8006e10 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d022      	beq.n	8006c60 <HAL_DMAEx_MultiBufferStart_IT+0x910>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a7d      	ldr	r2, [pc, #500]	; (8006e14 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d01a      	beq.n	8006c5a <HAL_DMAEx_MultiBufferStart_IT+0x90a>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a7b      	ldr	r2, [pc, #492]	; (8006e18 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d012      	beq.n	8006c54 <HAL_DMAEx_MultiBufferStart_IT+0x904>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a7a      	ldr	r2, [pc, #488]	; (8006e1c <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d00a      	beq.n	8006c4e <HAL_DMAEx_MultiBufferStart_IT+0x8fe>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a78      	ldr	r2, [pc, #480]	; (8006e20 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d102      	bne.n	8006c48 <HAL_DMAEx_MultiBufferStart_IT+0x8f8>
 8006c42:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006c46:	e01e      	b.n	8006c86 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8006c48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c4c:	e01b      	b.n	8006c86 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8006c4e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006c52:	e018      	b.n	8006c86 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8006c54:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006c58:	e015      	b.n	8006c86 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8006c5a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006c5e:	e012      	b.n	8006c86 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8006c60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c64:	e00f      	b.n	8006c86 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8006c66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c6a:	e00c      	b.n	8006c86 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8006c6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c70:	e009      	b.n	8006c86 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8006c72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c76:	e006      	b.n	8006c86 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8006c78:	2308      	movs	r3, #8
 8006c7a:	e004      	b.n	8006c86 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8006c7c:	2308      	movs	r3, #8
 8006c7e:	e002      	b.n	8006c86 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8006c80:	2308      	movs	r3, #8
 8006c82:	e000      	b.n	8006c86 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8006c84:	2308      	movs	r3, #8
 8006c86:	4a59      	ldr	r2, [pc, #356]	; (8006dec <HAL_DMAEx_MultiBufferStart_IT+0xa9c>)
 8006c88:	6093      	str	r3, [r2, #8]
 8006c8a:	e0e7      	b.n	8006e5c <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	461a      	mov	r2, r3
 8006c92:	4b64      	ldr	r3, [pc, #400]	; (8006e24 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d960      	bls.n	8006d5a <HAL_DMAEx_MultiBufferStart_IT+0xa0a>
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a55      	ldr	r2, [pc, #340]	; (8006df4 <HAL_DMAEx_MultiBufferStart_IT+0xaa4>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d057      	beq.n	8006d52 <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a54      	ldr	r2, [pc, #336]	; (8006df8 <HAL_DMAEx_MultiBufferStart_IT+0xaa8>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d050      	beq.n	8006d4e <HAL_DMAEx_MultiBufferStart_IT+0x9fe>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a52      	ldr	r2, [pc, #328]	; (8006dfc <HAL_DMAEx_MultiBufferStart_IT+0xaac>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d049      	beq.n	8006d4a <HAL_DMAEx_MultiBufferStart_IT+0x9fa>
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a51      	ldr	r2, [pc, #324]	; (8006e00 <HAL_DMAEx_MultiBufferStart_IT+0xab0>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d042      	beq.n	8006d46 <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a4f      	ldr	r2, [pc, #316]	; (8006e04 <HAL_DMAEx_MultiBufferStart_IT+0xab4>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d03a      	beq.n	8006d40 <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a4e      	ldr	r2, [pc, #312]	; (8006e08 <HAL_DMAEx_MultiBufferStart_IT+0xab8>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d032      	beq.n	8006d3a <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a4c      	ldr	r2, [pc, #304]	; (8006e0c <HAL_DMAEx_MultiBufferStart_IT+0xabc>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d02a      	beq.n	8006d34 <HAL_DMAEx_MultiBufferStart_IT+0x9e4>
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a4b      	ldr	r2, [pc, #300]	; (8006e10 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d022      	beq.n	8006d2e <HAL_DMAEx_MultiBufferStart_IT+0x9de>
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a49      	ldr	r2, [pc, #292]	; (8006e14 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d01a      	beq.n	8006d28 <HAL_DMAEx_MultiBufferStart_IT+0x9d8>
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a48      	ldr	r2, [pc, #288]	; (8006e18 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d012      	beq.n	8006d22 <HAL_DMAEx_MultiBufferStart_IT+0x9d2>
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a46      	ldr	r2, [pc, #280]	; (8006e1c <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d00a      	beq.n	8006d1c <HAL_DMAEx_MultiBufferStart_IT+0x9cc>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a45      	ldr	r2, [pc, #276]	; (8006e20 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d102      	bne.n	8006d16 <HAL_DMAEx_MultiBufferStart_IT+0x9c6>
 8006d10:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006d14:	e01e      	b.n	8006d54 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8006d16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006d1a:	e01b      	b.n	8006d54 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8006d1c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006d20:	e018      	b.n	8006d54 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8006d22:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006d26:	e015      	b.n	8006d54 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8006d28:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006d2c:	e012      	b.n	8006d54 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8006d2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d32:	e00f      	b.n	8006d54 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8006d34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d38:	e00c      	b.n	8006d54 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8006d3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d3e:	e009      	b.n	8006d54 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8006d40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d44:	e006      	b.n	8006d54 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8006d46:	2308      	movs	r3, #8
 8006d48:	e004      	b.n	8006d54 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8006d4a:	2308      	movs	r3, #8
 8006d4c:	e002      	b.n	8006d54 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8006d4e:	2308      	movs	r3, #8
 8006d50:	e000      	b.n	8006d54 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8006d52:	2308      	movs	r3, #8
 8006d54:	4a34      	ldr	r2, [pc, #208]	; (8006e28 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8006d56:	60d3      	str	r3, [r2, #12]
 8006d58:	e080      	b.n	8006e5c <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a25      	ldr	r2, [pc, #148]	; (8006df4 <HAL_DMAEx_MultiBufferStart_IT+0xaa4>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d078      	beq.n	8006e56 <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a23      	ldr	r2, [pc, #140]	; (8006df8 <HAL_DMAEx_MultiBufferStart_IT+0xaa8>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d071      	beq.n	8006e52 <HAL_DMAEx_MultiBufferStart_IT+0xb02>
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a22      	ldr	r2, [pc, #136]	; (8006dfc <HAL_DMAEx_MultiBufferStart_IT+0xaac>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d06a      	beq.n	8006e4e <HAL_DMAEx_MultiBufferStart_IT+0xafe>
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a20      	ldr	r2, [pc, #128]	; (8006e00 <HAL_DMAEx_MultiBufferStart_IT+0xab0>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d063      	beq.n	8006e4a <HAL_DMAEx_MultiBufferStart_IT+0xafa>
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a1f      	ldr	r2, [pc, #124]	; (8006e04 <HAL_DMAEx_MultiBufferStart_IT+0xab4>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d05b      	beq.n	8006e44 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a1d      	ldr	r2, [pc, #116]	; (8006e08 <HAL_DMAEx_MultiBufferStart_IT+0xab8>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d053      	beq.n	8006e3e <HAL_DMAEx_MultiBufferStart_IT+0xaee>
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a1c      	ldr	r2, [pc, #112]	; (8006e0c <HAL_DMAEx_MultiBufferStart_IT+0xabc>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d04b      	beq.n	8006e38 <HAL_DMAEx_MultiBufferStart_IT+0xae8>
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a1a      	ldr	r2, [pc, #104]	; (8006e10 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d043      	beq.n	8006e32 <HAL_DMAEx_MultiBufferStart_IT+0xae2>
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a19      	ldr	r2, [pc, #100]	; (8006e14 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d03b      	beq.n	8006e2c <HAL_DMAEx_MultiBufferStart_IT+0xadc>
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a17      	ldr	r2, [pc, #92]	; (8006e18 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d012      	beq.n	8006de4 <HAL_DMAEx_MultiBufferStart_IT+0xa94>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a16      	ldr	r2, [pc, #88]	; (8006e1c <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d00a      	beq.n	8006dde <HAL_DMAEx_MultiBufferStart_IT+0xa8e>
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a14      	ldr	r2, [pc, #80]	; (8006e20 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d102      	bne.n	8006dd8 <HAL_DMAEx_MultiBufferStart_IT+0xa88>
 8006dd2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006dd6:	e03f      	b.n	8006e58 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8006dd8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ddc:	e03c      	b.n	8006e58 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8006dde:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006de2:	e039      	b.n	8006e58 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8006de4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006de8:	e036      	b.n	8006e58 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8006dea:	bf00      	nop
 8006dec:	40026400 	.word	0x40026400
 8006df0:	400260b8 	.word	0x400260b8
 8006df4:	40026010 	.word	0x40026010
 8006df8:	40026410 	.word	0x40026410
 8006dfc:	40026070 	.word	0x40026070
 8006e00:	40026470 	.word	0x40026470
 8006e04:	40026028 	.word	0x40026028
 8006e08:	40026428 	.word	0x40026428
 8006e0c:	40026088 	.word	0x40026088
 8006e10:	40026488 	.word	0x40026488
 8006e14:	40026040 	.word	0x40026040
 8006e18:	40026440 	.word	0x40026440
 8006e1c:	400260a0 	.word	0x400260a0
 8006e20:	400264a0 	.word	0x400264a0
 8006e24:	40026058 	.word	0x40026058
 8006e28:	40026000 	.word	0x40026000
 8006e2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006e30:	e012      	b.n	8006e58 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8006e32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e36:	e00f      	b.n	8006e58 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8006e38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e3c:	e00c      	b.n	8006e58 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8006e3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e42:	e009      	b.n	8006e58 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8006e44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e48:	e006      	b.n	8006e58 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8006e4a:	2308      	movs	r3, #8
 8006e4c:	e004      	b.n	8006e58 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8006e4e:	2308      	movs	r3, #8
 8006e50:	e002      	b.n	8006e58 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8006e52:	2308      	movs	r3, #8
 8006e54:	e000      	b.n	8006e58 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8006e56:	2308      	movs	r3, #8
 8006e58:	4a8a      	ldr	r2, [pc, #552]	; (8007084 <HAL_DMAEx_MultiBufferStart_IT+0xd34>)
 8006e5a:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	461a      	mov	r2, r3
 8006e62:	4b89      	ldr	r3, [pc, #548]	; (8007088 <HAL_DMAEx_MultiBufferStart_IT+0xd38>)
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d960      	bls.n	8006f2a <HAL_DMAEx_MultiBufferStart_IT+0xbda>
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a87      	ldr	r2, [pc, #540]	; (800708c <HAL_DMAEx_MultiBufferStart_IT+0xd3c>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d057      	beq.n	8006f22 <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a86      	ldr	r2, [pc, #536]	; (8007090 <HAL_DMAEx_MultiBufferStart_IT+0xd40>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d050      	beq.n	8006f1e <HAL_DMAEx_MultiBufferStart_IT+0xbce>
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a84      	ldr	r2, [pc, #528]	; (8007094 <HAL_DMAEx_MultiBufferStart_IT+0xd44>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d049      	beq.n	8006f1a <HAL_DMAEx_MultiBufferStart_IT+0xbca>
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a83      	ldr	r2, [pc, #524]	; (8007098 <HAL_DMAEx_MultiBufferStart_IT+0xd48>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d042      	beq.n	8006f16 <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a81      	ldr	r2, [pc, #516]	; (800709c <HAL_DMAEx_MultiBufferStart_IT+0xd4c>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d03a      	beq.n	8006f10 <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a80      	ldr	r2, [pc, #512]	; (80070a0 <HAL_DMAEx_MultiBufferStart_IT+0xd50>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d032      	beq.n	8006f0a <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a7e      	ldr	r2, [pc, #504]	; (80070a4 <HAL_DMAEx_MultiBufferStart_IT+0xd54>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d02a      	beq.n	8006f04 <HAL_DMAEx_MultiBufferStart_IT+0xbb4>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a7d      	ldr	r2, [pc, #500]	; (80070a8 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d022      	beq.n	8006efe <HAL_DMAEx_MultiBufferStart_IT+0xbae>
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a7b      	ldr	r2, [pc, #492]	; (80070ac <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d01a      	beq.n	8006ef8 <HAL_DMAEx_MultiBufferStart_IT+0xba8>
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a7a      	ldr	r2, [pc, #488]	; (80070b0 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d012      	beq.n	8006ef2 <HAL_DMAEx_MultiBufferStart_IT+0xba2>
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a78      	ldr	r2, [pc, #480]	; (80070b4 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d00a      	beq.n	8006eec <HAL_DMAEx_MultiBufferStart_IT+0xb9c>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a77      	ldr	r2, [pc, #476]	; (80070b8 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d102      	bne.n	8006ee6 <HAL_DMAEx_MultiBufferStart_IT+0xb96>
 8006ee0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006ee4:	e01e      	b.n	8006f24 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8006ee6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006eea:	e01b      	b.n	8006f24 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8006eec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006ef0:	e018      	b.n	8006f24 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8006ef2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006ef6:	e015      	b.n	8006f24 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8006ef8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006efc:	e012      	b.n	8006f24 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8006efe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f02:	e00f      	b.n	8006f24 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8006f04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f08:	e00c      	b.n	8006f24 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8006f0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f0e:	e009      	b.n	8006f24 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8006f10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f14:	e006      	b.n	8006f24 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8006f16:	2304      	movs	r3, #4
 8006f18:	e004      	b.n	8006f24 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8006f1a:	2304      	movs	r3, #4
 8006f1c:	e002      	b.n	8006f24 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8006f1e:	2304      	movs	r3, #4
 8006f20:	e000      	b.n	8006f24 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8006f22:	2304      	movs	r3, #4
 8006f24:	4a65      	ldr	r2, [pc, #404]	; (80070bc <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8006f26:	60d3      	str	r3, [r2, #12]
 8006f28:	e150      	b.n	80071cc <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	461a      	mov	r2, r3
 8006f30:	4b63      	ldr	r3, [pc, #396]	; (80070c0 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d960      	bls.n	8006ff8 <HAL_DMAEx_MultiBufferStart_IT+0xca8>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a54      	ldr	r2, [pc, #336]	; (800708c <HAL_DMAEx_MultiBufferStart_IT+0xd3c>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d057      	beq.n	8006ff0 <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a52      	ldr	r2, [pc, #328]	; (8007090 <HAL_DMAEx_MultiBufferStart_IT+0xd40>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d050      	beq.n	8006fec <HAL_DMAEx_MultiBufferStart_IT+0xc9c>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a51      	ldr	r2, [pc, #324]	; (8007094 <HAL_DMAEx_MultiBufferStart_IT+0xd44>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d049      	beq.n	8006fe8 <HAL_DMAEx_MultiBufferStart_IT+0xc98>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a4f      	ldr	r2, [pc, #316]	; (8007098 <HAL_DMAEx_MultiBufferStart_IT+0xd48>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d042      	beq.n	8006fe4 <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a4e      	ldr	r2, [pc, #312]	; (800709c <HAL_DMAEx_MultiBufferStart_IT+0xd4c>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d03a      	beq.n	8006fde <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a4c      	ldr	r2, [pc, #304]	; (80070a0 <HAL_DMAEx_MultiBufferStart_IT+0xd50>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d032      	beq.n	8006fd8 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a4b      	ldr	r2, [pc, #300]	; (80070a4 <HAL_DMAEx_MultiBufferStart_IT+0xd54>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d02a      	beq.n	8006fd2 <HAL_DMAEx_MultiBufferStart_IT+0xc82>
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a49      	ldr	r2, [pc, #292]	; (80070a8 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d022      	beq.n	8006fcc <HAL_DMAEx_MultiBufferStart_IT+0xc7c>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a48      	ldr	r2, [pc, #288]	; (80070ac <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d01a      	beq.n	8006fc6 <HAL_DMAEx_MultiBufferStart_IT+0xc76>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a46      	ldr	r2, [pc, #280]	; (80070b0 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d012      	beq.n	8006fc0 <HAL_DMAEx_MultiBufferStart_IT+0xc70>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a45      	ldr	r2, [pc, #276]	; (80070b4 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d00a      	beq.n	8006fba <HAL_DMAEx_MultiBufferStart_IT+0xc6a>
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a43      	ldr	r2, [pc, #268]	; (80070b8 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d102      	bne.n	8006fb4 <HAL_DMAEx_MultiBufferStart_IT+0xc64>
 8006fae:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006fb2:	e01e      	b.n	8006ff2 <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8006fb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006fb8:	e01b      	b.n	8006ff2 <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8006fba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006fbe:	e018      	b.n	8006ff2 <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8006fc0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006fc4:	e015      	b.n	8006ff2 <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8006fc6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006fca:	e012      	b.n	8006ff2 <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8006fcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006fd0:	e00f      	b.n	8006ff2 <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8006fd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006fd6:	e00c      	b.n	8006ff2 <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8006fd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006fdc:	e009      	b.n	8006ff2 <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8006fde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006fe2:	e006      	b.n	8006ff2 <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8006fe4:	2304      	movs	r3, #4
 8006fe6:	e004      	b.n	8006ff2 <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8006fe8:	2304      	movs	r3, #4
 8006fea:	e002      	b.n	8006ff2 <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8006fec:	2304      	movs	r3, #4
 8006fee:	e000      	b.n	8006ff2 <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8006ff0:	2304      	movs	r3, #4
 8006ff2:	4a32      	ldr	r2, [pc, #200]	; (80070bc <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8006ff4:	6093      	str	r3, [r2, #8]
 8006ff6:	e0e9      	b.n	80071cc <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	4b31      	ldr	r3, [pc, #196]	; (80070c4 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8007000:	429a      	cmp	r2, r3
 8007002:	f240 8083 	bls.w	800710c <HAL_DMAEx_MultiBufferStart_IT+0xdbc>
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a20      	ldr	r2, [pc, #128]	; (800708c <HAL_DMAEx_MultiBufferStart_IT+0xd3c>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d079      	beq.n	8007104 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a1e      	ldr	r2, [pc, #120]	; (8007090 <HAL_DMAEx_MultiBufferStart_IT+0xd40>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d072      	beq.n	8007100 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a1d      	ldr	r2, [pc, #116]	; (8007094 <HAL_DMAEx_MultiBufferStart_IT+0xd44>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d06b      	beq.n	80070fc <HAL_DMAEx_MultiBufferStart_IT+0xdac>
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a1b      	ldr	r2, [pc, #108]	; (8007098 <HAL_DMAEx_MultiBufferStart_IT+0xd48>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d064      	beq.n	80070f8 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a1a      	ldr	r2, [pc, #104]	; (800709c <HAL_DMAEx_MultiBufferStart_IT+0xd4c>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d05c      	beq.n	80070f2 <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a18      	ldr	r2, [pc, #96]	; (80070a0 <HAL_DMAEx_MultiBufferStart_IT+0xd50>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d054      	beq.n	80070ec <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a17      	ldr	r2, [pc, #92]	; (80070a4 <HAL_DMAEx_MultiBufferStart_IT+0xd54>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d04c      	beq.n	80070e6 <HAL_DMAEx_MultiBufferStart_IT+0xd96>
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a15      	ldr	r2, [pc, #84]	; (80070a8 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d044      	beq.n	80070e0 <HAL_DMAEx_MultiBufferStart_IT+0xd90>
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a14      	ldr	r2, [pc, #80]	; (80070ac <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d03c      	beq.n	80070da <HAL_DMAEx_MultiBufferStart_IT+0xd8a>
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a12      	ldr	r2, [pc, #72]	; (80070b0 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d034      	beq.n	80070d4 <HAL_DMAEx_MultiBufferStart_IT+0xd84>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a11      	ldr	r2, [pc, #68]	; (80070b4 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d02c      	beq.n	80070ce <HAL_DMAEx_MultiBufferStart_IT+0xd7e>
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a0f      	ldr	r2, [pc, #60]	; (80070b8 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d124      	bne.n	80070c8 <HAL_DMAEx_MultiBufferStart_IT+0xd78>
 800707e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007082:	e040      	b.n	8007106 <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8007084:	40026000 	.word	0x40026000
 8007088:	40026458 	.word	0x40026458
 800708c:	40026010 	.word	0x40026010
 8007090:	40026410 	.word	0x40026410
 8007094:	40026070 	.word	0x40026070
 8007098:	40026470 	.word	0x40026470
 800709c:	40026028 	.word	0x40026028
 80070a0:	40026428 	.word	0x40026428
 80070a4:	40026088 	.word	0x40026088
 80070a8:	40026488 	.word	0x40026488
 80070ac:	40026040 	.word	0x40026040
 80070b0:	40026440 	.word	0x40026440
 80070b4:	400260a0 	.word	0x400260a0
 80070b8:	400264a0 	.word	0x400264a0
 80070bc:	40026400 	.word	0x40026400
 80070c0:	400260b8 	.word	0x400260b8
 80070c4:	40026058 	.word	0x40026058
 80070c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80070cc:	e01b      	b.n	8007106 <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 80070ce:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80070d2:	e018      	b.n	8007106 <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 80070d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80070d8:	e015      	b.n	8007106 <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 80070da:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80070de:	e012      	b.n	8007106 <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 80070e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070e4:	e00f      	b.n	8007106 <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 80070e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070ea:	e00c      	b.n	8007106 <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 80070ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070f0:	e009      	b.n	8007106 <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 80070f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070f6:	e006      	b.n	8007106 <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 80070f8:	2304      	movs	r3, #4
 80070fa:	e004      	b.n	8007106 <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 80070fc:	2304      	movs	r3, #4
 80070fe:	e002      	b.n	8007106 <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8007100:	2304      	movs	r3, #4
 8007102:	e000      	b.n	8007106 <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8007104:	2304      	movs	r3, #4
 8007106:	4a8b      	ldr	r2, [pc, #556]	; (8007334 <HAL_DMAEx_MultiBufferStart_IT+0xfe4>)
 8007108:	60d3      	str	r3, [r2, #12]
 800710a:	e05f      	b.n	80071cc <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a89      	ldr	r2, [pc, #548]	; (8007338 <HAL_DMAEx_MultiBufferStart_IT+0xfe8>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d057      	beq.n	80071c6 <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a88      	ldr	r2, [pc, #544]	; (800733c <HAL_DMAEx_MultiBufferStart_IT+0xfec>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d050      	beq.n	80071c2 <HAL_DMAEx_MultiBufferStart_IT+0xe72>
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a86      	ldr	r2, [pc, #536]	; (8007340 <HAL_DMAEx_MultiBufferStart_IT+0xff0>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d049      	beq.n	80071be <HAL_DMAEx_MultiBufferStart_IT+0xe6e>
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a85      	ldr	r2, [pc, #532]	; (8007344 <HAL_DMAEx_MultiBufferStart_IT+0xff4>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d042      	beq.n	80071ba <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a83      	ldr	r2, [pc, #524]	; (8007348 <HAL_DMAEx_MultiBufferStart_IT+0xff8>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d03a      	beq.n	80071b4 <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a82      	ldr	r2, [pc, #520]	; (800734c <HAL_DMAEx_MultiBufferStart_IT+0xffc>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d032      	beq.n	80071ae <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a80      	ldr	r2, [pc, #512]	; (8007350 <HAL_DMAEx_MultiBufferStart_IT+0x1000>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d02a      	beq.n	80071a8 <HAL_DMAEx_MultiBufferStart_IT+0xe58>
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a7f      	ldr	r2, [pc, #508]	; (8007354 <HAL_DMAEx_MultiBufferStart_IT+0x1004>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d022      	beq.n	80071a2 <HAL_DMAEx_MultiBufferStart_IT+0xe52>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a7d      	ldr	r2, [pc, #500]	; (8007358 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d01a      	beq.n	800719c <HAL_DMAEx_MultiBufferStart_IT+0xe4c>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a7c      	ldr	r2, [pc, #496]	; (800735c <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d012      	beq.n	8007196 <HAL_DMAEx_MultiBufferStart_IT+0xe46>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a7a      	ldr	r2, [pc, #488]	; (8007360 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d00a      	beq.n	8007190 <HAL_DMAEx_MultiBufferStart_IT+0xe40>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a79      	ldr	r2, [pc, #484]	; (8007364 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d102      	bne.n	800718a <HAL_DMAEx_MultiBufferStart_IT+0xe3a>
 8007184:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007188:	e01e      	b.n	80071c8 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 800718a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800718e:	e01b      	b.n	80071c8 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8007190:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007194:	e018      	b.n	80071c8 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8007196:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800719a:	e015      	b.n	80071c8 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 800719c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80071a0:	e012      	b.n	80071c8 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 80071a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80071a6:	e00f      	b.n	80071c8 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 80071a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80071ac:	e00c      	b.n	80071c8 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 80071ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80071b2:	e009      	b.n	80071c8 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 80071b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80071b8:	e006      	b.n	80071c8 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 80071ba:	2304      	movs	r3, #4
 80071bc:	e004      	b.n	80071c8 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 80071be:	2304      	movs	r3, #4
 80071c0:	e002      	b.n	80071c8 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 80071c2:	2304      	movs	r3, #4
 80071c4:	e000      	b.n	80071c8 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 80071c6:	2304      	movs	r3, #4
 80071c8:	4a5a      	ldr	r2, [pc, #360]	; (8007334 <HAL_DMAEx_MultiBufferStart_IT+0xfe4>)
 80071ca:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	461a      	mov	r2, r3
 80071d2:	4b65      	ldr	r3, [pc, #404]	; (8007368 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d95c      	bls.n	8007292 <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a56      	ldr	r2, [pc, #344]	; (8007338 <HAL_DMAEx_MultiBufferStart_IT+0xfe8>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d053      	beq.n	800728a <HAL_DMAEx_MultiBufferStart_IT+0xf3a>
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a55      	ldr	r2, [pc, #340]	; (800733c <HAL_DMAEx_MultiBufferStart_IT+0xfec>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d04c      	beq.n	8007286 <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a53      	ldr	r2, [pc, #332]	; (8007340 <HAL_DMAEx_MultiBufferStart_IT+0xff0>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d045      	beq.n	8007282 <HAL_DMAEx_MultiBufferStart_IT+0xf32>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a52      	ldr	r2, [pc, #328]	; (8007344 <HAL_DMAEx_MultiBufferStart_IT+0xff4>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d03e      	beq.n	800727e <HAL_DMAEx_MultiBufferStart_IT+0xf2e>
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a50      	ldr	r2, [pc, #320]	; (8007348 <HAL_DMAEx_MultiBufferStart_IT+0xff8>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d037      	beq.n	800727a <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a4f      	ldr	r2, [pc, #316]	; (800734c <HAL_DMAEx_MultiBufferStart_IT+0xffc>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d030      	beq.n	8007276 <HAL_DMAEx_MultiBufferStart_IT+0xf26>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a4d      	ldr	r2, [pc, #308]	; (8007350 <HAL_DMAEx_MultiBufferStart_IT+0x1000>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d029      	beq.n	8007272 <HAL_DMAEx_MultiBufferStart_IT+0xf22>
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a4c      	ldr	r2, [pc, #304]	; (8007354 <HAL_DMAEx_MultiBufferStart_IT+0x1004>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d022      	beq.n	800726e <HAL_DMAEx_MultiBufferStart_IT+0xf1e>
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a4a      	ldr	r2, [pc, #296]	; (8007358 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d01a      	beq.n	8007268 <HAL_DMAEx_MultiBufferStart_IT+0xf18>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a49      	ldr	r2, [pc, #292]	; (800735c <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d012      	beq.n	8007262 <HAL_DMAEx_MultiBufferStart_IT+0xf12>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a47      	ldr	r2, [pc, #284]	; (8007360 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d00a      	beq.n	800725c <HAL_DMAEx_MultiBufferStart_IT+0xf0c>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a46      	ldr	r2, [pc, #280]	; (8007364 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d102      	bne.n	8007256 <HAL_DMAEx_MultiBufferStart_IT+0xf06>
 8007250:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007254:	e01a      	b.n	800728c <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8007256:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800725a:	e017      	b.n	800728c <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 800725c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007260:	e014      	b.n	800728c <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8007262:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007266:	e011      	b.n	800728c <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8007268:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800726c:	e00e      	b.n	800728c <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 800726e:	2340      	movs	r3, #64	; 0x40
 8007270:	e00c      	b.n	800728c <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8007272:	2340      	movs	r3, #64	; 0x40
 8007274:	e00a      	b.n	800728c <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8007276:	2340      	movs	r3, #64	; 0x40
 8007278:	e008      	b.n	800728c <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 800727a:	2340      	movs	r3, #64	; 0x40
 800727c:	e006      	b.n	800728c <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 800727e:	2301      	movs	r3, #1
 8007280:	e004      	b.n	800728c <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8007282:	2301      	movs	r3, #1
 8007284:	e002      	b.n	800728c <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8007286:	2301      	movs	r3, #1
 8007288:	e000      	b.n	800728c <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 800728a:	2301      	movs	r3, #1
 800728c:	4a37      	ldr	r2, [pc, #220]	; (800736c <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 800728e:	60d3      	str	r3, [r2, #12]
 8007290:	e141      	b.n	8007516 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	461a      	mov	r2, r3
 8007298:	4b35      	ldr	r3, [pc, #212]	; (8007370 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 800729a:	429a      	cmp	r2, r3
 800729c:	d97c      	bls.n	8007398 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a25      	ldr	r2, [pc, #148]	; (8007338 <HAL_DMAEx_MultiBufferStart_IT+0xfe8>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d073      	beq.n	8007390 <HAL_DMAEx_MultiBufferStart_IT+0x1040>
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a23      	ldr	r2, [pc, #140]	; (800733c <HAL_DMAEx_MultiBufferStart_IT+0xfec>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d06c      	beq.n	800738c <HAL_DMAEx_MultiBufferStart_IT+0x103c>
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a22      	ldr	r2, [pc, #136]	; (8007340 <HAL_DMAEx_MultiBufferStart_IT+0xff0>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d065      	beq.n	8007388 <HAL_DMAEx_MultiBufferStart_IT+0x1038>
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a20      	ldr	r2, [pc, #128]	; (8007344 <HAL_DMAEx_MultiBufferStart_IT+0xff4>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d05e      	beq.n	8007384 <HAL_DMAEx_MultiBufferStart_IT+0x1034>
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a1f      	ldr	r2, [pc, #124]	; (8007348 <HAL_DMAEx_MultiBufferStart_IT+0xff8>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d057      	beq.n	8007380 <HAL_DMAEx_MultiBufferStart_IT+0x1030>
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a1d      	ldr	r2, [pc, #116]	; (800734c <HAL_DMAEx_MultiBufferStart_IT+0xffc>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d050      	beq.n	800737c <HAL_DMAEx_MultiBufferStart_IT+0x102c>
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a1c      	ldr	r2, [pc, #112]	; (8007350 <HAL_DMAEx_MultiBufferStart_IT+0x1000>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d049      	beq.n	8007378 <HAL_DMAEx_MultiBufferStart_IT+0x1028>
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a1a      	ldr	r2, [pc, #104]	; (8007354 <HAL_DMAEx_MultiBufferStart_IT+0x1004>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d042      	beq.n	8007374 <HAL_DMAEx_MultiBufferStart_IT+0x1024>
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a19      	ldr	r2, [pc, #100]	; (8007358 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d01a      	beq.n	800732e <HAL_DMAEx_MultiBufferStart_IT+0xfde>
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a17      	ldr	r2, [pc, #92]	; (800735c <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d012      	beq.n	8007328 <HAL_DMAEx_MultiBufferStart_IT+0xfd8>
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a16      	ldr	r2, [pc, #88]	; (8007360 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d00a      	beq.n	8007322 <HAL_DMAEx_MultiBufferStart_IT+0xfd2>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a14      	ldr	r2, [pc, #80]	; (8007364 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d102      	bne.n	800731c <HAL_DMAEx_MultiBufferStart_IT+0xfcc>
 8007316:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800731a:	e03a      	b.n	8007392 <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 800731c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007320:	e037      	b.n	8007392 <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8007322:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007326:	e034      	b.n	8007392 <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8007328:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800732c:	e031      	b.n	8007392 <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 800732e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007332:	e02e      	b.n	8007392 <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8007334:	40026000 	.word	0x40026000
 8007338:	40026010 	.word	0x40026010
 800733c:	40026410 	.word	0x40026410
 8007340:	40026070 	.word	0x40026070
 8007344:	40026470 	.word	0x40026470
 8007348:	40026028 	.word	0x40026028
 800734c:	40026428 	.word	0x40026428
 8007350:	40026088 	.word	0x40026088
 8007354:	40026488 	.word	0x40026488
 8007358:	40026040 	.word	0x40026040
 800735c:	40026440 	.word	0x40026440
 8007360:	400260a0 	.word	0x400260a0
 8007364:	400264a0 	.word	0x400264a0
 8007368:	40026458 	.word	0x40026458
 800736c:	40026400 	.word	0x40026400
 8007370:	400260b8 	.word	0x400260b8
 8007374:	2340      	movs	r3, #64	; 0x40
 8007376:	e00c      	b.n	8007392 <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8007378:	2340      	movs	r3, #64	; 0x40
 800737a:	e00a      	b.n	8007392 <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 800737c:	2340      	movs	r3, #64	; 0x40
 800737e:	e008      	b.n	8007392 <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8007380:	2340      	movs	r3, #64	; 0x40
 8007382:	e006      	b.n	8007392 <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8007384:	2301      	movs	r3, #1
 8007386:	e004      	b.n	8007392 <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8007388:	2301      	movs	r3, #1
 800738a:	e002      	b.n	8007392 <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 800738c:	2301      	movs	r3, #1
 800738e:	e000      	b.n	8007392 <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8007390:	2301      	movs	r3, #1
 8007392:	4a7b      	ldr	r2, [pc, #492]	; (8007580 <HAL_DMAEx_MultiBufferStart_IT+0x1230>)
 8007394:	6093      	str	r3, [r2, #8]
 8007396:	e0be      	b.n	8007516 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	461a      	mov	r2, r3
 800739e:	4b79      	ldr	r3, [pc, #484]	; (8007584 <HAL_DMAEx_MultiBufferStart_IT+0x1234>)
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d95c      	bls.n	800745e <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a77      	ldr	r2, [pc, #476]	; (8007588 <HAL_DMAEx_MultiBufferStart_IT+0x1238>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d053      	beq.n	8007456 <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a76      	ldr	r2, [pc, #472]	; (800758c <HAL_DMAEx_MultiBufferStart_IT+0x123c>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d04c      	beq.n	8007452 <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a74      	ldr	r2, [pc, #464]	; (8007590 <HAL_DMAEx_MultiBufferStart_IT+0x1240>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d045      	beq.n	800744e <HAL_DMAEx_MultiBufferStart_IT+0x10fe>
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a73      	ldr	r2, [pc, #460]	; (8007594 <HAL_DMAEx_MultiBufferStart_IT+0x1244>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d03e      	beq.n	800744a <HAL_DMAEx_MultiBufferStart_IT+0x10fa>
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a71      	ldr	r2, [pc, #452]	; (8007598 <HAL_DMAEx_MultiBufferStart_IT+0x1248>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d037      	beq.n	8007446 <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a70      	ldr	r2, [pc, #448]	; (800759c <HAL_DMAEx_MultiBufferStart_IT+0x124c>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d030      	beq.n	8007442 <HAL_DMAEx_MultiBufferStart_IT+0x10f2>
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a6e      	ldr	r2, [pc, #440]	; (80075a0 <HAL_DMAEx_MultiBufferStart_IT+0x1250>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d029      	beq.n	800743e <HAL_DMAEx_MultiBufferStart_IT+0x10ee>
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a6d      	ldr	r2, [pc, #436]	; (80075a4 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d022      	beq.n	800743a <HAL_DMAEx_MultiBufferStart_IT+0x10ea>
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a6b      	ldr	r2, [pc, #428]	; (80075a8 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d01a      	beq.n	8007434 <HAL_DMAEx_MultiBufferStart_IT+0x10e4>
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a6a      	ldr	r2, [pc, #424]	; (80075ac <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d012      	beq.n	800742e <HAL_DMAEx_MultiBufferStart_IT+0x10de>
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a68      	ldr	r2, [pc, #416]	; (80075b0 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d00a      	beq.n	8007428 <HAL_DMAEx_MultiBufferStart_IT+0x10d8>
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a67      	ldr	r2, [pc, #412]	; (80075b4 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d102      	bne.n	8007422 <HAL_DMAEx_MultiBufferStart_IT+0x10d2>
 800741c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007420:	e01a      	b.n	8007458 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8007422:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007426:	e017      	b.n	8007458 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8007428:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800742c:	e014      	b.n	8007458 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800742e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007432:	e011      	b.n	8007458 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8007434:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007438:	e00e      	b.n	8007458 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800743a:	2340      	movs	r3, #64	; 0x40
 800743c:	e00c      	b.n	8007458 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800743e:	2340      	movs	r3, #64	; 0x40
 8007440:	e00a      	b.n	8007458 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8007442:	2340      	movs	r3, #64	; 0x40
 8007444:	e008      	b.n	8007458 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8007446:	2340      	movs	r3, #64	; 0x40
 8007448:	e006      	b.n	8007458 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800744a:	2301      	movs	r3, #1
 800744c:	e004      	b.n	8007458 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800744e:	2301      	movs	r3, #1
 8007450:	e002      	b.n	8007458 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8007452:	2301      	movs	r3, #1
 8007454:	e000      	b.n	8007458 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8007456:	2301      	movs	r3, #1
 8007458:	4a57      	ldr	r2, [pc, #348]	; (80075b8 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 800745a:	60d3      	str	r3, [r2, #12]
 800745c:	e05b      	b.n	8007516 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a49      	ldr	r2, [pc, #292]	; (8007588 <HAL_DMAEx_MultiBufferStart_IT+0x1238>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d053      	beq.n	8007510 <HAL_DMAEx_MultiBufferStart_IT+0x11c0>
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a47      	ldr	r2, [pc, #284]	; (800758c <HAL_DMAEx_MultiBufferStart_IT+0x123c>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d04c      	beq.n	800750c <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a46      	ldr	r2, [pc, #280]	; (8007590 <HAL_DMAEx_MultiBufferStart_IT+0x1240>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d045      	beq.n	8007508 <HAL_DMAEx_MultiBufferStart_IT+0x11b8>
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a44      	ldr	r2, [pc, #272]	; (8007594 <HAL_DMAEx_MultiBufferStart_IT+0x1244>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d03e      	beq.n	8007504 <HAL_DMAEx_MultiBufferStart_IT+0x11b4>
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a43      	ldr	r2, [pc, #268]	; (8007598 <HAL_DMAEx_MultiBufferStart_IT+0x1248>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d037      	beq.n	8007500 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a41      	ldr	r2, [pc, #260]	; (800759c <HAL_DMAEx_MultiBufferStart_IT+0x124c>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d030      	beq.n	80074fc <HAL_DMAEx_MultiBufferStart_IT+0x11ac>
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a40      	ldr	r2, [pc, #256]	; (80075a0 <HAL_DMAEx_MultiBufferStart_IT+0x1250>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d029      	beq.n	80074f8 <HAL_DMAEx_MultiBufferStart_IT+0x11a8>
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a3e      	ldr	r2, [pc, #248]	; (80075a4 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d022      	beq.n	80074f4 <HAL_DMAEx_MultiBufferStart_IT+0x11a4>
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a3d      	ldr	r2, [pc, #244]	; (80075a8 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d01a      	beq.n	80074ee <HAL_DMAEx_MultiBufferStart_IT+0x119e>
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a3b      	ldr	r2, [pc, #236]	; (80075ac <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d012      	beq.n	80074e8 <HAL_DMAEx_MultiBufferStart_IT+0x1198>
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a3a      	ldr	r2, [pc, #232]	; (80075b0 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d00a      	beq.n	80074e2 <HAL_DMAEx_MultiBufferStart_IT+0x1192>
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a38      	ldr	r2, [pc, #224]	; (80075b4 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d102      	bne.n	80074dc <HAL_DMAEx_MultiBufferStart_IT+0x118c>
 80074d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80074da:	e01a      	b.n	8007512 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 80074dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80074e0:	e017      	b.n	8007512 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 80074e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80074e6:	e014      	b.n	8007512 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 80074e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80074ec:	e011      	b.n	8007512 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 80074ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80074f2:	e00e      	b.n	8007512 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 80074f4:	2340      	movs	r3, #64	; 0x40
 80074f6:	e00c      	b.n	8007512 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 80074f8:	2340      	movs	r3, #64	; 0x40
 80074fa:	e00a      	b.n	8007512 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 80074fc:	2340      	movs	r3, #64	; 0x40
 80074fe:	e008      	b.n	8007512 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8007500:	2340      	movs	r3, #64	; 0x40
 8007502:	e006      	b.n	8007512 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8007504:	2301      	movs	r3, #1
 8007506:	e004      	b.n	8007512 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8007508:	2301      	movs	r3, #1
 800750a:	e002      	b.n	8007512 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 800750c:	2301      	movs	r3, #1
 800750e:	e000      	b.n	8007512 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8007510:	2301      	movs	r3, #1
 8007512:	4a29      	ldr	r2, [pc, #164]	; (80075b8 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8007514:	6093      	str	r3, [r2, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f042 0216 	orr.w	r2, r2, #22
 8007524:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	695a      	ldr	r2, [r3, #20]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007534:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753a:	2b00      	cmp	r3, #0
 800753c:	d103      	bne.n	8007546 <HAL_DMAEx_MultiBufferStart_IT+0x11f6>
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007542:	2b00      	cmp	r3, #0
 8007544:	d007      	beq.n	8007556 <HAL_DMAEx_MultiBufferStart_IT+0x1206>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f042 0208 	orr.w	r2, r2, #8
 8007554:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f042 0201 	orr.w	r2, r2, #1
 8007564:	601a      	str	r2, [r3, #0]
 8007566:	e005      	b.n	8007574 <HAL_DMAEx_MultiBufferStart_IT+0x1224>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2200      	movs	r2, #0
 800756c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007570:	2302      	movs	r3, #2
 8007572:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8007574:	7dfb      	ldrb	r3, [r7, #23]
}
 8007576:	4618      	mov	r0, r3
 8007578:	3718      	adds	r7, #24
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	40026400 	.word	0x40026400
 8007584:	40026058 	.word	0x40026058
 8007588:	40026010 	.word	0x40026010
 800758c:	40026410 	.word	0x40026410
 8007590:	40026070 	.word	0x40026070
 8007594:	40026470 	.word	0x40026470
 8007598:	40026028 	.word	0x40026028
 800759c:	40026428 	.word	0x40026428
 80075a0:	40026088 	.word	0x40026088
 80075a4:	40026488 	.word	0x40026488
 80075a8:	40026040 	.word	0x40026040
 80075ac:	40026440 	.word	0x40026440
 80075b0:	400260a0 	.word	0x400260a0
 80075b4:	400264a0 	.word	0x400264a0
 80075b8:	40026000 	.word	0x40026000

080075bc <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 80075bc:	b480      	push	{r7}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	4613      	mov	r3, r2
 80075c8:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 80075ca:	79fb      	ldrb	r3, [r7, #7]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d104      	bne.n	80075da <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	68ba      	ldr	r2, [r7, #8]
 80075d6:	60da      	str	r2, [r3, #12]
 80075d8:	e003      	b.n	80075e2 <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	68ba      	ldr	r2, [r7, #8]
 80075e0:	611a      	str	r2, [r3, #16]
  }
  
  return HAL_OK;
 80075e2:	2300      	movs	r3, #0
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3714      	adds	r7, #20
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b085      	sub	sp, #20
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	60f8      	str	r0, [r7, #12]
 80075f8:	60b9      	str	r1, [r7, #8]
 80075fa:	607a      	str	r2, [r7, #4]
 80075fc:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	683a      	ldr	r2, [r7, #0]
 8007604:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	2b40      	cmp	r3, #64	; 0x40
 800760c:	d108      	bne.n	8007620 <DMA_MultiBufferSetConfig+0x30>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	68ba      	ldr	r2, [r7, #8]
 800761c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800761e:	e007      	b.n	8007630 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	68ba      	ldr	r2, [r7, #8]
 8007626:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	60da      	str	r2, [r3, #12]
}
 8007630:	bf00      	nop
 8007632:	3714      	adds	r7, #20
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d101      	bne.n	800764e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	e06a      	b.n	8007724 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007654:	2b00      	cmp	r3, #0
 8007656:	d106      	bne.n	8007666 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2223      	movs	r2, #35	; 0x23
 800765c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f7fb ffdb 	bl	800361c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007666:	4b31      	ldr	r3, [pc, #196]	; (800772c <HAL_ETH_Init+0xf0>)
 8007668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800766a:	4a30      	ldr	r2, [pc, #192]	; (800772c <HAL_ETH_Init+0xf0>)
 800766c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007670:	6453      	str	r3, [r2, #68]	; 0x44
 8007672:	4b2e      	ldr	r3, [pc, #184]	; (800772c <HAL_ETH_Init+0xf0>)
 8007674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800767a:	60bb      	str	r3, [r7, #8]
 800767c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800767e:	4b2c      	ldr	r3, [pc, #176]	; (8007730 <HAL_ETH_Init+0xf4>)
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	4a2b      	ldr	r2, [pc, #172]	; (8007730 <HAL_ETH_Init+0xf4>)
 8007684:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007688:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800768a:	4b29      	ldr	r3, [pc, #164]	; (8007730 <HAL_ETH_Init+0xf4>)
 800768c:	685a      	ldr	r2, [r3, #4]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	4927      	ldr	r1, [pc, #156]	; (8007730 <HAL_ETH_Init+0xf4>)
 8007694:	4313      	orrs	r3, r2
 8007696:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8007698:	4b25      	ldr	r3, [pc, #148]	; (8007730 <HAL_ETH_Init+0xf4>)
 800769a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	6812      	ldr	r2, [r2, #0]
 80076aa:	f043 0301 	orr.w	r3, r3, #1
 80076ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80076b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80076b4:	f7fd f8d0 	bl	8004858 <HAL_GetTick>
 80076b8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80076ba:	e011      	b.n	80076e0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80076bc:	f7fd f8cc 	bl	8004858 <HAL_GetTick>
 80076c0:	4602      	mov	r2, r0
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	1ad3      	subs	r3, r2, r3
 80076c6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80076ca:	d909      	bls.n	80076e0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2204      	movs	r2, #4
 80076d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	22e0      	movs	r2, #224	; 0xe0
 80076d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	e021      	b.n	8007724 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f003 0301 	and.w	r3, r3, #1
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d1e4      	bne.n	80076bc <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 f958 	bl	80079a8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 f9ff 	bl	8007afc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 fa55 	bl	8007bae <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	461a      	mov	r2, r3
 800770a:	2100      	movs	r1, #0
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 f9bd 	bl	8007a8c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2210      	movs	r2, #16
 800771e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007722:	2300      	movs	r3, #0
}
 8007724:	4618      	mov	r0, r3
 8007726:	3710      	adds	r7, #16
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}
 800772c:	40023800 	.word	0x40023800
 8007730:	40013800 	.word	0x40013800

08007734 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8007746:	68fa      	ldr	r2, [r7, #12]
 8007748:	4b51      	ldr	r3, [pc, #324]	; (8007890 <ETH_SetMACConfig+0x15c>)
 800774a:	4013      	ands	r3, r2
 800774c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	7c1b      	ldrb	r3, [r3, #16]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d102      	bne.n	800775c <ETH_SetMACConfig+0x28>
 8007756:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800775a:	e000      	b.n	800775e <ETH_SetMACConfig+0x2a>
 800775c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	7c5b      	ldrb	r3, [r3, #17]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d102      	bne.n	800776c <ETH_SetMACConfig+0x38>
 8007766:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800776a:	e000      	b.n	800776e <ETH_SetMACConfig+0x3a>
 800776c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800776e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8007774:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	7fdb      	ldrb	r3, [r3, #31]
 800777a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800777c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8007782:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8007784:	683a      	ldr	r2, [r7, #0]
 8007786:	7f92      	ldrb	r2, [r2, #30]
 8007788:	2a00      	cmp	r2, #0
 800778a:	d102      	bne.n	8007792 <ETH_SetMACConfig+0x5e>
 800778c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007790:	e000      	b.n	8007794 <ETH_SetMACConfig+0x60>
 8007792:	2200      	movs	r2, #0
                        macconf->Speed |
 8007794:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	7f1b      	ldrb	r3, [r3, #28]
 800779a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800779c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80077a2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	791b      	ldrb	r3, [r3, #4]
 80077a8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80077aa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80077ac:	683a      	ldr	r2, [r7, #0]
 80077ae:	f892 2020 	ldrb.w	r2, [r2, #32]
 80077b2:	2a00      	cmp	r2, #0
 80077b4:	d102      	bne.n	80077bc <ETH_SetMACConfig+0x88>
 80077b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077ba:	e000      	b.n	80077be <ETH_SetMACConfig+0x8a>
 80077bc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80077be:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	7bdb      	ldrb	r3, [r3, #15]
 80077c4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80077c6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80077cc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077d4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80077d6:	4313      	orrs	r3, r2
 80077d8:	68fa      	ldr	r2, [r7, #12]
 80077da:	4313      	orrs	r3, r2
 80077dc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68fa      	ldr	r2, [r7, #12]
 80077e4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80077ee:	2001      	movs	r0, #1
 80077f0:	f7fd f83e 	bl	8004870 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	68fa      	ldr	r2, [r7, #12]
 80077fa:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	699b      	ldr	r3, [r3, #24]
 8007802:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	f64f 7341 	movw	r3, #65345	; 0xff41
 800780a:	4013      	ands	r3, r2
 800780c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007812:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8007814:	683a      	ldr	r2, [r7, #0]
 8007816:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800781a:	2a00      	cmp	r2, #0
 800781c:	d101      	bne.n	8007822 <ETH_SetMACConfig+0xee>
 800781e:	2280      	movs	r2, #128	; 0x80
 8007820:	e000      	b.n	8007824 <ETH_SetMACConfig+0xf0>
 8007822:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8007824:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800782a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800782c:	683a      	ldr	r2, [r7, #0]
 800782e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8007832:	2a01      	cmp	r2, #1
 8007834:	d101      	bne.n	800783a <ETH_SetMACConfig+0x106>
 8007836:	2208      	movs	r2, #8
 8007838:	e000      	b.n	800783c <ETH_SetMACConfig+0x108>
 800783a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800783c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800783e:	683a      	ldr	r2, [r7, #0]
 8007840:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8007844:	2a01      	cmp	r2, #1
 8007846:	d101      	bne.n	800784c <ETH_SetMACConfig+0x118>
 8007848:	2204      	movs	r2, #4
 800784a:	e000      	b.n	800784e <ETH_SetMACConfig+0x11a>
 800784c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800784e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8007850:	683a      	ldr	r2, [r7, #0]
 8007852:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8007856:	2a01      	cmp	r2, #1
 8007858:	d101      	bne.n	800785e <ETH_SetMACConfig+0x12a>
 800785a:	2202      	movs	r2, #2
 800785c:	e000      	b.n	8007860 <ETH_SetMACConfig+0x12c>
 800785e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8007860:	4313      	orrs	r3, r2
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	4313      	orrs	r3, r2
 8007866:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	68fa      	ldr	r2, [r7, #12]
 800786e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	699b      	ldr	r3, [r3, #24]
 8007876:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007878:	2001      	movs	r0, #1
 800787a:	f7fc fff9 	bl	8004870 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	68fa      	ldr	r2, [r7, #12]
 8007884:	619a      	str	r2, [r3, #24]
}
 8007886:	bf00      	nop
 8007888:	3710      	adds	r7, #16
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	ff20810f 	.word	0xff20810f

08007894 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078a6:	699b      	ldr	r3, [r3, #24]
 80078a8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	4b3d      	ldr	r3, [pc, #244]	; (80079a4 <ETH_SetDMAConfig+0x110>)
 80078ae:	4013      	ands	r3, r2
 80078b0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	7b1b      	ldrb	r3, [r3, #12]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d102      	bne.n	80078c0 <ETH_SetDMAConfig+0x2c>
 80078ba:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80078be:	e000      	b.n	80078c2 <ETH_SetDMAConfig+0x2e>
 80078c0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	7b5b      	ldrb	r3, [r3, #13]
 80078c6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80078c8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80078ca:	683a      	ldr	r2, [r7, #0]
 80078cc:	7f52      	ldrb	r2, [r2, #29]
 80078ce:	2a00      	cmp	r2, #0
 80078d0:	d102      	bne.n	80078d8 <ETH_SetDMAConfig+0x44>
 80078d2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80078d6:	e000      	b.n	80078da <ETH_SetDMAConfig+0x46>
 80078d8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80078da:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	7b9b      	ldrb	r3, [r3, #14]
 80078e0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80078e2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80078e8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	7f1b      	ldrb	r3, [r3, #28]
 80078ee:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80078f0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	7f9b      	ldrb	r3, [r3, #30]
 80078f6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80078f8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80078fe:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007906:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8007908:	4313      	orrs	r3, r2
 800790a:	68fa      	ldr	r2, [r7, #12]
 800790c:	4313      	orrs	r3, r2
 800790e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007918:	461a      	mov	r2, r3
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007926:	699b      	ldr	r3, [r3, #24]
 8007928:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800792a:	2001      	movs	r0, #1
 800792c:	f7fc ffa0 	bl	8004870 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007938:	461a      	mov	r2, r3
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	791b      	ldrb	r3, [r3, #4]
 8007942:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8007948:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800794e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8007954:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800795c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800795e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007964:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8007966:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800796c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	6812      	ldr	r2, [r2, #0]
 8007972:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007976:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800797a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007988:	2001      	movs	r0, #1
 800798a:	f7fc ff71 	bl	8004870 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007996:	461a      	mov	r2, r3
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6013      	str	r3, [r2, #0]
}
 800799c:	bf00      	nop
 800799e:	3710      	adds	r7, #16
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}
 80079a4:	f8de3f23 	.word	0xf8de3f23

080079a8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b0a6      	sub	sp, #152	; 0x98
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80079b0:	2301      	movs	r3, #1
 80079b2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80079b6:	2301      	movs	r3, #1
 80079b8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80079bc:	2300      	movs	r3, #0
 80079be:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80079c0:	2300      	movs	r3, #0
 80079c2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80079c6:	2301      	movs	r3, #1
 80079c8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80079cc:	2300      	movs	r3, #0
 80079ce:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80079d2:	2301      	movs	r3, #1
 80079d4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80079d8:	2300      	movs	r3, #0
 80079da:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80079de:	2300      	movs	r3, #0
 80079e0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80079e4:	2300      	movs	r3, #0
 80079e6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80079e8:	2300      	movs	r3, #0
 80079ea:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80079ee:	2300      	movs	r3, #0
 80079f0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80079f2:	2300      	movs	r3, #0
 80079f4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80079f8:	2300      	movs	r3, #0
 80079fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80079fe:	2300      	movs	r3, #0
 8007a00:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8007a04:	2300      	movs	r3, #0
 8007a06:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8007a0a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007a0e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8007a10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007a14:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8007a16:	2300      	movs	r3, #0
 8007a18:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8007a1c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007a20:	4619      	mov	r1, r3
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f7ff fe86 	bl	8007734 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8007a30:	2301      	movs	r3, #1
 8007a32:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8007a36:	2301      	movs	r3, #1
 8007a38:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8007a44:	2300      	movs	r3, #0
 8007a46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8007a54:	2301      	movs	r3, #1
 8007a56:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8007a58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007a5c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8007a5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007a62:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8007a64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007a68:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8007a70:	2300      	movs	r3, #0
 8007a72:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8007a74:	2300      	movs	r3, #0
 8007a76:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8007a78:	f107 0308 	add.w	r3, r7, #8
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f7ff ff08 	bl	8007894 <ETH_SetDMAConfig>
}
 8007a84:	bf00      	nop
 8007a86:	3798      	adds	r7, #152	; 0x98
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b087      	sub	sp, #28
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	3305      	adds	r3, #5
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	021b      	lsls	r3, r3, #8
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	3204      	adds	r2, #4
 8007aa4:	7812      	ldrb	r2, [r2, #0]
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8007aaa:	68ba      	ldr	r2, [r7, #8]
 8007aac:	4b11      	ldr	r3, [pc, #68]	; (8007af4 <ETH_MACAddressConfig+0x68>)
 8007aae:	4413      	add	r3, r2
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	3303      	adds	r3, #3
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	061a      	lsls	r2, r3, #24
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	3302      	adds	r3, #2
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	041b      	lsls	r3, r3, #16
 8007ac6:	431a      	orrs	r2, r3
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	3301      	adds	r3, #1
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	021b      	lsls	r3, r3, #8
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	7812      	ldrb	r2, [r2, #0]
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8007ada:	68ba      	ldr	r2, [r7, #8]
 8007adc:	4b06      	ldr	r3, [pc, #24]	; (8007af8 <ETH_MACAddressConfig+0x6c>)
 8007ade:	4413      	add	r3, r2
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	6013      	str	r3, [r2, #0]
}
 8007ae6:	bf00      	nop
 8007ae8:	371c      	adds	r7, #28
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop
 8007af4:	40028040 	.word	0x40028040
 8007af8:	40028044 	.word	0x40028044

08007afc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b085      	sub	sp, #20
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007b04:	2300      	movs	r3, #0
 8007b06:	60fb      	str	r3, [r7, #12]
 8007b08:	e03e      	b.n	8007b88 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	68d9      	ldr	r1, [r3, #12]
 8007b0e:	68fa      	ldr	r2, [r7, #12]
 8007b10:	4613      	mov	r3, r2
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	4413      	add	r3, r2
 8007b16:	00db      	lsls	r3, r3, #3
 8007b18:	440b      	add	r3, r1
 8007b1a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	2200      	movs	r2, #0
 8007b26:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	2200      	movs	r2, #0
 8007b32:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8007b34:	68b9      	ldr	r1, [r7, #8]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	3206      	adds	r2, #6
 8007b3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2b02      	cmp	r3, #2
 8007b50:	d80c      	bhi.n	8007b6c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	68d9      	ldr	r1, [r3, #12]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	1c5a      	adds	r2, r3, #1
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	4413      	add	r3, r2
 8007b60:	00db      	lsls	r3, r3, #3
 8007b62:	440b      	add	r3, r1
 8007b64:	461a      	mov	r2, r3
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	60da      	str	r2, [r3, #12]
 8007b6a:	e004      	b.n	8007b76 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	461a      	mov	r2, r3
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	3301      	adds	r3, #1
 8007b86:	60fb      	str	r3, [r7, #12]
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2b03      	cmp	r3, #3
 8007b8c:	d9bd      	bls.n	8007b0a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	68da      	ldr	r2, [r3, #12]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ba0:	611a      	str	r2, [r3, #16]
}
 8007ba2:	bf00      	nop
 8007ba4:	3714      	adds	r7, #20
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr

08007bae <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8007bae:	b480      	push	{r7}
 8007bb0:	b085      	sub	sp, #20
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	60fb      	str	r3, [r7, #12]
 8007bba:	e046      	b.n	8007c4a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6919      	ldr	r1, [r3, #16]
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	4613      	mov	r3, r2
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	4413      	add	r3, r2
 8007bc8:	00db      	lsls	r3, r3, #3
 8007bca:	440b      	add	r3, r1
 8007bcc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	2200      	movs	r2, #0
 8007be4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	2200      	movs	r2, #0
 8007bea:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007bf8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8007c00:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8007c0e:	68b9      	ldr	r1, [r7, #8]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	68fa      	ldr	r2, [r7, #12]
 8007c14:	3212      	adds	r2, #18
 8007c16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2b02      	cmp	r3, #2
 8007c1e:	d80c      	bhi.n	8007c3a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6919      	ldr	r1, [r3, #16]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	1c5a      	adds	r2, r3, #1
 8007c28:	4613      	mov	r3, r2
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	4413      	add	r3, r2
 8007c2e:	00db      	lsls	r3, r3, #3
 8007c30:	440b      	add	r3, r1
 8007c32:	461a      	mov	r2, r3
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	60da      	str	r2, [r3, #12]
 8007c38:	e004      	b.n	8007c44 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	691b      	ldr	r3, [r3, #16]
 8007c3e:	461a      	mov	r2, r3
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	3301      	adds	r3, #1
 8007c48:	60fb      	str	r3, [r7, #12]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2b03      	cmp	r3, #3
 8007c4e:	d9b5      	bls.n	8007bbc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	691a      	ldr	r2, [r3, #16]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c7a:	60da      	str	r2, [r3, #12]
}
 8007c7c:	bf00      	nop
 8007c7e:	3714      	adds	r7, #20
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b089      	sub	sp, #36	; 0x24
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8007c92:	2300      	movs	r3, #0
 8007c94:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8007c96:	2300      	movs	r3, #0
 8007c98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	61fb      	str	r3, [r7, #28]
 8007ca6:	e175      	b.n	8007f94 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007ca8:	2201      	movs	r2, #1
 8007caa:	69fb      	ldr	r3, [r7, #28]
 8007cac:	fa02 f303 	lsl.w	r3, r2, r3
 8007cb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	697a      	ldr	r2, [r7, #20]
 8007cb8:	4013      	ands	r3, r2
 8007cba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007cbc:	693a      	ldr	r2, [r7, #16]
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	f040 8164 	bne.w	8007f8e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	f003 0303 	and.w	r3, r3, #3
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d005      	beq.n	8007cde <HAL_GPIO_Init+0x56>
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	f003 0303 	and.w	r3, r3, #3
 8007cda:	2b02      	cmp	r3, #2
 8007cdc:	d130      	bne.n	8007d40 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	005b      	lsls	r3, r3, #1
 8007ce8:	2203      	movs	r2, #3
 8007cea:	fa02 f303 	lsl.w	r3, r2, r3
 8007cee:	43db      	mvns	r3, r3
 8007cf0:	69ba      	ldr	r2, [r7, #24]
 8007cf2:	4013      	ands	r3, r2
 8007cf4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	68da      	ldr	r2, [r3, #12]
 8007cfa:	69fb      	ldr	r3, [r7, #28]
 8007cfc:	005b      	lsls	r3, r3, #1
 8007cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8007d02:	69ba      	ldr	r2, [r7, #24]
 8007d04:	4313      	orrs	r3, r2
 8007d06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	69ba      	ldr	r2, [r7, #24]
 8007d0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007d14:	2201      	movs	r2, #1
 8007d16:	69fb      	ldr	r3, [r7, #28]
 8007d18:	fa02 f303 	lsl.w	r3, r2, r3
 8007d1c:	43db      	mvns	r3, r3
 8007d1e:	69ba      	ldr	r2, [r7, #24]
 8007d20:	4013      	ands	r3, r2
 8007d22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	091b      	lsrs	r3, r3, #4
 8007d2a:	f003 0201 	and.w	r2, r3, #1
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	fa02 f303 	lsl.w	r3, r2, r3
 8007d34:	69ba      	ldr	r2, [r7, #24]
 8007d36:	4313      	orrs	r3, r2
 8007d38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	69ba      	ldr	r2, [r7, #24]
 8007d3e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	f003 0303 	and.w	r3, r3, #3
 8007d48:	2b03      	cmp	r3, #3
 8007d4a:	d017      	beq.n	8007d7c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007d52:	69fb      	ldr	r3, [r7, #28]
 8007d54:	005b      	lsls	r3, r3, #1
 8007d56:	2203      	movs	r2, #3
 8007d58:	fa02 f303 	lsl.w	r3, r2, r3
 8007d5c:	43db      	mvns	r3, r3
 8007d5e:	69ba      	ldr	r2, [r7, #24]
 8007d60:	4013      	ands	r3, r2
 8007d62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	689a      	ldr	r2, [r3, #8]
 8007d68:	69fb      	ldr	r3, [r7, #28]
 8007d6a:	005b      	lsls	r3, r3, #1
 8007d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d70:	69ba      	ldr	r2, [r7, #24]
 8007d72:	4313      	orrs	r3, r2
 8007d74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	69ba      	ldr	r2, [r7, #24]
 8007d7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	f003 0303 	and.w	r3, r3, #3
 8007d84:	2b02      	cmp	r3, #2
 8007d86:	d123      	bne.n	8007dd0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	08da      	lsrs	r2, r3, #3
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	3208      	adds	r2, #8
 8007d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007d96:	69fb      	ldr	r3, [r7, #28]
 8007d98:	f003 0307 	and.w	r3, r3, #7
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	220f      	movs	r2, #15
 8007da0:	fa02 f303 	lsl.w	r3, r2, r3
 8007da4:	43db      	mvns	r3, r3
 8007da6:	69ba      	ldr	r2, [r7, #24]
 8007da8:	4013      	ands	r3, r2
 8007daa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	691a      	ldr	r2, [r3, #16]
 8007db0:	69fb      	ldr	r3, [r7, #28]
 8007db2:	f003 0307 	and.w	r3, r3, #7
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dbc:	69ba      	ldr	r2, [r7, #24]
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8007dc2:	69fb      	ldr	r3, [r7, #28]
 8007dc4:	08da      	lsrs	r2, r3, #3
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	3208      	adds	r2, #8
 8007dca:	69b9      	ldr	r1, [r7, #24]
 8007dcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007dd6:	69fb      	ldr	r3, [r7, #28]
 8007dd8:	005b      	lsls	r3, r3, #1
 8007dda:	2203      	movs	r2, #3
 8007ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8007de0:	43db      	mvns	r3, r3
 8007de2:	69ba      	ldr	r2, [r7, #24]
 8007de4:	4013      	ands	r3, r2
 8007de6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	f003 0203 	and.w	r2, r3, #3
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	005b      	lsls	r3, r3, #1
 8007df4:	fa02 f303 	lsl.w	r3, r2, r3
 8007df8:	69ba      	ldr	r2, [r7, #24]
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	69ba      	ldr	r2, [r7, #24]
 8007e02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	f000 80be 	beq.w	8007f8e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e12:	4b66      	ldr	r3, [pc, #408]	; (8007fac <HAL_GPIO_Init+0x324>)
 8007e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e16:	4a65      	ldr	r2, [pc, #404]	; (8007fac <HAL_GPIO_Init+0x324>)
 8007e18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8007e1e:	4b63      	ldr	r3, [pc, #396]	; (8007fac <HAL_GPIO_Init+0x324>)
 8007e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e26:	60fb      	str	r3, [r7, #12]
 8007e28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8007e2a:	4a61      	ldr	r2, [pc, #388]	; (8007fb0 <HAL_GPIO_Init+0x328>)
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	089b      	lsrs	r3, r3, #2
 8007e30:	3302      	adds	r3, #2
 8007e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007e38:	69fb      	ldr	r3, [r7, #28]
 8007e3a:	f003 0303 	and.w	r3, r3, #3
 8007e3e:	009b      	lsls	r3, r3, #2
 8007e40:	220f      	movs	r2, #15
 8007e42:	fa02 f303 	lsl.w	r3, r2, r3
 8007e46:	43db      	mvns	r3, r3
 8007e48:	69ba      	ldr	r2, [r7, #24]
 8007e4a:	4013      	ands	r3, r2
 8007e4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	4a58      	ldr	r2, [pc, #352]	; (8007fb4 <HAL_GPIO_Init+0x32c>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d037      	beq.n	8007ec6 <HAL_GPIO_Init+0x23e>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4a57      	ldr	r2, [pc, #348]	; (8007fb8 <HAL_GPIO_Init+0x330>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d031      	beq.n	8007ec2 <HAL_GPIO_Init+0x23a>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4a56      	ldr	r2, [pc, #344]	; (8007fbc <HAL_GPIO_Init+0x334>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d02b      	beq.n	8007ebe <HAL_GPIO_Init+0x236>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	4a55      	ldr	r2, [pc, #340]	; (8007fc0 <HAL_GPIO_Init+0x338>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d025      	beq.n	8007eba <HAL_GPIO_Init+0x232>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	4a54      	ldr	r2, [pc, #336]	; (8007fc4 <HAL_GPIO_Init+0x33c>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d01f      	beq.n	8007eb6 <HAL_GPIO_Init+0x22e>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4a53      	ldr	r2, [pc, #332]	; (8007fc8 <HAL_GPIO_Init+0x340>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d019      	beq.n	8007eb2 <HAL_GPIO_Init+0x22a>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4a52      	ldr	r2, [pc, #328]	; (8007fcc <HAL_GPIO_Init+0x344>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d013      	beq.n	8007eae <HAL_GPIO_Init+0x226>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4a51      	ldr	r2, [pc, #324]	; (8007fd0 <HAL_GPIO_Init+0x348>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d00d      	beq.n	8007eaa <HAL_GPIO_Init+0x222>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4a50      	ldr	r2, [pc, #320]	; (8007fd4 <HAL_GPIO_Init+0x34c>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d007      	beq.n	8007ea6 <HAL_GPIO_Init+0x21e>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4a4f      	ldr	r2, [pc, #316]	; (8007fd8 <HAL_GPIO_Init+0x350>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d101      	bne.n	8007ea2 <HAL_GPIO_Init+0x21a>
 8007e9e:	2309      	movs	r3, #9
 8007ea0:	e012      	b.n	8007ec8 <HAL_GPIO_Init+0x240>
 8007ea2:	230a      	movs	r3, #10
 8007ea4:	e010      	b.n	8007ec8 <HAL_GPIO_Init+0x240>
 8007ea6:	2308      	movs	r3, #8
 8007ea8:	e00e      	b.n	8007ec8 <HAL_GPIO_Init+0x240>
 8007eaa:	2307      	movs	r3, #7
 8007eac:	e00c      	b.n	8007ec8 <HAL_GPIO_Init+0x240>
 8007eae:	2306      	movs	r3, #6
 8007eb0:	e00a      	b.n	8007ec8 <HAL_GPIO_Init+0x240>
 8007eb2:	2305      	movs	r3, #5
 8007eb4:	e008      	b.n	8007ec8 <HAL_GPIO_Init+0x240>
 8007eb6:	2304      	movs	r3, #4
 8007eb8:	e006      	b.n	8007ec8 <HAL_GPIO_Init+0x240>
 8007eba:	2303      	movs	r3, #3
 8007ebc:	e004      	b.n	8007ec8 <HAL_GPIO_Init+0x240>
 8007ebe:	2302      	movs	r3, #2
 8007ec0:	e002      	b.n	8007ec8 <HAL_GPIO_Init+0x240>
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e000      	b.n	8007ec8 <HAL_GPIO_Init+0x240>
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	69fa      	ldr	r2, [r7, #28]
 8007eca:	f002 0203 	and.w	r2, r2, #3
 8007ece:	0092      	lsls	r2, r2, #2
 8007ed0:	4093      	lsls	r3, r2
 8007ed2:	69ba      	ldr	r2, [r7, #24]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007ed8:	4935      	ldr	r1, [pc, #212]	; (8007fb0 <HAL_GPIO_Init+0x328>)
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	089b      	lsrs	r3, r3, #2
 8007ede:	3302      	adds	r3, #2
 8007ee0:	69ba      	ldr	r2, [r7, #24]
 8007ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007ee6:	4b3d      	ldr	r3, [pc, #244]	; (8007fdc <HAL_GPIO_Init+0x354>)
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	43db      	mvns	r3, r3
 8007ef0:	69ba      	ldr	r2, [r7, #24]
 8007ef2:	4013      	ands	r3, r2
 8007ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d003      	beq.n	8007f0a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007f02:	69ba      	ldr	r2, [r7, #24]
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	4313      	orrs	r3, r2
 8007f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007f0a:	4a34      	ldr	r2, [pc, #208]	; (8007fdc <HAL_GPIO_Init+0x354>)
 8007f0c:	69bb      	ldr	r3, [r7, #24]
 8007f0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007f10:	4b32      	ldr	r3, [pc, #200]	; (8007fdc <HAL_GPIO_Init+0x354>)
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	43db      	mvns	r3, r3
 8007f1a:	69ba      	ldr	r2, [r7, #24]
 8007f1c:	4013      	ands	r3, r2
 8007f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d003      	beq.n	8007f34 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007f2c:	69ba      	ldr	r2, [r7, #24]
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	4313      	orrs	r3, r2
 8007f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007f34:	4a29      	ldr	r2, [pc, #164]	; (8007fdc <HAL_GPIO_Init+0x354>)
 8007f36:	69bb      	ldr	r3, [r7, #24]
 8007f38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007f3a:	4b28      	ldr	r3, [pc, #160]	; (8007fdc <HAL_GPIO_Init+0x354>)
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	43db      	mvns	r3, r3
 8007f44:	69ba      	ldr	r2, [r7, #24]
 8007f46:	4013      	ands	r3, r2
 8007f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d003      	beq.n	8007f5e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007f56:	69ba      	ldr	r2, [r7, #24]
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007f5e:	4a1f      	ldr	r2, [pc, #124]	; (8007fdc <HAL_GPIO_Init+0x354>)
 8007f60:	69bb      	ldr	r3, [r7, #24]
 8007f62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007f64:	4b1d      	ldr	r3, [pc, #116]	; (8007fdc <HAL_GPIO_Init+0x354>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	43db      	mvns	r3, r3
 8007f6e:	69ba      	ldr	r2, [r7, #24]
 8007f70:	4013      	ands	r3, r2
 8007f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d003      	beq.n	8007f88 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007f80:	69ba      	ldr	r2, [r7, #24]
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	4313      	orrs	r3, r2
 8007f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007f88:	4a14      	ldr	r2, [pc, #80]	; (8007fdc <HAL_GPIO_Init+0x354>)
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007f8e:	69fb      	ldr	r3, [r7, #28]
 8007f90:	3301      	adds	r3, #1
 8007f92:	61fb      	str	r3, [r7, #28]
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	2b0f      	cmp	r3, #15
 8007f98:	f67f ae86 	bls.w	8007ca8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8007f9c:	bf00      	nop
 8007f9e:	bf00      	nop
 8007fa0:	3724      	adds	r7, #36	; 0x24
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr
 8007faa:	bf00      	nop
 8007fac:	40023800 	.word	0x40023800
 8007fb0:	40013800 	.word	0x40013800
 8007fb4:	40020000 	.word	0x40020000
 8007fb8:	40020400 	.word	0x40020400
 8007fbc:	40020800 	.word	0x40020800
 8007fc0:	40020c00 	.word	0x40020c00
 8007fc4:	40021000 	.word	0x40021000
 8007fc8:	40021400 	.word	0x40021400
 8007fcc:	40021800 	.word	0x40021800
 8007fd0:	40021c00 	.word	0x40021c00
 8007fd4:	40022000 	.word	0x40022000
 8007fd8:	40022400 	.word	0x40022400
 8007fdc:	40013c00 	.word	0x40013c00

08007fe0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b087      	sub	sp, #28
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8007fea:	2300      	movs	r3, #0
 8007fec:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	617b      	str	r3, [r7, #20]
 8007ffa:	e0d9      	b.n	80081b0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	fa02 f303 	lsl.w	r3, r2, r3
 8008004:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8008006:	683a      	ldr	r2, [r7, #0]
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	4013      	ands	r3, r2
 800800c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800800e:	68fa      	ldr	r2, [r7, #12]
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	429a      	cmp	r2, r3
 8008014:	f040 80c9 	bne.w	80081aa <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8008018:	4a6b      	ldr	r2, [pc, #428]	; (80081c8 <HAL_GPIO_DeInit+0x1e8>)
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	089b      	lsrs	r3, r3, #2
 800801e:	3302      	adds	r3, #2
 8008020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008024:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	f003 0303 	and.w	r3, r3, #3
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	220f      	movs	r2, #15
 8008030:	fa02 f303 	lsl.w	r3, r2, r3
 8008034:	68ba      	ldr	r2, [r7, #8]
 8008036:	4013      	ands	r3, r2
 8008038:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	4a63      	ldr	r2, [pc, #396]	; (80081cc <HAL_GPIO_DeInit+0x1ec>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d037      	beq.n	80080b2 <HAL_GPIO_DeInit+0xd2>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	4a62      	ldr	r2, [pc, #392]	; (80081d0 <HAL_GPIO_DeInit+0x1f0>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d031      	beq.n	80080ae <HAL_GPIO_DeInit+0xce>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	4a61      	ldr	r2, [pc, #388]	; (80081d4 <HAL_GPIO_DeInit+0x1f4>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d02b      	beq.n	80080aa <HAL_GPIO_DeInit+0xca>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	4a60      	ldr	r2, [pc, #384]	; (80081d8 <HAL_GPIO_DeInit+0x1f8>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d025      	beq.n	80080a6 <HAL_GPIO_DeInit+0xc6>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	4a5f      	ldr	r2, [pc, #380]	; (80081dc <HAL_GPIO_DeInit+0x1fc>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d01f      	beq.n	80080a2 <HAL_GPIO_DeInit+0xc2>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	4a5e      	ldr	r2, [pc, #376]	; (80081e0 <HAL_GPIO_DeInit+0x200>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d019      	beq.n	800809e <HAL_GPIO_DeInit+0xbe>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4a5d      	ldr	r2, [pc, #372]	; (80081e4 <HAL_GPIO_DeInit+0x204>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d013      	beq.n	800809a <HAL_GPIO_DeInit+0xba>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	4a5c      	ldr	r2, [pc, #368]	; (80081e8 <HAL_GPIO_DeInit+0x208>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d00d      	beq.n	8008096 <HAL_GPIO_DeInit+0xb6>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	4a5b      	ldr	r2, [pc, #364]	; (80081ec <HAL_GPIO_DeInit+0x20c>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d007      	beq.n	8008092 <HAL_GPIO_DeInit+0xb2>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	4a5a      	ldr	r2, [pc, #360]	; (80081f0 <HAL_GPIO_DeInit+0x210>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d101      	bne.n	800808e <HAL_GPIO_DeInit+0xae>
 800808a:	2309      	movs	r3, #9
 800808c:	e012      	b.n	80080b4 <HAL_GPIO_DeInit+0xd4>
 800808e:	230a      	movs	r3, #10
 8008090:	e010      	b.n	80080b4 <HAL_GPIO_DeInit+0xd4>
 8008092:	2308      	movs	r3, #8
 8008094:	e00e      	b.n	80080b4 <HAL_GPIO_DeInit+0xd4>
 8008096:	2307      	movs	r3, #7
 8008098:	e00c      	b.n	80080b4 <HAL_GPIO_DeInit+0xd4>
 800809a:	2306      	movs	r3, #6
 800809c:	e00a      	b.n	80080b4 <HAL_GPIO_DeInit+0xd4>
 800809e:	2305      	movs	r3, #5
 80080a0:	e008      	b.n	80080b4 <HAL_GPIO_DeInit+0xd4>
 80080a2:	2304      	movs	r3, #4
 80080a4:	e006      	b.n	80080b4 <HAL_GPIO_DeInit+0xd4>
 80080a6:	2303      	movs	r3, #3
 80080a8:	e004      	b.n	80080b4 <HAL_GPIO_DeInit+0xd4>
 80080aa:	2302      	movs	r3, #2
 80080ac:	e002      	b.n	80080b4 <HAL_GPIO_DeInit+0xd4>
 80080ae:	2301      	movs	r3, #1
 80080b0:	e000      	b.n	80080b4 <HAL_GPIO_DeInit+0xd4>
 80080b2:	2300      	movs	r3, #0
 80080b4:	697a      	ldr	r2, [r7, #20]
 80080b6:	f002 0203 	and.w	r2, r2, #3
 80080ba:	0092      	lsls	r2, r2, #2
 80080bc:	4093      	lsls	r3, r2
 80080be:	68ba      	ldr	r2, [r7, #8]
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d132      	bne.n	800812a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80080c4:	4b4b      	ldr	r3, [pc, #300]	; (80081f4 <HAL_GPIO_DeInit+0x214>)
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	43db      	mvns	r3, r3
 80080cc:	4949      	ldr	r1, [pc, #292]	; (80081f4 <HAL_GPIO_DeInit+0x214>)
 80080ce:	4013      	ands	r3, r2
 80080d0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80080d2:	4b48      	ldr	r3, [pc, #288]	; (80081f4 <HAL_GPIO_DeInit+0x214>)
 80080d4:	685a      	ldr	r2, [r3, #4]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	43db      	mvns	r3, r3
 80080da:	4946      	ldr	r1, [pc, #280]	; (80081f4 <HAL_GPIO_DeInit+0x214>)
 80080dc:	4013      	ands	r3, r2
 80080de:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80080e0:	4b44      	ldr	r3, [pc, #272]	; (80081f4 <HAL_GPIO_DeInit+0x214>)
 80080e2:	68da      	ldr	r2, [r3, #12]
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	43db      	mvns	r3, r3
 80080e8:	4942      	ldr	r1, [pc, #264]	; (80081f4 <HAL_GPIO_DeInit+0x214>)
 80080ea:	4013      	ands	r3, r2
 80080ec:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80080ee:	4b41      	ldr	r3, [pc, #260]	; (80081f4 <HAL_GPIO_DeInit+0x214>)
 80080f0:	689a      	ldr	r2, [r3, #8]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	43db      	mvns	r3, r3
 80080f6:	493f      	ldr	r1, [pc, #252]	; (80081f4 <HAL_GPIO_DeInit+0x214>)
 80080f8:	4013      	ands	r3, r2
 80080fa:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	f003 0303 	and.w	r3, r3, #3
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	220f      	movs	r2, #15
 8008106:	fa02 f303 	lsl.w	r3, r2, r3
 800810a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800810c:	4a2e      	ldr	r2, [pc, #184]	; (80081c8 <HAL_GPIO_DeInit+0x1e8>)
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	089b      	lsrs	r3, r3, #2
 8008112:	3302      	adds	r3, #2
 8008114:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	43da      	mvns	r2, r3
 800811c:	482a      	ldr	r0, [pc, #168]	; (80081c8 <HAL_GPIO_DeInit+0x1e8>)
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	089b      	lsrs	r3, r3, #2
 8008122:	400a      	ands	r2, r1
 8008124:	3302      	adds	r3, #2
 8008126:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	005b      	lsls	r3, r3, #1
 8008132:	2103      	movs	r1, #3
 8008134:	fa01 f303 	lsl.w	r3, r1, r3
 8008138:	43db      	mvns	r3, r3
 800813a:	401a      	ands	r2, r3
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	08da      	lsrs	r2, r3, #3
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	3208      	adds	r2, #8
 8008148:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	f003 0307 	and.w	r3, r3, #7
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	220f      	movs	r2, #15
 8008156:	fa02 f303 	lsl.w	r3, r2, r3
 800815a:	43db      	mvns	r3, r3
 800815c:	697a      	ldr	r2, [r7, #20]
 800815e:	08d2      	lsrs	r2, r2, #3
 8008160:	4019      	ands	r1, r3
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	3208      	adds	r2, #8
 8008166:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	68da      	ldr	r2, [r3, #12]
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	005b      	lsls	r3, r3, #1
 8008172:	2103      	movs	r1, #3
 8008174:	fa01 f303 	lsl.w	r3, r1, r3
 8008178:	43db      	mvns	r3, r3
 800817a:	401a      	ands	r2, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	685a      	ldr	r2, [r3, #4]
 8008184:	2101      	movs	r1, #1
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	fa01 f303 	lsl.w	r3, r1, r3
 800818c:	43db      	mvns	r3, r3
 800818e:	401a      	ands	r2, r3
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	689a      	ldr	r2, [r3, #8]
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	005b      	lsls	r3, r3, #1
 800819c:	2103      	movs	r1, #3
 800819e:	fa01 f303 	lsl.w	r3, r1, r3
 80081a2:	43db      	mvns	r3, r3
 80081a4:	401a      	ands	r2, r3
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	3301      	adds	r3, #1
 80081ae:	617b      	str	r3, [r7, #20]
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	2b0f      	cmp	r3, #15
 80081b4:	f67f af22 	bls.w	8007ffc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80081b8:	bf00      	nop
 80081ba:	bf00      	nop
 80081bc:	371c      	adds	r7, #28
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr
 80081c6:	bf00      	nop
 80081c8:	40013800 	.word	0x40013800
 80081cc:	40020000 	.word	0x40020000
 80081d0:	40020400 	.word	0x40020400
 80081d4:	40020800 	.word	0x40020800
 80081d8:	40020c00 	.word	0x40020c00
 80081dc:	40021000 	.word	0x40021000
 80081e0:	40021400 	.word	0x40021400
 80081e4:	40021800 	.word	0x40021800
 80081e8:	40021c00 	.word	0x40021c00
 80081ec:	40022000 	.word	0x40022000
 80081f0:	40022400 	.word	0x40022400
 80081f4:	40013c00 	.word	0x40013c00

080081f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b085      	sub	sp, #20
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	460b      	mov	r3, r1
 8008202:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	691a      	ldr	r2, [r3, #16]
 8008208:	887b      	ldrh	r3, [r7, #2]
 800820a:	4013      	ands	r3, r2
 800820c:	2b00      	cmp	r3, #0
 800820e:	d002      	beq.n	8008216 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008210:	2301      	movs	r3, #1
 8008212:	73fb      	strb	r3, [r7, #15]
 8008214:	e001      	b.n	800821a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008216:	2300      	movs	r3, #0
 8008218:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800821a:	7bfb      	ldrb	r3, [r7, #15]
}
 800821c:	4618      	mov	r0, r3
 800821e:	3714      	adds	r7, #20
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr

08008228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008228:	b480      	push	{r7}
 800822a:	b083      	sub	sp, #12
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	460b      	mov	r3, r1
 8008232:	807b      	strh	r3, [r7, #2]
 8008234:	4613      	mov	r3, r2
 8008236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008238:	787b      	ldrb	r3, [r7, #1]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d003      	beq.n	8008246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800823e:	887a      	ldrh	r2, [r7, #2]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8008244:	e003      	b.n	800824e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8008246:	887b      	ldrh	r3, [r7, #2]
 8008248:	041a      	lsls	r2, r3, #16
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	619a      	str	r2, [r3, #24]
}
 800824e:	bf00      	nop
 8008250:	370c      	adds	r7, #12
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr
	...

0800825c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	4603      	mov	r3, r0
 8008264:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008266:	4b08      	ldr	r3, [pc, #32]	; (8008288 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008268:	695a      	ldr	r2, [r3, #20]
 800826a:	88fb      	ldrh	r3, [r7, #6]
 800826c:	4013      	ands	r3, r2
 800826e:	2b00      	cmp	r3, #0
 8008270:	d006      	beq.n	8008280 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008272:	4a05      	ldr	r2, [pc, #20]	; (8008288 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008274:	88fb      	ldrh	r3, [r7, #6]
 8008276:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008278:	88fb      	ldrh	r3, [r7, #6]
 800827a:	4618      	mov	r0, r3
 800827c:	f7f9 fca0 	bl	8001bc0 <HAL_GPIO_EXTI_Callback>
  }
}
 8008280:	bf00      	nop
 8008282:	3708      	adds	r7, #8
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}
 8008288:	40013c00 	.word	0x40013c00

0800828c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800828c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800828e:	b08f      	sub	sp, #60	; 0x3c
 8008290:	af0a      	add	r7, sp, #40	; 0x28
 8008292:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d101      	bne.n	800829e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800829a:	2301      	movs	r3, #1
 800829c:	e054      	b.n	8008348 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d106      	bne.n	80082be <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2200      	movs	r2, #0
 80082b4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f00e fa77 	bl	80167ac <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2203      	movs	r2, #3
 80082c2:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d102      	bne.n	80082d8 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2200      	movs	r2, #0
 80082d6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4618      	mov	r0, r3
 80082de:	f008 fe7a 	bl	8010fd6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	603b      	str	r3, [r7, #0]
 80082e8:	687e      	ldr	r6, [r7, #4]
 80082ea:	466d      	mov	r5, sp
 80082ec:	f106 0410 	add.w	r4, r6, #16
 80082f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80082f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80082f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80082f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80082f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80082fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8008300:	1d33      	adds	r3, r6, #4
 8008302:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008304:	6838      	ldr	r0, [r7, #0]
 8008306:	f008 fdfd 	bl	8010f04 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	2101      	movs	r1, #1
 8008310:	4618      	mov	r0, r3
 8008312:	f008 fe71 	bl	8010ff8 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	603b      	str	r3, [r7, #0]
 800831c:	687e      	ldr	r6, [r7, #4]
 800831e:	466d      	mov	r5, sp
 8008320:	f106 0410 	add.w	r4, r6, #16
 8008324:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008326:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008328:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800832a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800832c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008330:	e885 0003 	stmia.w	r5, {r0, r1}
 8008334:	1d33      	adds	r3, r6, #4
 8008336:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008338:	6838      	ldr	r0, [r7, #0]
 800833a:	f009 f819 	bl	8011370 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2201      	movs	r2, #1
 8008342:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8008346:	2300      	movs	r3, #0
}
 8008348:	4618      	mov	r0, r3
 800834a:	3714      	adds	r7, #20
 800834c:	46bd      	mov	sp, r7
 800834e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008350 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008350:	b590      	push	{r4, r7, lr}
 8008352:	b089      	sub	sp, #36	; 0x24
 8008354:	af04      	add	r7, sp, #16
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	4608      	mov	r0, r1
 800835a:	4611      	mov	r1, r2
 800835c:	461a      	mov	r2, r3
 800835e:	4603      	mov	r3, r0
 8008360:	70fb      	strb	r3, [r7, #3]
 8008362:	460b      	mov	r3, r1
 8008364:	70bb      	strb	r3, [r7, #2]
 8008366:	4613      	mov	r3, r2
 8008368:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8008370:	2b01      	cmp	r3, #1
 8008372:	d101      	bne.n	8008378 <HAL_HCD_HC_Init+0x28>
 8008374:	2302      	movs	r3, #2
 8008376:	e076      	b.n	8008466 <HAL_HCD_HC_Init+0x116>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8008380:	78fb      	ldrb	r3, [r7, #3]
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	212c      	movs	r1, #44	; 0x2c
 8008386:	fb01 f303 	mul.w	r3, r1, r3
 800838a:	4413      	add	r3, r2
 800838c:	333d      	adds	r3, #61	; 0x3d
 800838e:	2200      	movs	r2, #0
 8008390:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8008392:	78fb      	ldrb	r3, [r7, #3]
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	212c      	movs	r1, #44	; 0x2c
 8008398:	fb01 f303 	mul.w	r3, r1, r3
 800839c:	4413      	add	r3, r2
 800839e:	3338      	adds	r3, #56	; 0x38
 80083a0:	787a      	ldrb	r2, [r7, #1]
 80083a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80083a4:	78fb      	ldrb	r3, [r7, #3]
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	212c      	movs	r1, #44	; 0x2c
 80083aa:	fb01 f303 	mul.w	r3, r1, r3
 80083ae:	4413      	add	r3, r2
 80083b0:	3340      	adds	r3, #64	; 0x40
 80083b2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80083b4:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80083b6:	78fb      	ldrb	r3, [r7, #3]
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	212c      	movs	r1, #44	; 0x2c
 80083bc:	fb01 f303 	mul.w	r3, r1, r3
 80083c0:	4413      	add	r3, r2
 80083c2:	3339      	adds	r3, #57	; 0x39
 80083c4:	78fa      	ldrb	r2, [r7, #3]
 80083c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80083c8:	78fb      	ldrb	r3, [r7, #3]
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	212c      	movs	r1, #44	; 0x2c
 80083ce:	fb01 f303 	mul.w	r3, r1, r3
 80083d2:	4413      	add	r3, r2
 80083d4:	333f      	adds	r3, #63	; 0x3f
 80083d6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80083da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80083dc:	78fb      	ldrb	r3, [r7, #3]
 80083de:	78ba      	ldrb	r2, [r7, #2]
 80083e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80083e4:	b2d0      	uxtb	r0, r2
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	212c      	movs	r1, #44	; 0x2c
 80083ea:	fb01 f303 	mul.w	r3, r1, r3
 80083ee:	4413      	add	r3, r2
 80083f0:	333a      	adds	r3, #58	; 0x3a
 80083f2:	4602      	mov	r2, r0
 80083f4:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80083f6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	da09      	bge.n	8008412 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80083fe:	78fb      	ldrb	r3, [r7, #3]
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	212c      	movs	r1, #44	; 0x2c
 8008404:	fb01 f303 	mul.w	r3, r1, r3
 8008408:	4413      	add	r3, r2
 800840a:	333b      	adds	r3, #59	; 0x3b
 800840c:	2201      	movs	r2, #1
 800840e:	701a      	strb	r2, [r3, #0]
 8008410:	e008      	b.n	8008424 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8008412:	78fb      	ldrb	r3, [r7, #3]
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	212c      	movs	r1, #44	; 0x2c
 8008418:	fb01 f303 	mul.w	r3, r1, r3
 800841c:	4413      	add	r3, r2
 800841e:	333b      	adds	r3, #59	; 0x3b
 8008420:	2200      	movs	r2, #0
 8008422:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8008424:	78fb      	ldrb	r3, [r7, #3]
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	212c      	movs	r1, #44	; 0x2c
 800842a:	fb01 f303 	mul.w	r3, r1, r3
 800842e:	4413      	add	r3, r2
 8008430:	333c      	adds	r3, #60	; 0x3c
 8008432:	f897 2020 	ldrb.w	r2, [r7, #32]
 8008436:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6818      	ldr	r0, [r3, #0]
 800843c:	787c      	ldrb	r4, [r7, #1]
 800843e:	78ba      	ldrb	r2, [r7, #2]
 8008440:	78f9      	ldrb	r1, [r7, #3]
 8008442:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008444:	9302      	str	r3, [sp, #8]
 8008446:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800844a:	9301      	str	r3, [sp, #4]
 800844c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008450:	9300      	str	r3, [sp, #0]
 8008452:	4623      	mov	r3, r4
 8008454:	f009 f906 	bl	8011664 <USB_HC_Init>
 8008458:	4603      	mov	r3, r0
 800845a:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, mps);

  __HAL_UNLOCK(hhcd);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2200      	movs	r2, #0
 8008460:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8008464:	7bfb      	ldrb	r3, [r7, #15]
}
 8008466:	4618      	mov	r0, r3
 8008468:	3714      	adds	r7, #20
 800846a:	46bd      	mov	sp, r7
 800846c:	bd90      	pop	{r4, r7, pc}

0800846e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800846e:	b580      	push	{r7, lr}
 8008470:	b084      	sub	sp, #16
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
 8008476:	460b      	mov	r3, r1
 8008478:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800847a:	2300      	movs	r3, #0
 800847c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8008484:	2b01      	cmp	r3, #1
 8008486:	d101      	bne.n	800848c <HAL_HCD_HC_Halt+0x1e>
 8008488:	2302      	movs	r3, #2
 800848a:	e00f      	b.n	80084ac <HAL_HCD_HC_Halt+0x3e>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2201      	movs	r2, #1
 8008490:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	78fa      	ldrb	r2, [r7, #3]
 800849a:	4611      	mov	r1, r2
 800849c:	4618      	mov	r0, r3
 800849e:	f009 fb56 	bl	8011b4e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80084aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3710      	adds	r7, #16
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	4608      	mov	r0, r1
 80084be:	4611      	mov	r1, r2
 80084c0:	461a      	mov	r2, r3
 80084c2:	4603      	mov	r3, r0
 80084c4:	70fb      	strb	r3, [r7, #3]
 80084c6:	460b      	mov	r3, r1
 80084c8:	70bb      	strb	r3, [r7, #2]
 80084ca:	4613      	mov	r3, r2
 80084cc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80084ce:	78fb      	ldrb	r3, [r7, #3]
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	212c      	movs	r1, #44	; 0x2c
 80084d4:	fb01 f303 	mul.w	r3, r1, r3
 80084d8:	4413      	add	r3, r2
 80084da:	333b      	adds	r3, #59	; 0x3b
 80084dc:	78ba      	ldrb	r2, [r7, #2]
 80084de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80084e0:	78fb      	ldrb	r3, [r7, #3]
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	212c      	movs	r1, #44	; 0x2c
 80084e6:	fb01 f303 	mul.w	r3, r1, r3
 80084ea:	4413      	add	r3, r2
 80084ec:	333f      	adds	r3, #63	; 0x3f
 80084ee:	787a      	ldrb	r2, [r7, #1]
 80084f0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80084f2:	7c3b      	ldrb	r3, [r7, #16]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d112      	bne.n	800851e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80084f8:	78fb      	ldrb	r3, [r7, #3]
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	212c      	movs	r1, #44	; 0x2c
 80084fe:	fb01 f303 	mul.w	r3, r1, r3
 8008502:	4413      	add	r3, r2
 8008504:	3342      	adds	r3, #66	; 0x42
 8008506:	2203      	movs	r2, #3
 8008508:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800850a:	78fb      	ldrb	r3, [r7, #3]
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	212c      	movs	r1, #44	; 0x2c
 8008510:	fb01 f303 	mul.w	r3, r1, r3
 8008514:	4413      	add	r3, r2
 8008516:	333d      	adds	r3, #61	; 0x3d
 8008518:	7f3a      	ldrb	r2, [r7, #28]
 800851a:	701a      	strb	r2, [r3, #0]
 800851c:	e008      	b.n	8008530 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800851e:	78fb      	ldrb	r3, [r7, #3]
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	212c      	movs	r1, #44	; 0x2c
 8008524:	fb01 f303 	mul.w	r3, r1, r3
 8008528:	4413      	add	r3, r2
 800852a:	3342      	adds	r3, #66	; 0x42
 800852c:	2202      	movs	r2, #2
 800852e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8008530:	787b      	ldrb	r3, [r7, #1]
 8008532:	2b03      	cmp	r3, #3
 8008534:	f200 80c6 	bhi.w	80086c4 <HAL_HCD_HC_SubmitRequest+0x210>
 8008538:	a201      	add	r2, pc, #4	; (adr r2, 8008540 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800853a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800853e:	bf00      	nop
 8008540:	08008551 	.word	0x08008551
 8008544:	080086b1 	.word	0x080086b1
 8008548:	080085b5 	.word	0x080085b5
 800854c:	08008633 	.word	0x08008633
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8008550:	7c3b      	ldrb	r3, [r7, #16]
 8008552:	2b01      	cmp	r3, #1
 8008554:	f040 80b8 	bne.w	80086c8 <HAL_HCD_HC_SubmitRequest+0x214>
 8008558:	78bb      	ldrb	r3, [r7, #2]
 800855a:	2b00      	cmp	r3, #0
 800855c:	f040 80b4 	bne.w	80086c8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8008560:	8b3b      	ldrh	r3, [r7, #24]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d108      	bne.n	8008578 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8008566:	78fb      	ldrb	r3, [r7, #3]
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	212c      	movs	r1, #44	; 0x2c
 800856c:	fb01 f303 	mul.w	r3, r1, r3
 8008570:	4413      	add	r3, r2
 8008572:	3355      	adds	r3, #85	; 0x55
 8008574:	2201      	movs	r2, #1
 8008576:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8008578:	78fb      	ldrb	r3, [r7, #3]
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	212c      	movs	r1, #44	; 0x2c
 800857e:	fb01 f303 	mul.w	r3, r1, r3
 8008582:	4413      	add	r3, r2
 8008584:	3355      	adds	r3, #85	; 0x55
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d109      	bne.n	80085a0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800858c:	78fb      	ldrb	r3, [r7, #3]
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	212c      	movs	r1, #44	; 0x2c
 8008592:	fb01 f303 	mul.w	r3, r1, r3
 8008596:	4413      	add	r3, r2
 8008598:	3342      	adds	r3, #66	; 0x42
 800859a:	2200      	movs	r2, #0
 800859c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800859e:	e093      	b.n	80086c8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80085a0:	78fb      	ldrb	r3, [r7, #3]
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	212c      	movs	r1, #44	; 0x2c
 80085a6:	fb01 f303 	mul.w	r3, r1, r3
 80085aa:	4413      	add	r3, r2
 80085ac:	3342      	adds	r3, #66	; 0x42
 80085ae:	2202      	movs	r2, #2
 80085b0:	701a      	strb	r2, [r3, #0]
      break;
 80085b2:	e089      	b.n	80086c8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80085b4:	78bb      	ldrb	r3, [r7, #2]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d11d      	bne.n	80085f6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80085ba:	78fb      	ldrb	r3, [r7, #3]
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	212c      	movs	r1, #44	; 0x2c
 80085c0:	fb01 f303 	mul.w	r3, r1, r3
 80085c4:	4413      	add	r3, r2
 80085c6:	3355      	adds	r3, #85	; 0x55
 80085c8:	781b      	ldrb	r3, [r3, #0]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d109      	bne.n	80085e2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80085ce:	78fb      	ldrb	r3, [r7, #3]
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	212c      	movs	r1, #44	; 0x2c
 80085d4:	fb01 f303 	mul.w	r3, r1, r3
 80085d8:	4413      	add	r3, r2
 80085da:	3342      	adds	r3, #66	; 0x42
 80085dc:	2200      	movs	r2, #0
 80085de:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80085e0:	e073      	b.n	80086ca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80085e2:	78fb      	ldrb	r3, [r7, #3]
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	212c      	movs	r1, #44	; 0x2c
 80085e8:	fb01 f303 	mul.w	r3, r1, r3
 80085ec:	4413      	add	r3, r2
 80085ee:	3342      	adds	r3, #66	; 0x42
 80085f0:	2202      	movs	r2, #2
 80085f2:	701a      	strb	r2, [r3, #0]
      break;
 80085f4:	e069      	b.n	80086ca <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80085f6:	78fb      	ldrb	r3, [r7, #3]
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	212c      	movs	r1, #44	; 0x2c
 80085fc:	fb01 f303 	mul.w	r3, r1, r3
 8008600:	4413      	add	r3, r2
 8008602:	3354      	adds	r3, #84	; 0x54
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d109      	bne.n	800861e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800860a:	78fb      	ldrb	r3, [r7, #3]
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	212c      	movs	r1, #44	; 0x2c
 8008610:	fb01 f303 	mul.w	r3, r1, r3
 8008614:	4413      	add	r3, r2
 8008616:	3342      	adds	r3, #66	; 0x42
 8008618:	2200      	movs	r2, #0
 800861a:	701a      	strb	r2, [r3, #0]
      break;
 800861c:	e055      	b.n	80086ca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800861e:	78fb      	ldrb	r3, [r7, #3]
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	212c      	movs	r1, #44	; 0x2c
 8008624:	fb01 f303 	mul.w	r3, r1, r3
 8008628:	4413      	add	r3, r2
 800862a:	3342      	adds	r3, #66	; 0x42
 800862c:	2202      	movs	r2, #2
 800862e:	701a      	strb	r2, [r3, #0]
      break;
 8008630:	e04b      	b.n	80086ca <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8008632:	78bb      	ldrb	r3, [r7, #2]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d11d      	bne.n	8008674 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8008638:	78fb      	ldrb	r3, [r7, #3]
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	212c      	movs	r1, #44	; 0x2c
 800863e:	fb01 f303 	mul.w	r3, r1, r3
 8008642:	4413      	add	r3, r2
 8008644:	3355      	adds	r3, #85	; 0x55
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d109      	bne.n	8008660 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800864c:	78fb      	ldrb	r3, [r7, #3]
 800864e:	687a      	ldr	r2, [r7, #4]
 8008650:	212c      	movs	r1, #44	; 0x2c
 8008652:	fb01 f303 	mul.w	r3, r1, r3
 8008656:	4413      	add	r3, r2
 8008658:	3342      	adds	r3, #66	; 0x42
 800865a:	2200      	movs	r2, #0
 800865c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800865e:	e034      	b.n	80086ca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8008660:	78fb      	ldrb	r3, [r7, #3]
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	212c      	movs	r1, #44	; 0x2c
 8008666:	fb01 f303 	mul.w	r3, r1, r3
 800866a:	4413      	add	r3, r2
 800866c:	3342      	adds	r3, #66	; 0x42
 800866e:	2202      	movs	r2, #2
 8008670:	701a      	strb	r2, [r3, #0]
      break;
 8008672:	e02a      	b.n	80086ca <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8008674:	78fb      	ldrb	r3, [r7, #3]
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	212c      	movs	r1, #44	; 0x2c
 800867a:	fb01 f303 	mul.w	r3, r1, r3
 800867e:	4413      	add	r3, r2
 8008680:	3354      	adds	r3, #84	; 0x54
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d109      	bne.n	800869c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8008688:	78fb      	ldrb	r3, [r7, #3]
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	212c      	movs	r1, #44	; 0x2c
 800868e:	fb01 f303 	mul.w	r3, r1, r3
 8008692:	4413      	add	r3, r2
 8008694:	3342      	adds	r3, #66	; 0x42
 8008696:	2200      	movs	r2, #0
 8008698:	701a      	strb	r2, [r3, #0]
      break;
 800869a:	e016      	b.n	80086ca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800869c:	78fb      	ldrb	r3, [r7, #3]
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	212c      	movs	r1, #44	; 0x2c
 80086a2:	fb01 f303 	mul.w	r3, r1, r3
 80086a6:	4413      	add	r3, r2
 80086a8:	3342      	adds	r3, #66	; 0x42
 80086aa:	2202      	movs	r2, #2
 80086ac:	701a      	strb	r2, [r3, #0]
      break;
 80086ae:	e00c      	b.n	80086ca <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80086b0:	78fb      	ldrb	r3, [r7, #3]
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	212c      	movs	r1, #44	; 0x2c
 80086b6:	fb01 f303 	mul.w	r3, r1, r3
 80086ba:	4413      	add	r3, r2
 80086bc:	3342      	adds	r3, #66	; 0x42
 80086be:	2200      	movs	r2, #0
 80086c0:	701a      	strb	r2, [r3, #0]
      break;
 80086c2:	e002      	b.n	80086ca <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80086c4:	bf00      	nop
 80086c6:	e000      	b.n	80086ca <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80086c8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80086ca:	78fb      	ldrb	r3, [r7, #3]
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	212c      	movs	r1, #44	; 0x2c
 80086d0:	fb01 f303 	mul.w	r3, r1, r3
 80086d4:	4413      	add	r3, r2
 80086d6:	3344      	adds	r3, #68	; 0x44
 80086d8:	697a      	ldr	r2, [r7, #20]
 80086da:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80086dc:	78fb      	ldrb	r3, [r7, #3]
 80086de:	8b3a      	ldrh	r2, [r7, #24]
 80086e0:	6879      	ldr	r1, [r7, #4]
 80086e2:	202c      	movs	r0, #44	; 0x2c
 80086e4:	fb00 f303 	mul.w	r3, r0, r3
 80086e8:	440b      	add	r3, r1
 80086ea:	334c      	adds	r3, #76	; 0x4c
 80086ec:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80086ee:	78fb      	ldrb	r3, [r7, #3]
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	212c      	movs	r1, #44	; 0x2c
 80086f4:	fb01 f303 	mul.w	r3, r1, r3
 80086f8:	4413      	add	r3, r2
 80086fa:	3360      	adds	r3, #96	; 0x60
 80086fc:	2200      	movs	r2, #0
 80086fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8008700:	78fb      	ldrb	r3, [r7, #3]
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	212c      	movs	r1, #44	; 0x2c
 8008706:	fb01 f303 	mul.w	r3, r1, r3
 800870a:	4413      	add	r3, r2
 800870c:	3350      	adds	r3, #80	; 0x50
 800870e:	2200      	movs	r2, #0
 8008710:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8008712:	78fb      	ldrb	r3, [r7, #3]
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	212c      	movs	r1, #44	; 0x2c
 8008718:	fb01 f303 	mul.w	r3, r1, r3
 800871c:	4413      	add	r3, r2
 800871e:	3339      	adds	r3, #57	; 0x39
 8008720:	78fa      	ldrb	r2, [r7, #3]
 8008722:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8008724:	78fb      	ldrb	r3, [r7, #3]
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	212c      	movs	r1, #44	; 0x2c
 800872a:	fb01 f303 	mul.w	r3, r1, r3
 800872e:	4413      	add	r3, r2
 8008730:	3361      	adds	r3, #97	; 0x61
 8008732:	2200      	movs	r2, #0
 8008734:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6818      	ldr	r0, [r3, #0]
 800873a:	78fb      	ldrb	r3, [r7, #3]
 800873c:	222c      	movs	r2, #44	; 0x2c
 800873e:	fb02 f303 	mul.w	r3, r2, r3
 8008742:	3338      	adds	r3, #56	; 0x38
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	18d1      	adds	r1, r2, r3
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	691b      	ldr	r3, [r3, #16]
 800874c:	b2db      	uxtb	r3, r3
 800874e:	461a      	mov	r2, r3
 8008750:	f009 f8aa 	bl	80118a8 <USB_HC_StartXfer>
 8008754:	4603      	mov	r3, r0
}
 8008756:	4618      	mov	r0, r3
 8008758:	3708      	adds	r7, #8
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop

08008760 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b086      	sub	sp, #24
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4618      	mov	r0, r3
 8008778:	f008 fdb8 	bl	80112ec <USB_GetMode>
 800877c:	4603      	mov	r3, r0
 800877e:	2b01      	cmp	r3, #1
 8008780:	f040 80f6 	bne.w	8008970 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4618      	mov	r0, r3
 800878a:	f008 fd7b 	bl	8011284 <USB_ReadInterrupts>
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	f000 80ec 	beq.w	800896e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4618      	mov	r0, r3
 800879c:	f008 fd72 	bl	8011284 <USB_ReadInterrupts>
 80087a0:	4603      	mov	r3, r0
 80087a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80087a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80087aa:	d104      	bne.n	80087b6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80087b4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4618      	mov	r0, r3
 80087bc:	f008 fd62 	bl	8011284 <USB_ReadInterrupts>
 80087c0:	4603      	mov	r3, r0
 80087c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087ca:	d104      	bne.n	80087d6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80087d4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4618      	mov	r0, r3
 80087dc:	f008 fd52 	bl	8011284 <USB_ReadInterrupts>
 80087e0:	4603      	mov	r3, r0
 80087e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80087e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80087ea:	d104      	bne.n	80087f6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80087f4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4618      	mov	r0, r3
 80087fc:	f008 fd42 	bl	8011284 <USB_ReadInterrupts>
 8008800:	4603      	mov	r3, r0
 8008802:	f003 0302 	and.w	r3, r3, #2
 8008806:	2b02      	cmp	r3, #2
 8008808:	d103      	bne.n	8008812 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	2202      	movs	r2, #2
 8008810:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4618      	mov	r0, r3
 8008818:	f008 fd34 	bl	8011284 <USB_ReadInterrupts>
 800881c:	4603      	mov	r3, r0
 800881e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008822:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008826:	d11c      	bne.n	8008862 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8008830:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f003 0301 	and.w	r3, r3, #1
 800883e:	2b00      	cmp	r3, #0
 8008840:	d10f      	bne.n	8008862 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8008842:	2110      	movs	r1, #16
 8008844:	6938      	ldr	r0, [r7, #16]
 8008846:	f008 fc23 	bl	8011090 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800884a:	6938      	ldr	r0, [r7, #16]
 800884c:	f008 fc54 	bl	80110f8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	2101      	movs	r1, #1
 8008856:	4618      	mov	r0, r3
 8008858:	f008 fe3e 	bl	80114d8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f00e f817 	bl	8016890 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4618      	mov	r0, r3
 8008868:	f008 fd0c 	bl	8011284 <USB_ReadInterrupts>
 800886c:	4603      	mov	r3, r0
 800886e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008872:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008876:	d102      	bne.n	800887e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f001 f9ce 	bl	8009c1a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4618      	mov	r0, r3
 8008884:	f008 fcfe 	bl	8011284 <USB_ReadInterrupts>
 8008888:	4603      	mov	r3, r0
 800888a:	f003 0308 	and.w	r3, r3, #8
 800888e:	2b08      	cmp	r3, #8
 8008890:	d106      	bne.n	80088a0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f00d ffe0 	bl	8016858 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	2208      	movs	r2, #8
 800889e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4618      	mov	r0, r3
 80088a6:	f008 fced 	bl	8011284 <USB_ReadInterrupts>
 80088aa:	4603      	mov	r3, r0
 80088ac:	f003 0310 	and.w	r3, r3, #16
 80088b0:	2b10      	cmp	r3, #16
 80088b2:	d101      	bne.n	80088b8 <HAL_HCD_IRQHandler+0x158>
 80088b4:	2301      	movs	r3, #1
 80088b6:	e000      	b.n	80088ba <HAL_HCD_IRQHandler+0x15a>
 80088b8:	2300      	movs	r3, #0
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d012      	beq.n	80088e4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	699a      	ldr	r2, [r3, #24]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f022 0210 	bic.w	r2, r2, #16
 80088cc:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f001 f8d1 	bl	8009a76 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	699a      	ldr	r2, [r3, #24]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f042 0210 	orr.w	r2, r2, #16
 80088e2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4618      	mov	r0, r3
 80088ea:	f008 fccb 	bl	8011284 <USB_ReadInterrupts>
 80088ee:	4603      	mov	r3, r0
 80088f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088f8:	d13a      	bne.n	8008970 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4618      	mov	r0, r3
 8008900:	f009 f914 	bl	8011b2c <USB_HC_ReadInterrupt>
 8008904:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8008906:	2300      	movs	r3, #0
 8008908:	617b      	str	r3, [r7, #20]
 800890a:	e025      	b.n	8008958 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	f003 030f 	and.w	r3, r3, #15
 8008912:	68ba      	ldr	r2, [r7, #8]
 8008914:	fa22 f303 	lsr.w	r3, r2, r3
 8008918:	f003 0301 	and.w	r3, r3, #1
 800891c:	2b00      	cmp	r3, #0
 800891e:	d018      	beq.n	8008952 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	015a      	lsls	r2, r3, #5
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	4413      	add	r3, r2
 8008928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008932:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008936:	d106      	bne.n	8008946 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	b2db      	uxtb	r3, r3
 800893c:	4619      	mov	r1, r3
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 f8ab 	bl	8008a9a <HCD_HC_IN_IRQHandler>
 8008944:	e005      	b.n	8008952 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	b2db      	uxtb	r3, r3
 800894a:	4619      	mov	r1, r3
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 fcc6 	bl	80092de <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	3301      	adds	r3, #1
 8008956:	617b      	str	r3, [r7, #20]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	697a      	ldr	r2, [r7, #20]
 800895e:	429a      	cmp	r2, r3
 8008960:	d3d4      	bcc.n	800890c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800896a:	615a      	str	r2, [r3, #20]
 800896c:	e000      	b.n	8008970 <HAL_HCD_IRQHandler+0x210>
      return;
 800896e:	bf00      	nop
    }
  }
}
 8008970:	3718      	adds	r7, #24
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8008976:	b580      	push	{r7, lr}
 8008978:	b082      	sub	sp, #8
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8008984:	2b01      	cmp	r3, #1
 8008986:	d101      	bne.n	800898c <HAL_HCD_Start+0x16>
 8008988:	2302      	movs	r3, #2
 800898a:	e013      	b.n	80089b4 <HAL_HCD_Start+0x3e>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2201      	movs	r2, #1
 8008990:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	2101      	movs	r1, #1
 800899a:	4618      	mov	r0, r3
 800899c:	f008 fe00 	bl	80115a0 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4618      	mov	r0, r3
 80089a6:	f008 fb05 	bl	8010fb4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2200      	movs	r2, #0
 80089ae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80089b2:	2300      	movs	r3, #0
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3708      	adds	r7, #8
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b082      	sub	sp, #8
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d101      	bne.n	80089d2 <HAL_HCD_Stop+0x16>
 80089ce:	2302      	movs	r3, #2
 80089d0:	e00d      	b.n	80089ee <HAL_HCD_Stop+0x32>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2201      	movs	r2, #1
 80089d6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4618      	mov	r0, r3
 80089e0:	f009 f9ee 	bl	8011dc0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2200      	movs	r2, #0
 80089e8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80089ec:	2300      	movs	r3, #0
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3708      	adds	r7, #8
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}

080089f6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80089f6:	b580      	push	{r7, lr}
 80089f8:	b082      	sub	sp, #8
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4618      	mov	r0, r3
 8008a04:	f008 fda2 	bl	801154c <USB_ResetPort>
 8008a08:	4603      	mov	r3, r0
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3708      	adds	r7, #8
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}

08008a12 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008a12:	b480      	push	{r7}
 8008a14:	b083      	sub	sp, #12
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
 8008a1a:	460b      	mov	r3, r1
 8008a1c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8008a1e:	78fb      	ldrb	r3, [r7, #3]
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	212c      	movs	r1, #44	; 0x2c
 8008a24:	fb01 f303 	mul.w	r3, r1, r3
 8008a28:	4413      	add	r3, r2
 8008a2a:	3360      	adds	r3, #96	; 0x60
 8008a2c:	781b      	ldrb	r3, [r3, #0]
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	370c      	adds	r7, #12
 8008a32:	46bd      	mov	sp, r7
 8008a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a38:	4770      	bx	lr

08008a3a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008a3a:	b480      	push	{r7}
 8008a3c:	b083      	sub	sp, #12
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
 8008a42:	460b      	mov	r3, r1
 8008a44:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8008a46:	78fb      	ldrb	r3, [r7, #3]
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	212c      	movs	r1, #44	; 0x2c
 8008a4c:	fb01 f303 	mul.w	r3, r1, r3
 8008a50:	4413      	add	r3, r2
 8008a52:	3350      	adds	r3, #80	; 0x50
 8008a54:	681b      	ldr	r3, [r3, #0]
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	370c      	adds	r7, #12
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr

08008a62 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8008a62:	b580      	push	{r7, lr}
 8008a64:	b082      	sub	sp, #8
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f008 fde6 	bl	8011640 <USB_GetCurrentFrame>
 8008a74:	4603      	mov	r3, r0
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3708      	adds	r7, #8
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}

08008a7e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8008a7e:	b580      	push	{r7, lr}
 8008a80:	b082      	sub	sp, #8
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f008 fdc1 	bl	8011612 <USB_GetHostSpeed>
 8008a90:	4603      	mov	r3, r0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3708      	adds	r7, #8
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}

08008a9a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008a9a:	b580      	push	{r7, lr}
 8008a9c:	b086      	sub	sp, #24
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
 8008aa2:	460b      	mov	r3, r1
 8008aa4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8008ab0:	78fb      	ldrb	r3, [r7, #3]
 8008ab2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	68fa      	ldr	r2, [r7, #12]
 8008aba:	b2d2      	uxtb	r2, r2
 8008abc:	4611      	mov	r1, r2
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f008 fbf3 	bl	80112aa <USB_ReadChInterrupts>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	f003 0304 	and.w	r3, r3, #4
 8008aca:	2b04      	cmp	r3, #4
 8008acc:	d11a      	bne.n	8008b04 <HCD_HC_IN_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	015a      	lsls	r2, r3, #5
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	4413      	add	r3, r2
 8008ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ada:	461a      	mov	r2, r3
 8008adc:	2304      	movs	r3, #4
 8008ade:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8008ae0:	687a      	ldr	r2, [r7, #4]
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	212c      	movs	r1, #44	; 0x2c
 8008ae6:	fb01 f303 	mul.w	r3, r1, r3
 8008aea:	4413      	add	r3, r2
 8008aec:	3361      	adds	r3, #97	; 0x61
 8008aee:	2207      	movs	r2, #7
 8008af0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	68fa      	ldr	r2, [r7, #12]
 8008af8:	b2d2      	uxtb	r2, r2
 8008afa:	4611      	mov	r1, r2
 8008afc:	4618      	mov	r0, r3
 8008afe:	f009 f826 	bl	8011b4e <USB_HC_Halt>
 8008b02:	e0a2      	b.n	8008c4a <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_BBERR))
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	68fa      	ldr	r2, [r7, #12]
 8008b0a:	b2d2      	uxtb	r2, r2
 8008b0c:	4611      	mov	r1, r2
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f008 fbcb 	bl	80112aa <USB_ReadChInterrupts>
 8008b14:	4603      	mov	r3, r0
 8008b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b1e:	d11b      	bne.n	8008b58 <HCD_HC_IN_IRQHandler+0xbe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	015a      	lsls	r2, r3, #5
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	4413      	add	r3, r2
 8008b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b32:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	212c      	movs	r1, #44	; 0x2c
 8008b3a:	fb01 f303 	mul.w	r3, r1, r3
 8008b3e:	4413      	add	r3, r2
 8008b40:	3361      	adds	r3, #97	; 0x61
 8008b42:	2208      	movs	r2, #8
 8008b44:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	68fa      	ldr	r2, [r7, #12]
 8008b4c:	b2d2      	uxtb	r2, r2
 8008b4e:	4611      	mov	r1, r2
 8008b50:	4618      	mov	r0, r3
 8008b52:	f008 fffc 	bl	8011b4e <USB_HC_Halt>
 8008b56:	e078      	b.n	8008c4a <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	b2d2      	uxtb	r2, r2
 8008b60:	4611      	mov	r1, r2
 8008b62:	4618      	mov	r0, r3
 8008b64:	f008 fba1 	bl	80112aa <USB_ReadChInterrupts>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	f003 0308 	and.w	r3, r3, #8
 8008b6e:	2b08      	cmp	r3, #8
 8008b70:	d11a      	bne.n	8008ba8 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	015a      	lsls	r2, r3, #5
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	4413      	add	r3, r2
 8008b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b7e:	461a      	mov	r2, r3
 8008b80:	2308      	movs	r3, #8
 8008b82:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	212c      	movs	r1, #44	; 0x2c
 8008b8a:	fb01 f303 	mul.w	r3, r1, r3
 8008b8e:	4413      	add	r3, r2
 8008b90:	3361      	adds	r3, #97	; 0x61
 8008b92:	2206      	movs	r2, #6
 8008b94:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	68fa      	ldr	r2, [r7, #12]
 8008b9c:	b2d2      	uxtb	r2, r2
 8008b9e:	4611      	mov	r1, r2
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f008 ffd4 	bl	8011b4e <USB_HC_Halt>
 8008ba6:	e050      	b.n	8008c4a <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	68fa      	ldr	r2, [r7, #12]
 8008bae:	b2d2      	uxtb	r2, r2
 8008bb0:	4611      	mov	r1, r2
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f008 fb79 	bl	80112aa <USB_ReadChInterrupts>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bc2:	d11b      	bne.n	8008bfc <HCD_HC_IN_IRQHandler+0x162>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	015a      	lsls	r2, r3, #5
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	4413      	add	r3, r2
 8008bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bd6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8008bd8:	687a      	ldr	r2, [r7, #4]
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	212c      	movs	r1, #44	; 0x2c
 8008bde:	fb01 f303 	mul.w	r3, r1, r3
 8008be2:	4413      	add	r3, r2
 8008be4:	3361      	adds	r3, #97	; 0x61
 8008be6:	2209      	movs	r2, #9
 8008be8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	68fa      	ldr	r2, [r7, #12]
 8008bf0:	b2d2      	uxtb	r2, r2
 8008bf2:	4611      	mov	r1, r2
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f008 ffaa 	bl	8011b4e <USB_HC_Halt>
 8008bfa:	e026      	b.n	8008c4a <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	68fa      	ldr	r2, [r7, #12]
 8008c02:	b2d2      	uxtb	r2, r2
 8008c04:	4611      	mov	r1, r2
 8008c06:	4618      	mov	r0, r3
 8008c08:	f008 fb4f 	bl	80112aa <USB_ReadChInterrupts>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c12:	2b80      	cmp	r3, #128	; 0x80
 8008c14:	d119      	bne.n	8008c4a <HCD_HC_IN_IRQHandler+0x1b0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	015a      	lsls	r2, r3, #5
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	4413      	add	r3, r2
 8008c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c22:	461a      	mov	r2, r3
 8008c24:	2380      	movs	r3, #128	; 0x80
 8008c26:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	212c      	movs	r1, #44	; 0x2c
 8008c2e:	fb01 f303 	mul.w	r3, r1, r3
 8008c32:	4413      	add	r3, r2
 8008c34:	3361      	adds	r3, #97	; 0x61
 8008c36:	2207      	movs	r2, #7
 8008c38:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	68fa      	ldr	r2, [r7, #12]
 8008c40:	b2d2      	uxtb	r2, r2
 8008c42:	4611      	mov	r1, r2
 8008c44:	4618      	mov	r0, r3
 8008c46:	f008 ff82 	bl	8011b4e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	68fa      	ldr	r2, [r7, #12]
 8008c50:	b2d2      	uxtb	r2, r2
 8008c52:	4611      	mov	r1, r2
 8008c54:	4618      	mov	r0, r3
 8008c56:	f008 fb28 	bl	80112aa <USB_ReadChInterrupts>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c64:	d112      	bne.n	8008c8c <HCD_HC_IN_IRQHandler+0x1f2>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	68fa      	ldr	r2, [r7, #12]
 8008c6c:	b2d2      	uxtb	r2, r2
 8008c6e:	4611      	mov	r1, r2
 8008c70:	4618      	mov	r0, r3
 8008c72:	f008 ff6c 	bl	8011b4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	015a      	lsls	r2, r3, #5
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	4413      	add	r3, r2
 8008c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c82:	461a      	mov	r2, r3
 8008c84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c88:	6093      	str	r3, [r2, #8]
 8008c8a:	e325      	b.n	80092d8 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	68fa      	ldr	r2, [r7, #12]
 8008c92:	b2d2      	uxtb	r2, r2
 8008c94:	4611      	mov	r1, r2
 8008c96:	4618      	mov	r0, r3
 8008c98:	f008 fb07 	bl	80112aa <USB_ReadChInterrupts>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	f003 0301 	and.w	r3, r3, #1
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	f040 80e8 	bne.w	8008e78 <HCD_HC_IN_IRQHandler+0x3de>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	015a      	lsls	r2, r3, #5
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	4413      	add	r3, r2
 8008cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	2320      	movs	r3, #32
 8008cb8:	6093      	str	r3, [r2, #8]

    if (hhcd->Init.dma_enable != 0U)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	691b      	ldr	r3, [r3, #16]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d019      	beq.n	8008cf6 <HCD_HC_IN_IRQHandler+0x25c>
    {
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	212c      	movs	r1, #44	; 0x2c
 8008cc8:	fb01 f303 	mul.w	r3, r1, r3
 8008ccc:	4413      	add	r3, r2
 8008cce:	3348      	adds	r3, #72	; 0x48
 8008cd0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	0159      	lsls	r1, r3, #5
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	440b      	add	r3, r1
 8008cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cde:	691b      	ldr	r3, [r3, #16]
 8008ce0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8008ce4:	1ad2      	subs	r2, r2, r3
 8008ce6:	6879      	ldr	r1, [r7, #4]
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	202c      	movs	r0, #44	; 0x2c
 8008cec:	fb00 f303 	mul.w	r3, r0, r3
 8008cf0:	440b      	add	r3, r1
 8008cf2:	3350      	adds	r3, #80	; 0x50
 8008cf4:	601a      	str	r2, [r3, #0]
    }

    hhcd->hc[ch_num].state = HC_XFRC;
 8008cf6:	687a      	ldr	r2, [r7, #4]
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	212c      	movs	r1, #44	; 0x2c
 8008cfc:	fb01 f303 	mul.w	r3, r1, r3
 8008d00:	4413      	add	r3, r2
 8008d02:	3361      	adds	r3, #97	; 0x61
 8008d04:	2201      	movs	r2, #1
 8008d06:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	212c      	movs	r1, #44	; 0x2c
 8008d0e:	fb01 f303 	mul.w	r3, r1, r3
 8008d12:	4413      	add	r3, r2
 8008d14:	335c      	adds	r3, #92	; 0x5c
 8008d16:	2200      	movs	r2, #0
 8008d18:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	015a      	lsls	r2, r3, #5
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	4413      	add	r3, r2
 8008d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d26:	461a      	mov	r2, r3
 8008d28:	2301      	movs	r3, #1
 8008d2a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008d2c:	687a      	ldr	r2, [r7, #4]
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	212c      	movs	r1, #44	; 0x2c
 8008d32:	fb01 f303 	mul.w	r3, r1, r3
 8008d36:	4413      	add	r3, r2
 8008d38:	333f      	adds	r3, #63	; 0x3f
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d009      	beq.n	8008d54 <HCD_HC_IN_IRQHandler+0x2ba>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	212c      	movs	r1, #44	; 0x2c
 8008d46:	fb01 f303 	mul.w	r3, r1, r3
 8008d4a:	4413      	add	r3, r2
 8008d4c:	333f      	adds	r3, #63	; 0x3f
 8008d4e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008d50:	2b02      	cmp	r3, #2
 8008d52:	d111      	bne.n	8008d78 <HCD_HC_IN_IRQHandler+0x2de>
    {
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	68fa      	ldr	r2, [r7, #12]
 8008d5a:	b2d2      	uxtb	r2, r2
 8008d5c:	4611      	mov	r1, r2
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f008 fef5 	bl	8011b4e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	015a      	lsls	r2, r3, #5
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	4413      	add	r3, r2
 8008d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d70:	461a      	mov	r2, r3
 8008d72:	2310      	movs	r3, #16
 8008d74:	6093      	str	r3, [r2, #8]
 8008d76:	e03a      	b.n	8008dee <HCD_HC_IN_IRQHandler+0x354>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	212c      	movs	r1, #44	; 0x2c
 8008d7e:	fb01 f303 	mul.w	r3, r1, r3
 8008d82:	4413      	add	r3, r2
 8008d84:	333f      	adds	r3, #63	; 0x3f
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	2b03      	cmp	r3, #3
 8008d8a:	d009      	beq.n	8008da0 <HCD_HC_IN_IRQHandler+0x306>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	212c      	movs	r1, #44	; 0x2c
 8008d92:	fb01 f303 	mul.w	r3, r1, r3
 8008d96:	4413      	add	r3, r2
 8008d98:	333f      	adds	r3, #63	; 0x3f
 8008d9a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d126      	bne.n	8008dee <HCD_HC_IN_IRQHandler+0x354>
    {
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	015a      	lsls	r2, r3, #5
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	4413      	add	r3, r2
 8008da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	68fa      	ldr	r2, [r7, #12]
 8008db0:	0151      	lsls	r1, r2, #5
 8008db2:	693a      	ldr	r2, [r7, #16]
 8008db4:	440a      	add	r2, r1
 8008db6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008dba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008dbe:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	212c      	movs	r1, #44	; 0x2c
 8008dc6:	fb01 f303 	mul.w	r3, r1, r3
 8008dca:	4413      	add	r3, r2
 8008dcc:	3360      	adds	r3, #96	; 0x60
 8008dce:	2201      	movs	r2, #1
 8008dd0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	b2d9      	uxtb	r1, r3
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	202c      	movs	r0, #44	; 0x2c
 8008ddc:	fb00 f303 	mul.w	r3, r0, r3
 8008de0:	4413      	add	r3, r2
 8008de2:	3360      	adds	r3, #96	; 0x60
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	461a      	mov	r2, r3
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f00d fd5f 	bl	80168ac <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	691b      	ldr	r3, [r3, #16]
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d12b      	bne.n	8008e4e <HCD_HC_IN_IRQHandler+0x3b4>
    {
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	212c      	movs	r1, #44	; 0x2c
 8008dfc:	fb01 f303 	mul.w	r3, r1, r3
 8008e00:	4413      	add	r3, r2
 8008e02:	3348      	adds	r3, #72	; 0x48
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	6879      	ldr	r1, [r7, #4]
 8008e08:	68fa      	ldr	r2, [r7, #12]
 8008e0a:	202c      	movs	r0, #44	; 0x2c
 8008e0c:	fb00 f202 	mul.w	r2, r0, r2
 8008e10:	440a      	add	r2, r1
 8008e12:	3240      	adds	r2, #64	; 0x40
 8008e14:	8812      	ldrh	r2, [r2, #0]
 8008e16:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e1a:	f003 0301 	and.w	r3, r3, #1
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	f000 825a 	beq.w	80092d8 <HCD_HC_IN_IRQHandler+0x83e>
      {
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	212c      	movs	r1, #44	; 0x2c
 8008e2a:	fb01 f303 	mul.w	r3, r1, r3
 8008e2e:	4413      	add	r3, r2
 8008e30:	3354      	adds	r3, #84	; 0x54
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	f083 0301 	eor.w	r3, r3, #1
 8008e38:	b2d8      	uxtb	r0, r3
 8008e3a:	687a      	ldr	r2, [r7, #4]
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	212c      	movs	r1, #44	; 0x2c
 8008e40:	fb01 f303 	mul.w	r3, r1, r3
 8008e44:	4413      	add	r3, r2
 8008e46:	3354      	adds	r3, #84	; 0x54
 8008e48:	4602      	mov	r2, r0
 8008e4a:	701a      	strb	r2, [r3, #0]
 8008e4c:	e244      	b.n	80092d8 <HCD_HC_IN_IRQHandler+0x83e>
      }
    }
    else
    {
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	212c      	movs	r1, #44	; 0x2c
 8008e54:	fb01 f303 	mul.w	r3, r1, r3
 8008e58:	4413      	add	r3, r2
 8008e5a:	3354      	adds	r3, #84	; 0x54
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	f083 0301 	eor.w	r3, r3, #1
 8008e62:	b2d8      	uxtb	r0, r3
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	212c      	movs	r1, #44	; 0x2c
 8008e6a:	fb01 f303 	mul.w	r3, r1, r3
 8008e6e:	4413      	add	r3, r2
 8008e70:	3354      	adds	r3, #84	; 0x54
 8008e72:	4602      	mov	r2, r0
 8008e74:	701a      	strb	r2, [r3, #0]
 8008e76:	e22f      	b.n	80092d8 <HCD_HC_IN_IRQHandler+0x83e>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	68fa      	ldr	r2, [r7, #12]
 8008e7e:	b2d2      	uxtb	r2, r2
 8008e80:	4611      	mov	r1, r2
 8008e82:	4618      	mov	r0, r3
 8008e84:	f008 fa11 	bl	80112aa <USB_ReadChInterrupts>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	f003 0320 	and.w	r3, r3, #32
 8008e8e:	2b20      	cmp	r3, #32
 8008e90:	d109      	bne.n	8008ea6 <HCD_HC_IN_IRQHandler+0x40c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	015a      	lsls	r2, r3, #5
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	4413      	add	r3, r2
 8008e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	2320      	movs	r3, #32
 8008ea2:	6093      	str	r3, [r2, #8]
 8008ea4:	e218      	b.n	80092d8 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	68fa      	ldr	r2, [r7, #12]
 8008eac:	b2d2      	uxtb	r2, r2
 8008eae:	4611      	mov	r1, r2
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f008 f9fa 	bl	80112aa <USB_ReadChInterrupts>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	f003 0302 	and.w	r3, r3, #2
 8008ebc:	2b02      	cmp	r3, #2
 8008ebe:	f040 816b 	bne.w	8009198 <HCD_HC_IN_IRQHandler+0x6fe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	015a      	lsls	r2, r3, #5
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	4413      	add	r3, r2
 8008eca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ece:	461a      	mov	r2, r3
 8008ed0:	2302      	movs	r3, #2
 8008ed2:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8008ed4:	687a      	ldr	r2, [r7, #4]
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	212c      	movs	r1, #44	; 0x2c
 8008eda:	fb01 f303 	mul.w	r3, r1, r3
 8008ede:	4413      	add	r3, r2
 8008ee0:	3361      	adds	r3, #97	; 0x61
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d112      	bne.n	8008f0e <HCD_HC_IN_IRQHandler+0x474>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	212c      	movs	r1, #44	; 0x2c
 8008eee:	fb01 f303 	mul.w	r3, r1, r3
 8008ef2:	4413      	add	r3, r2
 8008ef4:	3361      	adds	r3, #97	; 0x61
 8008ef6:	2202      	movs	r2, #2
 8008ef8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	212c      	movs	r1, #44	; 0x2c
 8008f00:	fb01 f303 	mul.w	r3, r1, r3
 8008f04:	4413      	add	r3, r2
 8008f06:	3360      	adds	r3, #96	; 0x60
 8008f08:	2201      	movs	r2, #1
 8008f0a:	701a      	strb	r2, [r3, #0]
 8008f0c:	e135      	b.n	800917a <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	212c      	movs	r1, #44	; 0x2c
 8008f14:	fb01 f303 	mul.w	r3, r1, r3
 8008f18:	4413      	add	r3, r2
 8008f1a:	3361      	adds	r3, #97	; 0x61
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	2b06      	cmp	r3, #6
 8008f20:	d112      	bne.n	8008f48 <HCD_HC_IN_IRQHandler+0x4ae>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	212c      	movs	r1, #44	; 0x2c
 8008f28:	fb01 f303 	mul.w	r3, r1, r3
 8008f2c:	4413      	add	r3, r2
 8008f2e:	3361      	adds	r3, #97	; 0x61
 8008f30:	2202      	movs	r2, #2
 8008f32:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	212c      	movs	r1, #44	; 0x2c
 8008f3a:	fb01 f303 	mul.w	r3, r1, r3
 8008f3e:	4413      	add	r3, r2
 8008f40:	3360      	adds	r3, #96	; 0x60
 8008f42:	2205      	movs	r2, #5
 8008f44:	701a      	strb	r2, [r3, #0]
 8008f46:	e118      	b.n	800917a <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8008f48:	687a      	ldr	r2, [r7, #4]
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	212c      	movs	r1, #44	; 0x2c
 8008f4e:	fb01 f303 	mul.w	r3, r1, r3
 8008f52:	4413      	add	r3, r2
 8008f54:	3361      	adds	r3, #97	; 0x61
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	2b07      	cmp	r3, #7
 8008f5a:	d009      	beq.n	8008f70 <HCD_HC_IN_IRQHandler+0x4d6>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8008f5c:	687a      	ldr	r2, [r7, #4]
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	212c      	movs	r1, #44	; 0x2c
 8008f62:	fb01 f303 	mul.w	r3, r1, r3
 8008f66:	4413      	add	r3, r2
 8008f68:	3361      	adds	r3, #97	; 0x61
 8008f6a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8008f6c:	2b09      	cmp	r3, #9
 8008f6e:	d159      	bne.n	8009024 <HCD_HC_IN_IRQHandler+0x58a>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	212c      	movs	r1, #44	; 0x2c
 8008f76:	fb01 f303 	mul.w	r3, r1, r3
 8008f7a:	4413      	add	r3, r2
 8008f7c:	3361      	adds	r3, #97	; 0x61
 8008f7e:	2202      	movs	r2, #2
 8008f80:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	212c      	movs	r1, #44	; 0x2c
 8008f88:	fb01 f303 	mul.w	r3, r1, r3
 8008f8c:	4413      	add	r3, r2
 8008f8e:	335c      	adds	r3, #92	; 0x5c
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	1c5a      	adds	r2, r3, #1
 8008f94:	6879      	ldr	r1, [r7, #4]
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	202c      	movs	r0, #44	; 0x2c
 8008f9a:	fb00 f303 	mul.w	r3, r0, r3
 8008f9e:	440b      	add	r3, r1
 8008fa0:	335c      	adds	r3, #92	; 0x5c
 8008fa2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	212c      	movs	r1, #44	; 0x2c
 8008faa:	fb01 f303 	mul.w	r3, r1, r3
 8008fae:	4413      	add	r3, r2
 8008fb0:	335c      	adds	r3, #92	; 0x5c
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	2b02      	cmp	r3, #2
 8008fb6:	d912      	bls.n	8008fde <HCD_HC_IN_IRQHandler+0x544>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	212c      	movs	r1, #44	; 0x2c
 8008fbe:	fb01 f303 	mul.w	r3, r1, r3
 8008fc2:	4413      	add	r3, r2
 8008fc4:	335c      	adds	r3, #92	; 0x5c
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	212c      	movs	r1, #44	; 0x2c
 8008fd0:	fb01 f303 	mul.w	r3, r1, r3
 8008fd4:	4413      	add	r3, r2
 8008fd6:	3360      	adds	r3, #96	; 0x60
 8008fd8:	2204      	movs	r2, #4
 8008fda:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8008fdc:	e0cd      	b.n	800917a <HCD_HC_IN_IRQHandler+0x6e0>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8008fde:	687a      	ldr	r2, [r7, #4]
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	212c      	movs	r1, #44	; 0x2c
 8008fe4:	fb01 f303 	mul.w	r3, r1, r3
 8008fe8:	4413      	add	r3, r2
 8008fea:	3360      	adds	r3, #96	; 0x60
 8008fec:	2202      	movs	r2, #2
 8008fee:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	015a      	lsls	r2, r3, #5
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	4413      	add	r3, r2
 8008ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009006:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800900e:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	015a      	lsls	r2, r3, #5
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	4413      	add	r3, r2
 8009018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800901c:	461a      	mov	r2, r3
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8009022:	e0aa      	b.n	800917a <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	212c      	movs	r1, #44	; 0x2c
 800902a:	fb01 f303 	mul.w	r3, r1, r3
 800902e:	4413      	add	r3, r2
 8009030:	3361      	adds	r3, #97	; 0x61
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	2b05      	cmp	r3, #5
 8009036:	d109      	bne.n	800904c <HCD_HC_IN_IRQHandler+0x5b2>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8009038:	687a      	ldr	r2, [r7, #4]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	212c      	movs	r1, #44	; 0x2c
 800903e:	fb01 f303 	mul.w	r3, r1, r3
 8009042:	4413      	add	r3, r2
 8009044:	3361      	adds	r3, #97	; 0x61
 8009046:	2202      	movs	r2, #2
 8009048:	701a      	strb	r2, [r3, #0]
 800904a:	e096      	b.n	800917a <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	212c      	movs	r1, #44	; 0x2c
 8009052:	fb01 f303 	mul.w	r3, r1, r3
 8009056:	4413      	add	r3, r2
 8009058:	3361      	adds	r3, #97	; 0x61
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	2b03      	cmp	r3, #3
 800905e:	d109      	bne.n	8009074 <HCD_HC_IN_IRQHandler+0x5da>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8009060:	687a      	ldr	r2, [r7, #4]
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	212c      	movs	r1, #44	; 0x2c
 8009066:	fb01 f303 	mul.w	r3, r1, r3
 800906a:	4413      	add	r3, r2
 800906c:	3361      	adds	r3, #97	; 0x61
 800906e:	2202      	movs	r2, #2
 8009070:	701a      	strb	r2, [r3, #0]
 8009072:	e082      	b.n	800917a <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	212c      	movs	r1, #44	; 0x2c
 800907a:	fb01 f303 	mul.w	r3, r1, r3
 800907e:	4413      	add	r3, r2
 8009080:	3361      	adds	r3, #97	; 0x61
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	2b04      	cmp	r3, #4
 8009086:	d13f      	bne.n	8009108 <HCD_HC_IN_IRQHandler+0x66e>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	212c      	movs	r1, #44	; 0x2c
 800908e:	fb01 f303 	mul.w	r3, r1, r3
 8009092:	4413      	add	r3, r2
 8009094:	3361      	adds	r3, #97	; 0x61
 8009096:	2202      	movs	r2, #2
 8009098:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	212c      	movs	r1, #44	; 0x2c
 80090a0:	fb01 f303 	mul.w	r3, r1, r3
 80090a4:	4413      	add	r3, r2
 80090a6:	3360      	adds	r3, #96	; 0x60
 80090a8:	2202      	movs	r2, #2
 80090aa:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80090ac:	687a      	ldr	r2, [r7, #4]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	212c      	movs	r1, #44	; 0x2c
 80090b2:	fb01 f303 	mul.w	r3, r1, r3
 80090b6:	4413      	add	r3, r2
 80090b8:	333f      	adds	r3, #63	; 0x3f
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d009      	beq.n	80090d4 <HCD_HC_IN_IRQHandler+0x63a>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80090c0:	687a      	ldr	r2, [r7, #4]
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	212c      	movs	r1, #44	; 0x2c
 80090c6:	fb01 f303 	mul.w	r3, r1, r3
 80090ca:	4413      	add	r3, r2
 80090cc:	333f      	adds	r3, #63	; 0x3f
 80090ce:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80090d0:	2b02      	cmp	r3, #2
 80090d2:	d152      	bne.n	800917a <HCD_HC_IN_IRQHandler+0x6e0>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	015a      	lsls	r2, r3, #5
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	4413      	add	r3, r2
 80090dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80090ea:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80090f2:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	015a      	lsls	r2, r3, #5
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	4413      	add	r3, r2
 80090fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009100:	461a      	mov	r2, r3
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	6013      	str	r3, [r2, #0]
 8009106:	e038      	b.n	800917a <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8009108:	687a      	ldr	r2, [r7, #4]
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	212c      	movs	r1, #44	; 0x2c
 800910e:	fb01 f303 	mul.w	r3, r1, r3
 8009112:	4413      	add	r3, r2
 8009114:	3361      	adds	r3, #97	; 0x61
 8009116:	781b      	ldrb	r3, [r3, #0]
 8009118:	2b08      	cmp	r3, #8
 800911a:	d123      	bne.n	8009164 <HCD_HC_IN_IRQHandler+0x6ca>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800911c:	687a      	ldr	r2, [r7, #4]
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	212c      	movs	r1, #44	; 0x2c
 8009122:	fb01 f303 	mul.w	r3, r1, r3
 8009126:	4413      	add	r3, r2
 8009128:	3361      	adds	r3, #97	; 0x61
 800912a:	2202      	movs	r2, #2
 800912c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	212c      	movs	r1, #44	; 0x2c
 8009134:	fb01 f303 	mul.w	r3, r1, r3
 8009138:	4413      	add	r3, r2
 800913a:	335c      	adds	r3, #92	; 0x5c
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	1c5a      	adds	r2, r3, #1
 8009140:	6879      	ldr	r1, [r7, #4]
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	202c      	movs	r0, #44	; 0x2c
 8009146:	fb00 f303 	mul.w	r3, r0, r3
 800914a:	440b      	add	r3, r1
 800914c:	335c      	adds	r3, #92	; 0x5c
 800914e:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8009150:	687a      	ldr	r2, [r7, #4]
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	212c      	movs	r1, #44	; 0x2c
 8009156:	fb01 f303 	mul.w	r3, r1, r3
 800915a:	4413      	add	r3, r2
 800915c:	3360      	adds	r3, #96	; 0x60
 800915e:	2204      	movs	r2, #4
 8009160:	701a      	strb	r2, [r3, #0]
 8009162:	e00a      	b.n	800917a <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else
    {
      if (hhcd->hc[ch_num].state == HC_HALTED)
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	212c      	movs	r1, #44	; 0x2c
 800916a:	fb01 f303 	mul.w	r3, r1, r3
 800916e:	4413      	add	r3, r2
 8009170:	3361      	adds	r3, #97	; 0x61
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	2b02      	cmp	r3, #2
 8009176:	f000 80ae 	beq.w	80092d6 <HCD_HC_IN_IRQHandler+0x83c>
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	b2d9      	uxtb	r1, r3
 800917e:	687a      	ldr	r2, [r7, #4]
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	202c      	movs	r0, #44	; 0x2c
 8009184:	fb00 f303 	mul.w	r3, r0, r3
 8009188:	4413      	add	r3, r2
 800918a:	3360      	adds	r3, #96	; 0x60
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	461a      	mov	r2, r3
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f00d fb8b 	bl	80168ac <HAL_HCD_HC_NotifyURBChange_Callback>
 8009196:	e09f      	b.n	80092d8 <HCD_HC_IN_IRQHandler+0x83e>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	68fa      	ldr	r2, [r7, #12]
 800919e:	b2d2      	uxtb	r2, r2
 80091a0:	4611      	mov	r1, r2
 80091a2:	4618      	mov	r0, r3
 80091a4:	f008 f881 	bl	80112aa <USB_ReadChInterrupts>
 80091a8:	4603      	mov	r3, r0
 80091aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091ae:	2b40      	cmp	r3, #64	; 0x40
 80091b0:	d123      	bne.n	80091fa <HCD_HC_IN_IRQHandler+0x760>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	015a      	lsls	r2, r3, #5
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	4413      	add	r3, r2
 80091ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091be:	461a      	mov	r2, r3
 80091c0:	2340      	movs	r3, #64	; 0x40
 80091c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_NYET;
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	212c      	movs	r1, #44	; 0x2c
 80091ca:	fb01 f303 	mul.w	r3, r1, r3
 80091ce:	4413      	add	r3, r2
 80091d0:	3361      	adds	r3, #97	; 0x61
 80091d2:	2205      	movs	r2, #5
 80091d4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	212c      	movs	r1, #44	; 0x2c
 80091dc:	fb01 f303 	mul.w	r3, r1, r3
 80091e0:	4413      	add	r3, r2
 80091e2:	335c      	adds	r3, #92	; 0x5c
 80091e4:	2200      	movs	r2, #0
 80091e6:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	68fa      	ldr	r2, [r7, #12]
 80091ee:	b2d2      	uxtb	r2, r2
 80091f0:	4611      	mov	r1, r2
 80091f2:	4618      	mov	r0, r3
 80091f4:	f008 fcab 	bl	8011b4e <USB_HC_Halt>
 80091f8:	e06e      	b.n	80092d8 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	68fa      	ldr	r2, [r7, #12]
 8009200:	b2d2      	uxtb	r2, r2
 8009202:	4611      	mov	r1, r2
 8009204:	4618      	mov	r0, r3
 8009206:	f008 f850 	bl	80112aa <USB_ReadChInterrupts>
 800920a:	4603      	mov	r3, r0
 800920c:	f003 0310 	and.w	r3, r3, #16
 8009210:	2b10      	cmp	r3, #16
 8009212:	d161      	bne.n	80092d8 <HCD_HC_IN_IRQHandler+0x83e>
  {
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8009214:	687a      	ldr	r2, [r7, #4]
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	212c      	movs	r1, #44	; 0x2c
 800921a:	fb01 f303 	mul.w	r3, r1, r3
 800921e:	4413      	add	r3, r2
 8009220:	333f      	adds	r3, #63	; 0x3f
 8009222:	781b      	ldrb	r3, [r3, #0]
 8009224:	2b03      	cmp	r3, #3
 8009226:	d11a      	bne.n	800925e <HCD_HC_IN_IRQHandler+0x7c4>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	212c      	movs	r1, #44	; 0x2c
 800922e:	fb01 f303 	mul.w	r3, r1, r3
 8009232:	4413      	add	r3, r2
 8009234:	335c      	adds	r3, #92	; 0x5c
 8009236:	2200      	movs	r2, #0
 8009238:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 800923a:	687a      	ldr	r2, [r7, #4]
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	212c      	movs	r1, #44	; 0x2c
 8009240:	fb01 f303 	mul.w	r3, r1, r3
 8009244:	4413      	add	r3, r2
 8009246:	3361      	adds	r3, #97	; 0x61
 8009248:	2204      	movs	r2, #4
 800924a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	68fa      	ldr	r2, [r7, #12]
 8009252:	b2d2      	uxtb	r2, r2
 8009254:	4611      	mov	r1, r2
 8009256:	4618      	mov	r0, r3
 8009258:	f008 fc79 	bl	8011b4e <USB_HC_Halt>
 800925c:	e031      	b.n	80092c2 <HCD_HC_IN_IRQHandler+0x828>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	212c      	movs	r1, #44	; 0x2c
 8009264:	fb01 f303 	mul.w	r3, r1, r3
 8009268:	4413      	add	r3, r2
 800926a:	333f      	adds	r3, #63	; 0x3f
 800926c:	781b      	ldrb	r3, [r3, #0]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d009      	beq.n	8009286 <HCD_HC_IN_IRQHandler+0x7ec>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	212c      	movs	r1, #44	; 0x2c
 8009278:	fb01 f303 	mul.w	r3, r1, r3
 800927c:	4413      	add	r3, r2
 800927e:	333f      	adds	r3, #63	; 0x3f
 8009280:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8009282:	2b02      	cmp	r3, #2
 8009284:	d11d      	bne.n	80092c2 <HCD_HC_IN_IRQHandler+0x828>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	212c      	movs	r1, #44	; 0x2c
 800928c:	fb01 f303 	mul.w	r3, r1, r3
 8009290:	4413      	add	r3, r2
 8009292:	335c      	adds	r3, #92	; 0x5c
 8009294:	2200      	movs	r2, #0
 8009296:	601a      	str	r2, [r3, #0]

      if (hhcd->Init.dma_enable == 0U)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	691b      	ldr	r3, [r3, #16]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d110      	bne.n	80092c2 <HCD_HC_IN_IRQHandler+0x828>
      {
        hhcd->hc[ch_num].state = HC_NAK;
 80092a0:	687a      	ldr	r2, [r7, #4]
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	212c      	movs	r1, #44	; 0x2c
 80092a6:	fb01 f303 	mul.w	r3, r1, r3
 80092aa:	4413      	add	r3, r2
 80092ac:	3361      	adds	r3, #97	; 0x61
 80092ae:	2204      	movs	r2, #4
 80092b0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	68fa      	ldr	r2, [r7, #12]
 80092b8:	b2d2      	uxtb	r2, r2
 80092ba:	4611      	mov	r1, r2
 80092bc:	4618      	mov	r0, r3
 80092be:	f008 fc46 	bl	8011b4e <USB_HC_Halt>
    }
    else
    {
      /* ... */
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	015a      	lsls	r2, r3, #5
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	4413      	add	r3, r2
 80092ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092ce:	461a      	mov	r2, r3
 80092d0:	2310      	movs	r3, #16
 80092d2:	6093      	str	r3, [r2, #8]
 80092d4:	e000      	b.n	80092d8 <HCD_HC_IN_IRQHandler+0x83e>
        return;
 80092d6:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80092d8:	3718      	adds	r7, #24
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}

080092de <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80092de:	b580      	push	{r7, lr}
 80092e0:	b088      	sub	sp, #32
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	6078      	str	r0, [r7, #4]
 80092e6:	460b      	mov	r3, r1
 80092e8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092f0:	69fb      	ldr	r3, [r7, #28]
 80092f2:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80092f4:	78fb      	ldrb	r3, [r7, #3]
 80092f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	697a      	ldr	r2, [r7, #20]
 80092fe:	b2d2      	uxtb	r2, r2
 8009300:	4611      	mov	r1, r2
 8009302:	4618      	mov	r0, r3
 8009304:	f007 ffd1 	bl	80112aa <USB_ReadChInterrupts>
 8009308:	4603      	mov	r3, r0
 800930a:	f003 0304 	and.w	r3, r3, #4
 800930e:	2b04      	cmp	r3, #4
 8009310:	d11a      	bne.n	8009348 <HCD_HC_OUT_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	015a      	lsls	r2, r3, #5
 8009316:	69bb      	ldr	r3, [r7, #24]
 8009318:	4413      	add	r3, r2
 800931a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800931e:	461a      	mov	r2, r3
 8009320:	2304      	movs	r3, #4
 8009322:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	212c      	movs	r1, #44	; 0x2c
 800932a:	fb01 f303 	mul.w	r3, r1, r3
 800932e:	4413      	add	r3, r2
 8009330:	3361      	adds	r3, #97	; 0x61
 8009332:	2207      	movs	r2, #7
 8009334:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	697a      	ldr	r2, [r7, #20]
 800933c:	b2d2      	uxtb	r2, r2
 800933e:	4611      	mov	r1, r2
 8009340:	4618      	mov	r0, r3
 8009342:	f008 fc04 	bl	8011b4e <USB_HC_Halt>
 8009346:	e393      	b.n	8009a70 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	697a      	ldr	r2, [r7, #20]
 800934e:	b2d2      	uxtb	r2, r2
 8009350:	4611      	mov	r1, r2
 8009352:	4618      	mov	r0, r3
 8009354:	f007 ffa9 	bl	80112aa <USB_ReadChInterrupts>
 8009358:	4603      	mov	r3, r0
 800935a:	f003 0320 	and.w	r3, r3, #32
 800935e:	2b20      	cmp	r3, #32
 8009360:	d137      	bne.n	80093d2 <HCD_HC_OUT_IRQHandler+0xf4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	015a      	lsls	r2, r3, #5
 8009366:	69bb      	ldr	r3, [r7, #24]
 8009368:	4413      	add	r3, r2
 800936a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800936e:	461a      	mov	r2, r3
 8009370:	2320      	movs	r3, #32
 8009372:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[ch_num].do_ping == 1U)
 8009374:	687a      	ldr	r2, [r7, #4]
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	212c      	movs	r1, #44	; 0x2c
 800937a:	fb01 f303 	mul.w	r3, r1, r3
 800937e:	4413      	add	r3, r2
 8009380:	333d      	adds	r3, #61	; 0x3d
 8009382:	781b      	ldrb	r3, [r3, #0]
 8009384:	2b01      	cmp	r3, #1
 8009386:	f040 8373 	bne.w	8009a70 <HCD_HC_OUT_IRQHandler+0x792>
    {
      hhcd->hc[ch_num].do_ping = 0U;
 800938a:	687a      	ldr	r2, [r7, #4]
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	212c      	movs	r1, #44	; 0x2c
 8009390:	fb01 f303 	mul.w	r3, r1, r3
 8009394:	4413      	add	r3, r2
 8009396:	333d      	adds	r3, #61	; 0x3d
 8009398:	2200      	movs	r2, #0
 800939a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	212c      	movs	r1, #44	; 0x2c
 80093a2:	fb01 f303 	mul.w	r3, r1, r3
 80093a6:	4413      	add	r3, r2
 80093a8:	3360      	adds	r3, #96	; 0x60
 80093aa:	2202      	movs	r2, #2
 80093ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_ACK;
 80093ae:	687a      	ldr	r2, [r7, #4]
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	212c      	movs	r1, #44	; 0x2c
 80093b4:	fb01 f303 	mul.w	r3, r1, r3
 80093b8:	4413      	add	r3, r2
 80093ba:	3361      	adds	r3, #97	; 0x61
 80093bc:	2203      	movs	r2, #3
 80093be:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	697a      	ldr	r2, [r7, #20]
 80093c6:	b2d2      	uxtb	r2, r2
 80093c8:	4611      	mov	r1, r2
 80093ca:	4618      	mov	r0, r3
 80093cc:	f008 fbbf 	bl	8011b4e <USB_HC_Halt>
 80093d0:	e34e      	b.n	8009a70 <HCD_HC_OUT_IRQHandler+0x792>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	697a      	ldr	r2, [r7, #20]
 80093d8:	b2d2      	uxtb	r2, r2
 80093da:	4611      	mov	r1, r2
 80093dc:	4618      	mov	r0, r3
 80093de:	f007 ff64 	bl	80112aa <USB_ReadChInterrupts>
 80093e2:	4603      	mov	r3, r0
 80093e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80093e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093ec:	d112      	bne.n	8009414 <HCD_HC_OUT_IRQHandler+0x136>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	015a      	lsls	r2, r3, #5
 80093f2:	69bb      	ldr	r3, [r7, #24]
 80093f4:	4413      	add	r3, r2
 80093f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093fa:	461a      	mov	r2, r3
 80093fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009400:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	697a      	ldr	r2, [r7, #20]
 8009408:	b2d2      	uxtb	r2, r2
 800940a:	4611      	mov	r1, r2
 800940c:	4618      	mov	r0, r3
 800940e:	f008 fb9e 	bl	8011b4e <USB_HC_Halt>
 8009412:	e32d      	b.n	8009a70 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	697a      	ldr	r2, [r7, #20]
 800941a:	b2d2      	uxtb	r2, r2
 800941c:	4611      	mov	r1, r2
 800941e:	4618      	mov	r0, r3
 8009420:	f007 ff43 	bl	80112aa <USB_ReadChInterrupts>
 8009424:	4603      	mov	r3, r0
 8009426:	f003 0301 	and.w	r3, r3, #1
 800942a:	2b01      	cmp	r3, #1
 800942c:	d142      	bne.n	80094b4 <HCD_HC_OUT_IRQHandler+0x1d6>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 800942e:	687a      	ldr	r2, [r7, #4]
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	212c      	movs	r1, #44	; 0x2c
 8009434:	fb01 f303 	mul.w	r3, r1, r3
 8009438:	4413      	add	r3, r2
 800943a:	335c      	adds	r3, #92	; 0x5c
 800943c:	2200      	movs	r2, #0
 800943e:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	697a      	ldr	r2, [r7, #20]
 8009446:	b2d2      	uxtb	r2, r2
 8009448:	4611      	mov	r1, r2
 800944a:	4618      	mov	r0, r3
 800944c:	f007 ff2d 	bl	80112aa <USB_ReadChInterrupts>
 8009450:	4603      	mov	r3, r0
 8009452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009456:	2b40      	cmp	r3, #64	; 0x40
 8009458:	d111      	bne.n	800947e <HCD_HC_OUT_IRQHandler+0x1a0>
    {
      hhcd->hc[ch_num].do_ping = 1U;
 800945a:	687a      	ldr	r2, [r7, #4]
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	212c      	movs	r1, #44	; 0x2c
 8009460:	fb01 f303 	mul.w	r3, r1, r3
 8009464:	4413      	add	r3, r2
 8009466:	333d      	adds	r3, #61	; 0x3d
 8009468:	2201      	movs	r2, #1
 800946a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	015a      	lsls	r2, r3, #5
 8009470:	69bb      	ldr	r3, [r7, #24]
 8009472:	4413      	add	r3, r2
 8009474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009478:	461a      	mov	r2, r3
 800947a:	2340      	movs	r3, #64	; 0x40
 800947c:	6093      	str	r3, [r2, #8]
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	015a      	lsls	r2, r3, #5
 8009482:	69bb      	ldr	r3, [r7, #24]
 8009484:	4413      	add	r3, r2
 8009486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800948a:	461a      	mov	r2, r3
 800948c:	2301      	movs	r3, #1
 800948e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8009490:	687a      	ldr	r2, [r7, #4]
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	212c      	movs	r1, #44	; 0x2c
 8009496:	fb01 f303 	mul.w	r3, r1, r3
 800949a:	4413      	add	r3, r2
 800949c:	3361      	adds	r3, #97	; 0x61
 800949e:	2201      	movs	r2, #1
 80094a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	697a      	ldr	r2, [r7, #20]
 80094a8:	b2d2      	uxtb	r2, r2
 80094aa:	4611      	mov	r1, r2
 80094ac:	4618      	mov	r0, r3
 80094ae:	f008 fb4e 	bl	8011b4e <USB_HC_Halt>
 80094b2:	e2dd      	b.n	8009a70 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	697a      	ldr	r2, [r7, #20]
 80094ba:	b2d2      	uxtb	r2, r2
 80094bc:	4611      	mov	r1, r2
 80094be:	4618      	mov	r0, r3
 80094c0:	f007 fef3 	bl	80112aa <USB_ReadChInterrupts>
 80094c4:	4603      	mov	r3, r0
 80094c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094ca:	2b40      	cmp	r3, #64	; 0x40
 80094cc:	d12c      	bne.n	8009528 <HCD_HC_OUT_IRQHandler+0x24a>
  {
    hhcd->hc[ch_num].state = HC_NYET;
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	212c      	movs	r1, #44	; 0x2c
 80094d4:	fb01 f303 	mul.w	r3, r1, r3
 80094d8:	4413      	add	r3, r2
 80094da:	3361      	adds	r3, #97	; 0x61
 80094dc:	2205      	movs	r2, #5
 80094de:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	212c      	movs	r1, #44	; 0x2c
 80094e6:	fb01 f303 	mul.w	r3, r1, r3
 80094ea:	4413      	add	r3, r2
 80094ec:	333d      	adds	r3, #61	; 0x3d
 80094ee:	2201      	movs	r2, #1
 80094f0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80094f2:	687a      	ldr	r2, [r7, #4]
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	212c      	movs	r1, #44	; 0x2c
 80094f8:	fb01 f303 	mul.w	r3, r1, r3
 80094fc:	4413      	add	r3, r2
 80094fe:	335c      	adds	r3, #92	; 0x5c
 8009500:	2200      	movs	r2, #0
 8009502:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	697a      	ldr	r2, [r7, #20]
 800950a:	b2d2      	uxtb	r2, r2
 800950c:	4611      	mov	r1, r2
 800950e:	4618      	mov	r0, r3
 8009510:	f008 fb1d 	bl	8011b4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	015a      	lsls	r2, r3, #5
 8009518:	69bb      	ldr	r3, [r7, #24]
 800951a:	4413      	add	r3, r2
 800951c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009520:	461a      	mov	r2, r3
 8009522:	2340      	movs	r3, #64	; 0x40
 8009524:	6093      	str	r3, [r2, #8]
 8009526:	e2a3      	b.n	8009a70 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	697a      	ldr	r2, [r7, #20]
 800952e:	b2d2      	uxtb	r2, r2
 8009530:	4611      	mov	r1, r2
 8009532:	4618      	mov	r0, r3
 8009534:	f007 feb9 	bl	80112aa <USB_ReadChInterrupts>
 8009538:	4603      	mov	r3, r0
 800953a:	f003 0308 	and.w	r3, r3, #8
 800953e:	2b08      	cmp	r3, #8
 8009540:	d11a      	bne.n	8009578 <HCD_HC_OUT_IRQHandler+0x29a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	015a      	lsls	r2, r3, #5
 8009546:	69bb      	ldr	r3, [r7, #24]
 8009548:	4413      	add	r3, r2
 800954a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800954e:	461a      	mov	r2, r3
 8009550:	2308      	movs	r3, #8
 8009552:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	212c      	movs	r1, #44	; 0x2c
 800955a:	fb01 f303 	mul.w	r3, r1, r3
 800955e:	4413      	add	r3, r2
 8009560:	3361      	adds	r3, #97	; 0x61
 8009562:	2206      	movs	r2, #6
 8009564:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	697a      	ldr	r2, [r7, #20]
 800956c:	b2d2      	uxtb	r2, r2
 800956e:	4611      	mov	r1, r2
 8009570:	4618      	mov	r0, r3
 8009572:	f008 faec 	bl	8011b4e <USB_HC_Halt>
 8009576:	e27b      	b.n	8009a70 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	697a      	ldr	r2, [r7, #20]
 800957e:	b2d2      	uxtb	r2, r2
 8009580:	4611      	mov	r1, r2
 8009582:	4618      	mov	r0, r3
 8009584:	f007 fe91 	bl	80112aa <USB_ReadChInterrupts>
 8009588:	4603      	mov	r3, r0
 800958a:	f003 0310 	and.w	r3, r3, #16
 800958e:	2b10      	cmp	r3, #16
 8009590:	d140      	bne.n	8009614 <HCD_HC_OUT_IRQHandler+0x336>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 8009592:	687a      	ldr	r2, [r7, #4]
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	212c      	movs	r1, #44	; 0x2c
 8009598:	fb01 f303 	mul.w	r3, r1, r3
 800959c:	4413      	add	r3, r2
 800959e:	335c      	adds	r3, #92	; 0x5c
 80095a0:	2200      	movs	r2, #0
 80095a2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80095a4:	687a      	ldr	r2, [r7, #4]
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	212c      	movs	r1, #44	; 0x2c
 80095aa:	fb01 f303 	mul.w	r3, r1, r3
 80095ae:	4413      	add	r3, r2
 80095b0:	3361      	adds	r3, #97	; 0x61
 80095b2:	2204      	movs	r2, #4
 80095b4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[ch_num].do_ping == 0U)
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	212c      	movs	r1, #44	; 0x2c
 80095bc:	fb01 f303 	mul.w	r3, r1, r3
 80095c0:	4413      	add	r3, r2
 80095c2:	333d      	adds	r3, #61	; 0x3d
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d112      	bne.n	80095f0 <HCD_HC_OUT_IRQHandler+0x312>
    {
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80095ca:	687a      	ldr	r2, [r7, #4]
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	212c      	movs	r1, #44	; 0x2c
 80095d0:	fb01 f303 	mul.w	r3, r1, r3
 80095d4:	4413      	add	r3, r2
 80095d6:	333c      	adds	r3, #60	; 0x3c
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d108      	bne.n	80095f0 <HCD_HC_OUT_IRQHandler+0x312>
      {
        hhcd->hc[ch_num].do_ping = 1U;
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	212c      	movs	r1, #44	; 0x2c
 80095e4:	fb01 f303 	mul.w	r3, r1, r3
 80095e8:	4413      	add	r3, r2
 80095ea:	333d      	adds	r3, #61	; 0x3d
 80095ec:	2201      	movs	r2, #1
 80095ee:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	697a      	ldr	r2, [r7, #20]
 80095f6:	b2d2      	uxtb	r2, r2
 80095f8:	4611      	mov	r1, r2
 80095fa:	4618      	mov	r0, r3
 80095fc:	f008 faa7 	bl	8011b4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	015a      	lsls	r2, r3, #5
 8009604:	69bb      	ldr	r3, [r7, #24]
 8009606:	4413      	add	r3, r2
 8009608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800960c:	461a      	mov	r2, r3
 800960e:	2310      	movs	r3, #16
 8009610:	6093      	str	r3, [r2, #8]
 8009612:	e22d      	b.n	8009a70 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	697a      	ldr	r2, [r7, #20]
 800961a:	b2d2      	uxtb	r2, r2
 800961c:	4611      	mov	r1, r2
 800961e:	4618      	mov	r0, r3
 8009620:	f007 fe43 	bl	80112aa <USB_ReadChInterrupts>
 8009624:	4603      	mov	r3, r0
 8009626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800962a:	2b80      	cmp	r3, #128	; 0x80
 800962c:	d164      	bne.n	80096f8 <HCD_HC_OUT_IRQHandler+0x41a>
  {
    if (hhcd->Init.dma_enable == 0U)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	691b      	ldr	r3, [r3, #16]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d111      	bne.n	800965a <HCD_HC_OUT_IRQHandler+0x37c>
    {
      hhcd->hc[ch_num].state = HC_XACTERR;
 8009636:	687a      	ldr	r2, [r7, #4]
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	212c      	movs	r1, #44	; 0x2c
 800963c:	fb01 f303 	mul.w	r3, r1, r3
 8009640:	4413      	add	r3, r2
 8009642:	3361      	adds	r3, #97	; 0x61
 8009644:	2207      	movs	r2, #7
 8009646:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	697a      	ldr	r2, [r7, #20]
 800964e:	b2d2      	uxtb	r2, r2
 8009650:	4611      	mov	r1, r2
 8009652:	4618      	mov	r0, r3
 8009654:	f008 fa7b 	bl	8011b4e <USB_HC_Halt>
 8009658:	e044      	b.n	80096e4 <HCD_HC_OUT_IRQHandler+0x406>
    }
    else
    {
      hhcd->hc[ch_num].ErrCnt++;
 800965a:	687a      	ldr	r2, [r7, #4]
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	212c      	movs	r1, #44	; 0x2c
 8009660:	fb01 f303 	mul.w	r3, r1, r3
 8009664:	4413      	add	r3, r2
 8009666:	335c      	adds	r3, #92	; 0x5c
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	1c5a      	adds	r2, r3, #1
 800966c:	6879      	ldr	r1, [r7, #4]
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	202c      	movs	r0, #44	; 0x2c
 8009672:	fb00 f303 	mul.w	r3, r0, r3
 8009676:	440b      	add	r3, r1
 8009678:	335c      	adds	r3, #92	; 0x5c
 800967a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800967c:	687a      	ldr	r2, [r7, #4]
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	212c      	movs	r1, #44	; 0x2c
 8009682:	fb01 f303 	mul.w	r3, r1, r3
 8009686:	4413      	add	r3, r2
 8009688:	335c      	adds	r3, #92	; 0x5c
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	2b02      	cmp	r3, #2
 800968e:	d920      	bls.n	80096d2 <HCD_HC_OUT_IRQHandler+0x3f4>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	212c      	movs	r1, #44	; 0x2c
 8009696:	fb01 f303 	mul.w	r3, r1, r3
 800969a:	4413      	add	r3, r2
 800969c:	335c      	adds	r3, #92	; 0x5c
 800969e:	2200      	movs	r2, #0
 80096a0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80096a2:	687a      	ldr	r2, [r7, #4]
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	212c      	movs	r1, #44	; 0x2c
 80096a8:	fb01 f303 	mul.w	r3, r1, r3
 80096ac:	4413      	add	r3, r2
 80096ae:	3360      	adds	r3, #96	; 0x60
 80096b0:	2204      	movs	r2, #4
 80096b2:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	b2d9      	uxtb	r1, r3
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	202c      	movs	r0, #44	; 0x2c
 80096be:	fb00 f303 	mul.w	r3, r0, r3
 80096c2:	4413      	add	r3, r2
 80096c4:	3360      	adds	r3, #96	; 0x60
 80096c6:	781b      	ldrb	r3, [r3, #0]
 80096c8:	461a      	mov	r2, r3
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f00d f8ee 	bl	80168ac <HAL_HCD_HC_NotifyURBChange_Callback>
 80096d0:	e008      	b.n	80096e4 <HCD_HC_OUT_IRQHandler+0x406>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80096d2:	687a      	ldr	r2, [r7, #4]
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	212c      	movs	r1, #44	; 0x2c
 80096d8:	fb01 f303 	mul.w	r3, r1, r3
 80096dc:	4413      	add	r3, r2
 80096de:	3360      	adds	r3, #96	; 0x60
 80096e0:	2202      	movs	r2, #2
 80096e2:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	015a      	lsls	r2, r3, #5
 80096e8:	69bb      	ldr	r3, [r7, #24]
 80096ea:	4413      	add	r3, r2
 80096ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096f0:	461a      	mov	r2, r3
 80096f2:	2380      	movs	r3, #128	; 0x80
 80096f4:	6093      	str	r3, [r2, #8]
 80096f6:	e1bb      	b.n	8009a70 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	697a      	ldr	r2, [r7, #20]
 80096fe:	b2d2      	uxtb	r2, r2
 8009700:	4611      	mov	r1, r2
 8009702:	4618      	mov	r0, r3
 8009704:	f007 fdd1 	bl	80112aa <USB_ReadChInterrupts>
 8009708:	4603      	mov	r3, r0
 800970a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800970e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009712:	d11b      	bne.n	800974c <HCD_HC_OUT_IRQHandler+0x46e>
  {
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8009714:	687a      	ldr	r2, [r7, #4]
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	212c      	movs	r1, #44	; 0x2c
 800971a:	fb01 f303 	mul.w	r3, r1, r3
 800971e:	4413      	add	r3, r2
 8009720:	3361      	adds	r3, #97	; 0x61
 8009722:	2209      	movs	r2, #9
 8009724:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	697a      	ldr	r2, [r7, #20]
 800972c:	b2d2      	uxtb	r2, r2
 800972e:	4611      	mov	r1, r2
 8009730:	4618      	mov	r0, r3
 8009732:	f008 fa0c 	bl	8011b4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	015a      	lsls	r2, r3, #5
 800973a:	69bb      	ldr	r3, [r7, #24]
 800973c:	4413      	add	r3, r2
 800973e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009742:	461a      	mov	r2, r3
 8009744:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009748:	6093      	str	r3, [r2, #8]
 800974a:	e191      	b.n	8009a70 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	697a      	ldr	r2, [r7, #20]
 8009752:	b2d2      	uxtb	r2, r2
 8009754:	4611      	mov	r1, r2
 8009756:	4618      	mov	r0, r3
 8009758:	f007 fda7 	bl	80112aa <USB_ReadChInterrupts>
 800975c:	4603      	mov	r3, r0
 800975e:	f003 0302 	and.w	r3, r3, #2
 8009762:	2b02      	cmp	r3, #2
 8009764:	f040 8184 	bne.w	8009a70 <HCD_HC_OUT_IRQHandler+0x792>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	015a      	lsls	r2, r3, #5
 800976c:	69bb      	ldr	r3, [r7, #24]
 800976e:	4413      	add	r3, r2
 8009770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009774:	461a      	mov	r2, r3
 8009776:	2302      	movs	r3, #2
 8009778:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800977a:	687a      	ldr	r2, [r7, #4]
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	212c      	movs	r1, #44	; 0x2c
 8009780:	fb01 f303 	mul.w	r3, r1, r3
 8009784:	4413      	add	r3, r2
 8009786:	3361      	adds	r3, #97	; 0x61
 8009788:	781b      	ldrb	r3, [r3, #0]
 800978a:	2b01      	cmp	r3, #1
 800978c:	f040 8087 	bne.w	800989e <HCD_HC_OUT_IRQHandler+0x5c0>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8009790:	687a      	ldr	r2, [r7, #4]
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	212c      	movs	r1, #44	; 0x2c
 8009796:	fb01 f303 	mul.w	r3, r1, r3
 800979a:	4413      	add	r3, r2
 800979c:	3361      	adds	r3, #97	; 0x61
 800979e:	2202      	movs	r2, #2
 80097a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80097a2:	687a      	ldr	r2, [r7, #4]
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	212c      	movs	r1, #44	; 0x2c
 80097a8:	fb01 f303 	mul.w	r3, r1, r3
 80097ac:	4413      	add	r3, r2
 80097ae:	3360      	adds	r3, #96	; 0x60
 80097b0:	2201      	movs	r2, #1
 80097b2:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	212c      	movs	r1, #44	; 0x2c
 80097ba:	fb01 f303 	mul.w	r3, r1, r3
 80097be:	4413      	add	r3, r2
 80097c0:	333f      	adds	r3, #63	; 0x3f
 80097c2:	781b      	ldrb	r3, [r3, #0]
 80097c4:	2b02      	cmp	r3, #2
 80097c6:	d00a      	beq.n	80097de <HCD_HC_OUT_IRQHandler+0x500>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	212c      	movs	r1, #44	; 0x2c
 80097ce:	fb01 f303 	mul.w	r3, r1, r3
 80097d2:	4413      	add	r3, r2
 80097d4:	333f      	adds	r3, #63	; 0x3f
 80097d6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80097d8:	2b03      	cmp	r3, #3
 80097da:	f040 8139 	bne.w	8009a50 <HCD_HC_OUT_IRQHandler+0x772>
      {
        if (hhcd->Init.dma_enable == 0U)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	691b      	ldr	r3, [r3, #16]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d113      	bne.n	800980e <HCD_HC_OUT_IRQHandler+0x530>
        {
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	212c      	movs	r1, #44	; 0x2c
 80097ec:	fb01 f303 	mul.w	r3, r1, r3
 80097f0:	4413      	add	r3, r2
 80097f2:	3355      	adds	r3, #85	; 0x55
 80097f4:	781b      	ldrb	r3, [r3, #0]
 80097f6:	f083 0301 	eor.w	r3, r3, #1
 80097fa:	b2d8      	uxtb	r0, r3
 80097fc:	687a      	ldr	r2, [r7, #4]
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	212c      	movs	r1, #44	; 0x2c
 8009802:	fb01 f303 	mul.w	r3, r1, r3
 8009806:	4413      	add	r3, r2
 8009808:	3355      	adds	r3, #85	; 0x55
 800980a:	4602      	mov	r2, r0
 800980c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	691b      	ldr	r3, [r3, #16]
 8009812:	2b01      	cmp	r3, #1
 8009814:	f040 811c 	bne.w	8009a50 <HCD_HC_OUT_IRQHandler+0x772>
 8009818:	687a      	ldr	r2, [r7, #4]
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	212c      	movs	r1, #44	; 0x2c
 800981e:	fb01 f303 	mul.w	r3, r1, r3
 8009822:	4413      	add	r3, r2
 8009824:	334c      	adds	r3, #76	; 0x4c
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	2b00      	cmp	r3, #0
 800982a:	f000 8111 	beq.w	8009a50 <HCD_HC_OUT_IRQHandler+0x772>
        {
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	212c      	movs	r1, #44	; 0x2c
 8009834:	fb01 f303 	mul.w	r3, r1, r3
 8009838:	4413      	add	r3, r2
 800983a:	334c      	adds	r3, #76	; 0x4c
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	6879      	ldr	r1, [r7, #4]
 8009840:	697a      	ldr	r2, [r7, #20]
 8009842:	202c      	movs	r0, #44	; 0x2c
 8009844:	fb00 f202 	mul.w	r2, r0, r2
 8009848:	440a      	add	r2, r1
 800984a:	3240      	adds	r2, #64	; 0x40
 800984c:	8812      	ldrh	r2, [r2, #0]
 800984e:	4413      	add	r3, r2
 8009850:	3b01      	subs	r3, #1
 8009852:	6879      	ldr	r1, [r7, #4]
 8009854:	697a      	ldr	r2, [r7, #20]
 8009856:	202c      	movs	r0, #44	; 0x2c
 8009858:	fb00 f202 	mul.w	r2, r0, r2
 800985c:	440a      	add	r2, r1
 800985e:	3240      	adds	r2, #64	; 0x40
 8009860:	8812      	ldrh	r2, [r2, #0]
 8009862:	fbb3 f3f2 	udiv	r3, r3, r2
 8009866:	60fb      	str	r3, [r7, #12]

          if ((num_packets & 1U) != 0U)
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	f003 0301 	and.w	r3, r3, #1
 800986e:	2b00      	cmp	r3, #0
 8009870:	f000 80ee 	beq.w	8009a50 <HCD_HC_OUT_IRQHandler+0x772>
          {
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8009874:	687a      	ldr	r2, [r7, #4]
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	212c      	movs	r1, #44	; 0x2c
 800987a:	fb01 f303 	mul.w	r3, r1, r3
 800987e:	4413      	add	r3, r2
 8009880:	3355      	adds	r3, #85	; 0x55
 8009882:	781b      	ldrb	r3, [r3, #0]
 8009884:	f083 0301 	eor.w	r3, r3, #1
 8009888:	b2d8      	uxtb	r0, r3
 800988a:	687a      	ldr	r2, [r7, #4]
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	212c      	movs	r1, #44	; 0x2c
 8009890:	fb01 f303 	mul.w	r3, r1, r3
 8009894:	4413      	add	r3, r2
 8009896:	3355      	adds	r3, #85	; 0x55
 8009898:	4602      	mov	r2, r0
 800989a:	701a      	strb	r2, [r3, #0]
 800989c:	e0d8      	b.n	8009a50 <HCD_HC_OUT_IRQHandler+0x772>
          }
        }
      }
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	212c      	movs	r1, #44	; 0x2c
 80098a4:	fb01 f303 	mul.w	r3, r1, r3
 80098a8:	4413      	add	r3, r2
 80098aa:	3361      	adds	r3, #97	; 0x61
 80098ac:	781b      	ldrb	r3, [r3, #0]
 80098ae:	2b03      	cmp	r3, #3
 80098b0:	d109      	bne.n	80098c6 <HCD_HC_OUT_IRQHandler+0x5e8>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80098b2:	687a      	ldr	r2, [r7, #4]
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	212c      	movs	r1, #44	; 0x2c
 80098b8:	fb01 f303 	mul.w	r3, r1, r3
 80098bc:	4413      	add	r3, r2
 80098be:	3361      	adds	r3, #97	; 0x61
 80098c0:	2202      	movs	r2, #2
 80098c2:	701a      	strb	r2, [r3, #0]
 80098c4:	e0c4      	b.n	8009a50 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80098c6:	687a      	ldr	r2, [r7, #4]
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	212c      	movs	r1, #44	; 0x2c
 80098cc:	fb01 f303 	mul.w	r3, r1, r3
 80098d0:	4413      	add	r3, r2
 80098d2:	3361      	adds	r3, #97	; 0x61
 80098d4:	781b      	ldrb	r3, [r3, #0]
 80098d6:	2b04      	cmp	r3, #4
 80098d8:	d112      	bne.n	8009900 <HCD_HC_OUT_IRQHandler+0x622>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80098da:	687a      	ldr	r2, [r7, #4]
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	212c      	movs	r1, #44	; 0x2c
 80098e0:	fb01 f303 	mul.w	r3, r1, r3
 80098e4:	4413      	add	r3, r2
 80098e6:	3361      	adds	r3, #97	; 0x61
 80098e8:	2202      	movs	r2, #2
 80098ea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	212c      	movs	r1, #44	; 0x2c
 80098f2:	fb01 f303 	mul.w	r3, r1, r3
 80098f6:	4413      	add	r3, r2
 80098f8:	3360      	adds	r3, #96	; 0x60
 80098fa:	2202      	movs	r2, #2
 80098fc:	701a      	strb	r2, [r3, #0]
 80098fe:	e0a7      	b.n	8009a50 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	212c      	movs	r1, #44	; 0x2c
 8009906:	fb01 f303 	mul.w	r3, r1, r3
 800990a:	4413      	add	r3, r2
 800990c:	3361      	adds	r3, #97	; 0x61
 800990e:	781b      	ldrb	r3, [r3, #0]
 8009910:	2b05      	cmp	r3, #5
 8009912:	d112      	bne.n	800993a <HCD_HC_OUT_IRQHandler+0x65c>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8009914:	687a      	ldr	r2, [r7, #4]
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	212c      	movs	r1, #44	; 0x2c
 800991a:	fb01 f303 	mul.w	r3, r1, r3
 800991e:	4413      	add	r3, r2
 8009920:	3361      	adds	r3, #97	; 0x61
 8009922:	2202      	movs	r2, #2
 8009924:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8009926:	687a      	ldr	r2, [r7, #4]
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	212c      	movs	r1, #44	; 0x2c
 800992c:	fb01 f303 	mul.w	r3, r1, r3
 8009930:	4413      	add	r3, r2
 8009932:	3360      	adds	r3, #96	; 0x60
 8009934:	2202      	movs	r2, #2
 8009936:	701a      	strb	r2, [r3, #0]
 8009938:	e08a      	b.n	8009a50 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800993a:	687a      	ldr	r2, [r7, #4]
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	212c      	movs	r1, #44	; 0x2c
 8009940:	fb01 f303 	mul.w	r3, r1, r3
 8009944:	4413      	add	r3, r2
 8009946:	3361      	adds	r3, #97	; 0x61
 8009948:	781b      	ldrb	r3, [r3, #0]
 800994a:	2b06      	cmp	r3, #6
 800994c:	d112      	bne.n	8009974 <HCD_HC_OUT_IRQHandler+0x696>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800994e:	687a      	ldr	r2, [r7, #4]
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	212c      	movs	r1, #44	; 0x2c
 8009954:	fb01 f303 	mul.w	r3, r1, r3
 8009958:	4413      	add	r3, r2
 800995a:	3361      	adds	r3, #97	; 0x61
 800995c:	2202      	movs	r2, #2
 800995e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	212c      	movs	r1, #44	; 0x2c
 8009966:	fb01 f303 	mul.w	r3, r1, r3
 800996a:	4413      	add	r3, r2
 800996c:	3360      	adds	r3, #96	; 0x60
 800996e:	2205      	movs	r2, #5
 8009970:	701a      	strb	r2, [r3, #0]
 8009972:	e06d      	b.n	8009a50 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8009974:	687a      	ldr	r2, [r7, #4]
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	212c      	movs	r1, #44	; 0x2c
 800997a:	fb01 f303 	mul.w	r3, r1, r3
 800997e:	4413      	add	r3, r2
 8009980:	3361      	adds	r3, #97	; 0x61
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	2b07      	cmp	r3, #7
 8009986:	d009      	beq.n	800999c <HCD_HC_OUT_IRQHandler+0x6be>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8009988:	687a      	ldr	r2, [r7, #4]
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	212c      	movs	r1, #44	; 0x2c
 800998e:	fb01 f303 	mul.w	r3, r1, r3
 8009992:	4413      	add	r3, r2
 8009994:	3361      	adds	r3, #97	; 0x61
 8009996:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8009998:	2b09      	cmp	r3, #9
 800999a:	d168      	bne.n	8009a6e <HCD_HC_OUT_IRQHandler+0x790>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800999c:	687a      	ldr	r2, [r7, #4]
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	212c      	movs	r1, #44	; 0x2c
 80099a2:	fb01 f303 	mul.w	r3, r1, r3
 80099a6:	4413      	add	r3, r2
 80099a8:	3361      	adds	r3, #97	; 0x61
 80099aa:	2202      	movs	r2, #2
 80099ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	212c      	movs	r1, #44	; 0x2c
 80099b4:	fb01 f303 	mul.w	r3, r1, r3
 80099b8:	4413      	add	r3, r2
 80099ba:	335c      	adds	r3, #92	; 0x5c
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	1c5a      	adds	r2, r3, #1
 80099c0:	6879      	ldr	r1, [r7, #4]
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	202c      	movs	r0, #44	; 0x2c
 80099c6:	fb00 f303 	mul.w	r3, r0, r3
 80099ca:	440b      	add	r3, r1
 80099cc:	335c      	adds	r3, #92	; 0x5c
 80099ce:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80099d0:	687a      	ldr	r2, [r7, #4]
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	212c      	movs	r1, #44	; 0x2c
 80099d6:	fb01 f303 	mul.w	r3, r1, r3
 80099da:	4413      	add	r3, r2
 80099dc:	335c      	adds	r3, #92	; 0x5c
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	2b02      	cmp	r3, #2
 80099e2:	d912      	bls.n	8009a0a <HCD_HC_OUT_IRQHandler+0x72c>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 80099e4:	687a      	ldr	r2, [r7, #4]
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	212c      	movs	r1, #44	; 0x2c
 80099ea:	fb01 f303 	mul.w	r3, r1, r3
 80099ee:	4413      	add	r3, r2
 80099f0:	335c      	adds	r3, #92	; 0x5c
 80099f2:	2200      	movs	r2, #0
 80099f4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	212c      	movs	r1, #44	; 0x2c
 80099fc:	fb01 f303 	mul.w	r3, r1, r3
 8009a00:	4413      	add	r3, r2
 8009a02:	3360      	adds	r3, #96	; 0x60
 8009a04:	2204      	movs	r2, #4
 8009a06:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8009a08:	e021      	b.n	8009a4e <HCD_HC_OUT_IRQHandler+0x770>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8009a0a:	687a      	ldr	r2, [r7, #4]
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	212c      	movs	r1, #44	; 0x2c
 8009a10:	fb01 f303 	mul.w	r3, r1, r3
 8009a14:	4413      	add	r3, r2
 8009a16:	3360      	adds	r3, #96	; 0x60
 8009a18:	2202      	movs	r2, #2
 8009a1a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	015a      	lsls	r2, r3, #5
 8009a20:	69bb      	ldr	r3, [r7, #24]
 8009a22:	4413      	add	r3, r2
 8009a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009a32:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009a3a:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	015a      	lsls	r2, r3, #5
 8009a40:	69bb      	ldr	r3, [r7, #24]
 8009a42:	4413      	add	r3, r2
 8009a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a48:	461a      	mov	r2, r3
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8009a4e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	b2d9      	uxtb	r1, r3
 8009a54:	687a      	ldr	r2, [r7, #4]
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	202c      	movs	r0, #44	; 0x2c
 8009a5a:	fb00 f303 	mul.w	r3, r0, r3
 8009a5e:	4413      	add	r3, r2
 8009a60:	3360      	adds	r3, #96	; 0x60
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	461a      	mov	r2, r3
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f00c ff20 	bl	80168ac <HAL_HCD_HC_NotifyURBChange_Callback>
 8009a6c:	e000      	b.n	8009a70 <HCD_HC_OUT_IRQHandler+0x792>
      return;
 8009a6e:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8009a70:	3720      	adds	r7, #32
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}

08009a76 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009a76:	b580      	push	{r7, lr}
 8009a78:	b08a      	sub	sp, #40	; 0x28
 8009a7a:	af00      	add	r7, sp, #0
 8009a7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a86:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	6a1b      	ldr	r3, [r3, #32]
 8009a8e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8009a90:	69fb      	ldr	r3, [r7, #28]
 8009a92:	f003 030f 	and.w	r3, r3, #15
 8009a96:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8009a98:	69fb      	ldr	r3, [r7, #28]
 8009a9a:	0c5b      	lsrs	r3, r3, #17
 8009a9c:	f003 030f 	and.w	r3, r3, #15
 8009aa0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009aa2:	69fb      	ldr	r3, [r7, #28]
 8009aa4:	091b      	lsrs	r3, r3, #4
 8009aa6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009aaa:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	2b02      	cmp	r3, #2
 8009ab0:	d004      	beq.n	8009abc <HCD_RXQLVL_IRQHandler+0x46>
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	2b05      	cmp	r3, #5
 8009ab6:	f000 80a9 	beq.w	8009c0c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8009aba:	e0aa      	b.n	8009c12 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	f000 80a6 	beq.w	8009c10 <HCD_RXQLVL_IRQHandler+0x19a>
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	69bb      	ldr	r3, [r7, #24]
 8009ac8:	212c      	movs	r1, #44	; 0x2c
 8009aca:	fb01 f303 	mul.w	r3, r1, r3
 8009ace:	4413      	add	r3, r2
 8009ad0:	3344      	adds	r3, #68	; 0x44
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	f000 809b 	beq.w	8009c10 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8009ada:	687a      	ldr	r2, [r7, #4]
 8009adc:	69bb      	ldr	r3, [r7, #24]
 8009ade:	212c      	movs	r1, #44	; 0x2c
 8009ae0:	fb01 f303 	mul.w	r3, r1, r3
 8009ae4:	4413      	add	r3, r2
 8009ae6:	3350      	adds	r3, #80	; 0x50
 8009ae8:	681a      	ldr	r2, [r3, #0]
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	441a      	add	r2, r3
 8009aee:	6879      	ldr	r1, [r7, #4]
 8009af0:	69bb      	ldr	r3, [r7, #24]
 8009af2:	202c      	movs	r0, #44	; 0x2c
 8009af4:	fb00 f303 	mul.w	r3, r0, r3
 8009af8:	440b      	add	r3, r1
 8009afa:	334c      	adds	r3, #76	; 0x4c
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	429a      	cmp	r2, r3
 8009b00:	d87a      	bhi.n	8009bf8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6818      	ldr	r0, [r3, #0]
 8009b06:	687a      	ldr	r2, [r7, #4]
 8009b08:	69bb      	ldr	r3, [r7, #24]
 8009b0a:	212c      	movs	r1, #44	; 0x2c
 8009b0c:	fb01 f303 	mul.w	r3, r1, r3
 8009b10:	4413      	add	r3, r2
 8009b12:	3344      	adds	r3, #68	; 0x44
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	693a      	ldr	r2, [r7, #16]
 8009b18:	b292      	uxth	r2, r2
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	f007 fb5a 	bl	80111d4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8009b20:	687a      	ldr	r2, [r7, #4]
 8009b22:	69bb      	ldr	r3, [r7, #24]
 8009b24:	212c      	movs	r1, #44	; 0x2c
 8009b26:	fb01 f303 	mul.w	r3, r1, r3
 8009b2a:	4413      	add	r3, r2
 8009b2c:	3344      	adds	r3, #68	; 0x44
 8009b2e:	681a      	ldr	r2, [r3, #0]
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	441a      	add	r2, r3
 8009b34:	6879      	ldr	r1, [r7, #4]
 8009b36:	69bb      	ldr	r3, [r7, #24]
 8009b38:	202c      	movs	r0, #44	; 0x2c
 8009b3a:	fb00 f303 	mul.w	r3, r0, r3
 8009b3e:	440b      	add	r3, r1
 8009b40:	3344      	adds	r3, #68	; 0x44
 8009b42:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	69bb      	ldr	r3, [r7, #24]
 8009b48:	212c      	movs	r1, #44	; 0x2c
 8009b4a:	fb01 f303 	mul.w	r3, r1, r3
 8009b4e:	4413      	add	r3, r2
 8009b50:	3350      	adds	r3, #80	; 0x50
 8009b52:	681a      	ldr	r2, [r3, #0]
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	441a      	add	r2, r3
 8009b58:	6879      	ldr	r1, [r7, #4]
 8009b5a:	69bb      	ldr	r3, [r7, #24]
 8009b5c:	202c      	movs	r0, #44	; 0x2c
 8009b5e:	fb00 f303 	mul.w	r3, r0, r3
 8009b62:	440b      	add	r3, r1
 8009b64:	3350      	adds	r3, #80	; 0x50
 8009b66:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8009b68:	69bb      	ldr	r3, [r7, #24]
 8009b6a:	015a      	lsls	r2, r3, #5
 8009b6c:	6a3b      	ldr	r3, [r7, #32]
 8009b6e:	4413      	add	r3, r2
 8009b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b74:	691b      	ldr	r3, [r3, #16]
 8009b76:	0cdb      	lsrs	r3, r3, #19
 8009b78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b7c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8009b7e:	687a      	ldr	r2, [r7, #4]
 8009b80:	69bb      	ldr	r3, [r7, #24]
 8009b82:	212c      	movs	r1, #44	; 0x2c
 8009b84:	fb01 f303 	mul.w	r3, r1, r3
 8009b88:	4413      	add	r3, r2
 8009b8a:	3340      	adds	r3, #64	; 0x40
 8009b8c:	881b      	ldrh	r3, [r3, #0]
 8009b8e:	461a      	mov	r2, r3
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d13c      	bne.n	8009c10 <HCD_RXQLVL_IRQHandler+0x19a>
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d039      	beq.n	8009c10 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009b9c:	69bb      	ldr	r3, [r7, #24]
 8009b9e:	015a      	lsls	r2, r3, #5
 8009ba0:	6a3b      	ldr	r3, [r7, #32]
 8009ba2:	4413      	add	r3, r2
 8009ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009bb2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009bba:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009bbc:	69bb      	ldr	r3, [r7, #24]
 8009bbe:	015a      	lsls	r2, r3, #5
 8009bc0:	6a3b      	ldr	r3, [r7, #32]
 8009bc2:	4413      	add	r3, r2
 8009bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bc8:	461a      	mov	r2, r3
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	69bb      	ldr	r3, [r7, #24]
 8009bd2:	212c      	movs	r1, #44	; 0x2c
 8009bd4:	fb01 f303 	mul.w	r3, r1, r3
 8009bd8:	4413      	add	r3, r2
 8009bda:	3354      	adds	r3, #84	; 0x54
 8009bdc:	781b      	ldrb	r3, [r3, #0]
 8009bde:	f083 0301 	eor.w	r3, r3, #1
 8009be2:	b2d8      	uxtb	r0, r3
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	69bb      	ldr	r3, [r7, #24]
 8009be8:	212c      	movs	r1, #44	; 0x2c
 8009bea:	fb01 f303 	mul.w	r3, r1, r3
 8009bee:	4413      	add	r3, r2
 8009bf0:	3354      	adds	r3, #84	; 0x54
 8009bf2:	4602      	mov	r2, r0
 8009bf4:	701a      	strb	r2, [r3, #0]
      break;
 8009bf6:	e00b      	b.n	8009c10 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8009bf8:	687a      	ldr	r2, [r7, #4]
 8009bfa:	69bb      	ldr	r3, [r7, #24]
 8009bfc:	212c      	movs	r1, #44	; 0x2c
 8009bfe:	fb01 f303 	mul.w	r3, r1, r3
 8009c02:	4413      	add	r3, r2
 8009c04:	3360      	adds	r3, #96	; 0x60
 8009c06:	2204      	movs	r2, #4
 8009c08:	701a      	strb	r2, [r3, #0]
      break;
 8009c0a:	e001      	b.n	8009c10 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8009c0c:	bf00      	nop
 8009c0e:	e000      	b.n	8009c12 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8009c10:	bf00      	nop
  }
}
 8009c12:	bf00      	nop
 8009c14:	3728      	adds	r7, #40	; 0x28
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}

08009c1a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009c1a:	b580      	push	{r7, lr}
 8009c1c:	b086      	sub	sp, #24
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009c46:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f003 0302 	and.w	r3, r3, #2
 8009c4e:	2b02      	cmp	r3, #2
 8009c50:	d10b      	bne.n	8009c6a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	f003 0301 	and.w	r3, r3, #1
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d102      	bne.n	8009c62 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f00c fe09 	bl	8016874 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	f043 0302 	orr.w	r3, r3, #2
 8009c68:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	f003 0308 	and.w	r3, r3, #8
 8009c70:	2b08      	cmp	r3, #8
 8009c72:	d132      	bne.n	8009cda <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	f043 0308 	orr.w	r3, r3, #8
 8009c7a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	f003 0304 	and.w	r3, r3, #4
 8009c82:	2b04      	cmp	r3, #4
 8009c84:	d126      	bne.n	8009cd4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	699b      	ldr	r3, [r3, #24]
 8009c8a:	2b02      	cmp	r3, #2
 8009c8c:	d113      	bne.n	8009cb6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8009c94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009c98:	d106      	bne.n	8009ca8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	2102      	movs	r1, #2
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f007 fc19 	bl	80114d8 <USB_InitFSLSPClkSel>
 8009ca6:	e011      	b.n	8009ccc <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	2101      	movs	r1, #1
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f007 fc12 	bl	80114d8 <USB_InitFSLSPClkSel>
 8009cb4:	e00a      	b.n	8009ccc <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	68db      	ldr	r3, [r3, #12]
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d106      	bne.n	8009ccc <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009cc4:	461a      	mov	r2, r3
 8009cc6:	f64e 2360 	movw	r3, #60000	; 0xea60
 8009cca:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f00c fdfb 	bl	80168c8 <HAL_HCD_PortEnabled_Callback>
 8009cd2:	e002      	b.n	8009cda <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f00c fe05 	bl	80168e4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	f003 0320 	and.w	r3, r3, #32
 8009ce0:	2b20      	cmp	r3, #32
 8009ce2:	d103      	bne.n	8009cec <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	f043 0320 	orr.w	r3, r3, #32
 8009cea:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	6013      	str	r3, [r2, #0]
}
 8009cf8:	bf00      	nop
 8009cfa:	3718      	adds	r7, #24
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}

08009d00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b082      	sub	sp, #8
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d101      	bne.n	8009d12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009d0e:	2301      	movs	r3, #1
 8009d10:	e07f      	b.n	8009e12 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d18:	b2db      	uxtb	r3, r3
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d106      	bne.n	8009d2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2200      	movs	r2, #0
 8009d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f7f9 fd10 	bl	800374c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2224      	movs	r2, #36	; 0x24
 8009d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	681a      	ldr	r2, [r3, #0]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f022 0201 	bic.w	r2, r2, #1
 8009d42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	685a      	ldr	r2, [r3, #4]
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009d50:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	689a      	ldr	r2, [r3, #8]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009d60:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	68db      	ldr	r3, [r3, #12]
 8009d66:	2b01      	cmp	r3, #1
 8009d68:	d107      	bne.n	8009d7a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	689a      	ldr	r2, [r3, #8]
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009d76:	609a      	str	r2, [r3, #8]
 8009d78:	e006      	b.n	8009d88 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	689a      	ldr	r2, [r3, #8]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009d86:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	68db      	ldr	r3, [r3, #12]
 8009d8c:	2b02      	cmp	r3, #2
 8009d8e:	d104      	bne.n	8009d9a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009d98:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	6859      	ldr	r1, [r3, #4]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681a      	ldr	r2, [r3, #0]
 8009da4:	4b1d      	ldr	r3, [pc, #116]	; (8009e1c <HAL_I2C_Init+0x11c>)
 8009da6:	430b      	orrs	r3, r1
 8009da8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	68da      	ldr	r2, [r3, #12]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009db8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	691a      	ldr	r2, [r3, #16]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	695b      	ldr	r3, [r3, #20]
 8009dc2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	699b      	ldr	r3, [r3, #24]
 8009dca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	430a      	orrs	r2, r1
 8009dd2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	69d9      	ldr	r1, [r3, #28]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6a1a      	ldr	r2, [r3, #32]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	430a      	orrs	r2, r1
 8009de2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	681a      	ldr	r2, [r3, #0]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f042 0201 	orr.w	r2, r2, #1
 8009df2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2200      	movs	r2, #0
 8009df8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2220      	movs	r2, #32
 8009dfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2200      	movs	r2, #0
 8009e06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009e10:	2300      	movs	r3, #0
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3708      	adds	r7, #8
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}
 8009e1a:	bf00      	nop
 8009e1c:	02008000 	.word	0x02008000

08009e20 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b082      	sub	sp, #8
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d101      	bne.n	8009e32 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	e021      	b.n	8009e76 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2224      	movs	r2, #36	; 0x24
 8009e36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	681a      	ldr	r2, [r3, #0]
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f022 0201 	bic.w	r2, r2, #1
 8009e48:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f7f9 fd26 	bl	800389c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2200      	movs	r2, #0
 8009e54:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2200      	movs	r2, #0
 8009e62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2200      	movs	r2, #0
 8009e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009e74:	2300      	movs	r3, #0
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3708      	adds	r7, #8
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}
	...

08009e80 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b088      	sub	sp, #32
 8009e84:	af02      	add	r7, sp, #8
 8009e86:	60f8      	str	r0, [r7, #12]
 8009e88:	4608      	mov	r0, r1
 8009e8a:	4611      	mov	r1, r2
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	4603      	mov	r3, r0
 8009e90:	817b      	strh	r3, [r7, #10]
 8009e92:	460b      	mov	r3, r1
 8009e94:	813b      	strh	r3, [r7, #8]
 8009e96:	4613      	mov	r3, r2
 8009e98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ea0:	b2db      	uxtb	r3, r3
 8009ea2:	2b20      	cmp	r3, #32
 8009ea4:	f040 80f9 	bne.w	800a09a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ea8:	6a3b      	ldr	r3, [r7, #32]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d002      	beq.n	8009eb4 <HAL_I2C_Mem_Write+0x34>
 8009eae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d105      	bne.n	8009ec0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009eba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	e0ed      	b.n	800a09c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009ec6:	2b01      	cmp	r3, #1
 8009ec8:	d101      	bne.n	8009ece <HAL_I2C_Mem_Write+0x4e>
 8009eca:	2302      	movs	r3, #2
 8009ecc:	e0e6      	b.n	800a09c <HAL_I2C_Mem_Write+0x21c>
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009ed6:	f7fa fcbf 	bl	8004858 <HAL_GetTick>
 8009eda:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	9300      	str	r3, [sp, #0]
 8009ee0:	2319      	movs	r3, #25
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009ee8:	68f8      	ldr	r0, [r7, #12]
 8009eea:	f000 fad1 	bl	800a490 <I2C_WaitOnFlagUntilTimeout>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d001      	beq.n	8009ef8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	e0d1      	b.n	800a09c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	2221      	movs	r2, #33	; 0x21
 8009efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2240      	movs	r2, #64	; 0x40
 8009f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	6a3a      	ldr	r2, [r7, #32]
 8009f12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009f18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009f20:	88f8      	ldrh	r0, [r7, #6]
 8009f22:	893a      	ldrh	r2, [r7, #8]
 8009f24:	8979      	ldrh	r1, [r7, #10]
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	9301      	str	r3, [sp, #4]
 8009f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f2c:	9300      	str	r3, [sp, #0]
 8009f2e:	4603      	mov	r3, r0
 8009f30:	68f8      	ldr	r0, [r7, #12]
 8009f32:	f000 f9e1 	bl	800a2f8 <I2C_RequestMemoryWrite>
 8009f36:	4603      	mov	r3, r0
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d005      	beq.n	8009f48 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009f44:	2301      	movs	r3, #1
 8009f46:	e0a9      	b.n	800a09c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f4c:	b29b      	uxth	r3, r3
 8009f4e:	2bff      	cmp	r3, #255	; 0xff
 8009f50:	d90e      	bls.n	8009f70 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	22ff      	movs	r2, #255	; 0xff
 8009f56:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f5c:	b2da      	uxtb	r2, r3
 8009f5e:	8979      	ldrh	r1, [r7, #10]
 8009f60:	2300      	movs	r3, #0
 8009f62:	9300      	str	r3, [sp, #0]
 8009f64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009f68:	68f8      	ldr	r0, [r7, #12]
 8009f6a:	f000 fc2d 	bl	800a7c8 <I2C_TransferConfig>
 8009f6e:	e00f      	b.n	8009f90 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f74:	b29a      	uxth	r2, r3
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f7e:	b2da      	uxtb	r2, r3
 8009f80:	8979      	ldrh	r1, [r7, #10]
 8009f82:	2300      	movs	r3, #0
 8009f84:	9300      	str	r3, [sp, #0]
 8009f86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009f8a:	68f8      	ldr	r0, [r7, #12]
 8009f8c:	f000 fc1c 	bl	800a7c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f90:	697a      	ldr	r2, [r7, #20]
 8009f92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f94:	68f8      	ldr	r0, [r7, #12]
 8009f96:	f000 fabb 	bl	800a510 <I2C_WaitOnTXISFlagUntilTimeout>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d001      	beq.n	8009fa4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	e07b      	b.n	800a09c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa8:	781a      	ldrb	r2, [r3, #0]
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb4:	1c5a      	adds	r2, r3, #1
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fbe:	b29b      	uxth	r3, r3
 8009fc0:	3b01      	subs	r3, #1
 8009fc2:	b29a      	uxth	r2, r3
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fcc:	3b01      	subs	r3, #1
 8009fce:	b29a      	uxth	r2, r3
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d034      	beq.n	800a048 <HAL_I2C_Mem_Write+0x1c8>
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d130      	bne.n	800a048 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	9300      	str	r3, [sp, #0]
 8009fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fec:	2200      	movs	r2, #0
 8009fee:	2180      	movs	r1, #128	; 0x80
 8009ff0:	68f8      	ldr	r0, [r7, #12]
 8009ff2:	f000 fa4d 	bl	800a490 <I2C_WaitOnFlagUntilTimeout>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d001      	beq.n	800a000 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	e04d      	b.n	800a09c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a004:	b29b      	uxth	r3, r3
 800a006:	2bff      	cmp	r3, #255	; 0xff
 800a008:	d90e      	bls.n	800a028 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	22ff      	movs	r2, #255	; 0xff
 800a00e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a014:	b2da      	uxtb	r2, r3
 800a016:	8979      	ldrh	r1, [r7, #10]
 800a018:	2300      	movs	r3, #0
 800a01a:	9300      	str	r3, [sp, #0]
 800a01c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a020:	68f8      	ldr	r0, [r7, #12]
 800a022:	f000 fbd1 	bl	800a7c8 <I2C_TransferConfig>
 800a026:	e00f      	b.n	800a048 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a02c:	b29a      	uxth	r2, r3
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a036:	b2da      	uxtb	r2, r3
 800a038:	8979      	ldrh	r1, [r7, #10]
 800a03a:	2300      	movs	r3, #0
 800a03c:	9300      	str	r3, [sp, #0]
 800a03e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a042:	68f8      	ldr	r0, [r7, #12]
 800a044:	f000 fbc0 	bl	800a7c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a04c:	b29b      	uxth	r3, r3
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d19e      	bne.n	8009f90 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a052:	697a      	ldr	r2, [r7, #20]
 800a054:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a056:	68f8      	ldr	r0, [r7, #12]
 800a058:	f000 fa9a 	bl	800a590 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a05c:	4603      	mov	r3, r0
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d001      	beq.n	800a066 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800a062:	2301      	movs	r3, #1
 800a064:	e01a      	b.n	800a09c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	2220      	movs	r2, #32
 800a06c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	6859      	ldr	r1, [r3, #4]
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	4b0a      	ldr	r3, [pc, #40]	; (800a0a4 <HAL_I2C_Mem_Write+0x224>)
 800a07a:	400b      	ands	r3, r1
 800a07c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2220      	movs	r2, #32
 800a082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2200      	movs	r2, #0
 800a08a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	2200      	movs	r2, #0
 800a092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a096:	2300      	movs	r3, #0
 800a098:	e000      	b.n	800a09c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800a09a:	2302      	movs	r3, #2
  }
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3718      	adds	r7, #24
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}
 800a0a4:	fe00e800 	.word	0xfe00e800

0800a0a8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b088      	sub	sp, #32
 800a0ac:	af02      	add	r7, sp, #8
 800a0ae:	60f8      	str	r0, [r7, #12]
 800a0b0:	4608      	mov	r0, r1
 800a0b2:	4611      	mov	r1, r2
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	817b      	strh	r3, [r7, #10]
 800a0ba:	460b      	mov	r3, r1
 800a0bc:	813b      	strh	r3, [r7, #8]
 800a0be:	4613      	mov	r3, r2
 800a0c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a0c8:	b2db      	uxtb	r3, r3
 800a0ca:	2b20      	cmp	r3, #32
 800a0cc:	f040 80fd 	bne.w	800a2ca <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0d0:	6a3b      	ldr	r3, [r7, #32]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d002      	beq.n	800a0dc <HAL_I2C_Mem_Read+0x34>
 800a0d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d105      	bne.n	800a0e8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0e2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	e0f1      	b.n	800a2cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a0ee:	2b01      	cmp	r3, #1
 800a0f0:	d101      	bne.n	800a0f6 <HAL_I2C_Mem_Read+0x4e>
 800a0f2:	2302      	movs	r3, #2
 800a0f4:	e0ea      	b.n	800a2cc <HAL_I2C_Mem_Read+0x224>
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a0fe:	f7fa fbab 	bl	8004858 <HAL_GetTick>
 800a102:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	9300      	str	r3, [sp, #0]
 800a108:	2319      	movs	r3, #25
 800a10a:	2201      	movs	r2, #1
 800a10c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a110:	68f8      	ldr	r0, [r7, #12]
 800a112:	f000 f9bd 	bl	800a490 <I2C_WaitOnFlagUntilTimeout>
 800a116:	4603      	mov	r3, r0
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d001      	beq.n	800a120 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800a11c:	2301      	movs	r3, #1
 800a11e:	e0d5      	b.n	800a2cc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	2222      	movs	r2, #34	; 0x22
 800a124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2240      	movs	r2, #64	; 0x40
 800a12c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2200      	movs	r2, #0
 800a134:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	6a3a      	ldr	r2, [r7, #32]
 800a13a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a140:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2200      	movs	r2, #0
 800a146:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a148:	88f8      	ldrh	r0, [r7, #6]
 800a14a:	893a      	ldrh	r2, [r7, #8]
 800a14c:	8979      	ldrh	r1, [r7, #10]
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	9301      	str	r3, [sp, #4]
 800a152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a154:	9300      	str	r3, [sp, #0]
 800a156:	4603      	mov	r3, r0
 800a158:	68f8      	ldr	r0, [r7, #12]
 800a15a:	f000 f921 	bl	800a3a0 <I2C_RequestMemoryRead>
 800a15e:	4603      	mov	r3, r0
 800a160:	2b00      	cmp	r3, #0
 800a162:	d005      	beq.n	800a170 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	2200      	movs	r2, #0
 800a168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a16c:	2301      	movs	r3, #1
 800a16e:	e0ad      	b.n	800a2cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a174:	b29b      	uxth	r3, r3
 800a176:	2bff      	cmp	r3, #255	; 0xff
 800a178:	d90e      	bls.n	800a198 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	22ff      	movs	r2, #255	; 0xff
 800a17e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a184:	b2da      	uxtb	r2, r3
 800a186:	8979      	ldrh	r1, [r7, #10]
 800a188:	4b52      	ldr	r3, [pc, #328]	; (800a2d4 <HAL_I2C_Mem_Read+0x22c>)
 800a18a:	9300      	str	r3, [sp, #0]
 800a18c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a190:	68f8      	ldr	r0, [r7, #12]
 800a192:	f000 fb19 	bl	800a7c8 <I2C_TransferConfig>
 800a196:	e00f      	b.n	800a1b8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a19c:	b29a      	uxth	r2, r3
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1a6:	b2da      	uxtb	r2, r3
 800a1a8:	8979      	ldrh	r1, [r7, #10]
 800a1aa:	4b4a      	ldr	r3, [pc, #296]	; (800a2d4 <HAL_I2C_Mem_Read+0x22c>)
 800a1ac:	9300      	str	r3, [sp, #0]
 800a1ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a1b2:	68f8      	ldr	r0, [r7, #12]
 800a1b4:	f000 fb08 	bl	800a7c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	9300      	str	r3, [sp, #0]
 800a1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1be:	2200      	movs	r2, #0
 800a1c0:	2104      	movs	r1, #4
 800a1c2:	68f8      	ldr	r0, [r7, #12]
 800a1c4:	f000 f964 	bl	800a490 <I2C_WaitOnFlagUntilTimeout>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d001      	beq.n	800a1d2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	e07c      	b.n	800a2cc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1dc:	b2d2      	uxtb	r2, r2
 800a1de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e4:	1c5a      	adds	r2, r3, #1
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1ee:	3b01      	subs	r3, #1
 800a1f0:	b29a      	uxth	r2, r3
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1fa:	b29b      	uxth	r3, r3
 800a1fc:	3b01      	subs	r3, #1
 800a1fe:	b29a      	uxth	r2, r3
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a208:	b29b      	uxth	r3, r3
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d034      	beq.n	800a278 <HAL_I2C_Mem_Read+0x1d0>
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a212:	2b00      	cmp	r3, #0
 800a214:	d130      	bne.n	800a278 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	9300      	str	r3, [sp, #0]
 800a21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a21c:	2200      	movs	r2, #0
 800a21e:	2180      	movs	r1, #128	; 0x80
 800a220:	68f8      	ldr	r0, [r7, #12]
 800a222:	f000 f935 	bl	800a490 <I2C_WaitOnFlagUntilTimeout>
 800a226:	4603      	mov	r3, r0
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d001      	beq.n	800a230 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800a22c:	2301      	movs	r3, #1
 800a22e:	e04d      	b.n	800a2cc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a234:	b29b      	uxth	r3, r3
 800a236:	2bff      	cmp	r3, #255	; 0xff
 800a238:	d90e      	bls.n	800a258 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	22ff      	movs	r2, #255	; 0xff
 800a23e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a244:	b2da      	uxtb	r2, r3
 800a246:	8979      	ldrh	r1, [r7, #10]
 800a248:	2300      	movs	r3, #0
 800a24a:	9300      	str	r3, [sp, #0]
 800a24c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a250:	68f8      	ldr	r0, [r7, #12]
 800a252:	f000 fab9 	bl	800a7c8 <I2C_TransferConfig>
 800a256:	e00f      	b.n	800a278 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a25c:	b29a      	uxth	r2, r3
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a266:	b2da      	uxtb	r2, r3
 800a268:	8979      	ldrh	r1, [r7, #10]
 800a26a:	2300      	movs	r3, #0
 800a26c:	9300      	str	r3, [sp, #0]
 800a26e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a272:	68f8      	ldr	r0, [r7, #12]
 800a274:	f000 faa8 	bl	800a7c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a27c:	b29b      	uxth	r3, r3
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d19a      	bne.n	800a1b8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a282:	697a      	ldr	r2, [r7, #20]
 800a284:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a286:	68f8      	ldr	r0, [r7, #12]
 800a288:	f000 f982 	bl	800a590 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a28c:	4603      	mov	r3, r0
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d001      	beq.n	800a296 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800a292:	2301      	movs	r3, #1
 800a294:	e01a      	b.n	800a2cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	2220      	movs	r2, #32
 800a29c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	6859      	ldr	r1, [r3, #4]
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681a      	ldr	r2, [r3, #0]
 800a2a8:	4b0b      	ldr	r3, [pc, #44]	; (800a2d8 <HAL_I2C_Mem_Read+0x230>)
 800a2aa:	400b      	ands	r3, r1
 800a2ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	2220      	movs	r2, #32
 800a2b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	e000      	b.n	800a2cc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800a2ca:	2302      	movs	r3, #2
  }
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3718      	adds	r7, #24
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}
 800a2d4:	80002400 	.word	0x80002400
 800a2d8:	fe00e800 	.word	0xfe00e800

0800a2dc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b083      	sub	sp, #12
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a2ea:	b2db      	uxtb	r3, r3
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	370c      	adds	r7, #12
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr

0800a2f8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b086      	sub	sp, #24
 800a2fc:	af02      	add	r7, sp, #8
 800a2fe:	60f8      	str	r0, [r7, #12]
 800a300:	4608      	mov	r0, r1
 800a302:	4611      	mov	r1, r2
 800a304:	461a      	mov	r2, r3
 800a306:	4603      	mov	r3, r0
 800a308:	817b      	strh	r3, [r7, #10]
 800a30a:	460b      	mov	r3, r1
 800a30c:	813b      	strh	r3, [r7, #8]
 800a30e:	4613      	mov	r3, r2
 800a310:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a312:	88fb      	ldrh	r3, [r7, #6]
 800a314:	b2da      	uxtb	r2, r3
 800a316:	8979      	ldrh	r1, [r7, #10]
 800a318:	4b20      	ldr	r3, [pc, #128]	; (800a39c <I2C_RequestMemoryWrite+0xa4>)
 800a31a:	9300      	str	r3, [sp, #0]
 800a31c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a320:	68f8      	ldr	r0, [r7, #12]
 800a322:	f000 fa51 	bl	800a7c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a326:	69fa      	ldr	r2, [r7, #28]
 800a328:	69b9      	ldr	r1, [r7, #24]
 800a32a:	68f8      	ldr	r0, [r7, #12]
 800a32c:	f000 f8f0 	bl	800a510 <I2C_WaitOnTXISFlagUntilTimeout>
 800a330:	4603      	mov	r3, r0
 800a332:	2b00      	cmp	r3, #0
 800a334:	d001      	beq.n	800a33a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800a336:	2301      	movs	r3, #1
 800a338:	e02c      	b.n	800a394 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a33a:	88fb      	ldrh	r3, [r7, #6]
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d105      	bne.n	800a34c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a340:	893b      	ldrh	r3, [r7, #8]
 800a342:	b2da      	uxtb	r2, r3
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	629a      	str	r2, [r3, #40]	; 0x28
 800a34a:	e015      	b.n	800a378 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a34c:	893b      	ldrh	r3, [r7, #8]
 800a34e:	0a1b      	lsrs	r3, r3, #8
 800a350:	b29b      	uxth	r3, r3
 800a352:	b2da      	uxtb	r2, r3
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a35a:	69fa      	ldr	r2, [r7, #28]
 800a35c:	69b9      	ldr	r1, [r7, #24]
 800a35e:	68f8      	ldr	r0, [r7, #12]
 800a360:	f000 f8d6 	bl	800a510 <I2C_WaitOnTXISFlagUntilTimeout>
 800a364:	4603      	mov	r3, r0
 800a366:	2b00      	cmp	r3, #0
 800a368:	d001      	beq.n	800a36e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800a36a:	2301      	movs	r3, #1
 800a36c:	e012      	b.n	800a394 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a36e:	893b      	ldrh	r3, [r7, #8]
 800a370:	b2da      	uxtb	r2, r3
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a378:	69fb      	ldr	r3, [r7, #28]
 800a37a:	9300      	str	r3, [sp, #0]
 800a37c:	69bb      	ldr	r3, [r7, #24]
 800a37e:	2200      	movs	r2, #0
 800a380:	2180      	movs	r1, #128	; 0x80
 800a382:	68f8      	ldr	r0, [r7, #12]
 800a384:	f000 f884 	bl	800a490 <I2C_WaitOnFlagUntilTimeout>
 800a388:	4603      	mov	r3, r0
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d001      	beq.n	800a392 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800a38e:	2301      	movs	r3, #1
 800a390:	e000      	b.n	800a394 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800a392:	2300      	movs	r3, #0
}
 800a394:	4618      	mov	r0, r3
 800a396:	3710      	adds	r7, #16
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}
 800a39c:	80002000 	.word	0x80002000

0800a3a0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b086      	sub	sp, #24
 800a3a4:	af02      	add	r7, sp, #8
 800a3a6:	60f8      	str	r0, [r7, #12]
 800a3a8:	4608      	mov	r0, r1
 800a3aa:	4611      	mov	r1, r2
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	817b      	strh	r3, [r7, #10]
 800a3b2:	460b      	mov	r3, r1
 800a3b4:	813b      	strh	r3, [r7, #8]
 800a3b6:	4613      	mov	r3, r2
 800a3b8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a3ba:	88fb      	ldrh	r3, [r7, #6]
 800a3bc:	b2da      	uxtb	r2, r3
 800a3be:	8979      	ldrh	r1, [r7, #10]
 800a3c0:	4b20      	ldr	r3, [pc, #128]	; (800a444 <I2C_RequestMemoryRead+0xa4>)
 800a3c2:	9300      	str	r3, [sp, #0]
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	68f8      	ldr	r0, [r7, #12]
 800a3c8:	f000 f9fe 	bl	800a7c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a3cc:	69fa      	ldr	r2, [r7, #28]
 800a3ce:	69b9      	ldr	r1, [r7, #24]
 800a3d0:	68f8      	ldr	r0, [r7, #12]
 800a3d2:	f000 f89d 	bl	800a510 <I2C_WaitOnTXISFlagUntilTimeout>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d001      	beq.n	800a3e0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800a3dc:	2301      	movs	r3, #1
 800a3de:	e02c      	b.n	800a43a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a3e0:	88fb      	ldrh	r3, [r7, #6]
 800a3e2:	2b01      	cmp	r3, #1
 800a3e4:	d105      	bne.n	800a3f2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a3e6:	893b      	ldrh	r3, [r7, #8]
 800a3e8:	b2da      	uxtb	r2, r3
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	629a      	str	r2, [r3, #40]	; 0x28
 800a3f0:	e015      	b.n	800a41e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a3f2:	893b      	ldrh	r3, [r7, #8]
 800a3f4:	0a1b      	lsrs	r3, r3, #8
 800a3f6:	b29b      	uxth	r3, r3
 800a3f8:	b2da      	uxtb	r2, r3
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a400:	69fa      	ldr	r2, [r7, #28]
 800a402:	69b9      	ldr	r1, [r7, #24]
 800a404:	68f8      	ldr	r0, [r7, #12]
 800a406:	f000 f883 	bl	800a510 <I2C_WaitOnTXISFlagUntilTimeout>
 800a40a:	4603      	mov	r3, r0
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d001      	beq.n	800a414 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800a410:	2301      	movs	r3, #1
 800a412:	e012      	b.n	800a43a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a414:	893b      	ldrh	r3, [r7, #8]
 800a416:	b2da      	uxtb	r2, r3
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a41e:	69fb      	ldr	r3, [r7, #28]
 800a420:	9300      	str	r3, [sp, #0]
 800a422:	69bb      	ldr	r3, [r7, #24]
 800a424:	2200      	movs	r2, #0
 800a426:	2140      	movs	r1, #64	; 0x40
 800a428:	68f8      	ldr	r0, [r7, #12]
 800a42a:	f000 f831 	bl	800a490 <I2C_WaitOnFlagUntilTimeout>
 800a42e:	4603      	mov	r3, r0
 800a430:	2b00      	cmp	r3, #0
 800a432:	d001      	beq.n	800a438 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800a434:	2301      	movs	r3, #1
 800a436:	e000      	b.n	800a43a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800a438:	2300      	movs	r3, #0
}
 800a43a:	4618      	mov	r0, r3
 800a43c:	3710      	adds	r7, #16
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}
 800a442:	bf00      	nop
 800a444:	80002000 	.word	0x80002000

0800a448 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a448:	b480      	push	{r7}
 800a44a:	b083      	sub	sp, #12
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	699b      	ldr	r3, [r3, #24]
 800a456:	f003 0302 	and.w	r3, r3, #2
 800a45a:	2b02      	cmp	r3, #2
 800a45c:	d103      	bne.n	800a466 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	2200      	movs	r2, #0
 800a464:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	699b      	ldr	r3, [r3, #24]
 800a46c:	f003 0301 	and.w	r3, r3, #1
 800a470:	2b01      	cmp	r3, #1
 800a472:	d007      	beq.n	800a484 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	699a      	ldr	r2, [r3, #24]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f042 0201 	orr.w	r2, r2, #1
 800a482:	619a      	str	r2, [r3, #24]
  }
}
 800a484:	bf00      	nop
 800a486:	370c      	adds	r7, #12
 800a488:	46bd      	mov	sp, r7
 800a48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48e:	4770      	bx	lr

0800a490 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b084      	sub	sp, #16
 800a494:	af00      	add	r7, sp, #0
 800a496:	60f8      	str	r0, [r7, #12]
 800a498:	60b9      	str	r1, [r7, #8]
 800a49a:	603b      	str	r3, [r7, #0]
 800a49c:	4613      	mov	r3, r2
 800a49e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a4a0:	e022      	b.n	800a4e8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4a8:	d01e      	beq.n	800a4e8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4aa:	f7fa f9d5 	bl	8004858 <HAL_GetTick>
 800a4ae:	4602      	mov	r2, r0
 800a4b0:	69bb      	ldr	r3, [r7, #24]
 800a4b2:	1ad3      	subs	r3, r2, r3
 800a4b4:	683a      	ldr	r2, [r7, #0]
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	d302      	bcc.n	800a4c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d113      	bne.n	800a4e8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4c4:	f043 0220 	orr.w	r2, r3, #32
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2220      	movs	r2, #32
 800a4d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	e00f      	b.n	800a508 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	699a      	ldr	r2, [r3, #24]
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	4013      	ands	r3, r2
 800a4f2:	68ba      	ldr	r2, [r7, #8]
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	bf0c      	ite	eq
 800a4f8:	2301      	moveq	r3, #1
 800a4fa:	2300      	movne	r3, #0
 800a4fc:	b2db      	uxtb	r3, r3
 800a4fe:	461a      	mov	r2, r3
 800a500:	79fb      	ldrb	r3, [r7, #7]
 800a502:	429a      	cmp	r2, r3
 800a504:	d0cd      	beq.n	800a4a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a506:	2300      	movs	r3, #0
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3710      	adds	r7, #16
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}

0800a510 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b084      	sub	sp, #16
 800a514:	af00      	add	r7, sp, #0
 800a516:	60f8      	str	r0, [r7, #12]
 800a518:	60b9      	str	r1, [r7, #8]
 800a51a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a51c:	e02c      	b.n	800a578 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	68b9      	ldr	r1, [r7, #8]
 800a522:	68f8      	ldr	r0, [r7, #12]
 800a524:	f000 f870 	bl	800a608 <I2C_IsErrorOccurred>
 800a528:	4603      	mov	r3, r0
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d001      	beq.n	800a532 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a52e:	2301      	movs	r3, #1
 800a530:	e02a      	b.n	800a588 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a538:	d01e      	beq.n	800a578 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a53a:	f7fa f98d 	bl	8004858 <HAL_GetTick>
 800a53e:	4602      	mov	r2, r0
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	1ad3      	subs	r3, r2, r3
 800a544:	68ba      	ldr	r2, [r7, #8]
 800a546:	429a      	cmp	r2, r3
 800a548:	d302      	bcc.n	800a550 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d113      	bne.n	800a578 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a554:	f043 0220 	orr.w	r2, r3, #32
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	2220      	movs	r2, #32
 800a560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2200      	movs	r2, #0
 800a568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2200      	movs	r2, #0
 800a570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a574:	2301      	movs	r3, #1
 800a576:	e007      	b.n	800a588 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	699b      	ldr	r3, [r3, #24]
 800a57e:	f003 0302 	and.w	r3, r3, #2
 800a582:	2b02      	cmp	r3, #2
 800a584:	d1cb      	bne.n	800a51e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a586:	2300      	movs	r3, #0
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3710      	adds	r7, #16
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}

0800a590 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b084      	sub	sp, #16
 800a594:	af00      	add	r7, sp, #0
 800a596:	60f8      	str	r0, [r7, #12]
 800a598:	60b9      	str	r1, [r7, #8]
 800a59a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a59c:	e028      	b.n	800a5f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a59e:	687a      	ldr	r2, [r7, #4]
 800a5a0:	68b9      	ldr	r1, [r7, #8]
 800a5a2:	68f8      	ldr	r0, [r7, #12]
 800a5a4:	f000 f830 	bl	800a608 <I2C_IsErrorOccurred>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d001      	beq.n	800a5b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	e026      	b.n	800a600 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5b2:	f7fa f951 	bl	8004858 <HAL_GetTick>
 800a5b6:	4602      	mov	r2, r0
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	1ad3      	subs	r3, r2, r3
 800a5bc:	68ba      	ldr	r2, [r7, #8]
 800a5be:	429a      	cmp	r2, r3
 800a5c0:	d302      	bcc.n	800a5c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d113      	bne.n	800a5f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5cc:	f043 0220 	orr.w	r2, r3, #32
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2220      	movs	r2, #32
 800a5d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	e007      	b.n	800a600 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	699b      	ldr	r3, [r3, #24]
 800a5f6:	f003 0320 	and.w	r3, r3, #32
 800a5fa:	2b20      	cmp	r3, #32
 800a5fc:	d1cf      	bne.n	800a59e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a5fe:	2300      	movs	r3, #0
}
 800a600:	4618      	mov	r0, r3
 800a602:	3710      	adds	r7, #16
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}

0800a608 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b08a      	sub	sp, #40	; 0x28
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	60f8      	str	r0, [r7, #12]
 800a610:	60b9      	str	r1, [r7, #8]
 800a612:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a614:	2300      	movs	r3, #0
 800a616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	699b      	ldr	r3, [r3, #24]
 800a620:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a622:	2300      	movs	r3, #0
 800a624:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a62a:	69bb      	ldr	r3, [r7, #24]
 800a62c:	f003 0310 	and.w	r3, r3, #16
 800a630:	2b00      	cmp	r3, #0
 800a632:	d068      	beq.n	800a706 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	2210      	movs	r2, #16
 800a63a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a63c:	e049      	b.n	800a6d2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a644:	d045      	beq.n	800a6d2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a646:	f7fa f907 	bl	8004858 <HAL_GetTick>
 800a64a:	4602      	mov	r2, r0
 800a64c:	69fb      	ldr	r3, [r7, #28]
 800a64e:	1ad3      	subs	r3, r2, r3
 800a650:	68ba      	ldr	r2, [r7, #8]
 800a652:	429a      	cmp	r2, r3
 800a654:	d302      	bcc.n	800a65c <I2C_IsErrorOccurred+0x54>
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d13a      	bne.n	800a6d2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	685b      	ldr	r3, [r3, #4]
 800a662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a666:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a66e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	699b      	ldr	r3, [r3, #24]
 800a676:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a67a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a67e:	d121      	bne.n	800a6c4 <I2C_IsErrorOccurred+0xbc>
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a686:	d01d      	beq.n	800a6c4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800a688:	7cfb      	ldrb	r3, [r7, #19]
 800a68a:	2b20      	cmp	r3, #32
 800a68c:	d01a      	beq.n	800a6c4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	685a      	ldr	r2, [r3, #4]
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a69c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a69e:	f7fa f8db 	bl	8004858 <HAL_GetTick>
 800a6a2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a6a4:	e00e      	b.n	800a6c4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a6a6:	f7fa f8d7 	bl	8004858 <HAL_GetTick>
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	69fb      	ldr	r3, [r7, #28]
 800a6ae:	1ad3      	subs	r3, r2, r3
 800a6b0:	2b19      	cmp	r3, #25
 800a6b2:	d907      	bls.n	800a6c4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800a6b4:	6a3b      	ldr	r3, [r7, #32]
 800a6b6:	f043 0320 	orr.w	r3, r3, #32
 800a6ba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800a6bc:	2301      	movs	r3, #1
 800a6be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800a6c2:	e006      	b.n	800a6d2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	699b      	ldr	r3, [r3, #24]
 800a6ca:	f003 0320 	and.w	r3, r3, #32
 800a6ce:	2b20      	cmp	r3, #32
 800a6d0:	d1e9      	bne.n	800a6a6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	699b      	ldr	r3, [r3, #24]
 800a6d8:	f003 0320 	and.w	r3, r3, #32
 800a6dc:	2b20      	cmp	r3, #32
 800a6de:	d003      	beq.n	800a6e8 <I2C_IsErrorOccurred+0xe0>
 800a6e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d0aa      	beq.n	800a63e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a6e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d103      	bne.n	800a6f8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	2220      	movs	r2, #32
 800a6f6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a6f8:	6a3b      	ldr	r3, [r7, #32]
 800a6fa:	f043 0304 	orr.w	r3, r3, #4
 800a6fe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a700:	2301      	movs	r3, #1
 800a702:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	699b      	ldr	r3, [r3, #24]
 800a70c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a70e:	69bb      	ldr	r3, [r7, #24]
 800a710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a714:	2b00      	cmp	r3, #0
 800a716:	d00b      	beq.n	800a730 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a718:	6a3b      	ldr	r3, [r7, #32]
 800a71a:	f043 0301 	orr.w	r3, r3, #1
 800a71e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a728:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a72a:	2301      	movs	r3, #1
 800a72c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a730:	69bb      	ldr	r3, [r7, #24]
 800a732:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a736:	2b00      	cmp	r3, #0
 800a738:	d00b      	beq.n	800a752 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a73a:	6a3b      	ldr	r3, [r7, #32]
 800a73c:	f043 0308 	orr.w	r3, r3, #8
 800a740:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a74a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a74c:	2301      	movs	r3, #1
 800a74e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a752:	69bb      	ldr	r3, [r7, #24]
 800a754:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d00b      	beq.n	800a774 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a75c:	6a3b      	ldr	r3, [r7, #32]
 800a75e:	f043 0302 	orr.w	r3, r3, #2
 800a762:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a76c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a76e:	2301      	movs	r3, #1
 800a770:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800a774:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d01c      	beq.n	800a7b6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a77c:	68f8      	ldr	r0, [r7, #12]
 800a77e:	f7ff fe63 	bl	800a448 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	6859      	ldr	r1, [r3, #4]
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	681a      	ldr	r2, [r3, #0]
 800a78c:	4b0d      	ldr	r3, [pc, #52]	; (800a7c4 <I2C_IsErrorOccurred+0x1bc>)
 800a78e:	400b      	ands	r3, r1
 800a790:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a796:	6a3b      	ldr	r3, [r7, #32]
 800a798:	431a      	orrs	r2, r3
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	2220      	movs	r2, #32
 800a7a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800a7b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3728      	adds	r7, #40	; 0x28
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}
 800a7c2:	bf00      	nop
 800a7c4:	fe00e800 	.word	0xfe00e800

0800a7c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b087      	sub	sp, #28
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	60f8      	str	r0, [r7, #12]
 800a7d0:	607b      	str	r3, [r7, #4]
 800a7d2:	460b      	mov	r3, r1
 800a7d4:	817b      	strh	r3, [r7, #10]
 800a7d6:	4613      	mov	r3, r2
 800a7d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a7da:	897b      	ldrh	r3, [r7, #10]
 800a7dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a7e0:	7a7b      	ldrb	r3, [r7, #9]
 800a7e2:	041b      	lsls	r3, r3, #16
 800a7e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a7e8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a7ee:	6a3b      	ldr	r3, [r7, #32]
 800a7f0:	4313      	orrs	r3, r2
 800a7f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a7f6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	685a      	ldr	r2, [r3, #4]
 800a7fe:	6a3b      	ldr	r3, [r7, #32]
 800a800:	0d5b      	lsrs	r3, r3, #21
 800a802:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a806:	4b08      	ldr	r3, [pc, #32]	; (800a828 <I2C_TransferConfig+0x60>)
 800a808:	430b      	orrs	r3, r1
 800a80a:	43db      	mvns	r3, r3
 800a80c:	ea02 0103 	and.w	r1, r2, r3
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	697a      	ldr	r2, [r7, #20]
 800a816:	430a      	orrs	r2, r1
 800a818:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a81a:	bf00      	nop
 800a81c:	371c      	adds	r7, #28
 800a81e:	46bd      	mov	sp, r7
 800a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a824:	4770      	bx	lr
 800a826:	bf00      	nop
 800a828:	03ff63ff 	.word	0x03ff63ff

0800a82c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b083      	sub	sp, #12
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a83c:	b2db      	uxtb	r3, r3
 800a83e:	2b20      	cmp	r3, #32
 800a840:	d138      	bne.n	800a8b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a848:	2b01      	cmp	r3, #1
 800a84a:	d101      	bne.n	800a850 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a84c:	2302      	movs	r3, #2
 800a84e:	e032      	b.n	800a8b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2201      	movs	r2, #1
 800a854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2224      	movs	r2, #36	; 0x24
 800a85c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	681a      	ldr	r2, [r3, #0]
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f022 0201 	bic.w	r2, r2, #1
 800a86e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	681a      	ldr	r2, [r3, #0]
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a87e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	6819      	ldr	r1, [r3, #0]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	683a      	ldr	r2, [r7, #0]
 800a88c:	430a      	orrs	r2, r1
 800a88e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	681a      	ldr	r2, [r3, #0]
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f042 0201 	orr.w	r2, r2, #1
 800a89e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2220      	movs	r2, #32
 800a8a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	e000      	b.n	800a8b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a8b4:	2302      	movs	r3, #2
  }
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	370c      	adds	r7, #12
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c0:	4770      	bx	lr

0800a8c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a8c2:	b480      	push	{r7}
 800a8c4:	b085      	sub	sp, #20
 800a8c6:	af00      	add	r7, sp, #0
 800a8c8:	6078      	str	r0, [r7, #4]
 800a8ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a8d2:	b2db      	uxtb	r3, r3
 800a8d4:	2b20      	cmp	r3, #32
 800a8d6:	d139      	bne.n	800a94c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a8de:	2b01      	cmp	r3, #1
 800a8e0:	d101      	bne.n	800a8e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a8e2:	2302      	movs	r3, #2
 800a8e4:	e033      	b.n	800a94e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2201      	movs	r2, #1
 800a8ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2224      	movs	r2, #36	; 0x24
 800a8f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	681a      	ldr	r2, [r3, #0]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f022 0201 	bic.w	r2, r2, #1
 800a904:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a914:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	021b      	lsls	r3, r3, #8
 800a91a:	68fa      	ldr	r2, [r7, #12]
 800a91c:	4313      	orrs	r3, r2
 800a91e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	68fa      	ldr	r2, [r7, #12]
 800a926:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	681a      	ldr	r2, [r3, #0]
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f042 0201 	orr.w	r2, r2, #1
 800a936:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2220      	movs	r2, #32
 800a93c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2200      	movs	r2, #0
 800a944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a948:	2300      	movs	r3, #0
 800a94a:	e000      	b.n	800a94e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a94c:	2302      	movs	r3, #2
  }
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3714      	adds	r7, #20
 800a952:	46bd      	mov	sp, r7
 800a954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a958:	4770      	bx	lr
	...

0800a95c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b084      	sub	sp, #16
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d101      	bne.n	800a96e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800a96a:	2301      	movs	r3, #1
 800a96c:	e0bf      	b.n	800aaee <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800a974:	b2db      	uxtb	r3, r3
 800a976:	2b00      	cmp	r3, #0
 800a978:	d106      	bne.n	800a988 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2200      	movs	r2, #0
 800a97e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f7f8 ffc6 	bl	8003914 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2202      	movs	r2, #2
 800a98c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	699a      	ldr	r2, [r3, #24]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800a99e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	6999      	ldr	r1, [r3, #24]
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	685a      	ldr	r2, [r3, #4]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	689b      	ldr	r3, [r3, #8]
 800a9ae:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a9b4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	691b      	ldr	r3, [r3, #16]
 800a9ba:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	430a      	orrs	r2, r1
 800a9c2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	6899      	ldr	r1, [r3, #8]
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681a      	ldr	r2, [r3, #0]
 800a9ce:	4b4a      	ldr	r3, [pc, #296]	; (800aaf8 <HAL_LTDC_Init+0x19c>)
 800a9d0:	400b      	ands	r3, r1
 800a9d2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	695b      	ldr	r3, [r3, #20]
 800a9d8:	041b      	lsls	r3, r3, #16
 800a9da:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	6899      	ldr	r1, [r3, #8]
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	699a      	ldr	r2, [r3, #24]
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	431a      	orrs	r2, r3
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	430a      	orrs	r2, r1
 800a9f0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	68d9      	ldr	r1, [r3, #12]
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681a      	ldr	r2, [r3, #0]
 800a9fc:	4b3e      	ldr	r3, [pc, #248]	; (800aaf8 <HAL_LTDC_Init+0x19c>)
 800a9fe:	400b      	ands	r3, r1
 800aa00:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	69db      	ldr	r3, [r3, #28]
 800aa06:	041b      	lsls	r3, r3, #16
 800aa08:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	68d9      	ldr	r1, [r3, #12]
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6a1a      	ldr	r2, [r3, #32]
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	431a      	orrs	r2, r3
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	430a      	orrs	r2, r1
 800aa1e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	6919      	ldr	r1, [r3, #16]
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681a      	ldr	r2, [r3, #0]
 800aa2a:	4b33      	ldr	r3, [pc, #204]	; (800aaf8 <HAL_LTDC_Init+0x19c>)
 800aa2c:	400b      	ands	r3, r1
 800aa2e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa34:	041b      	lsls	r3, r3, #16
 800aa36:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	6919      	ldr	r1, [r3, #16]
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	431a      	orrs	r2, r3
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	430a      	orrs	r2, r1
 800aa4c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	6959      	ldr	r1, [r3, #20]
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681a      	ldr	r2, [r3, #0]
 800aa58:	4b27      	ldr	r3, [pc, #156]	; (800aaf8 <HAL_LTDC_Init+0x19c>)
 800aa5a:	400b      	ands	r3, r1
 800aa5c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa62:	041b      	lsls	r3, r3, #16
 800aa64:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	6959      	ldr	r1, [r3, #20]
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	431a      	orrs	r2, r3
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	430a      	orrs	r2, r1
 800aa7a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800aa82:	021b      	lsls	r3, r3, #8
 800aa84:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800aa8c:	041b      	lsls	r3, r3, #16
 800aa8e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800aa9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800aaa6:	68ba      	ldr	r2, [r7, #8]
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	4313      	orrs	r3, r2
 800aaac:	687a      	ldr	r2, [r7, #4]
 800aaae:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800aab2:	431a      	orrs	r2, r3
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	430a      	orrs	r2, r1
 800aaba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f042 0206 	orr.w	r2, r2, #6
 800aaca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	699a      	ldr	r2, [r3, #24]
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f042 0201 	orr.w	r2, r2, #1
 800aada:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2200      	movs	r2, #0
 800aae0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2201      	movs	r2, #1
 800aae8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800aaec:	2300      	movs	r3, #0
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3710      	adds	r7, #16
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}
 800aaf6:	bf00      	nop
 800aaf8:	f000f800 	.word	0xf000f800

0800aafc <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b084      	sub	sp, #16
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab0a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab12:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f003 0304 	and.w	r3, r3, #4
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d023      	beq.n	800ab66 <HAL_LTDC_IRQHandler+0x6a>
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	f003 0304 	and.w	r3, r3, #4
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d01e      	beq.n	800ab66 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f022 0204 	bic.w	r2, r2, #4
 800ab36:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	2204      	movs	r2, #4
 800ab3e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ab46:	f043 0201 	orr.w	r2, r3, #1
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2204      	movs	r2, #4
 800ab54:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f000 f86f 	bl	800ac44 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	f003 0302 	and.w	r3, r3, #2
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d023      	beq.n	800abb8 <HAL_LTDC_IRQHandler+0xbc>
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	f003 0302 	and.w	r3, r3, #2
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d01e      	beq.n	800abb8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f022 0202 	bic.w	r2, r2, #2
 800ab88:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	2202      	movs	r2, #2
 800ab90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ab98:	f043 0202 	orr.w	r2, r3, #2
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2204      	movs	r2, #4
 800aba6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2200      	movs	r2, #0
 800abae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f000 f846 	bl	800ac44 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	f003 0301 	and.w	r3, r3, #1
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d01b      	beq.n	800abfa <HAL_LTDC_IRQHandler+0xfe>
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	f003 0301 	and.w	r3, r3, #1
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d016      	beq.n	800abfa <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f022 0201 	bic.w	r2, r2, #1
 800abda:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	2201      	movs	r2, #1
 800abe2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2201      	movs	r2, #1
 800abe8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2200      	movs	r2, #0
 800abf0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f000 f82f 	bl	800ac58 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	f003 0308 	and.w	r3, r3, #8
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d01b      	beq.n	800ac3c <HAL_LTDC_IRQHandler+0x140>
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	f003 0308 	and.w	r3, r3, #8
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d016      	beq.n	800ac3c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f022 0208 	bic.w	r2, r2, #8
 800ac1c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	2208      	movs	r2, #8
 800ac24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2201      	movs	r2, #1
 800ac2a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2200      	movs	r2, #0
 800ac32:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f000 f818 	bl	800ac6c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800ac3c:	bf00      	nop
 800ac3e:	3710      	adds	r7, #16
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}

0800ac44 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b083      	sub	sp, #12
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800ac4c:	bf00      	nop
 800ac4e:	370c      	adds	r7, #12
 800ac50:	46bd      	mov	sp, r7
 800ac52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac56:	4770      	bx	lr

0800ac58 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b083      	sub	sp, #12
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800ac60:	bf00      	nop
 800ac62:	370c      	adds	r7, #12
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr

0800ac6c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b083      	sub	sp, #12
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800ac74:	bf00      	nop
 800ac76:	370c      	adds	r7, #12
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr

0800ac80 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800ac80:	b5b0      	push	{r4, r5, r7, lr}
 800ac82:	b084      	sub	sp, #16
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	60f8      	str	r0, [r7, #12]
 800ac88:	60b9      	str	r1, [r7, #8]
 800ac8a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800ac92:	2b01      	cmp	r3, #1
 800ac94:	d101      	bne.n	800ac9a <HAL_LTDC_ConfigLayer+0x1a>
 800ac96:	2302      	movs	r3, #2
 800ac98:	e02c      	b.n	800acf4 <HAL_LTDC_ConfigLayer+0x74>
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	2201      	movs	r2, #1
 800ac9e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	2202      	movs	r2, #2
 800aca6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800acaa:	68fa      	ldr	r2, [r7, #12]
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2134      	movs	r1, #52	; 0x34
 800acb0:	fb01 f303 	mul.w	r3, r1, r3
 800acb4:	4413      	add	r3, r2
 800acb6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	4614      	mov	r4, r2
 800acbe:	461d      	mov	r5, r3
 800acc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800acc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800acc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800acc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800acc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800acca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800accc:	682b      	ldr	r3, [r5, #0]
 800acce:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	68b9      	ldr	r1, [r7, #8]
 800acd4:	68f8      	ldr	r0, [r7, #12]
 800acd6:	f000 f81f 	bl	800ad18 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	2201      	movs	r2, #1
 800ace0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	2201      	movs	r2, #1
 800ace6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	2200      	movs	r2, #0
 800acee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800acf2:	2300      	movs	r3, #0
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3710      	adds	r7, #16
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bdb0      	pop	{r4, r5, r7, pc}

0800acfc <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 800acfc:	b480      	push	{r7}
 800acfe:	b083      	sub	sp, #12
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800ad0a:	b2db      	uxtb	r3, r3
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	370c      	adds	r7, #12
 800ad10:	46bd      	mov	sp, r7
 800ad12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad16:	4770      	bx	lr

0800ad18 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b089      	sub	sp, #36	; 0x24
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	60f8      	str	r0, [r7, #12]
 800ad20:	60b9      	str	r1, [r7, #8]
 800ad22:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	685a      	ldr	r2, [r3, #4]
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	68db      	ldr	r3, [r3, #12]
 800ad2e:	0c1b      	lsrs	r3, r3, #16
 800ad30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ad34:	4413      	add	r3, r2
 800ad36:	041b      	lsls	r3, r3, #16
 800ad38:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	461a      	mov	r2, r3
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	01db      	lsls	r3, r3, #7
 800ad44:	4413      	add	r3, r2
 800ad46:	3384      	adds	r3, #132	; 0x84
 800ad48:	685b      	ldr	r3, [r3, #4]
 800ad4a:	68fa      	ldr	r2, [r7, #12]
 800ad4c:	6812      	ldr	r2, [r2, #0]
 800ad4e:	4611      	mov	r1, r2
 800ad50:	687a      	ldr	r2, [r7, #4]
 800ad52:	01d2      	lsls	r2, r2, #7
 800ad54:	440a      	add	r2, r1
 800ad56:	3284      	adds	r2, #132	; 0x84
 800ad58:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800ad5c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	68db      	ldr	r3, [r3, #12]
 800ad68:	0c1b      	lsrs	r3, r3, #16
 800ad6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ad6e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ad70:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	4619      	mov	r1, r3
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	01db      	lsls	r3, r3, #7
 800ad7c:	440b      	add	r3, r1
 800ad7e:	3384      	adds	r3, #132	; 0x84
 800ad80:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ad82:	69fb      	ldr	r3, [r7, #28]
 800ad84:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ad86:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	68da      	ldr	r2, [r3, #12]
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	68db      	ldr	r3, [r3, #12]
 800ad92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ad96:	4413      	add	r3, r2
 800ad98:	041b      	lsls	r3, r3, #16
 800ad9a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	461a      	mov	r2, r3
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	01db      	lsls	r3, r3, #7
 800ada6:	4413      	add	r3, r2
 800ada8:	3384      	adds	r3, #132	; 0x84
 800adaa:	689b      	ldr	r3, [r3, #8]
 800adac:	68fa      	ldr	r2, [r7, #12]
 800adae:	6812      	ldr	r2, [r2, #0]
 800adb0:	4611      	mov	r1, r2
 800adb2:	687a      	ldr	r2, [r7, #4]
 800adb4:	01d2      	lsls	r2, r2, #7
 800adb6:	440a      	add	r2, r1
 800adb8:	3284      	adds	r2, #132	; 0x84
 800adba:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800adbe:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	689a      	ldr	r2, [r3, #8]
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	68db      	ldr	r3, [r3, #12]
 800adca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800adce:	4413      	add	r3, r2
 800add0:	1c5a      	adds	r2, r3, #1
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	4619      	mov	r1, r3
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	01db      	lsls	r3, r3, #7
 800addc:	440b      	add	r3, r1
 800adde:	3384      	adds	r3, #132	; 0x84
 800ade0:	4619      	mov	r1, r3
 800ade2:	69fb      	ldr	r3, [r7, #28]
 800ade4:	4313      	orrs	r3, r2
 800ade6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	461a      	mov	r2, r3
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	01db      	lsls	r3, r3, #7
 800adf2:	4413      	add	r3, r2
 800adf4:	3384      	adds	r3, #132	; 0x84
 800adf6:	691b      	ldr	r3, [r3, #16]
 800adf8:	68fa      	ldr	r2, [r7, #12]
 800adfa:	6812      	ldr	r2, [r2, #0]
 800adfc:	4611      	mov	r1, r2
 800adfe:	687a      	ldr	r2, [r7, #4]
 800ae00:	01d2      	lsls	r2, r2, #7
 800ae02:	440a      	add	r2, r1
 800ae04:	3284      	adds	r2, #132	; 0x84
 800ae06:	f023 0307 	bic.w	r3, r3, #7
 800ae0a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	461a      	mov	r2, r3
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	01db      	lsls	r3, r3, #7
 800ae16:	4413      	add	r3, r2
 800ae18:	3384      	adds	r3, #132	; 0x84
 800ae1a:	461a      	mov	r2, r3
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	691b      	ldr	r3, [r3, #16]
 800ae20:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ae28:	021b      	lsls	r3, r3, #8
 800ae2a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ae32:	041b      	lsls	r3, r3, #16
 800ae34:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	699b      	ldr	r3, [r3, #24]
 800ae3a:	061b      	lsls	r3, r3, #24
 800ae3c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	461a      	mov	r2, r3
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	01db      	lsls	r3, r3, #7
 800ae48:	4413      	add	r3, r2
 800ae4a:	3384      	adds	r3, #132	; 0x84
 800ae4c:	699b      	ldr	r3, [r3, #24]
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	461a      	mov	r2, r3
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	01db      	lsls	r3, r3, #7
 800ae58:	4413      	add	r3, r2
 800ae5a:	3384      	adds	r3, #132	; 0x84
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	2300      	movs	r3, #0
 800ae60:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ae68:	461a      	mov	r2, r3
 800ae6a:	69fb      	ldr	r3, [r7, #28]
 800ae6c:	431a      	orrs	r2, r3
 800ae6e:	69bb      	ldr	r3, [r7, #24]
 800ae70:	431a      	orrs	r2, r3
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	4619      	mov	r1, r3
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	01db      	lsls	r3, r3, #7
 800ae7c:	440b      	add	r3, r1
 800ae7e:	3384      	adds	r3, #132	; 0x84
 800ae80:	4619      	mov	r1, r3
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	4313      	orrs	r3, r2
 800ae86:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	461a      	mov	r2, r3
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	01db      	lsls	r3, r3, #7
 800ae92:	4413      	add	r3, r2
 800ae94:	3384      	adds	r3, #132	; 0x84
 800ae96:	695b      	ldr	r3, [r3, #20]
 800ae98:	68fa      	ldr	r2, [r7, #12]
 800ae9a:	6812      	ldr	r2, [r2, #0]
 800ae9c:	4611      	mov	r1, r2
 800ae9e:	687a      	ldr	r2, [r7, #4]
 800aea0:	01d2      	lsls	r2, r2, #7
 800aea2:	440a      	add	r2, r1
 800aea4:	3284      	adds	r2, #132	; 0x84
 800aea6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800aeaa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	461a      	mov	r2, r3
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	01db      	lsls	r3, r3, #7
 800aeb6:	4413      	add	r3, r2
 800aeb8:	3384      	adds	r3, #132	; 0x84
 800aeba:	461a      	mov	r2, r3
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	695b      	ldr	r3, [r3, #20]
 800aec0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	461a      	mov	r2, r3
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	01db      	lsls	r3, r3, #7
 800aecc:	4413      	add	r3, r2
 800aece:	3384      	adds	r3, #132	; 0x84
 800aed0:	69da      	ldr	r2, [r3, #28]
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	4619      	mov	r1, r3
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	01db      	lsls	r3, r3, #7
 800aedc:	440b      	add	r3, r1
 800aede:	3384      	adds	r3, #132	; 0x84
 800aee0:	4619      	mov	r1, r3
 800aee2:	4b58      	ldr	r3, [pc, #352]	; (800b044 <LTDC_SetConfig+0x32c>)
 800aee4:	4013      	ands	r3, r2
 800aee6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	69da      	ldr	r2, [r3, #28]
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	6a1b      	ldr	r3, [r3, #32]
 800aef0:	68f9      	ldr	r1, [r7, #12]
 800aef2:	6809      	ldr	r1, [r1, #0]
 800aef4:	4608      	mov	r0, r1
 800aef6:	6879      	ldr	r1, [r7, #4]
 800aef8:	01c9      	lsls	r1, r1, #7
 800aefa:	4401      	add	r1, r0
 800aefc:	3184      	adds	r1, #132	; 0x84
 800aefe:	4313      	orrs	r3, r2
 800af00:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	461a      	mov	r2, r3
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	01db      	lsls	r3, r3, #7
 800af0c:	4413      	add	r3, r2
 800af0e:	3384      	adds	r3, #132	; 0x84
 800af10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	461a      	mov	r2, r3
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	01db      	lsls	r3, r3, #7
 800af1c:	4413      	add	r3, r2
 800af1e:	3384      	adds	r3, #132	; 0x84
 800af20:	461a      	mov	r2, r3
 800af22:	2300      	movs	r3, #0
 800af24:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	461a      	mov	r2, r3
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	01db      	lsls	r3, r3, #7
 800af30:	4413      	add	r3, r2
 800af32:	3384      	adds	r3, #132	; 0x84
 800af34:	461a      	mov	r2, r3
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af3a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	691b      	ldr	r3, [r3, #16]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d102      	bne.n	800af4a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800af44:	2304      	movs	r3, #4
 800af46:	61fb      	str	r3, [r7, #28]
 800af48:	e01b      	b.n	800af82 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	691b      	ldr	r3, [r3, #16]
 800af4e:	2b01      	cmp	r3, #1
 800af50:	d102      	bne.n	800af58 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800af52:	2303      	movs	r3, #3
 800af54:	61fb      	str	r3, [r7, #28]
 800af56:	e014      	b.n	800af82 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	691b      	ldr	r3, [r3, #16]
 800af5c:	2b04      	cmp	r3, #4
 800af5e:	d00b      	beq.n	800af78 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800af64:	2b02      	cmp	r3, #2
 800af66:	d007      	beq.n	800af78 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800af6c:	2b03      	cmp	r3, #3
 800af6e:	d003      	beq.n	800af78 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800af74:	2b07      	cmp	r3, #7
 800af76:	d102      	bne.n	800af7e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800af78:	2302      	movs	r3, #2
 800af7a:	61fb      	str	r3, [r7, #28]
 800af7c:	e001      	b.n	800af82 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800af7e:	2301      	movs	r3, #1
 800af80:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	461a      	mov	r2, r3
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	01db      	lsls	r3, r3, #7
 800af8c:	4413      	add	r3, r2
 800af8e:	3384      	adds	r3, #132	; 0x84
 800af90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af92:	68fa      	ldr	r2, [r7, #12]
 800af94:	6812      	ldr	r2, [r2, #0]
 800af96:	4611      	mov	r1, r2
 800af98:	687a      	ldr	r2, [r7, #4]
 800af9a:	01d2      	lsls	r2, r2, #7
 800af9c:	440a      	add	r2, r1
 800af9e:	3284      	adds	r2, #132	; 0x84
 800afa0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800afa4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afaa:	69fa      	ldr	r2, [r7, #28]
 800afac:	fb02 f303 	mul.w	r3, r2, r3
 800afb0:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	6859      	ldr	r1, [r3, #4]
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	1acb      	subs	r3, r1, r3
 800afbc:	69f9      	ldr	r1, [r7, #28]
 800afbe:	fb01 f303 	mul.w	r3, r1, r3
 800afc2:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800afc4:	68f9      	ldr	r1, [r7, #12]
 800afc6:	6809      	ldr	r1, [r1, #0]
 800afc8:	4608      	mov	r0, r1
 800afca:	6879      	ldr	r1, [r7, #4]
 800afcc:	01c9      	lsls	r1, r1, #7
 800afce:	4401      	add	r1, r0
 800afd0:	3184      	adds	r1, #132	; 0x84
 800afd2:	4313      	orrs	r3, r2
 800afd4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	461a      	mov	r2, r3
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	01db      	lsls	r3, r3, #7
 800afe0:	4413      	add	r3, r2
 800afe2:	3384      	adds	r3, #132	; 0x84
 800afe4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	4619      	mov	r1, r3
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	01db      	lsls	r3, r3, #7
 800aff0:	440b      	add	r3, r1
 800aff2:	3384      	adds	r3, #132	; 0x84
 800aff4:	4619      	mov	r1, r3
 800aff6:	4b14      	ldr	r3, [pc, #80]	; (800b048 <LTDC_SetConfig+0x330>)
 800aff8:	4013      	ands	r3, r2
 800affa:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	461a      	mov	r2, r3
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	01db      	lsls	r3, r3, #7
 800b006:	4413      	add	r3, r2
 800b008:	3384      	adds	r3, #132	; 0x84
 800b00a:	461a      	mov	r2, r3
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b010:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	461a      	mov	r2, r3
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	01db      	lsls	r3, r3, #7
 800b01c:	4413      	add	r3, r2
 800b01e:	3384      	adds	r3, #132	; 0x84
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	68fa      	ldr	r2, [r7, #12]
 800b024:	6812      	ldr	r2, [r2, #0]
 800b026:	4611      	mov	r1, r2
 800b028:	687a      	ldr	r2, [r7, #4]
 800b02a:	01d2      	lsls	r2, r2, #7
 800b02c:	440a      	add	r2, r1
 800b02e:	3284      	adds	r2, #132	; 0x84
 800b030:	f043 0301 	orr.w	r3, r3, #1
 800b034:	6013      	str	r3, [r2, #0]
}
 800b036:	bf00      	nop
 800b038:	3724      	adds	r7, #36	; 0x24
 800b03a:	46bd      	mov	sp, r7
 800b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b040:	4770      	bx	lr
 800b042:	bf00      	nop
 800b044:	fffff8f8 	.word	0xfffff8f8
 800b048:	fffff800 	.word	0xfffff800

0800b04c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800b04c:	b480      	push	{r7}
 800b04e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b050:	4b05      	ldr	r3, [pc, #20]	; (800b068 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	4a04      	ldr	r2, [pc, #16]	; (800b068 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b05a:	6013      	str	r3, [r2, #0]
}
 800b05c:	bf00      	nop
 800b05e:	46bd      	mov	sp, r7
 800b060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b064:	4770      	bx	lr
 800b066:	bf00      	nop
 800b068:	40007000 	.word	0x40007000

0800b06c <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b083      	sub	sp, #12
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	460b      	mov	r3, r1
 800b076:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800b078:	4b0c      	ldr	r3, [pc, #48]	; (800b0ac <HAL_PWR_EnterSLEEPMode+0x40>)
 800b07a:	691b      	ldr	r3, [r3, #16]
 800b07c:	4a0b      	ldr	r2, [pc, #44]	; (800b0ac <HAL_PWR_EnterSLEEPMode+0x40>)
 800b07e:	f023 0304 	bic.w	r3, r3, #4
 800b082:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800b084:	f3bf 8f4f 	dsb	sy
}
 800b088:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b08a:	f3bf 8f6f 	isb	sy
}
 800b08e:	bf00      	nop
  /* Ensure that all instructions done before entering SLEEP mode */
  __DSB();
  __ISB();

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800b090:	78fb      	ldrb	r3, [r7, #3]
 800b092:	2b01      	cmp	r3, #1
 800b094:	d101      	bne.n	800b09a <HAL_PWR_EnterSLEEPMode+0x2e>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 800b096:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 800b098:	e002      	b.n	800b0a0 <HAL_PWR_EnterSLEEPMode+0x34>
    __SEV();
 800b09a:	bf40      	sev
    __WFE();
 800b09c:	bf20      	wfe
    __WFE();
 800b09e:	bf20      	wfe
}
 800b0a0:	bf00      	nop
 800b0a2:	370c      	adds	r7, #12
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr
 800b0ac:	e000ed00 	.word	0xe000ed00

0800b0b0 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 800b0b0:	b480      	push	{r7}
 800b0b2:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 800b0b4:	4b05      	ldr	r3, [pc, #20]	; (800b0cc <HAL_PWR_EnableSleepOnExit+0x1c>)
 800b0b6:	691b      	ldr	r3, [r3, #16]
 800b0b8:	4a04      	ldr	r2, [pc, #16]	; (800b0cc <HAL_PWR_EnableSleepOnExit+0x1c>)
 800b0ba:	f043 0302 	orr.w	r3, r3, #2
 800b0be:	6113      	str	r3, [r2, #16]
}
 800b0c0:	bf00      	nop
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c8:	4770      	bx	lr
 800b0ca:	bf00      	nop
 800b0cc:	e000ed00 	.word	0xe000ed00

0800b0d0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b082      	sub	sp, #8
 800b0d4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800b0da:	4b23      	ldr	r3, [pc, #140]	; (800b168 <HAL_PWREx_EnableOverDrive+0x98>)
 800b0dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0de:	4a22      	ldr	r2, [pc, #136]	; (800b168 <HAL_PWREx_EnableOverDrive+0x98>)
 800b0e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b0e4:	6413      	str	r3, [r2, #64]	; 0x40
 800b0e6:	4b20      	ldr	r3, [pc, #128]	; (800b168 <HAL_PWREx_EnableOverDrive+0x98>)
 800b0e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b0ee:	603b      	str	r3, [r7, #0]
 800b0f0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800b0f2:	4b1e      	ldr	r3, [pc, #120]	; (800b16c <HAL_PWREx_EnableOverDrive+0x9c>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	4a1d      	ldr	r2, [pc, #116]	; (800b16c <HAL_PWREx_EnableOverDrive+0x9c>)
 800b0f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b0fc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b0fe:	f7f9 fbab 	bl	8004858 <HAL_GetTick>
 800b102:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b104:	e009      	b.n	800b11a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b106:	f7f9 fba7 	bl	8004858 <HAL_GetTick>
 800b10a:	4602      	mov	r2, r0
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	1ad3      	subs	r3, r2, r3
 800b110:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b114:	d901      	bls.n	800b11a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800b116:	2303      	movs	r3, #3
 800b118:	e022      	b.n	800b160 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b11a:	4b14      	ldr	r3, [pc, #80]	; (800b16c <HAL_PWREx_EnableOverDrive+0x9c>)
 800b11c:	685b      	ldr	r3, [r3, #4]
 800b11e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b122:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b126:	d1ee      	bne.n	800b106 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800b128:	4b10      	ldr	r3, [pc, #64]	; (800b16c <HAL_PWREx_EnableOverDrive+0x9c>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	4a0f      	ldr	r2, [pc, #60]	; (800b16c <HAL_PWREx_EnableOverDrive+0x9c>)
 800b12e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b132:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b134:	f7f9 fb90 	bl	8004858 <HAL_GetTick>
 800b138:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b13a:	e009      	b.n	800b150 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b13c:	f7f9 fb8c 	bl	8004858 <HAL_GetTick>
 800b140:	4602      	mov	r2, r0
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	1ad3      	subs	r3, r2, r3
 800b146:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b14a:	d901      	bls.n	800b150 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800b14c:	2303      	movs	r3, #3
 800b14e:	e007      	b.n	800b160 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b150:	4b06      	ldr	r3, [pc, #24]	; (800b16c <HAL_PWREx_EnableOverDrive+0x9c>)
 800b152:	685b      	ldr	r3, [r3, #4]
 800b154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b158:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b15c:	d1ee      	bne.n	800b13c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800b15e:	2300      	movs	r3, #0
}
 800b160:	4618      	mov	r0, r3
 800b162:	3708      	adds	r7, #8
 800b164:	46bd      	mov	sp, r7
 800b166:	bd80      	pop	{r7, pc}
 800b168:	40023800 	.word	0x40023800
 800b16c:	40007000 	.word	0x40007000

0800b170 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b086      	sub	sp, #24
 800b174:	af02      	add	r7, sp, #8
 800b176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800b178:	f7f9 fb6e 	bl	8004858 <HAL_GetTick>
 800b17c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d101      	bne.n	800b188 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800b184:	2301      	movs	r3, #1
 800b186:	e067      	b.n	800b258 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b18e:	b2db      	uxtb	r3, r3
 800b190:	2b00      	cmp	r3, #0
 800b192:	d10b      	bne.n	800b1ac <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2200      	movs	r2, #0
 800b198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f7f8 fc81 	bl	8003aa4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800b1a2:	f241 3188 	movw	r1, #5000	; 0x1388
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f000 f85e 	bl	800b268 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	689b      	ldr	r3, [r3, #8]
 800b1ba:	3b01      	subs	r3, #1
 800b1bc:	021a      	lsls	r2, r3, #8
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	430a      	orrs	r2, r1
 800b1c4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1ca:	9300      	str	r3, [sp, #0]
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	2120      	movs	r1, #32
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f000 f856 	bl	800b284 <QSPI_WaitFlagStateUntilTimeout>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800b1dc:	7afb      	ldrb	r3, [r7, #11]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d135      	bne.n	800b24e <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	681a      	ldr	r2, [r3, #0]
 800b1e8:	4b1d      	ldr	r3, [pc, #116]	; (800b260 <HAL_QSPI_Init+0xf0>)
 800b1ea:	4013      	ands	r3, r2
 800b1ec:	687a      	ldr	r2, [r7, #4]
 800b1ee:	6852      	ldr	r2, [r2, #4]
 800b1f0:	0611      	lsls	r1, r2, #24
 800b1f2:	687a      	ldr	r2, [r7, #4]
 800b1f4:	68d2      	ldr	r2, [r2, #12]
 800b1f6:	4311      	orrs	r1, r2
 800b1f8:	687a      	ldr	r2, [r7, #4]
 800b1fa:	69d2      	ldr	r2, [r2, #28]
 800b1fc:	4311      	orrs	r1, r2
 800b1fe:	687a      	ldr	r2, [r7, #4]
 800b200:	6a12      	ldr	r2, [r2, #32]
 800b202:	4311      	orrs	r1, r2
 800b204:	687a      	ldr	r2, [r7, #4]
 800b206:	6812      	ldr	r2, [r2, #0]
 800b208:	430b      	orrs	r3, r1
 800b20a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	685a      	ldr	r2, [r3, #4]
 800b212:	4b14      	ldr	r3, [pc, #80]	; (800b264 <HAL_QSPI_Init+0xf4>)
 800b214:	4013      	ands	r3, r2
 800b216:	687a      	ldr	r2, [r7, #4]
 800b218:	6912      	ldr	r2, [r2, #16]
 800b21a:	0411      	lsls	r1, r2, #16
 800b21c:	687a      	ldr	r2, [r7, #4]
 800b21e:	6952      	ldr	r2, [r2, #20]
 800b220:	4311      	orrs	r1, r2
 800b222:	687a      	ldr	r2, [r7, #4]
 800b224:	6992      	ldr	r2, [r2, #24]
 800b226:	4311      	orrs	r1, r2
 800b228:	687a      	ldr	r2, [r7, #4]
 800b22a:	6812      	ldr	r2, [r2, #0]
 800b22c:	430b      	orrs	r3, r1
 800b22e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	681a      	ldr	r2, [r3, #0]
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f042 0201 	orr.w	r2, r2, #1
 800b23e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2200      	movs	r2, #0
 800b244:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2201      	movs	r2, #1
 800b24a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2200      	movs	r2, #0
 800b252:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800b256:	7afb      	ldrb	r3, [r7, #11]
}
 800b258:	4618      	mov	r0, r3
 800b25a:	3710      	adds	r7, #16
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}
 800b260:	00ffff2f 	.word	0x00ffff2f
 800b264:	ffe0f8fe 	.word	0xffe0f8fe

0800b268 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800b268:	b480      	push	{r7}
 800b26a:	b083      	sub	sp, #12
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
 800b270:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	683a      	ldr	r2, [r7, #0]
 800b276:	649a      	str	r2, [r3, #72]	; 0x48
}
 800b278:	bf00      	nop
 800b27a:	370c      	adds	r7, #12
 800b27c:	46bd      	mov	sp, r7
 800b27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b282:	4770      	bx	lr

0800b284 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b084      	sub	sp, #16
 800b288:	af00      	add	r7, sp, #0
 800b28a:	60f8      	str	r0, [r7, #12]
 800b28c:	60b9      	str	r1, [r7, #8]
 800b28e:	603b      	str	r3, [r7, #0]
 800b290:	4613      	mov	r3, r2
 800b292:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800b294:	e01a      	b.n	800b2cc <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b296:	69bb      	ldr	r3, [r7, #24]
 800b298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b29c:	d016      	beq.n	800b2cc <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b29e:	f7f9 fadb 	bl	8004858 <HAL_GetTick>
 800b2a2:	4602      	mov	r2, r0
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	1ad3      	subs	r3, r2, r3
 800b2a8:	69ba      	ldr	r2, [r7, #24]
 800b2aa:	429a      	cmp	r2, r3
 800b2ac:	d302      	bcc.n	800b2b4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800b2ae:	69bb      	ldr	r3, [r7, #24]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d10b      	bne.n	800b2cc <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	2204      	movs	r2, #4
 800b2b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2c0:	f043 0201 	orr.w	r2, r3, #1
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	e00e      	b.n	800b2ea <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	689a      	ldr	r2, [r3, #8]
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	4013      	ands	r3, r2
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	bf14      	ite	ne
 800b2da:	2301      	movne	r3, #1
 800b2dc:	2300      	moveq	r3, #0
 800b2de:	b2db      	uxtb	r3, r3
 800b2e0:	461a      	mov	r2, r3
 800b2e2:	79fb      	ldrb	r3, [r7, #7]
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	d1d6      	bne.n	800b296 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b2e8:	2300      	movs	r3, #0
}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	3710      	adds	r7, #16
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}
	...

0800b2f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b086      	sub	sp, #24
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d101      	bne.n	800b30a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800b306:	2301      	movs	r3, #1
 800b308:	e291      	b.n	800b82e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f003 0301 	and.w	r3, r3, #1
 800b312:	2b00      	cmp	r3, #0
 800b314:	f000 8087 	beq.w	800b426 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b318:	4b96      	ldr	r3, [pc, #600]	; (800b574 <HAL_RCC_OscConfig+0x280>)
 800b31a:	689b      	ldr	r3, [r3, #8]
 800b31c:	f003 030c 	and.w	r3, r3, #12
 800b320:	2b04      	cmp	r3, #4
 800b322:	d00c      	beq.n	800b33e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b324:	4b93      	ldr	r3, [pc, #588]	; (800b574 <HAL_RCC_OscConfig+0x280>)
 800b326:	689b      	ldr	r3, [r3, #8]
 800b328:	f003 030c 	and.w	r3, r3, #12
 800b32c:	2b08      	cmp	r3, #8
 800b32e:	d112      	bne.n	800b356 <HAL_RCC_OscConfig+0x62>
 800b330:	4b90      	ldr	r3, [pc, #576]	; (800b574 <HAL_RCC_OscConfig+0x280>)
 800b332:	685b      	ldr	r3, [r3, #4]
 800b334:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b338:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b33c:	d10b      	bne.n	800b356 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b33e:	4b8d      	ldr	r3, [pc, #564]	; (800b574 <HAL_RCC_OscConfig+0x280>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b346:	2b00      	cmp	r3, #0
 800b348:	d06c      	beq.n	800b424 <HAL_RCC_OscConfig+0x130>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	685b      	ldr	r3, [r3, #4]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d168      	bne.n	800b424 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800b352:	2301      	movs	r3, #1
 800b354:	e26b      	b.n	800b82e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	685b      	ldr	r3, [r3, #4]
 800b35a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b35e:	d106      	bne.n	800b36e <HAL_RCC_OscConfig+0x7a>
 800b360:	4b84      	ldr	r3, [pc, #528]	; (800b574 <HAL_RCC_OscConfig+0x280>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	4a83      	ldr	r2, [pc, #524]	; (800b574 <HAL_RCC_OscConfig+0x280>)
 800b366:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b36a:	6013      	str	r3, [r2, #0]
 800b36c:	e02e      	b.n	800b3cc <HAL_RCC_OscConfig+0xd8>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	685b      	ldr	r3, [r3, #4]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d10c      	bne.n	800b390 <HAL_RCC_OscConfig+0x9c>
 800b376:	4b7f      	ldr	r3, [pc, #508]	; (800b574 <HAL_RCC_OscConfig+0x280>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	4a7e      	ldr	r2, [pc, #504]	; (800b574 <HAL_RCC_OscConfig+0x280>)
 800b37c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b380:	6013      	str	r3, [r2, #0]
 800b382:	4b7c      	ldr	r3, [pc, #496]	; (800b574 <HAL_RCC_OscConfig+0x280>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	4a7b      	ldr	r2, [pc, #492]	; (800b574 <HAL_RCC_OscConfig+0x280>)
 800b388:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b38c:	6013      	str	r3, [r2, #0]
 800b38e:	e01d      	b.n	800b3cc <HAL_RCC_OscConfig+0xd8>
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	685b      	ldr	r3, [r3, #4]
 800b394:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b398:	d10c      	bne.n	800b3b4 <HAL_RCC_OscConfig+0xc0>
 800b39a:	4b76      	ldr	r3, [pc, #472]	; (800b574 <HAL_RCC_OscConfig+0x280>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	4a75      	ldr	r2, [pc, #468]	; (800b574 <HAL_RCC_OscConfig+0x280>)
 800b3a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b3a4:	6013      	str	r3, [r2, #0]
 800b3a6:	4b73      	ldr	r3, [pc, #460]	; (800b574 <HAL_RCC_OscConfig+0x280>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	4a72      	ldr	r2, [pc, #456]	; (800b574 <HAL_RCC_OscConfig+0x280>)
 800b3ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b3b0:	6013      	str	r3, [r2, #0]
 800b3b2:	e00b      	b.n	800b3cc <HAL_RCC_OscConfig+0xd8>
 800b3b4:	4b6f      	ldr	r3, [pc, #444]	; (800b574 <HAL_RCC_OscConfig+0x280>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	4a6e      	ldr	r2, [pc, #440]	; (800b574 <HAL_RCC_OscConfig+0x280>)
 800b3ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b3be:	6013      	str	r3, [r2, #0]
 800b3c0:	4b6c      	ldr	r3, [pc, #432]	; (800b574 <HAL_RCC_OscConfig+0x280>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	4a6b      	ldr	r2, [pc, #428]	; (800b574 <HAL_RCC_OscConfig+0x280>)
 800b3c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b3ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d013      	beq.n	800b3fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3d4:	f7f9 fa40 	bl	8004858 <HAL_GetTick>
 800b3d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b3da:	e008      	b.n	800b3ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b3dc:	f7f9 fa3c 	bl	8004858 <HAL_GetTick>
 800b3e0:	4602      	mov	r2, r0
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	1ad3      	subs	r3, r2, r3
 800b3e6:	2b64      	cmp	r3, #100	; 0x64
 800b3e8:	d901      	bls.n	800b3ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b3ea:	2303      	movs	r3, #3
 800b3ec:	e21f      	b.n	800b82e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b3ee:	4b61      	ldr	r3, [pc, #388]	; (800b574 <HAL_RCC_OscConfig+0x280>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d0f0      	beq.n	800b3dc <HAL_RCC_OscConfig+0xe8>
 800b3fa:	e014      	b.n	800b426 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3fc:	f7f9 fa2c 	bl	8004858 <HAL_GetTick>
 800b400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b402:	e008      	b.n	800b416 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b404:	f7f9 fa28 	bl	8004858 <HAL_GetTick>
 800b408:	4602      	mov	r2, r0
 800b40a:	693b      	ldr	r3, [r7, #16]
 800b40c:	1ad3      	subs	r3, r2, r3
 800b40e:	2b64      	cmp	r3, #100	; 0x64
 800b410:	d901      	bls.n	800b416 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800b412:	2303      	movs	r3, #3
 800b414:	e20b      	b.n	800b82e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b416:	4b57      	ldr	r3, [pc, #348]	; (800b574 <HAL_RCC_OscConfig+0x280>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d1f0      	bne.n	800b404 <HAL_RCC_OscConfig+0x110>
 800b422:	e000      	b.n	800b426 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b424:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	f003 0302 	and.w	r3, r3, #2
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d069      	beq.n	800b506 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b432:	4b50      	ldr	r3, [pc, #320]	; (800b574 <HAL_RCC_OscConfig+0x280>)
 800b434:	689b      	ldr	r3, [r3, #8]
 800b436:	f003 030c 	and.w	r3, r3, #12
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d00b      	beq.n	800b456 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b43e:	4b4d      	ldr	r3, [pc, #308]	; (800b574 <HAL_RCC_OscConfig+0x280>)
 800b440:	689b      	ldr	r3, [r3, #8]
 800b442:	f003 030c 	and.w	r3, r3, #12
 800b446:	2b08      	cmp	r3, #8
 800b448:	d11c      	bne.n	800b484 <HAL_RCC_OscConfig+0x190>
 800b44a:	4b4a      	ldr	r3, [pc, #296]	; (800b574 <HAL_RCC_OscConfig+0x280>)
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b452:	2b00      	cmp	r3, #0
 800b454:	d116      	bne.n	800b484 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b456:	4b47      	ldr	r3, [pc, #284]	; (800b574 <HAL_RCC_OscConfig+0x280>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f003 0302 	and.w	r3, r3, #2
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d005      	beq.n	800b46e <HAL_RCC_OscConfig+0x17a>
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	68db      	ldr	r3, [r3, #12]
 800b466:	2b01      	cmp	r3, #1
 800b468:	d001      	beq.n	800b46e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800b46a:	2301      	movs	r3, #1
 800b46c:	e1df      	b.n	800b82e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b46e:	4b41      	ldr	r3, [pc, #260]	; (800b574 <HAL_RCC_OscConfig+0x280>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	691b      	ldr	r3, [r3, #16]
 800b47a:	00db      	lsls	r3, r3, #3
 800b47c:	493d      	ldr	r1, [pc, #244]	; (800b574 <HAL_RCC_OscConfig+0x280>)
 800b47e:	4313      	orrs	r3, r2
 800b480:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b482:	e040      	b.n	800b506 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	68db      	ldr	r3, [r3, #12]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d023      	beq.n	800b4d4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b48c:	4b39      	ldr	r3, [pc, #228]	; (800b574 <HAL_RCC_OscConfig+0x280>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	4a38      	ldr	r2, [pc, #224]	; (800b574 <HAL_RCC_OscConfig+0x280>)
 800b492:	f043 0301 	orr.w	r3, r3, #1
 800b496:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b498:	f7f9 f9de 	bl	8004858 <HAL_GetTick>
 800b49c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b49e:	e008      	b.n	800b4b2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b4a0:	f7f9 f9da 	bl	8004858 <HAL_GetTick>
 800b4a4:	4602      	mov	r2, r0
 800b4a6:	693b      	ldr	r3, [r7, #16]
 800b4a8:	1ad3      	subs	r3, r2, r3
 800b4aa:	2b02      	cmp	r3, #2
 800b4ac:	d901      	bls.n	800b4b2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800b4ae:	2303      	movs	r3, #3
 800b4b0:	e1bd      	b.n	800b82e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b4b2:	4b30      	ldr	r3, [pc, #192]	; (800b574 <HAL_RCC_OscConfig+0x280>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f003 0302 	and.w	r3, r3, #2
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d0f0      	beq.n	800b4a0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b4be:	4b2d      	ldr	r3, [pc, #180]	; (800b574 <HAL_RCC_OscConfig+0x280>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	691b      	ldr	r3, [r3, #16]
 800b4ca:	00db      	lsls	r3, r3, #3
 800b4cc:	4929      	ldr	r1, [pc, #164]	; (800b574 <HAL_RCC_OscConfig+0x280>)
 800b4ce:	4313      	orrs	r3, r2
 800b4d0:	600b      	str	r3, [r1, #0]
 800b4d2:	e018      	b.n	800b506 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b4d4:	4b27      	ldr	r3, [pc, #156]	; (800b574 <HAL_RCC_OscConfig+0x280>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	4a26      	ldr	r2, [pc, #152]	; (800b574 <HAL_RCC_OscConfig+0x280>)
 800b4da:	f023 0301 	bic.w	r3, r3, #1
 800b4de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4e0:	f7f9 f9ba 	bl	8004858 <HAL_GetTick>
 800b4e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b4e6:	e008      	b.n	800b4fa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b4e8:	f7f9 f9b6 	bl	8004858 <HAL_GetTick>
 800b4ec:	4602      	mov	r2, r0
 800b4ee:	693b      	ldr	r3, [r7, #16]
 800b4f0:	1ad3      	subs	r3, r2, r3
 800b4f2:	2b02      	cmp	r3, #2
 800b4f4:	d901      	bls.n	800b4fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800b4f6:	2303      	movs	r3, #3
 800b4f8:	e199      	b.n	800b82e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b4fa:	4b1e      	ldr	r3, [pc, #120]	; (800b574 <HAL_RCC_OscConfig+0x280>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f003 0302 	and.w	r3, r3, #2
 800b502:	2b00      	cmp	r3, #0
 800b504:	d1f0      	bne.n	800b4e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f003 0308 	and.w	r3, r3, #8
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d038      	beq.n	800b584 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	695b      	ldr	r3, [r3, #20]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d019      	beq.n	800b54e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b51a:	4b16      	ldr	r3, [pc, #88]	; (800b574 <HAL_RCC_OscConfig+0x280>)
 800b51c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b51e:	4a15      	ldr	r2, [pc, #84]	; (800b574 <HAL_RCC_OscConfig+0x280>)
 800b520:	f043 0301 	orr.w	r3, r3, #1
 800b524:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b526:	f7f9 f997 	bl	8004858 <HAL_GetTick>
 800b52a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b52c:	e008      	b.n	800b540 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b52e:	f7f9 f993 	bl	8004858 <HAL_GetTick>
 800b532:	4602      	mov	r2, r0
 800b534:	693b      	ldr	r3, [r7, #16]
 800b536:	1ad3      	subs	r3, r2, r3
 800b538:	2b02      	cmp	r3, #2
 800b53a:	d901      	bls.n	800b540 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800b53c:	2303      	movs	r3, #3
 800b53e:	e176      	b.n	800b82e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b540:	4b0c      	ldr	r3, [pc, #48]	; (800b574 <HAL_RCC_OscConfig+0x280>)
 800b542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b544:	f003 0302 	and.w	r3, r3, #2
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d0f0      	beq.n	800b52e <HAL_RCC_OscConfig+0x23a>
 800b54c:	e01a      	b.n	800b584 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b54e:	4b09      	ldr	r3, [pc, #36]	; (800b574 <HAL_RCC_OscConfig+0x280>)
 800b550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b552:	4a08      	ldr	r2, [pc, #32]	; (800b574 <HAL_RCC_OscConfig+0x280>)
 800b554:	f023 0301 	bic.w	r3, r3, #1
 800b558:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b55a:	f7f9 f97d 	bl	8004858 <HAL_GetTick>
 800b55e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b560:	e00a      	b.n	800b578 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b562:	f7f9 f979 	bl	8004858 <HAL_GetTick>
 800b566:	4602      	mov	r2, r0
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	1ad3      	subs	r3, r2, r3
 800b56c:	2b02      	cmp	r3, #2
 800b56e:	d903      	bls.n	800b578 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800b570:	2303      	movs	r3, #3
 800b572:	e15c      	b.n	800b82e <HAL_RCC_OscConfig+0x53a>
 800b574:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b578:	4b91      	ldr	r3, [pc, #580]	; (800b7c0 <HAL_RCC_OscConfig+0x4cc>)
 800b57a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b57c:	f003 0302 	and.w	r3, r3, #2
 800b580:	2b00      	cmp	r3, #0
 800b582:	d1ee      	bne.n	800b562 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	f003 0304 	and.w	r3, r3, #4
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	f000 80a4 	beq.w	800b6da <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b592:	4b8b      	ldr	r3, [pc, #556]	; (800b7c0 <HAL_RCC_OscConfig+0x4cc>)
 800b594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d10d      	bne.n	800b5ba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800b59e:	4b88      	ldr	r3, [pc, #544]	; (800b7c0 <HAL_RCC_OscConfig+0x4cc>)
 800b5a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5a2:	4a87      	ldr	r2, [pc, #540]	; (800b7c0 <HAL_RCC_OscConfig+0x4cc>)
 800b5a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5a8:	6413      	str	r3, [r2, #64]	; 0x40
 800b5aa:	4b85      	ldr	r3, [pc, #532]	; (800b7c0 <HAL_RCC_OscConfig+0x4cc>)
 800b5ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b5b2:	60bb      	str	r3, [r7, #8]
 800b5b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b5ba:	4b82      	ldr	r3, [pc, #520]	; (800b7c4 <HAL_RCC_OscConfig+0x4d0>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d118      	bne.n	800b5f8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800b5c6:	4b7f      	ldr	r3, [pc, #508]	; (800b7c4 <HAL_RCC_OscConfig+0x4d0>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	4a7e      	ldr	r2, [pc, #504]	; (800b7c4 <HAL_RCC_OscConfig+0x4d0>)
 800b5cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b5d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b5d2:	f7f9 f941 	bl	8004858 <HAL_GetTick>
 800b5d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b5d8:	e008      	b.n	800b5ec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b5da:	f7f9 f93d 	bl	8004858 <HAL_GetTick>
 800b5de:	4602      	mov	r2, r0
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	1ad3      	subs	r3, r2, r3
 800b5e4:	2b64      	cmp	r3, #100	; 0x64
 800b5e6:	d901      	bls.n	800b5ec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800b5e8:	2303      	movs	r3, #3
 800b5ea:	e120      	b.n	800b82e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b5ec:	4b75      	ldr	r3, [pc, #468]	; (800b7c4 <HAL_RCC_OscConfig+0x4d0>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d0f0      	beq.n	800b5da <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	689b      	ldr	r3, [r3, #8]
 800b5fc:	2b01      	cmp	r3, #1
 800b5fe:	d106      	bne.n	800b60e <HAL_RCC_OscConfig+0x31a>
 800b600:	4b6f      	ldr	r3, [pc, #444]	; (800b7c0 <HAL_RCC_OscConfig+0x4cc>)
 800b602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b604:	4a6e      	ldr	r2, [pc, #440]	; (800b7c0 <HAL_RCC_OscConfig+0x4cc>)
 800b606:	f043 0301 	orr.w	r3, r3, #1
 800b60a:	6713      	str	r3, [r2, #112]	; 0x70
 800b60c:	e02d      	b.n	800b66a <HAL_RCC_OscConfig+0x376>
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	689b      	ldr	r3, [r3, #8]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d10c      	bne.n	800b630 <HAL_RCC_OscConfig+0x33c>
 800b616:	4b6a      	ldr	r3, [pc, #424]	; (800b7c0 <HAL_RCC_OscConfig+0x4cc>)
 800b618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b61a:	4a69      	ldr	r2, [pc, #420]	; (800b7c0 <HAL_RCC_OscConfig+0x4cc>)
 800b61c:	f023 0301 	bic.w	r3, r3, #1
 800b620:	6713      	str	r3, [r2, #112]	; 0x70
 800b622:	4b67      	ldr	r3, [pc, #412]	; (800b7c0 <HAL_RCC_OscConfig+0x4cc>)
 800b624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b626:	4a66      	ldr	r2, [pc, #408]	; (800b7c0 <HAL_RCC_OscConfig+0x4cc>)
 800b628:	f023 0304 	bic.w	r3, r3, #4
 800b62c:	6713      	str	r3, [r2, #112]	; 0x70
 800b62e:	e01c      	b.n	800b66a <HAL_RCC_OscConfig+0x376>
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	689b      	ldr	r3, [r3, #8]
 800b634:	2b05      	cmp	r3, #5
 800b636:	d10c      	bne.n	800b652 <HAL_RCC_OscConfig+0x35e>
 800b638:	4b61      	ldr	r3, [pc, #388]	; (800b7c0 <HAL_RCC_OscConfig+0x4cc>)
 800b63a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b63c:	4a60      	ldr	r2, [pc, #384]	; (800b7c0 <HAL_RCC_OscConfig+0x4cc>)
 800b63e:	f043 0304 	orr.w	r3, r3, #4
 800b642:	6713      	str	r3, [r2, #112]	; 0x70
 800b644:	4b5e      	ldr	r3, [pc, #376]	; (800b7c0 <HAL_RCC_OscConfig+0x4cc>)
 800b646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b648:	4a5d      	ldr	r2, [pc, #372]	; (800b7c0 <HAL_RCC_OscConfig+0x4cc>)
 800b64a:	f043 0301 	orr.w	r3, r3, #1
 800b64e:	6713      	str	r3, [r2, #112]	; 0x70
 800b650:	e00b      	b.n	800b66a <HAL_RCC_OscConfig+0x376>
 800b652:	4b5b      	ldr	r3, [pc, #364]	; (800b7c0 <HAL_RCC_OscConfig+0x4cc>)
 800b654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b656:	4a5a      	ldr	r2, [pc, #360]	; (800b7c0 <HAL_RCC_OscConfig+0x4cc>)
 800b658:	f023 0301 	bic.w	r3, r3, #1
 800b65c:	6713      	str	r3, [r2, #112]	; 0x70
 800b65e:	4b58      	ldr	r3, [pc, #352]	; (800b7c0 <HAL_RCC_OscConfig+0x4cc>)
 800b660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b662:	4a57      	ldr	r2, [pc, #348]	; (800b7c0 <HAL_RCC_OscConfig+0x4cc>)
 800b664:	f023 0304 	bic.w	r3, r3, #4
 800b668:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	689b      	ldr	r3, [r3, #8]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d015      	beq.n	800b69e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b672:	f7f9 f8f1 	bl	8004858 <HAL_GetTick>
 800b676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b678:	e00a      	b.n	800b690 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b67a:	f7f9 f8ed 	bl	8004858 <HAL_GetTick>
 800b67e:	4602      	mov	r2, r0
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	1ad3      	subs	r3, r2, r3
 800b684:	f241 3288 	movw	r2, #5000	; 0x1388
 800b688:	4293      	cmp	r3, r2
 800b68a:	d901      	bls.n	800b690 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800b68c:	2303      	movs	r3, #3
 800b68e:	e0ce      	b.n	800b82e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b690:	4b4b      	ldr	r3, [pc, #300]	; (800b7c0 <HAL_RCC_OscConfig+0x4cc>)
 800b692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b694:	f003 0302 	and.w	r3, r3, #2
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d0ee      	beq.n	800b67a <HAL_RCC_OscConfig+0x386>
 800b69c:	e014      	b.n	800b6c8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b69e:	f7f9 f8db 	bl	8004858 <HAL_GetTick>
 800b6a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b6a4:	e00a      	b.n	800b6bc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b6a6:	f7f9 f8d7 	bl	8004858 <HAL_GetTick>
 800b6aa:	4602      	mov	r2, r0
 800b6ac:	693b      	ldr	r3, [r7, #16]
 800b6ae:	1ad3      	subs	r3, r2, r3
 800b6b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d901      	bls.n	800b6bc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800b6b8:	2303      	movs	r3, #3
 800b6ba:	e0b8      	b.n	800b82e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b6bc:	4b40      	ldr	r3, [pc, #256]	; (800b7c0 <HAL_RCC_OscConfig+0x4cc>)
 800b6be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6c0:	f003 0302 	and.w	r3, r3, #2
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d1ee      	bne.n	800b6a6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b6c8:	7dfb      	ldrb	r3, [r7, #23]
 800b6ca:	2b01      	cmp	r3, #1
 800b6cc:	d105      	bne.n	800b6da <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b6ce:	4b3c      	ldr	r3, [pc, #240]	; (800b7c0 <HAL_RCC_OscConfig+0x4cc>)
 800b6d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6d2:	4a3b      	ldr	r2, [pc, #236]	; (800b7c0 <HAL_RCC_OscConfig+0x4cc>)
 800b6d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b6d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	699b      	ldr	r3, [r3, #24]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	f000 80a4 	beq.w	800b82c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b6e4:	4b36      	ldr	r3, [pc, #216]	; (800b7c0 <HAL_RCC_OscConfig+0x4cc>)
 800b6e6:	689b      	ldr	r3, [r3, #8]
 800b6e8:	f003 030c 	and.w	r3, r3, #12
 800b6ec:	2b08      	cmp	r3, #8
 800b6ee:	d06b      	beq.n	800b7c8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	699b      	ldr	r3, [r3, #24]
 800b6f4:	2b02      	cmp	r3, #2
 800b6f6:	d149      	bne.n	800b78c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b6f8:	4b31      	ldr	r3, [pc, #196]	; (800b7c0 <HAL_RCC_OscConfig+0x4cc>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	4a30      	ldr	r2, [pc, #192]	; (800b7c0 <HAL_RCC_OscConfig+0x4cc>)
 800b6fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b702:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b704:	f7f9 f8a8 	bl	8004858 <HAL_GetTick>
 800b708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b70a:	e008      	b.n	800b71e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b70c:	f7f9 f8a4 	bl	8004858 <HAL_GetTick>
 800b710:	4602      	mov	r2, r0
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	1ad3      	subs	r3, r2, r3
 800b716:	2b02      	cmp	r3, #2
 800b718:	d901      	bls.n	800b71e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800b71a:	2303      	movs	r3, #3
 800b71c:	e087      	b.n	800b82e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b71e:	4b28      	ldr	r3, [pc, #160]	; (800b7c0 <HAL_RCC_OscConfig+0x4cc>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b726:	2b00      	cmp	r3, #0
 800b728:	d1f0      	bne.n	800b70c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	69da      	ldr	r2, [r3, #28]
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6a1b      	ldr	r3, [r3, #32]
 800b732:	431a      	orrs	r2, r3
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b738:	019b      	lsls	r3, r3, #6
 800b73a:	431a      	orrs	r2, r3
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b740:	085b      	lsrs	r3, r3, #1
 800b742:	3b01      	subs	r3, #1
 800b744:	041b      	lsls	r3, r3, #16
 800b746:	431a      	orrs	r2, r3
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b74c:	061b      	lsls	r3, r3, #24
 800b74e:	4313      	orrs	r3, r2
 800b750:	4a1b      	ldr	r2, [pc, #108]	; (800b7c0 <HAL_RCC_OscConfig+0x4cc>)
 800b752:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b756:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b758:	4b19      	ldr	r3, [pc, #100]	; (800b7c0 <HAL_RCC_OscConfig+0x4cc>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	4a18      	ldr	r2, [pc, #96]	; (800b7c0 <HAL_RCC_OscConfig+0x4cc>)
 800b75e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b762:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b764:	f7f9 f878 	bl	8004858 <HAL_GetTick>
 800b768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b76a:	e008      	b.n	800b77e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b76c:	f7f9 f874 	bl	8004858 <HAL_GetTick>
 800b770:	4602      	mov	r2, r0
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	1ad3      	subs	r3, r2, r3
 800b776:	2b02      	cmp	r3, #2
 800b778:	d901      	bls.n	800b77e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800b77a:	2303      	movs	r3, #3
 800b77c:	e057      	b.n	800b82e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b77e:	4b10      	ldr	r3, [pc, #64]	; (800b7c0 <HAL_RCC_OscConfig+0x4cc>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b786:	2b00      	cmp	r3, #0
 800b788:	d0f0      	beq.n	800b76c <HAL_RCC_OscConfig+0x478>
 800b78a:	e04f      	b.n	800b82c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b78c:	4b0c      	ldr	r3, [pc, #48]	; (800b7c0 <HAL_RCC_OscConfig+0x4cc>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	4a0b      	ldr	r2, [pc, #44]	; (800b7c0 <HAL_RCC_OscConfig+0x4cc>)
 800b792:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b796:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b798:	f7f9 f85e 	bl	8004858 <HAL_GetTick>
 800b79c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b79e:	e008      	b.n	800b7b2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b7a0:	f7f9 f85a 	bl	8004858 <HAL_GetTick>
 800b7a4:	4602      	mov	r2, r0
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	1ad3      	subs	r3, r2, r3
 800b7aa:	2b02      	cmp	r3, #2
 800b7ac:	d901      	bls.n	800b7b2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800b7ae:	2303      	movs	r3, #3
 800b7b0:	e03d      	b.n	800b82e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b7b2:	4b03      	ldr	r3, [pc, #12]	; (800b7c0 <HAL_RCC_OscConfig+0x4cc>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d1f0      	bne.n	800b7a0 <HAL_RCC_OscConfig+0x4ac>
 800b7be:	e035      	b.n	800b82c <HAL_RCC_OscConfig+0x538>
 800b7c0:	40023800 	.word	0x40023800
 800b7c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800b7c8:	4b1b      	ldr	r3, [pc, #108]	; (800b838 <HAL_RCC_OscConfig+0x544>)
 800b7ca:	685b      	ldr	r3, [r3, #4]
 800b7cc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	699b      	ldr	r3, [r3, #24]
 800b7d2:	2b01      	cmp	r3, #1
 800b7d4:	d028      	beq.n	800b828 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	d121      	bne.n	800b828 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b7ee:	429a      	cmp	r2, r3
 800b7f0:	d11a      	bne.n	800b828 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b7f2:	68fa      	ldr	r2, [r7, #12]
 800b7f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b7f8:	4013      	ands	r3, r2
 800b7fa:	687a      	ldr	r2, [r7, #4]
 800b7fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b7fe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b800:	4293      	cmp	r3, r2
 800b802:	d111      	bne.n	800b828 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b80e:	085b      	lsrs	r3, r3, #1
 800b810:	3b01      	subs	r3, #1
 800b812:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b814:	429a      	cmp	r2, r3
 800b816:	d107      	bne.n	800b828 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b822:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b824:	429a      	cmp	r2, r3
 800b826:	d001      	beq.n	800b82c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800b828:	2301      	movs	r3, #1
 800b82a:	e000      	b.n	800b82e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800b82c:	2300      	movs	r3, #0
}
 800b82e:	4618      	mov	r0, r3
 800b830:	3718      	adds	r7, #24
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}
 800b836:	bf00      	nop
 800b838:	40023800 	.word	0x40023800

0800b83c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b084      	sub	sp, #16
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
 800b844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800b846:	2300      	movs	r3, #0
 800b848:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d101      	bne.n	800b854 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b850:	2301      	movs	r3, #1
 800b852:	e0d0      	b.n	800b9f6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b854:	4b6a      	ldr	r3, [pc, #424]	; (800ba00 <HAL_RCC_ClockConfig+0x1c4>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f003 030f 	and.w	r3, r3, #15
 800b85c:	683a      	ldr	r2, [r7, #0]
 800b85e:	429a      	cmp	r2, r3
 800b860:	d910      	bls.n	800b884 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b862:	4b67      	ldr	r3, [pc, #412]	; (800ba00 <HAL_RCC_ClockConfig+0x1c4>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f023 020f 	bic.w	r2, r3, #15
 800b86a:	4965      	ldr	r1, [pc, #404]	; (800ba00 <HAL_RCC_ClockConfig+0x1c4>)
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	4313      	orrs	r3, r2
 800b870:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b872:	4b63      	ldr	r3, [pc, #396]	; (800ba00 <HAL_RCC_ClockConfig+0x1c4>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	f003 030f 	and.w	r3, r3, #15
 800b87a:	683a      	ldr	r2, [r7, #0]
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d001      	beq.n	800b884 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b880:	2301      	movs	r3, #1
 800b882:	e0b8      	b.n	800b9f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	f003 0302 	and.w	r3, r3, #2
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d020      	beq.n	800b8d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	f003 0304 	and.w	r3, r3, #4
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d005      	beq.n	800b8a8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b89c:	4b59      	ldr	r3, [pc, #356]	; (800ba04 <HAL_RCC_ClockConfig+0x1c8>)
 800b89e:	689b      	ldr	r3, [r3, #8]
 800b8a0:	4a58      	ldr	r2, [pc, #352]	; (800ba04 <HAL_RCC_ClockConfig+0x1c8>)
 800b8a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b8a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	f003 0308 	and.w	r3, r3, #8
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d005      	beq.n	800b8c0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b8b4:	4b53      	ldr	r3, [pc, #332]	; (800ba04 <HAL_RCC_ClockConfig+0x1c8>)
 800b8b6:	689b      	ldr	r3, [r3, #8]
 800b8b8:	4a52      	ldr	r2, [pc, #328]	; (800ba04 <HAL_RCC_ClockConfig+0x1c8>)
 800b8ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b8be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b8c0:	4b50      	ldr	r3, [pc, #320]	; (800ba04 <HAL_RCC_ClockConfig+0x1c8>)
 800b8c2:	689b      	ldr	r3, [r3, #8]
 800b8c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	689b      	ldr	r3, [r3, #8]
 800b8cc:	494d      	ldr	r1, [pc, #308]	; (800ba04 <HAL_RCC_ClockConfig+0x1c8>)
 800b8ce:	4313      	orrs	r3, r2
 800b8d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	f003 0301 	and.w	r3, r3, #1
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d040      	beq.n	800b960 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	685b      	ldr	r3, [r3, #4]
 800b8e2:	2b01      	cmp	r3, #1
 800b8e4:	d107      	bne.n	800b8f6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b8e6:	4b47      	ldr	r3, [pc, #284]	; (800ba04 <HAL_RCC_ClockConfig+0x1c8>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d115      	bne.n	800b91e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	e07f      	b.n	800b9f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	685b      	ldr	r3, [r3, #4]
 800b8fa:	2b02      	cmp	r3, #2
 800b8fc:	d107      	bne.n	800b90e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b8fe:	4b41      	ldr	r3, [pc, #260]	; (800ba04 <HAL_RCC_ClockConfig+0x1c8>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b906:	2b00      	cmp	r3, #0
 800b908:	d109      	bne.n	800b91e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b90a:	2301      	movs	r3, #1
 800b90c:	e073      	b.n	800b9f6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b90e:	4b3d      	ldr	r3, [pc, #244]	; (800ba04 <HAL_RCC_ClockConfig+0x1c8>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f003 0302 	and.w	r3, r3, #2
 800b916:	2b00      	cmp	r3, #0
 800b918:	d101      	bne.n	800b91e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b91a:	2301      	movs	r3, #1
 800b91c:	e06b      	b.n	800b9f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b91e:	4b39      	ldr	r3, [pc, #228]	; (800ba04 <HAL_RCC_ClockConfig+0x1c8>)
 800b920:	689b      	ldr	r3, [r3, #8]
 800b922:	f023 0203 	bic.w	r2, r3, #3
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	685b      	ldr	r3, [r3, #4]
 800b92a:	4936      	ldr	r1, [pc, #216]	; (800ba04 <HAL_RCC_ClockConfig+0x1c8>)
 800b92c:	4313      	orrs	r3, r2
 800b92e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b930:	f7f8 ff92 	bl	8004858 <HAL_GetTick>
 800b934:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b936:	e00a      	b.n	800b94e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b938:	f7f8 ff8e 	bl	8004858 <HAL_GetTick>
 800b93c:	4602      	mov	r2, r0
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	1ad3      	subs	r3, r2, r3
 800b942:	f241 3288 	movw	r2, #5000	; 0x1388
 800b946:	4293      	cmp	r3, r2
 800b948:	d901      	bls.n	800b94e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800b94a:	2303      	movs	r3, #3
 800b94c:	e053      	b.n	800b9f6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b94e:	4b2d      	ldr	r3, [pc, #180]	; (800ba04 <HAL_RCC_ClockConfig+0x1c8>)
 800b950:	689b      	ldr	r3, [r3, #8]
 800b952:	f003 020c 	and.w	r2, r3, #12
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	685b      	ldr	r3, [r3, #4]
 800b95a:	009b      	lsls	r3, r3, #2
 800b95c:	429a      	cmp	r2, r3
 800b95e:	d1eb      	bne.n	800b938 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b960:	4b27      	ldr	r3, [pc, #156]	; (800ba00 <HAL_RCC_ClockConfig+0x1c4>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	f003 030f 	and.w	r3, r3, #15
 800b968:	683a      	ldr	r2, [r7, #0]
 800b96a:	429a      	cmp	r2, r3
 800b96c:	d210      	bcs.n	800b990 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b96e:	4b24      	ldr	r3, [pc, #144]	; (800ba00 <HAL_RCC_ClockConfig+0x1c4>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f023 020f 	bic.w	r2, r3, #15
 800b976:	4922      	ldr	r1, [pc, #136]	; (800ba00 <HAL_RCC_ClockConfig+0x1c4>)
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	4313      	orrs	r3, r2
 800b97c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b97e:	4b20      	ldr	r3, [pc, #128]	; (800ba00 <HAL_RCC_ClockConfig+0x1c4>)
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f003 030f 	and.w	r3, r3, #15
 800b986:	683a      	ldr	r2, [r7, #0]
 800b988:	429a      	cmp	r2, r3
 800b98a:	d001      	beq.n	800b990 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800b98c:	2301      	movs	r3, #1
 800b98e:	e032      	b.n	800b9f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	f003 0304 	and.w	r3, r3, #4
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d008      	beq.n	800b9ae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b99c:	4b19      	ldr	r3, [pc, #100]	; (800ba04 <HAL_RCC_ClockConfig+0x1c8>)
 800b99e:	689b      	ldr	r3, [r3, #8]
 800b9a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	68db      	ldr	r3, [r3, #12]
 800b9a8:	4916      	ldr	r1, [pc, #88]	; (800ba04 <HAL_RCC_ClockConfig+0x1c8>)
 800b9aa:	4313      	orrs	r3, r2
 800b9ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f003 0308 	and.w	r3, r3, #8
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d009      	beq.n	800b9ce <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b9ba:	4b12      	ldr	r3, [pc, #72]	; (800ba04 <HAL_RCC_ClockConfig+0x1c8>)
 800b9bc:	689b      	ldr	r3, [r3, #8]
 800b9be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	691b      	ldr	r3, [r3, #16]
 800b9c6:	00db      	lsls	r3, r3, #3
 800b9c8:	490e      	ldr	r1, [pc, #56]	; (800ba04 <HAL_RCC_ClockConfig+0x1c8>)
 800b9ca:	4313      	orrs	r3, r2
 800b9cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b9ce:	f000 f821 	bl	800ba14 <HAL_RCC_GetSysClockFreq>
 800b9d2:	4602      	mov	r2, r0
 800b9d4:	4b0b      	ldr	r3, [pc, #44]	; (800ba04 <HAL_RCC_ClockConfig+0x1c8>)
 800b9d6:	689b      	ldr	r3, [r3, #8]
 800b9d8:	091b      	lsrs	r3, r3, #4
 800b9da:	f003 030f 	and.w	r3, r3, #15
 800b9de:	490a      	ldr	r1, [pc, #40]	; (800ba08 <HAL_RCC_ClockConfig+0x1cc>)
 800b9e0:	5ccb      	ldrb	r3, [r1, r3]
 800b9e2:	fa22 f303 	lsr.w	r3, r2, r3
 800b9e6:	4a09      	ldr	r2, [pc, #36]	; (800ba0c <HAL_RCC_ClockConfig+0x1d0>)
 800b9e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b9ea:	4b09      	ldr	r3, [pc, #36]	; (800ba10 <HAL_RCC_ClockConfig+0x1d4>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f7f8 feee 	bl	80047d0 <HAL_InitTick>

  return HAL_OK;
 800b9f4:	2300      	movs	r3, #0
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	3710      	adds	r7, #16
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}
 800b9fe:	bf00      	nop
 800ba00:	40023c00 	.word	0x40023c00
 800ba04:	40023800 	.word	0x40023800
 800ba08:	08018f1c 	.word	0x08018f1c
 800ba0c:	20000018 	.word	0x20000018
 800ba10:	2000001c 	.word	0x2000001c

0800ba14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ba14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ba18:	b090      	sub	sp, #64	; 0x40
 800ba1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	637b      	str	r3, [r7, #52]	; 0x34
 800ba20:	2300      	movs	r3, #0
 800ba22:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba24:	2300      	movs	r3, #0
 800ba26:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ba2c:	4b59      	ldr	r3, [pc, #356]	; (800bb94 <HAL_RCC_GetSysClockFreq+0x180>)
 800ba2e:	689b      	ldr	r3, [r3, #8]
 800ba30:	f003 030c 	and.w	r3, r3, #12
 800ba34:	2b08      	cmp	r3, #8
 800ba36:	d00d      	beq.n	800ba54 <HAL_RCC_GetSysClockFreq+0x40>
 800ba38:	2b08      	cmp	r3, #8
 800ba3a:	f200 80a1 	bhi.w	800bb80 <HAL_RCC_GetSysClockFreq+0x16c>
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d002      	beq.n	800ba48 <HAL_RCC_GetSysClockFreq+0x34>
 800ba42:	2b04      	cmp	r3, #4
 800ba44:	d003      	beq.n	800ba4e <HAL_RCC_GetSysClockFreq+0x3a>
 800ba46:	e09b      	b.n	800bb80 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ba48:	4b53      	ldr	r3, [pc, #332]	; (800bb98 <HAL_RCC_GetSysClockFreq+0x184>)
 800ba4a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800ba4c:	e09b      	b.n	800bb86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ba4e:	4b53      	ldr	r3, [pc, #332]	; (800bb9c <HAL_RCC_GetSysClockFreq+0x188>)
 800ba50:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800ba52:	e098      	b.n	800bb86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ba54:	4b4f      	ldr	r3, [pc, #316]	; (800bb94 <HAL_RCC_GetSysClockFreq+0x180>)
 800ba56:	685b      	ldr	r3, [r3, #4]
 800ba58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ba5c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800ba5e:	4b4d      	ldr	r3, [pc, #308]	; (800bb94 <HAL_RCC_GetSysClockFreq+0x180>)
 800ba60:	685b      	ldr	r3, [r3, #4]
 800ba62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d028      	beq.n	800babc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ba6a:	4b4a      	ldr	r3, [pc, #296]	; (800bb94 <HAL_RCC_GetSysClockFreq+0x180>)
 800ba6c:	685b      	ldr	r3, [r3, #4]
 800ba6e:	099b      	lsrs	r3, r3, #6
 800ba70:	2200      	movs	r2, #0
 800ba72:	623b      	str	r3, [r7, #32]
 800ba74:	627a      	str	r2, [r7, #36]	; 0x24
 800ba76:	6a3b      	ldr	r3, [r7, #32]
 800ba78:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800ba7c:	2100      	movs	r1, #0
 800ba7e:	4b47      	ldr	r3, [pc, #284]	; (800bb9c <HAL_RCC_GetSysClockFreq+0x188>)
 800ba80:	fb03 f201 	mul.w	r2, r3, r1
 800ba84:	2300      	movs	r3, #0
 800ba86:	fb00 f303 	mul.w	r3, r0, r3
 800ba8a:	4413      	add	r3, r2
 800ba8c:	4a43      	ldr	r2, [pc, #268]	; (800bb9c <HAL_RCC_GetSysClockFreq+0x188>)
 800ba8e:	fba0 1202 	umull	r1, r2, r0, r2
 800ba92:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ba94:	460a      	mov	r2, r1
 800ba96:	62ba      	str	r2, [r7, #40]	; 0x28
 800ba98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba9a:	4413      	add	r3, r2
 800ba9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800baa0:	2200      	movs	r2, #0
 800baa2:	61bb      	str	r3, [r7, #24]
 800baa4:	61fa      	str	r2, [r7, #28]
 800baa6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800baaa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800baae:	f7f4 fbab 	bl	8000208 <__aeabi_uldivmod>
 800bab2:	4602      	mov	r2, r0
 800bab4:	460b      	mov	r3, r1
 800bab6:	4613      	mov	r3, r2
 800bab8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800baba:	e053      	b.n	800bb64 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800babc:	4b35      	ldr	r3, [pc, #212]	; (800bb94 <HAL_RCC_GetSysClockFreq+0x180>)
 800babe:	685b      	ldr	r3, [r3, #4]
 800bac0:	099b      	lsrs	r3, r3, #6
 800bac2:	2200      	movs	r2, #0
 800bac4:	613b      	str	r3, [r7, #16]
 800bac6:	617a      	str	r2, [r7, #20]
 800bac8:	693b      	ldr	r3, [r7, #16]
 800baca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800bace:	f04f 0b00 	mov.w	fp, #0
 800bad2:	4652      	mov	r2, sl
 800bad4:	465b      	mov	r3, fp
 800bad6:	f04f 0000 	mov.w	r0, #0
 800bada:	f04f 0100 	mov.w	r1, #0
 800bade:	0159      	lsls	r1, r3, #5
 800bae0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800bae4:	0150      	lsls	r0, r2, #5
 800bae6:	4602      	mov	r2, r0
 800bae8:	460b      	mov	r3, r1
 800baea:	ebb2 080a 	subs.w	r8, r2, sl
 800baee:	eb63 090b 	sbc.w	r9, r3, fp
 800baf2:	f04f 0200 	mov.w	r2, #0
 800baf6:	f04f 0300 	mov.w	r3, #0
 800bafa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800bafe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800bb02:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800bb06:	ebb2 0408 	subs.w	r4, r2, r8
 800bb0a:	eb63 0509 	sbc.w	r5, r3, r9
 800bb0e:	f04f 0200 	mov.w	r2, #0
 800bb12:	f04f 0300 	mov.w	r3, #0
 800bb16:	00eb      	lsls	r3, r5, #3
 800bb18:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bb1c:	00e2      	lsls	r2, r4, #3
 800bb1e:	4614      	mov	r4, r2
 800bb20:	461d      	mov	r5, r3
 800bb22:	eb14 030a 	adds.w	r3, r4, sl
 800bb26:	603b      	str	r3, [r7, #0]
 800bb28:	eb45 030b 	adc.w	r3, r5, fp
 800bb2c:	607b      	str	r3, [r7, #4]
 800bb2e:	f04f 0200 	mov.w	r2, #0
 800bb32:	f04f 0300 	mov.w	r3, #0
 800bb36:	e9d7 4500 	ldrd	r4, r5, [r7]
 800bb3a:	4629      	mov	r1, r5
 800bb3c:	028b      	lsls	r3, r1, #10
 800bb3e:	4621      	mov	r1, r4
 800bb40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800bb44:	4621      	mov	r1, r4
 800bb46:	028a      	lsls	r2, r1, #10
 800bb48:	4610      	mov	r0, r2
 800bb4a:	4619      	mov	r1, r3
 800bb4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb4e:	2200      	movs	r2, #0
 800bb50:	60bb      	str	r3, [r7, #8]
 800bb52:	60fa      	str	r2, [r7, #12]
 800bb54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bb58:	f7f4 fb56 	bl	8000208 <__aeabi_uldivmod>
 800bb5c:	4602      	mov	r2, r0
 800bb5e:	460b      	mov	r3, r1
 800bb60:	4613      	mov	r3, r2
 800bb62:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800bb64:	4b0b      	ldr	r3, [pc, #44]	; (800bb94 <HAL_RCC_GetSysClockFreq+0x180>)
 800bb66:	685b      	ldr	r3, [r3, #4]
 800bb68:	0c1b      	lsrs	r3, r3, #16
 800bb6a:	f003 0303 	and.w	r3, r3, #3
 800bb6e:	3301      	adds	r3, #1
 800bb70:	005b      	lsls	r3, r3, #1
 800bb72:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800bb74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bb76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb78:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb7c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800bb7e:	e002      	b.n	800bb86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800bb80:	4b05      	ldr	r3, [pc, #20]	; (800bb98 <HAL_RCC_GetSysClockFreq+0x184>)
 800bb82:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800bb84:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bb86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800bb88:	4618      	mov	r0, r3
 800bb8a:	3740      	adds	r7, #64	; 0x40
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bb92:	bf00      	nop
 800bb94:	40023800 	.word	0x40023800
 800bb98:	00f42400 	.word	0x00f42400
 800bb9c:	017d7840 	.word	0x017d7840

0800bba0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bba0:	b480      	push	{r7}
 800bba2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bba4:	4b03      	ldr	r3, [pc, #12]	; (800bbb4 <HAL_RCC_GetHCLKFreq+0x14>)
 800bba6:	681b      	ldr	r3, [r3, #0]
}
 800bba8:	4618      	mov	r0, r3
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb0:	4770      	bx	lr
 800bbb2:	bf00      	nop
 800bbb4:	20000018 	.word	0x20000018

0800bbb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800bbbc:	f7ff fff0 	bl	800bba0 <HAL_RCC_GetHCLKFreq>
 800bbc0:	4602      	mov	r2, r0
 800bbc2:	4b05      	ldr	r3, [pc, #20]	; (800bbd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800bbc4:	689b      	ldr	r3, [r3, #8]
 800bbc6:	0a9b      	lsrs	r3, r3, #10
 800bbc8:	f003 0307 	and.w	r3, r3, #7
 800bbcc:	4903      	ldr	r1, [pc, #12]	; (800bbdc <HAL_RCC_GetPCLK1Freq+0x24>)
 800bbce:	5ccb      	ldrb	r3, [r1, r3]
 800bbd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	bd80      	pop	{r7, pc}
 800bbd8:	40023800 	.word	0x40023800
 800bbdc:	08018f2c 	.word	0x08018f2c

0800bbe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800bbe4:	f7ff ffdc 	bl	800bba0 <HAL_RCC_GetHCLKFreq>
 800bbe8:	4602      	mov	r2, r0
 800bbea:	4b05      	ldr	r3, [pc, #20]	; (800bc00 <HAL_RCC_GetPCLK2Freq+0x20>)
 800bbec:	689b      	ldr	r3, [r3, #8]
 800bbee:	0b5b      	lsrs	r3, r3, #13
 800bbf0:	f003 0307 	and.w	r3, r3, #7
 800bbf4:	4903      	ldr	r1, [pc, #12]	; (800bc04 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bbf6:	5ccb      	ldrb	r3, [r1, r3]
 800bbf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	bd80      	pop	{r7, pc}
 800bc00:	40023800 	.word	0x40023800
 800bc04:	08018f2c 	.word	0x08018f2c

0800bc08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b088      	sub	sp, #32
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800bc10:	2300      	movs	r3, #0
 800bc12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800bc14:	2300      	movs	r3, #0
 800bc16:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800bc18:	2300      	movs	r3, #0
 800bc1a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800bc20:	2300      	movs	r3, #0
 800bc22:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f003 0301 	and.w	r3, r3, #1
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d012      	beq.n	800bc56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800bc30:	4b69      	ldr	r3, [pc, #420]	; (800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bc32:	689b      	ldr	r3, [r3, #8]
 800bc34:	4a68      	ldr	r2, [pc, #416]	; (800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bc36:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800bc3a:	6093      	str	r3, [r2, #8]
 800bc3c:	4b66      	ldr	r3, [pc, #408]	; (800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bc3e:	689a      	ldr	r2, [r3, #8]
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc44:	4964      	ldr	r1, [pc, #400]	; (800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bc46:	4313      	orrs	r3, r2
 800bc48:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d101      	bne.n	800bc56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800bc52:	2301      	movs	r3, #1
 800bc54:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d017      	beq.n	800bc92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bc62:	4b5d      	ldr	r3, [pc, #372]	; (800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bc64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc70:	4959      	ldr	r1, [pc, #356]	; (800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bc72:	4313      	orrs	r3, r2
 800bc74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bc80:	d101      	bne.n	800bc86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800bc82:	2301      	movs	r3, #1
 800bc84:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d101      	bne.n	800bc92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800bc8e:	2301      	movs	r3, #1
 800bc90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d017      	beq.n	800bcce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800bc9e:	4b4e      	ldr	r3, [pc, #312]	; (800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bca4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcac:	494a      	ldr	r1, [pc, #296]	; (800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bcae:	4313      	orrs	r3, r2
 800bcb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bcbc:	d101      	bne.n	800bcc2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d101      	bne.n	800bcce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800bcca:	2301      	movs	r3, #1
 800bccc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d001      	beq.n	800bcde <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800bcda:	2301      	movs	r3, #1
 800bcdc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f003 0320 	and.w	r3, r3, #32
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	f000 808b 	beq.w	800be02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800bcec:	4b3a      	ldr	r3, [pc, #232]	; (800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bcee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcf0:	4a39      	ldr	r2, [pc, #228]	; (800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bcf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bcf6:	6413      	str	r3, [r2, #64]	; 0x40
 800bcf8:	4b37      	ldr	r3, [pc, #220]	; (800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bcfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd00:	60bb      	str	r3, [r7, #8]
 800bd02:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800bd04:	4b35      	ldr	r3, [pc, #212]	; (800bddc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	4a34      	ldr	r2, [pc, #208]	; (800bddc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800bd0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bd10:	f7f8 fda2 	bl	8004858 <HAL_GetTick>
 800bd14:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800bd16:	e008      	b.n	800bd2a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bd18:	f7f8 fd9e 	bl	8004858 <HAL_GetTick>
 800bd1c:	4602      	mov	r2, r0
 800bd1e:	697b      	ldr	r3, [r7, #20]
 800bd20:	1ad3      	subs	r3, r2, r3
 800bd22:	2b64      	cmp	r3, #100	; 0x64
 800bd24:	d901      	bls.n	800bd2a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800bd26:	2303      	movs	r3, #3
 800bd28:	e357      	b.n	800c3da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800bd2a:	4b2c      	ldr	r3, [pc, #176]	; (800bddc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d0f0      	beq.n	800bd18 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800bd36:	4b28      	ldr	r3, [pc, #160]	; (800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bd38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bd3e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800bd40:	693b      	ldr	r3, [r7, #16]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d035      	beq.n	800bdb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bd4e:	693a      	ldr	r2, [r7, #16]
 800bd50:	429a      	cmp	r2, r3
 800bd52:	d02e      	beq.n	800bdb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bd54:	4b20      	ldr	r3, [pc, #128]	; (800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bd56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd5c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800bd5e:	4b1e      	ldr	r3, [pc, #120]	; (800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bd60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd62:	4a1d      	ldr	r2, [pc, #116]	; (800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bd64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bd68:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800bd6a:	4b1b      	ldr	r3, [pc, #108]	; (800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bd6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd6e:	4a1a      	ldr	r2, [pc, #104]	; (800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bd70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bd74:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800bd76:	4a18      	ldr	r2, [pc, #96]	; (800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800bd7c:	4b16      	ldr	r3, [pc, #88]	; (800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bd7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd80:	f003 0301 	and.w	r3, r3, #1
 800bd84:	2b01      	cmp	r3, #1
 800bd86:	d114      	bne.n	800bdb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd88:	f7f8 fd66 	bl	8004858 <HAL_GetTick>
 800bd8c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bd8e:	e00a      	b.n	800bda6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bd90:	f7f8 fd62 	bl	8004858 <HAL_GetTick>
 800bd94:	4602      	mov	r2, r0
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	1ad3      	subs	r3, r2, r3
 800bd9a:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd9e:	4293      	cmp	r3, r2
 800bda0:	d901      	bls.n	800bda6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800bda2:	2303      	movs	r3, #3
 800bda4:	e319      	b.n	800c3da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bda6:	4b0c      	ldr	r3, [pc, #48]	; (800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bda8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdaa:	f003 0302 	and.w	r3, r3, #2
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d0ee      	beq.n	800bd90 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bdba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bdbe:	d111      	bne.n	800bde4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800bdc0:	4b05      	ldr	r3, [pc, #20]	; (800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bdc2:	689b      	ldr	r3, [r3, #8]
 800bdc4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800bdcc:	4b04      	ldr	r3, [pc, #16]	; (800bde0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800bdce:	400b      	ands	r3, r1
 800bdd0:	4901      	ldr	r1, [pc, #4]	; (800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bdd2:	4313      	orrs	r3, r2
 800bdd4:	608b      	str	r3, [r1, #8]
 800bdd6:	e00b      	b.n	800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800bdd8:	40023800 	.word	0x40023800
 800bddc:	40007000 	.word	0x40007000
 800bde0:	0ffffcff 	.word	0x0ffffcff
 800bde4:	4baa      	ldr	r3, [pc, #680]	; (800c090 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bde6:	689b      	ldr	r3, [r3, #8]
 800bde8:	4aa9      	ldr	r2, [pc, #676]	; (800c090 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bdea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800bdee:	6093      	str	r3, [r2, #8]
 800bdf0:	4ba7      	ldr	r3, [pc, #668]	; (800c090 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bdf2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bdfc:	49a4      	ldr	r1, [pc, #656]	; (800c090 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bdfe:	4313      	orrs	r3, r2
 800be00:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	f003 0310 	and.w	r3, r3, #16
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d010      	beq.n	800be30 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800be0e:	4ba0      	ldr	r3, [pc, #640]	; (800c090 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800be10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be14:	4a9e      	ldr	r2, [pc, #632]	; (800c090 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800be16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800be1a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800be1e:	4b9c      	ldr	r3, [pc, #624]	; (800c090 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800be20:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be28:	4999      	ldr	r1, [pc, #612]	; (800c090 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800be2a:	4313      	orrs	r3, r2
 800be2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d00a      	beq.n	800be52 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800be3c:	4b94      	ldr	r3, [pc, #592]	; (800c090 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800be3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be42:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be4a:	4991      	ldr	r1, [pc, #580]	; (800c090 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800be4c:	4313      	orrs	r3, r2
 800be4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d00a      	beq.n	800be74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800be5e:	4b8c      	ldr	r3, [pc, #560]	; (800c090 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800be60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800be6c:	4988      	ldr	r1, [pc, #544]	; (800c090 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800be6e:	4313      	orrs	r3, r2
 800be70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d00a      	beq.n	800be96 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800be80:	4b83      	ldr	r3, [pc, #524]	; (800c090 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800be82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be8e:	4980      	ldr	r1, [pc, #512]	; (800c090 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800be90:	4313      	orrs	r3, r2
 800be92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d00a      	beq.n	800beb8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bea2:	4b7b      	ldr	r3, [pc, #492]	; (800c090 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bea8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800beb0:	4977      	ldr	r1, [pc, #476]	; (800c090 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800beb2:	4313      	orrs	r3, r2
 800beb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d00a      	beq.n	800beda <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bec4:	4b72      	ldr	r3, [pc, #456]	; (800c090 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800beca:	f023 0203 	bic.w	r2, r3, #3
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bed2:	496f      	ldr	r1, [pc, #444]	; (800c090 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bed4:	4313      	orrs	r3, r2
 800bed6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d00a      	beq.n	800befc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bee6:	4b6a      	ldr	r3, [pc, #424]	; (800c090 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800beec:	f023 020c 	bic.w	r2, r3, #12
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bef4:	4966      	ldr	r1, [pc, #408]	; (800c090 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bef6:	4313      	orrs	r3, r2
 800bef8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d00a      	beq.n	800bf1e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bf08:	4b61      	ldr	r3, [pc, #388]	; (800c090 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bf0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf0e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf16:	495e      	ldr	r1, [pc, #376]	; (800c090 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bf18:	4313      	orrs	r3, r2
 800bf1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d00a      	beq.n	800bf40 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bf2a:	4b59      	ldr	r3, [pc, #356]	; (800c090 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bf2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf30:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf38:	4955      	ldr	r1, [pc, #340]	; (800c090 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bf3a:	4313      	orrs	r3, r2
 800bf3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d00a      	beq.n	800bf62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800bf4c:	4b50      	ldr	r3, [pc, #320]	; (800c090 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bf4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf5a:	494d      	ldr	r1, [pc, #308]	; (800c090 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bf5c:	4313      	orrs	r3, r2
 800bf5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d00a      	beq.n	800bf84 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800bf6e:	4b48      	ldr	r3, [pc, #288]	; (800c090 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bf70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf74:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf7c:	4944      	ldr	r1, [pc, #272]	; (800c090 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bf7e:	4313      	orrs	r3, r2
 800bf80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d00a      	beq.n	800bfa6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800bf90:	4b3f      	ldr	r3, [pc, #252]	; (800c090 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bf92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf96:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf9e:	493c      	ldr	r1, [pc, #240]	; (800c090 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bfa0:	4313      	orrs	r3, r2
 800bfa2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d00a      	beq.n	800bfc8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800bfb2:	4b37      	ldr	r3, [pc, #220]	; (800c090 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bfb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bfb8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bfc0:	4933      	ldr	r1, [pc, #204]	; (800c090 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bfc2:	4313      	orrs	r3, r2
 800bfc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d00a      	beq.n	800bfea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bfd4:	4b2e      	ldr	r3, [pc, #184]	; (800c090 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bfd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bfda:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bfe2:	492b      	ldr	r1, [pc, #172]	; (800c090 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bfe4:	4313      	orrs	r3, r2
 800bfe6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d011      	beq.n	800c01a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800bff6:	4b26      	ldr	r3, [pc, #152]	; (800c090 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bffc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c004:	4922      	ldr	r1, [pc, #136]	; (800c090 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c006:	4313      	orrs	r3, r2
 800c008:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c010:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c014:	d101      	bne.n	800c01a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800c016:	2301      	movs	r3, #1
 800c018:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f003 0308 	and.w	r3, r3, #8
 800c022:	2b00      	cmp	r3, #0
 800c024:	d001      	beq.n	800c02a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800c026:	2301      	movs	r3, #1
 800c028:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c032:	2b00      	cmp	r3, #0
 800c034:	d00a      	beq.n	800c04c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c036:	4b16      	ldr	r3, [pc, #88]	; (800c090 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c03c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c044:	4912      	ldr	r1, [pc, #72]	; (800c090 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c046:	4313      	orrs	r3, r2
 800c048:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c054:	2b00      	cmp	r3, #0
 800c056:	d00b      	beq.n	800c070 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800c058:	4b0d      	ldr	r3, [pc, #52]	; (800c090 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c05a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c05e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c068:	4909      	ldr	r1, [pc, #36]	; (800c090 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c06a:	4313      	orrs	r3, r2
 800c06c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c070:	69fb      	ldr	r3, [r7, #28]
 800c072:	2b01      	cmp	r3, #1
 800c074:	d006      	beq.n	800c084 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c07e:	2b00      	cmp	r3, #0
 800c080:	f000 80d9 	beq.w	800c236 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c084:	4b02      	ldr	r3, [pc, #8]	; (800c090 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	4a01      	ldr	r2, [pc, #4]	; (800c090 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c08a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c08e:	e001      	b.n	800c094 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800c090:	40023800 	.word	0x40023800
 800c094:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c096:	f7f8 fbdf 	bl	8004858 <HAL_GetTick>
 800c09a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c09c:	e008      	b.n	800c0b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c09e:	f7f8 fbdb 	bl	8004858 <HAL_GetTick>
 800c0a2:	4602      	mov	r2, r0
 800c0a4:	697b      	ldr	r3, [r7, #20]
 800c0a6:	1ad3      	subs	r3, r2, r3
 800c0a8:	2b64      	cmp	r3, #100	; 0x64
 800c0aa:	d901      	bls.n	800c0b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c0ac:	2303      	movs	r3, #3
 800c0ae:	e194      	b.n	800c3da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c0b0:	4b6c      	ldr	r3, [pc, #432]	; (800c264 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d1f0      	bne.n	800c09e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	f003 0301 	and.w	r3, r3, #1
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d021      	beq.n	800c10c <HAL_RCCEx_PeriphCLKConfig+0x504>
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d11d      	bne.n	800c10c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c0d0:	4b64      	ldr	r3, [pc, #400]	; (800c264 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c0d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c0d6:	0c1b      	lsrs	r3, r3, #16
 800c0d8:	f003 0303 	and.w	r3, r3, #3
 800c0dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c0de:	4b61      	ldr	r3, [pc, #388]	; (800c264 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c0e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c0e4:	0e1b      	lsrs	r3, r3, #24
 800c0e6:	f003 030f 	and.w	r3, r3, #15
 800c0ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	685b      	ldr	r3, [r3, #4]
 800c0f0:	019a      	lsls	r2, r3, #6
 800c0f2:	693b      	ldr	r3, [r7, #16]
 800c0f4:	041b      	lsls	r3, r3, #16
 800c0f6:	431a      	orrs	r2, r3
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	061b      	lsls	r3, r3, #24
 800c0fc:	431a      	orrs	r2, r3
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	689b      	ldr	r3, [r3, #8]
 800c102:	071b      	lsls	r3, r3, #28
 800c104:	4957      	ldr	r1, [pc, #348]	; (800c264 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c106:	4313      	orrs	r3, r2
 800c108:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c114:	2b00      	cmp	r3, #0
 800c116:	d004      	beq.n	800c122 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c11c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c120:	d00a      	beq.n	800c138 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d02e      	beq.n	800c18c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c132:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c136:	d129      	bne.n	800c18c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c138:	4b4a      	ldr	r3, [pc, #296]	; (800c264 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c13a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c13e:	0c1b      	lsrs	r3, r3, #16
 800c140:	f003 0303 	and.w	r3, r3, #3
 800c144:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c146:	4b47      	ldr	r3, [pc, #284]	; (800c264 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c148:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c14c:	0f1b      	lsrs	r3, r3, #28
 800c14e:	f003 0307 	and.w	r3, r3, #7
 800c152:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	685b      	ldr	r3, [r3, #4]
 800c158:	019a      	lsls	r2, r3, #6
 800c15a:	693b      	ldr	r3, [r7, #16]
 800c15c:	041b      	lsls	r3, r3, #16
 800c15e:	431a      	orrs	r2, r3
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	68db      	ldr	r3, [r3, #12]
 800c164:	061b      	lsls	r3, r3, #24
 800c166:	431a      	orrs	r2, r3
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	071b      	lsls	r3, r3, #28
 800c16c:	493d      	ldr	r1, [pc, #244]	; (800c264 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c16e:	4313      	orrs	r3, r2
 800c170:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c174:	4b3b      	ldr	r3, [pc, #236]	; (800c264 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c176:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c17a:	f023 021f 	bic.w	r2, r3, #31
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c182:	3b01      	subs	r3, #1
 800c184:	4937      	ldr	r1, [pc, #220]	; (800c264 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c186:	4313      	orrs	r3, r2
 800c188:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c194:	2b00      	cmp	r3, #0
 800c196:	d01d      	beq.n	800c1d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c198:	4b32      	ldr	r3, [pc, #200]	; (800c264 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c19a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c19e:	0e1b      	lsrs	r3, r3, #24
 800c1a0:	f003 030f 	and.w	r3, r3, #15
 800c1a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c1a6:	4b2f      	ldr	r3, [pc, #188]	; (800c264 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c1a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c1ac:	0f1b      	lsrs	r3, r3, #28
 800c1ae:	f003 0307 	and.w	r3, r3, #7
 800c1b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	685b      	ldr	r3, [r3, #4]
 800c1b8:	019a      	lsls	r2, r3, #6
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	691b      	ldr	r3, [r3, #16]
 800c1be:	041b      	lsls	r3, r3, #16
 800c1c0:	431a      	orrs	r2, r3
 800c1c2:	693b      	ldr	r3, [r7, #16]
 800c1c4:	061b      	lsls	r3, r3, #24
 800c1c6:	431a      	orrs	r2, r3
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	071b      	lsls	r3, r3, #28
 800c1cc:	4925      	ldr	r1, [pc, #148]	; (800c264 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c1ce:	4313      	orrs	r3, r2
 800c1d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d011      	beq.n	800c204 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	685b      	ldr	r3, [r3, #4]
 800c1e4:	019a      	lsls	r2, r3, #6
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	691b      	ldr	r3, [r3, #16]
 800c1ea:	041b      	lsls	r3, r3, #16
 800c1ec:	431a      	orrs	r2, r3
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	68db      	ldr	r3, [r3, #12]
 800c1f2:	061b      	lsls	r3, r3, #24
 800c1f4:	431a      	orrs	r2, r3
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	689b      	ldr	r3, [r3, #8]
 800c1fa:	071b      	lsls	r3, r3, #28
 800c1fc:	4919      	ldr	r1, [pc, #100]	; (800c264 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c1fe:	4313      	orrs	r3, r2
 800c200:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c204:	4b17      	ldr	r3, [pc, #92]	; (800c264 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	4a16      	ldr	r2, [pc, #88]	; (800c264 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c20a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c20e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c210:	f7f8 fb22 	bl	8004858 <HAL_GetTick>
 800c214:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c216:	e008      	b.n	800c22a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c218:	f7f8 fb1e 	bl	8004858 <HAL_GetTick>
 800c21c:	4602      	mov	r2, r0
 800c21e:	697b      	ldr	r3, [r7, #20]
 800c220:	1ad3      	subs	r3, r2, r3
 800c222:	2b64      	cmp	r3, #100	; 0x64
 800c224:	d901      	bls.n	800c22a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c226:	2303      	movs	r3, #3
 800c228:	e0d7      	b.n	800c3da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c22a:	4b0e      	ldr	r3, [pc, #56]	; (800c264 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c232:	2b00      	cmp	r3, #0
 800c234:	d0f0      	beq.n	800c218 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800c236:	69bb      	ldr	r3, [r7, #24]
 800c238:	2b01      	cmp	r3, #1
 800c23a:	f040 80cd 	bne.w	800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c23e:	4b09      	ldr	r3, [pc, #36]	; (800c264 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	4a08      	ldr	r2, [pc, #32]	; (800c264 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c244:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c248:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c24a:	f7f8 fb05 	bl	8004858 <HAL_GetTick>
 800c24e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c250:	e00a      	b.n	800c268 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c252:	f7f8 fb01 	bl	8004858 <HAL_GetTick>
 800c256:	4602      	mov	r2, r0
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	1ad3      	subs	r3, r2, r3
 800c25c:	2b64      	cmp	r3, #100	; 0x64
 800c25e:	d903      	bls.n	800c268 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c260:	2303      	movs	r3, #3
 800c262:	e0ba      	b.n	800c3da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800c264:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c268:	4b5e      	ldr	r3, [pc, #376]	; (800c3e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c270:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c274:	d0ed      	beq.n	800c252 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d003      	beq.n	800c28a <HAL_RCCEx_PeriphCLKConfig+0x682>
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c286:	2b00      	cmp	r3, #0
 800c288:	d009      	beq.n	800c29e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c292:	2b00      	cmp	r3, #0
 800c294:	d02e      	beq.n	800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d12a      	bne.n	800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c29e:	4b51      	ldr	r3, [pc, #324]	; (800c3e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c2a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2a4:	0c1b      	lsrs	r3, r3, #16
 800c2a6:	f003 0303 	and.w	r3, r3, #3
 800c2aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c2ac:	4b4d      	ldr	r3, [pc, #308]	; (800c3e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c2ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2b2:	0f1b      	lsrs	r3, r3, #28
 800c2b4:	f003 0307 	and.w	r3, r3, #7
 800c2b8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	695b      	ldr	r3, [r3, #20]
 800c2be:	019a      	lsls	r2, r3, #6
 800c2c0:	693b      	ldr	r3, [r7, #16]
 800c2c2:	041b      	lsls	r3, r3, #16
 800c2c4:	431a      	orrs	r2, r3
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	699b      	ldr	r3, [r3, #24]
 800c2ca:	061b      	lsls	r3, r3, #24
 800c2cc:	431a      	orrs	r2, r3
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	071b      	lsls	r3, r3, #28
 800c2d2:	4944      	ldr	r1, [pc, #272]	; (800c3e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c2d4:	4313      	orrs	r3, r2
 800c2d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c2da:	4b42      	ldr	r3, [pc, #264]	; (800c3e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c2dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2e0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2e8:	3b01      	subs	r3, #1
 800c2ea:	021b      	lsls	r3, r3, #8
 800c2ec:	493d      	ldr	r1, [pc, #244]	; (800c3e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c2ee:	4313      	orrs	r3, r2
 800c2f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d022      	beq.n	800c346 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c304:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c308:	d11d      	bne.n	800c346 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c30a:	4b36      	ldr	r3, [pc, #216]	; (800c3e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c30c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c310:	0e1b      	lsrs	r3, r3, #24
 800c312:	f003 030f 	and.w	r3, r3, #15
 800c316:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c318:	4b32      	ldr	r3, [pc, #200]	; (800c3e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c31a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c31e:	0f1b      	lsrs	r3, r3, #28
 800c320:	f003 0307 	and.w	r3, r3, #7
 800c324:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	695b      	ldr	r3, [r3, #20]
 800c32a:	019a      	lsls	r2, r3, #6
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	6a1b      	ldr	r3, [r3, #32]
 800c330:	041b      	lsls	r3, r3, #16
 800c332:	431a      	orrs	r2, r3
 800c334:	693b      	ldr	r3, [r7, #16]
 800c336:	061b      	lsls	r3, r3, #24
 800c338:	431a      	orrs	r2, r3
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	071b      	lsls	r3, r3, #28
 800c33e:	4929      	ldr	r1, [pc, #164]	; (800c3e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c340:	4313      	orrs	r3, r2
 800c342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	f003 0308 	and.w	r3, r3, #8
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d028      	beq.n	800c3a4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c352:	4b24      	ldr	r3, [pc, #144]	; (800c3e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c358:	0e1b      	lsrs	r3, r3, #24
 800c35a:	f003 030f 	and.w	r3, r3, #15
 800c35e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c360:	4b20      	ldr	r3, [pc, #128]	; (800c3e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c366:	0c1b      	lsrs	r3, r3, #16
 800c368:	f003 0303 	and.w	r3, r3, #3
 800c36c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	695b      	ldr	r3, [r3, #20]
 800c372:	019a      	lsls	r2, r3, #6
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	041b      	lsls	r3, r3, #16
 800c378:	431a      	orrs	r2, r3
 800c37a:	693b      	ldr	r3, [r7, #16]
 800c37c:	061b      	lsls	r3, r3, #24
 800c37e:	431a      	orrs	r2, r3
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	69db      	ldr	r3, [r3, #28]
 800c384:	071b      	lsls	r3, r3, #28
 800c386:	4917      	ldr	r1, [pc, #92]	; (800c3e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c388:	4313      	orrs	r3, r2
 800c38a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c38e:	4b15      	ldr	r3, [pc, #84]	; (800c3e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c390:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c394:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c39c:	4911      	ldr	r1, [pc, #68]	; (800c3e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c39e:	4313      	orrs	r3, r2
 800c3a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c3a4:	4b0f      	ldr	r3, [pc, #60]	; (800c3e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	4a0e      	ldr	r2, [pc, #56]	; (800c3e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c3aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c3ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c3b0:	f7f8 fa52 	bl	8004858 <HAL_GetTick>
 800c3b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c3b6:	e008      	b.n	800c3ca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c3b8:	f7f8 fa4e 	bl	8004858 <HAL_GetTick>
 800c3bc:	4602      	mov	r2, r0
 800c3be:	697b      	ldr	r3, [r7, #20]
 800c3c0:	1ad3      	subs	r3, r2, r3
 800c3c2:	2b64      	cmp	r3, #100	; 0x64
 800c3c4:	d901      	bls.n	800c3ca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c3c6:	2303      	movs	r3, #3
 800c3c8:	e007      	b.n	800c3da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c3ca:	4b06      	ldr	r3, [pc, #24]	; (800c3e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c3d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3d6:	d1ef      	bne.n	800c3b8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800c3d8:	2300      	movs	r3, #0
}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	3720      	adds	r7, #32
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}
 800c3e2:	bf00      	nop
 800c3e4:	40023800 	.word	0x40023800

0800c3e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800c3e8:	b480      	push	{r7}
 800c3ea:	b087      	sub	sp, #28
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c406:	f040 808c 	bne.w	800c522 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 800c40a:	4b95      	ldr	r3, [pc, #596]	; (800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c40c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c410:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800c418:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c420:	d07c      	beq.n	800c51c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c428:	d87d      	bhi.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800c42a:	68bb      	ldr	r3, [r7, #8]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d004      	beq.n	800c43a <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800c430:	68bb      	ldr	r3, [r7, #8]
 800c432:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c436:	d039      	beq.n	800c4ac <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800c438:	e075      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c43a:	4b89      	ldr	r3, [pc, #548]	; (800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c43c:	685b      	ldr	r3, [r3, #4]
 800c43e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c442:	2b00      	cmp	r3, #0
 800c444:	d108      	bne.n	800c458 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c446:	4b86      	ldr	r3, [pc, #536]	; (800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c448:	685b      	ldr	r3, [r3, #4]
 800c44a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c44e:	4a85      	ldr	r2, [pc, #532]	; (800c664 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800c450:	fbb2 f3f3 	udiv	r3, r2, r3
 800c454:	613b      	str	r3, [r7, #16]
 800c456:	e007      	b.n	800c468 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c458:	4b81      	ldr	r3, [pc, #516]	; (800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c45a:	685b      	ldr	r3, [r3, #4]
 800c45c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c460:	4a81      	ldr	r2, [pc, #516]	; (800c668 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800c462:	fbb2 f3f3 	udiv	r3, r2, r3
 800c466:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800c468:	4b7d      	ldr	r3, [pc, #500]	; (800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c46a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c46e:	0e1b      	lsrs	r3, r3, #24
 800c470:	f003 030f 	and.w	r3, r3, #15
 800c474:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800c476:	4b7a      	ldr	r3, [pc, #488]	; (800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c47c:	099b      	lsrs	r3, r3, #6
 800c47e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c482:	693a      	ldr	r2, [r7, #16]
 800c484:	fb03 f202 	mul.w	r2, r3, r2
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c48e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800c490:	4b73      	ldr	r3, [pc, #460]	; (800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c492:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c496:	0a1b      	lsrs	r3, r3, #8
 800c498:	f003 031f 	and.w	r3, r3, #31
 800c49c:	3301      	adds	r3, #1
 800c49e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c4a0:	697a      	ldr	r2, [r7, #20]
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4a8:	617b      	str	r3, [r7, #20]
        break;
 800c4aa:	e03d      	b.n	800c528 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c4ac:	4b6c      	ldr	r3, [pc, #432]	; (800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c4ae:	685b      	ldr	r3, [r3, #4]
 800c4b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d108      	bne.n	800c4ca <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c4b8:	4b69      	ldr	r3, [pc, #420]	; (800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c4ba:	685b      	ldr	r3, [r3, #4]
 800c4bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c4c0:	4a68      	ldr	r2, [pc, #416]	; (800c664 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800c4c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4c6:	613b      	str	r3, [r7, #16]
 800c4c8:	e007      	b.n	800c4da <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c4ca:	4b65      	ldr	r3, [pc, #404]	; (800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c4cc:	685b      	ldr	r3, [r3, #4]
 800c4ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c4d2:	4a65      	ldr	r2, [pc, #404]	; (800c668 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800c4d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4d8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800c4da:	4b61      	ldr	r3, [pc, #388]	; (800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c4dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4e0:	0e1b      	lsrs	r3, r3, #24
 800c4e2:	f003 030f 	and.w	r3, r3, #15
 800c4e6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800c4e8:	4b5d      	ldr	r3, [pc, #372]	; (800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c4ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4ee:	099b      	lsrs	r3, r3, #6
 800c4f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4f4:	693a      	ldr	r2, [r7, #16]
 800c4f6:	fb03 f202 	mul.w	r2, r3, r2
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c500:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800c502:	4b57      	ldr	r3, [pc, #348]	; (800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c504:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c508:	f003 031f 	and.w	r3, r3, #31
 800c50c:	3301      	adds	r3, #1
 800c50e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c510:	697a      	ldr	r2, [r7, #20]
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	fbb2 f3f3 	udiv	r3, r2, r3
 800c518:	617b      	str	r3, [r7, #20]
        break;
 800c51a:	e005      	b.n	800c528 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 800c51c:	4b53      	ldr	r3, [pc, #332]	; (800c66c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800c51e:	617b      	str	r3, [r7, #20]
        break;
 800c520:	e002      	b.n	800c528 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 800c522:	bf00      	nop
 800c524:	e000      	b.n	800c528 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 800c526:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c52e:	f040 808c 	bne.w	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 800c532:	4b4b      	ldr	r3, [pc, #300]	; (800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c534:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c538:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800c540:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800c542:	68bb      	ldr	r3, [r7, #8]
 800c544:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c548:	d07c      	beq.n	800c644 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c550:	d87d      	bhi.n	800c64e <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d004      	beq.n	800c562 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c55e:	d039      	beq.n	800c5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800c560:	e075      	b.n	800c64e <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c562:	4b3f      	ldr	r3, [pc, #252]	; (800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c564:	685b      	ldr	r3, [r3, #4]
 800c566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d108      	bne.n	800c580 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c56e:	4b3c      	ldr	r3, [pc, #240]	; (800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c570:	685b      	ldr	r3, [r3, #4]
 800c572:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c576:	4a3b      	ldr	r2, [pc, #236]	; (800c664 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800c578:	fbb2 f3f3 	udiv	r3, r2, r3
 800c57c:	613b      	str	r3, [r7, #16]
 800c57e:	e007      	b.n	800c590 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c580:	4b37      	ldr	r3, [pc, #220]	; (800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c582:	685b      	ldr	r3, [r3, #4]
 800c584:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c588:	4a37      	ldr	r2, [pc, #220]	; (800c668 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800c58a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c58e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800c590:	4b33      	ldr	r3, [pc, #204]	; (800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c596:	0e1b      	lsrs	r3, r3, #24
 800c598:	f003 030f 	and.w	r3, r3, #15
 800c59c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800c59e:	4b30      	ldr	r3, [pc, #192]	; (800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c5a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5a4:	099b      	lsrs	r3, r3, #6
 800c5a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5aa:	693a      	ldr	r2, [r7, #16]
 800c5ac:	fb03 f202 	mul.w	r2, r3, r2
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5b6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800c5b8:	4b29      	ldr	r3, [pc, #164]	; (800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c5ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c5be:	0a1b      	lsrs	r3, r3, #8
 800c5c0:	f003 031f 	and.w	r3, r3, #31
 800c5c4:	3301      	adds	r3, #1
 800c5c6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c5c8:	697a      	ldr	r2, [r7, #20]
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5d0:	617b      	str	r3, [r7, #20]
        break;
 800c5d2:	e03d      	b.n	800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c5d4:	4b22      	ldr	r3, [pc, #136]	; (800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c5d6:	685b      	ldr	r3, [r3, #4]
 800c5d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d108      	bne.n	800c5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c5e0:	4b1f      	ldr	r3, [pc, #124]	; (800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c5e2:	685b      	ldr	r3, [r3, #4]
 800c5e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c5e8:	4a1e      	ldr	r2, [pc, #120]	; (800c664 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800c5ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5ee:	613b      	str	r3, [r7, #16]
 800c5f0:	e007      	b.n	800c602 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c5f2:	4b1b      	ldr	r3, [pc, #108]	; (800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c5f4:	685b      	ldr	r3, [r3, #4]
 800c5f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c5fa:	4a1b      	ldr	r2, [pc, #108]	; (800c668 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800c5fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c600:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800c602:	4b17      	ldr	r3, [pc, #92]	; (800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c604:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c608:	0e1b      	lsrs	r3, r3, #24
 800c60a:	f003 030f 	and.w	r3, r3, #15
 800c60e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800c610:	4b13      	ldr	r3, [pc, #76]	; (800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c612:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c616:	099b      	lsrs	r3, r3, #6
 800c618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c61c:	693a      	ldr	r2, [r7, #16]
 800c61e:	fb03 f202 	mul.w	r2, r3, r2
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	fbb2 f3f3 	udiv	r3, r2, r3
 800c628:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800c62a:	4b0d      	ldr	r3, [pc, #52]	; (800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c62c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c630:	f003 031f 	and.w	r3, r3, #31
 800c634:	3301      	adds	r3, #1
 800c636:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c638:	697a      	ldr	r2, [r7, #20]
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c640:	617b      	str	r3, [r7, #20]
        break;
 800c642:	e005      	b.n	800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 800c644:	4b09      	ldr	r3, [pc, #36]	; (800c66c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800c646:	617b      	str	r3, [r7, #20]
        break;
 800c648:	e002      	b.n	800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 800c64a:	bf00      	nop
 800c64c:	e000      	b.n	800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 800c64e:	bf00      	nop

  return frequency;
 800c650:	697b      	ldr	r3, [r7, #20]
}
 800c652:	4618      	mov	r0, r3
 800c654:	371c      	adds	r7, #28
 800c656:	46bd      	mov	sp, r7
 800c658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65c:	4770      	bx	lr
 800c65e:	bf00      	nop
 800c660:	40023800 	.word	0x40023800
 800c664:	00f42400 	.word	0x00f42400
 800c668:	017d7840 	.word	0x017d7840
 800c66c:	00bb8000 	.word	0x00bb8000

0800c670 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b084      	sub	sp, #16
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c678:	2301      	movs	r3, #1
 800c67a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d101      	bne.n	800c686 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800c682:	2301      	movs	r3, #1
 800c684:	e071      	b.n	800c76a <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	7f5b      	ldrb	r3, [r3, #29]
 800c68a:	b2db      	uxtb	r3, r3
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d105      	bne.n	800c69c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2200      	movs	r2, #0
 800c694:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f7f7 fa94 	bl	8003bc4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2202      	movs	r2, #2
 800c6a0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	68db      	ldr	r3, [r3, #12]
 800c6a8:	f003 0310 	and.w	r3, r3, #16
 800c6ac:	2b10      	cmp	r3, #16
 800c6ae:	d053      	beq.n	800c758 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	22ca      	movs	r2, #202	; 0xca
 800c6b6:	625a      	str	r2, [r3, #36]	; 0x24
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	2253      	movs	r2, #83	; 0x53
 800c6be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	f000 fac9 	bl	800cc58 <RTC_EnterInitMode>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800c6ca:	7bfb      	ldrb	r3, [r7, #15]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d12a      	bne.n	800c726 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	6899      	ldr	r1, [r3, #8]
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681a      	ldr	r2, [r3, #0]
 800c6da:	4b26      	ldr	r3, [pc, #152]	; (800c774 <HAL_RTC_Init+0x104>)
 800c6dc:	400b      	ands	r3, r1
 800c6de:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	6899      	ldr	r1, [r3, #8]
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	685a      	ldr	r2, [r3, #4]
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	691b      	ldr	r3, [r3, #16]
 800c6ee:	431a      	orrs	r2, r3
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	695b      	ldr	r3, [r3, #20]
 800c6f4:	431a      	orrs	r2, r3
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	430a      	orrs	r2, r1
 800c6fc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	687a      	ldr	r2, [r7, #4]
 800c704:	68d2      	ldr	r2, [r2, #12]
 800c706:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	6919      	ldr	r1, [r3, #16]
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	689b      	ldr	r3, [r3, #8]
 800c712:	041a      	lsls	r2, r3, #16
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	430a      	orrs	r2, r1
 800c71a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800c71c:	6878      	ldr	r0, [r7, #4]
 800c71e:	f000 fad2 	bl	800ccc6 <RTC_ExitInitMode>
 800c722:	4603      	mov	r3, r0
 800c724:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800c726:	7bfb      	ldrb	r3, [r7, #15]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d110      	bne.n	800c74e <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	f022 0208 	bic.w	r2, r2, #8
 800c73a:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	699a      	ldr	r2, [r3, #24]
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	430a      	orrs	r2, r1
 800c74c:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	22ff      	movs	r2, #255	; 0xff
 800c754:	625a      	str	r2, [r3, #36]	; 0x24
 800c756:	e001      	b.n	800c75c <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800c758:	2300      	movs	r3, #0
 800c75a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800c75c:	7bfb      	ldrb	r3, [r7, #15]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d102      	bne.n	800c768 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2201      	movs	r2, #1
 800c766:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800c768:	7bfb      	ldrb	r3, [r7, #15]
}
 800c76a:	4618      	mov	r0, r3
 800c76c:	3710      	adds	r7, #16
 800c76e:	46bd      	mov	sp, r7
 800c770:	bd80      	pop	{r7, pc}
 800c772:	bf00      	nop
 800c774:	ff8fffbf 	.word	0xff8fffbf

0800c778 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c778:	b590      	push	{r4, r7, lr}
 800c77a:	b087      	sub	sp, #28
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	60f8      	str	r0, [r7, #12]
 800c780:	60b9      	str	r1, [r7, #8]
 800c782:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800c784:	2300      	movs	r3, #0
 800c786:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	7f1b      	ldrb	r3, [r3, #28]
 800c78c:	2b01      	cmp	r3, #1
 800c78e:	d101      	bne.n	800c794 <HAL_RTC_SetTime+0x1c>
 800c790:	2302      	movs	r3, #2
 800c792:	e085      	b.n	800c8a0 <HAL_RTC_SetTime+0x128>
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	2201      	movs	r2, #1
 800c798:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	2202      	movs	r2, #2
 800c79e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d126      	bne.n	800c7f4 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	689b      	ldr	r3, [r3, #8]
 800c7ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d102      	bne.n	800c7ba <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	781b      	ldrb	r3, [r3, #0]
 800c7be:	4618      	mov	r0, r3
 800c7c0:	f000 faa6 	bl	800cd10 <RTC_ByteToBcd2>
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	785b      	ldrb	r3, [r3, #1]
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	f000 fa9f 	bl	800cd10 <RTC_ByteToBcd2>
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c7d6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	789b      	ldrb	r3, [r3, #2]
 800c7dc:	4618      	mov	r0, r3
 800c7de:	f000 fa97 	bl	800cd10 <RTC_ByteToBcd2>
 800c7e2:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c7e4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	78db      	ldrb	r3, [r3, #3]
 800c7ec:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c7ee:	4313      	orrs	r3, r2
 800c7f0:	617b      	str	r3, [r7, #20]
 800c7f2:	e018      	b.n	800c826 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	689b      	ldr	r3, [r3, #8]
 800c7fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d102      	bne.n	800c808 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	2200      	movs	r2, #0
 800c806:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800c808:	68bb      	ldr	r3, [r7, #8]
 800c80a:	781b      	ldrb	r3, [r3, #0]
 800c80c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	785b      	ldrb	r3, [r3, #1]
 800c812:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800c814:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800c816:	68ba      	ldr	r2, [r7, #8]
 800c818:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800c81a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	78db      	ldrb	r3, [r3, #3]
 800c820:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800c822:	4313      	orrs	r3, r2
 800c824:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	22ca      	movs	r2, #202	; 0xca
 800c82c:	625a      	str	r2, [r3, #36]	; 0x24
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	2253      	movs	r2, #83	; 0x53
 800c834:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c836:	68f8      	ldr	r0, [r7, #12]
 800c838:	f000 fa0e 	bl	800cc58 <RTC_EnterInitMode>
 800c83c:	4603      	mov	r3, r0
 800c83e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800c840:	7cfb      	ldrb	r3, [r7, #19]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d11e      	bne.n	800c884 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	681a      	ldr	r2, [r3, #0]
 800c84a:	6979      	ldr	r1, [r7, #20]
 800c84c:	4b16      	ldr	r3, [pc, #88]	; (800c8a8 <HAL_RTC_SetTime+0x130>)
 800c84e:	400b      	ands	r3, r1
 800c850:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	689a      	ldr	r2, [r3, #8]
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c860:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	6899      	ldr	r1, [r3, #8]
 800c868:	68bb      	ldr	r3, [r7, #8]
 800c86a:	68da      	ldr	r2, [r3, #12]
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	691b      	ldr	r3, [r3, #16]
 800c870:	431a      	orrs	r2, r3
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	430a      	orrs	r2, r1
 800c878:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c87a:	68f8      	ldr	r0, [r7, #12]
 800c87c:	f000 fa23 	bl	800ccc6 <RTC_ExitInitMode>
 800c880:	4603      	mov	r3, r0
 800c882:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800c884:	7cfb      	ldrb	r3, [r7, #19]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d102      	bne.n	800c890 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	2201      	movs	r2, #1
 800c88e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	22ff      	movs	r2, #255	; 0xff
 800c896:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	2200      	movs	r2, #0
 800c89c:	771a      	strb	r2, [r3, #28]

  return status;
 800c89e:	7cfb      	ldrb	r3, [r7, #19]
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	371c      	adds	r7, #28
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd90      	pop	{r4, r7, pc}
 800c8a8:	007f7f7f 	.word	0x007f7f7f

0800c8ac <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c8ac:	b590      	push	{r4, r7, lr}
 800c8ae:	b087      	sub	sp, #28
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	60f8      	str	r0, [r7, #12]
 800c8b4:	60b9      	str	r1, [r7, #8]
 800c8b6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	7f1b      	ldrb	r3, [r3, #28]
 800c8c0:	2b01      	cmp	r3, #1
 800c8c2:	d101      	bne.n	800c8c8 <HAL_RTC_SetDate+0x1c>
 800c8c4:	2302      	movs	r3, #2
 800c8c6:	e06f      	b.n	800c9a8 <HAL_RTC_SetDate+0xfc>
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	2201      	movs	r2, #1
 800c8cc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	2202      	movs	r2, #2
 800c8d2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d10e      	bne.n	800c8f8 <HAL_RTC_SetDate+0x4c>
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	785b      	ldrb	r3, [r3, #1]
 800c8de:	f003 0310 	and.w	r3, r3, #16
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d008      	beq.n	800c8f8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	785b      	ldrb	r3, [r3, #1]
 800c8ea:	f023 0310 	bic.w	r3, r3, #16
 800c8ee:	b2db      	uxtb	r3, r3
 800c8f0:	330a      	adds	r3, #10
 800c8f2:	b2da      	uxtb	r2, r3
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d11c      	bne.n	800c938 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c8fe:	68bb      	ldr	r3, [r7, #8]
 800c900:	78db      	ldrb	r3, [r3, #3]
 800c902:	4618      	mov	r0, r3
 800c904:	f000 fa04 	bl	800cd10 <RTC_ByteToBcd2>
 800c908:	4603      	mov	r3, r0
 800c90a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	785b      	ldrb	r3, [r3, #1]
 800c910:	4618      	mov	r0, r3
 800c912:	f000 f9fd 	bl	800cd10 <RTC_ByteToBcd2>
 800c916:	4603      	mov	r3, r0
 800c918:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c91a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	789b      	ldrb	r3, [r3, #2]
 800c920:	4618      	mov	r0, r3
 800c922:	f000 f9f5 	bl	800cd10 <RTC_ByteToBcd2>
 800c926:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c928:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	781b      	ldrb	r3, [r3, #0]
 800c930:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c932:	4313      	orrs	r3, r2
 800c934:	617b      	str	r3, [r7, #20]
 800c936:	e00e      	b.n	800c956 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c938:	68bb      	ldr	r3, [r7, #8]
 800c93a:	78db      	ldrb	r3, [r3, #3]
 800c93c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	785b      	ldrb	r3, [r3, #1]
 800c942:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c944:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800c946:	68ba      	ldr	r2, [r7, #8]
 800c948:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c94a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	781b      	ldrb	r3, [r3, #0]
 800c950:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c952:	4313      	orrs	r3, r2
 800c954:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	22ca      	movs	r2, #202	; 0xca
 800c95c:	625a      	str	r2, [r3, #36]	; 0x24
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	2253      	movs	r2, #83	; 0x53
 800c964:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c966:	68f8      	ldr	r0, [r7, #12]
 800c968:	f000 f976 	bl	800cc58 <RTC_EnterInitMode>
 800c96c:	4603      	mov	r3, r0
 800c96e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800c970:	7cfb      	ldrb	r3, [r7, #19]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d10a      	bne.n	800c98c <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	681a      	ldr	r2, [r3, #0]
 800c97a:	6979      	ldr	r1, [r7, #20]
 800c97c:	4b0c      	ldr	r3, [pc, #48]	; (800c9b0 <HAL_RTC_SetDate+0x104>)
 800c97e:	400b      	ands	r3, r1
 800c980:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c982:	68f8      	ldr	r0, [r7, #12]
 800c984:	f000 f99f 	bl	800ccc6 <RTC_ExitInitMode>
 800c988:	4603      	mov	r3, r0
 800c98a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800c98c:	7cfb      	ldrb	r3, [r7, #19]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d102      	bne.n	800c998 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	2201      	movs	r2, #1
 800c996:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	22ff      	movs	r2, #255	; 0xff
 800c99e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	771a      	strb	r2, [r3, #28]

  return status;
 800c9a6:	7cfb      	ldrb	r3, [r7, #19]
}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	371c      	adds	r7, #28
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd90      	pop	{r4, r7, pc}
 800c9b0:	00ffff3f 	.word	0x00ffff3f

0800c9b4 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800c9b4:	b590      	push	{r4, r7, lr}
 800c9b6:	b089      	sub	sp, #36	; 0x24
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	60f8      	str	r0, [r7, #12]
 800c9bc:	60b9      	str	r1, [r7, #8]
 800c9be:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	7f1b      	ldrb	r3, [r3, #28]
 800c9d0:	2b01      	cmp	r3, #1
 800c9d2:	d101      	bne.n	800c9d8 <HAL_RTC_SetAlarm+0x24>
 800c9d4:	2302      	movs	r3, #2
 800c9d6:	e113      	b.n	800cc00 <HAL_RTC_SetAlarm+0x24c>
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	2201      	movs	r2, #1
 800c9dc:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	2202      	movs	r2, #2
 800c9e2:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d137      	bne.n	800ca5a <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	689b      	ldr	r3, [r3, #8]
 800c9f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d102      	bne.n	800c9fe <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800c9fe:	68bb      	ldr	r3, [r7, #8]
 800ca00:	781b      	ldrb	r3, [r3, #0]
 800ca02:	4618      	mov	r0, r3
 800ca04:	f000 f984 	bl	800cd10 <RTC_ByteToBcd2>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	785b      	ldrb	r3, [r3, #1]
 800ca10:	4618      	mov	r0, r3
 800ca12:	f000 f97d 	bl	800cd10 <RTC_ByteToBcd2>
 800ca16:	4603      	mov	r3, r0
 800ca18:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800ca1a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	789b      	ldrb	r3, [r3, #2]
 800ca20:	4618      	mov	r0, r3
 800ca22:	f000 f975 	bl	800cd10 <RTC_ByteToBcd2>
 800ca26:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800ca28:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	78db      	ldrb	r3, [r3, #3]
 800ca30:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800ca32:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800ca36:	68bb      	ldr	r3, [r7, #8]
 800ca38:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	f000 f967 	bl	800cd10 <RTC_ByteToBcd2>
 800ca42:	4603      	mov	r3, r0
 800ca44:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800ca46:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800ca4a:	68bb      	ldr	r3, [r7, #8]
 800ca4c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800ca4e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800ca50:	68bb      	ldr	r3, [r7, #8]
 800ca52:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800ca54:	4313      	orrs	r3, r2
 800ca56:	61fb      	str	r3, [r7, #28]
 800ca58:	e023      	b.n	800caa2 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	689b      	ldr	r3, [r3, #8]
 800ca60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d102      	bne.n	800ca6e <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800ca6e:	68bb      	ldr	r3, [r7, #8]
 800ca70:	781b      	ldrb	r3, [r3, #0]
 800ca72:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	785b      	ldrb	r3, [r3, #1]
 800ca78:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800ca7a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800ca7c:	68ba      	ldr	r2, [r7, #8]
 800ca7e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800ca80:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	78db      	ldrb	r3, [r3, #3]
 800ca86:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800ca88:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800ca8a:	68bb      	ldr	r3, [r7, #8]
 800ca8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ca90:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800ca92:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800ca98:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800ca9e:	4313      	orrs	r3, r2
 800caa0:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800caa2:	68bb      	ldr	r3, [r7, #8]
 800caa4:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800caa6:	68bb      	ldr	r3, [r7, #8]
 800caa8:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800caaa:	4313      	orrs	r3, r2
 800caac:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	22ca      	movs	r2, #202	; 0xca
 800cab4:	625a      	str	r2, [r3, #36]	; 0x24
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	2253      	movs	r2, #83	; 0x53
 800cabc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800cabe:	68bb      	ldr	r3, [r7, #8]
 800cac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cac2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cac6:	d148      	bne.n	800cb5a <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	689a      	ldr	r2, [r3, #8]
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cad6:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	689a      	ldr	r2, [r3, #8]
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800cae6:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	68db      	ldr	r3, [r3, #12]
 800caee:	b2da      	uxtb	r2, r3
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800caf8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cafa:	f7f7 fead 	bl	8004858 <HAL_GetTick>
 800cafe:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800cb00:	e013      	b.n	800cb2a <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cb02:	f7f7 fea9 	bl	8004858 <HAL_GetTick>
 800cb06:	4602      	mov	r2, r0
 800cb08:	69bb      	ldr	r3, [r7, #24]
 800cb0a:	1ad3      	subs	r3, r2, r3
 800cb0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cb10:	d90b      	bls.n	800cb2a <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	22ff      	movs	r2, #255	; 0xff
 800cb18:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	2203      	movs	r2, #3
 800cb1e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	2200      	movs	r2, #0
 800cb24:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800cb26:	2303      	movs	r3, #3
 800cb28:	e06a      	b.n	800cc00 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	68db      	ldr	r3, [r3, #12]
 800cb30:	f003 0301 	and.w	r3, r3, #1
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d0e4      	beq.n	800cb02 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	69fa      	ldr	r2, [r7, #28]
 800cb3e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	697a      	ldr	r2, [r7, #20]
 800cb46:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	689a      	ldr	r2, [r3, #8]
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cb56:	609a      	str	r2, [r3, #8]
 800cb58:	e047      	b.n	800cbea <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	689a      	ldr	r2, [r3, #8]
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800cb68:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	689a      	ldr	r2, [r3, #8]
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cb78:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	68db      	ldr	r3, [r3, #12]
 800cb80:	b2da      	uxtb	r2, r3
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	f462 7220 	orn	r2, r2, #640	; 0x280
 800cb8a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cb8c:	f7f7 fe64 	bl	8004858 <HAL_GetTick>
 800cb90:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800cb92:	e013      	b.n	800cbbc <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cb94:	f7f7 fe60 	bl	8004858 <HAL_GetTick>
 800cb98:	4602      	mov	r2, r0
 800cb9a:	69bb      	ldr	r3, [r7, #24]
 800cb9c:	1ad3      	subs	r3, r2, r3
 800cb9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cba2:	d90b      	bls.n	800cbbc <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	22ff      	movs	r2, #255	; 0xff
 800cbaa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	2203      	movs	r2, #3
 800cbb0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800cbb8:	2303      	movs	r3, #3
 800cbba:	e021      	b.n	800cc00 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	68db      	ldr	r3, [r3, #12]
 800cbc2:	f003 0302 	and.w	r3, r3, #2
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d0e4      	beq.n	800cb94 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	69fa      	ldr	r2, [r7, #28]
 800cbd0:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	697a      	ldr	r2, [r7, #20]
 800cbd8:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	689a      	ldr	r2, [r3, #8]
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cbe8:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	22ff      	movs	r2, #255	; 0xff
 800cbf0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	2201      	movs	r2, #1
 800cbf6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800cbfe:	2300      	movs	r3, #0
}
 800cc00:	4618      	mov	r0, r3
 800cc02:	3724      	adds	r7, #36	; 0x24
 800cc04:	46bd      	mov	sp, r7
 800cc06:	bd90      	pop	{r4, r7, pc}

0800cc08 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b084      	sub	sp, #16
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cc10:	2300      	movs	r3, #0
 800cc12:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	68da      	ldr	r2, [r3, #12]
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800cc22:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800cc24:	f7f7 fe18 	bl	8004858 <HAL_GetTick>
 800cc28:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cc2a:	e009      	b.n	800cc40 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cc2c:	f7f7 fe14 	bl	8004858 <HAL_GetTick>
 800cc30:	4602      	mov	r2, r0
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	1ad3      	subs	r3, r2, r3
 800cc36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cc3a:	d901      	bls.n	800cc40 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800cc3c:	2303      	movs	r3, #3
 800cc3e:	e007      	b.n	800cc50 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	68db      	ldr	r3, [r3, #12]
 800cc46:	f003 0320 	and.w	r3, r3, #32
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d0ee      	beq.n	800cc2c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800cc4e:	2300      	movs	r3, #0
}
 800cc50:	4618      	mov	r0, r3
 800cc52:	3710      	adds	r7, #16
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}

0800cc58 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b084      	sub	sp, #16
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cc60:	2300      	movs	r3, #0
 800cc62:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800cc64:	2300      	movs	r3, #0
 800cc66:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	68db      	ldr	r3, [r3, #12]
 800cc6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d122      	bne.n	800ccbc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	68da      	ldr	r2, [r3, #12]
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cc84:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cc86:	f7f7 fde7 	bl	8004858 <HAL_GetTick>
 800cc8a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800cc8c:	e00c      	b.n	800cca8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cc8e:	f7f7 fde3 	bl	8004858 <HAL_GetTick>
 800cc92:	4602      	mov	r2, r0
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	1ad3      	subs	r3, r2, r3
 800cc98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cc9c:	d904      	bls.n	800cca8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	2204      	movs	r2, #4
 800cca2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800cca4:	2301      	movs	r3, #1
 800cca6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	68db      	ldr	r3, [r3, #12]
 800ccae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d102      	bne.n	800ccbc <RTC_EnterInitMode+0x64>
 800ccb6:	7bfb      	ldrb	r3, [r7, #15]
 800ccb8:	2b01      	cmp	r3, #1
 800ccba:	d1e8      	bne.n	800cc8e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800ccbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	3710      	adds	r7, #16
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}

0800ccc6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800ccc6:	b580      	push	{r7, lr}
 800ccc8:	b084      	sub	sp, #16
 800ccca:	af00      	add	r7, sp, #0
 800cccc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	68da      	ldr	r2, [r3, #12]
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cce0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	689b      	ldr	r3, [r3, #8]
 800cce8:	f003 0320 	and.w	r3, r3, #32
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d10a      	bne.n	800cd06 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ccf0:	6878      	ldr	r0, [r7, #4]
 800ccf2:	f7ff ff89 	bl	800cc08 <HAL_RTC_WaitForSynchro>
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d004      	beq.n	800cd06 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2204      	movs	r2, #4
 800cd00:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800cd02:	2301      	movs	r3, #1
 800cd04:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800cd06:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd08:	4618      	mov	r0, r3
 800cd0a:	3710      	adds	r7, #16
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}

0800cd10 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800cd10:	b480      	push	{r7}
 800cd12:	b085      	sub	sp, #20
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	4603      	mov	r3, r0
 800cd18:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800cd1e:	e005      	b.n	800cd2c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	3301      	adds	r3, #1
 800cd24:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800cd26:	79fb      	ldrb	r3, [r7, #7]
 800cd28:	3b0a      	subs	r3, #10
 800cd2a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800cd2c:	79fb      	ldrb	r3, [r7, #7]
 800cd2e:	2b09      	cmp	r3, #9
 800cd30:	d8f6      	bhi.n	800cd20 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	b2db      	uxtb	r3, r3
 800cd36:	011b      	lsls	r3, r3, #4
 800cd38:	b2da      	uxtb	r2, r3
 800cd3a:	79fb      	ldrb	r3, [r7, #7]
 800cd3c:	4313      	orrs	r3, r2
 800cd3e:	b2db      	uxtb	r3, r3
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	3714      	adds	r7, #20
 800cd44:	46bd      	mov	sp, r7
 800cd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4a:	4770      	bx	lr

0800cd4c <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800cd4c:	b480      	push	{r7}
 800cd4e:	b087      	sub	sp, #28
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	60f8      	str	r0, [r7, #12]
 800cd54:	60b9      	str	r1, [r7, #8]
 800cd56:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	7f1b      	ldrb	r3, [r3, #28]
 800cd60:	2b01      	cmp	r3, #1
 800cd62:	d101      	bne.n	800cd68 <HAL_RTCEx_SetTimeStamp+0x1c>
 800cd64:	2302      	movs	r3, #2
 800cd66:	e050      	b.n	800ce0a <HAL_RTCEx_SetTimeStamp+0xbe>
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	2201      	movs	r2, #1
 800cd6c:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	2202      	movs	r2, #2
 800cd72:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	f022 0206 	bic.w	r2, r2, #6
 800cd82:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	687a      	ldr	r2, [r7, #4]
 800cd90:	430a      	orrs	r2, r1
 800cd92:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	689a      	ldr	r2, [r3, #8]
 800cd9a:	4b1f      	ldr	r3, [pc, #124]	; (800ce18 <HAL_RTCEx_SetTimeStamp+0xcc>)
 800cd9c:	4013      	ands	r3, r2
 800cd9e:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 800cda0:	697a      	ldr	r2, [r7, #20]
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	4313      	orrs	r3, r2
 800cda6:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	22ca      	movs	r2, #202	; 0xca
 800cdae:	625a      	str	r2, [r3, #36]	; 0x24
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	2253      	movs	r2, #83	; 0x53
 800cdb6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	697a      	ldr	r2, [r7, #20]
 800cdbe:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	68db      	ldr	r3, [r3, #12]
 800cdc6:	b2da      	uxtb	r2, r3
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	f462 6208 	orn	r2, r2, #2176	; 0x880
 800cdd0:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	68db      	ldr	r3, [r3, #12]
 800cdd8:	b2da      	uxtb	r2, r3
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	f462 5284 	orn	r2, r2, #4224	; 0x1080
 800cde2:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	689a      	ldr	r2, [r3, #8]
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cdf2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	22ff      	movs	r2, #255	; 0xff
 800cdfa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	2201      	movs	r2, #1
 800ce00:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	2200      	movs	r2, #0
 800ce06:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800ce08:	2300      	movs	r3, #0
}
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	371c      	adds	r7, #28
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce14:	4770      	bx	lr
 800ce16:	bf00      	nop
 800ce18:	fffff7f7 	.word	0xfffff7f7

0800ce1c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b088      	sub	sp, #32
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800ce24:	2300      	movs	r3, #0
 800ce26:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800ce28:	2300      	movs	r3, #0
 800ce2a:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d101      	bne.n	800ce3a <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800ce36:	2301      	movs	r3, #1
 800ce38:	e156      	b.n	800d0e8 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800ce40:	b2db      	uxtb	r3, r3
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d106      	bne.n	800ce54 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	2200      	movs	r2, #0
 800ce4a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f7f7 fb54 	bl	80044fc <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2202      	movs	r2, #2
 800ce58:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800ce5c:	6878      	ldr	r0, [r7, #4]
 800ce5e:	f000 f95b 	bl	800d118 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	68db      	ldr	r3, [r3, #12]
 800ce66:	2b02      	cmp	r3, #2
 800ce68:	d00c      	beq.n	800ce84 <HAL_SAI_Init+0x68>
 800ce6a:	2b02      	cmp	r3, #2
 800ce6c:	d80d      	bhi.n	800ce8a <HAL_SAI_Init+0x6e>
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d002      	beq.n	800ce78 <HAL_SAI_Init+0x5c>
 800ce72:	2b01      	cmp	r3, #1
 800ce74:	d003      	beq.n	800ce7e <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800ce76:	e008      	b.n	800ce8a <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800ce78:	2300      	movs	r3, #0
 800ce7a:	61fb      	str	r3, [r7, #28]
      break;
 800ce7c:	e006      	b.n	800ce8c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800ce7e:	2310      	movs	r3, #16
 800ce80:	61fb      	str	r3, [r7, #28]
      break;
 800ce82:	e003      	b.n	800ce8c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800ce84:	2320      	movs	r3, #32
 800ce86:	61fb      	str	r3, [r7, #28]
      break;
 800ce88:	e000      	b.n	800ce8c <HAL_SAI_Init+0x70>
      break;
 800ce8a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	689b      	ldr	r3, [r3, #8]
 800ce90:	2b03      	cmp	r3, #3
 800ce92:	d81e      	bhi.n	800ced2 <HAL_SAI_Init+0xb6>
 800ce94:	a201      	add	r2, pc, #4	; (adr r2, 800ce9c <HAL_SAI_Init+0x80>)
 800ce96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce9a:	bf00      	nop
 800ce9c:	0800cead 	.word	0x0800cead
 800cea0:	0800ceb3 	.word	0x0800ceb3
 800cea4:	0800cebb 	.word	0x0800cebb
 800cea8:	0800cec3 	.word	0x0800cec3
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800ceac:	2300      	movs	r3, #0
 800ceae:	617b      	str	r3, [r7, #20]
    }
    break;
 800ceb0:	e010      	b.n	800ced4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800ceb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ceb6:	617b      	str	r3, [r7, #20]
    }
    break;
 800ceb8:	e00c      	b.n	800ced4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ceba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cebe:	617b      	str	r3, [r7, #20]
    }
    break;
 800cec0:	e008      	b.n	800ced4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800cec2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cec6:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800cec8:	69fb      	ldr	r3, [r7, #28]
 800ceca:	f043 0301 	orr.w	r3, r3, #1
 800cece:	61fb      	str	r3, [r7, #28]
    }
    break;
 800ced0:	e000      	b.n	800ced4 <HAL_SAI_Init+0xb8>
    default:
      break;
 800ced2:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	4a85      	ldr	r2, [pc, #532]	; (800d0f0 <HAL_SAI_Init+0x2d4>)
 800ceda:	4293      	cmp	r3, r2
 800cedc:	d004      	beq.n	800cee8 <HAL_SAI_Init+0xcc>
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	4a84      	ldr	r2, [pc, #528]	; (800d0f4 <HAL_SAI_Init+0x2d8>)
 800cee4:	4293      	cmp	r3, r2
 800cee6:	d103      	bne.n	800cef0 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800cee8:	4a83      	ldr	r2, [pc, #524]	; (800d0f8 <HAL_SAI_Init+0x2dc>)
 800ceea:	69fb      	ldr	r3, [r7, #28]
 800ceec:	6013      	str	r3, [r2, #0]
 800ceee:	e002      	b.n	800cef6 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800cef0:	4a82      	ldr	r2, [pc, #520]	; (800d0fc <HAL_SAI_Init+0x2e0>)
 800cef2:	69fb      	ldr	r3, [r7, #28]
 800cef4:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	69db      	ldr	r3, [r3, #28]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d04c      	beq.n	800cf98 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800cefe:	2300      	movs	r3, #0
 800cf00:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	4a7a      	ldr	r2, [pc, #488]	; (800d0f0 <HAL_SAI_Init+0x2d4>)
 800cf08:	4293      	cmp	r3, r2
 800cf0a:	d004      	beq.n	800cf16 <HAL_SAI_Init+0xfa>
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	4a78      	ldr	r2, [pc, #480]	; (800d0f4 <HAL_SAI_Init+0x2d8>)
 800cf12:	4293      	cmp	r3, r2
 800cf14:	d104      	bne.n	800cf20 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800cf16:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800cf1a:	f7ff fa65 	bl	800c3e8 <HAL_RCCEx_GetPeriphCLKFreq>
 800cf1e:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	4a76      	ldr	r2, [pc, #472]	; (800d100 <HAL_SAI_Init+0x2e4>)
 800cf26:	4293      	cmp	r3, r2
 800cf28:	d004      	beq.n	800cf34 <HAL_SAI_Init+0x118>
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	4a75      	ldr	r2, [pc, #468]	; (800d104 <HAL_SAI_Init+0x2e8>)
 800cf30:	4293      	cmp	r3, r2
 800cf32:	d104      	bne.n	800cf3e <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800cf34:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800cf38:	f7ff fa56 	bl	800c3e8 <HAL_RCCEx_GetPeriphCLKFreq>
 800cf3c:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800cf3e:	693a      	ldr	r2, [r7, #16]
 800cf40:	4613      	mov	r3, r2
 800cf42:	009b      	lsls	r3, r3, #2
 800cf44:	4413      	add	r3, r2
 800cf46:	005b      	lsls	r3, r3, #1
 800cf48:	461a      	mov	r2, r3
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	69db      	ldr	r3, [r3, #28]
 800cf4e:	025b      	lsls	r3, r3, #9
 800cf50:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf54:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	4a6b      	ldr	r2, [pc, #428]	; (800d108 <HAL_SAI_Init+0x2ec>)
 800cf5a:	fba2 2303 	umull	r2, r3, r2, r3
 800cf5e:	08da      	lsrs	r2, r3, #3
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800cf64:	68f9      	ldr	r1, [r7, #12]
 800cf66:	4b68      	ldr	r3, [pc, #416]	; (800d108 <HAL_SAI_Init+0x2ec>)
 800cf68:	fba3 2301 	umull	r2, r3, r3, r1
 800cf6c:	08da      	lsrs	r2, r3, #3
 800cf6e:	4613      	mov	r3, r2
 800cf70:	009b      	lsls	r3, r3, #2
 800cf72:	4413      	add	r3, r2
 800cf74:	005b      	lsls	r3, r3, #1
 800cf76:	1aca      	subs	r2, r1, r3
 800cf78:	2a08      	cmp	r2, #8
 800cf7a:	d904      	bls.n	800cf86 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	6a1b      	ldr	r3, [r3, #32]
 800cf80:	1c5a      	adds	r2, r3, #1
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf8a:	2b04      	cmp	r3, #4
 800cf8c:	d104      	bne.n	800cf98 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	6a1b      	ldr	r3, [r3, #32]
 800cf92:	085a      	lsrs	r2, r3, #1
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	685b      	ldr	r3, [r3, #4]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d003      	beq.n	800cfa8 <HAL_SAI_Init+0x18c>
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	685b      	ldr	r3, [r3, #4]
 800cfa4:	2b02      	cmp	r3, #2
 800cfa6:	d109      	bne.n	800cfbc <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfac:	2b01      	cmp	r3, #1
 800cfae:	d101      	bne.n	800cfb4 <HAL_SAI_Init+0x198>
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	e001      	b.n	800cfb8 <HAL_SAI_Init+0x19c>
 800cfb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cfb8:	61bb      	str	r3, [r7, #24]
 800cfba:	e008      	b.n	800cfce <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfc0:	2b01      	cmp	r3, #1
 800cfc2:	d102      	bne.n	800cfca <HAL_SAI_Init+0x1ae>
 800cfc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cfc8:	e000      	b.n	800cfcc <HAL_SAI_Init+0x1b0>
 800cfca:	2300      	movs	r3, #0
 800cfcc:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	6819      	ldr	r1, [r3, #0]
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681a      	ldr	r2, [r3, #0]
 800cfd8:	4b4c      	ldr	r3, [pc, #304]	; (800d10c <HAL_SAI_Init+0x2f0>)
 800cfda:	400b      	ands	r3, r1
 800cfdc:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	6819      	ldr	r1, [r3, #0]
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	685a      	ldr	r2, [r3, #4]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfec:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800cff2:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cff8:	431a      	orrs	r2, r3
 800cffa:	69bb      	ldr	r3, [r7, #24]
 800cffc:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800cffe:	697b      	ldr	r3, [r7, #20]
 800d000:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800d006:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	691b      	ldr	r3, [r3, #16]
 800d00c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d012:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	6a1b      	ldr	r3, [r3, #32]
 800d018:	051b      	lsls	r3, r3, #20
 800d01a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	430a      	orrs	r2, r1
 800d022:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	6859      	ldr	r1, [r3, #4]
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681a      	ldr	r2, [r3, #0]
 800d02e:	4b38      	ldr	r3, [pc, #224]	; (800d110 <HAL_SAI_Init+0x2f4>)
 800d030:	400b      	ands	r3, r1
 800d032:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	6859      	ldr	r1, [r3, #4]
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	699a      	ldr	r2, [r3, #24]
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d042:	431a      	orrs	r2, r3
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d048:	431a      	orrs	r2, r3
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	430a      	orrs	r2, r1
 800d050:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	6899      	ldr	r1, [r3, #8]
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681a      	ldr	r2, [r3, #0]
 800d05c:	4b2d      	ldr	r3, [pc, #180]	; (800d114 <HAL_SAI_Init+0x2f8>)
 800d05e:	400b      	ands	r3, r1
 800d060:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	6899      	ldr	r1, [r3, #8]
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d06c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800d072:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800d078:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800d07e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d084:	3b01      	subs	r3, #1
 800d086:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800d088:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	430a      	orrs	r2, r1
 800d090:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	68d9      	ldr	r1, [r3, #12]
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681a      	ldr	r2, [r3, #0]
 800d09c:	f24f 0320 	movw	r3, #61472	; 0xf020
 800d0a0:	400b      	ands	r3, r1
 800d0a2:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	68d9      	ldr	r1, [r3, #12]
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0b2:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d0b8:	041b      	lsls	r3, r3, #16
 800d0ba:	431a      	orrs	r2, r3
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d0c0:	3b01      	subs	r3, #1
 800d0c2:	021b      	lsls	r3, r3, #8
 800d0c4:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	430a      	orrs	r2, r1
 800d0cc:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2201      	movs	r2, #1
 800d0da:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d0e6:	2300      	movs	r3, #0
}
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	3720      	adds	r7, #32
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	bd80      	pop	{r7, pc}
 800d0f0:	40015804 	.word	0x40015804
 800d0f4:	40015824 	.word	0x40015824
 800d0f8:	40015800 	.word	0x40015800
 800d0fc:	40015c00 	.word	0x40015c00
 800d100:	40015c04 	.word	0x40015c04
 800d104:	40015c24 	.word	0x40015c24
 800d108:	cccccccd 	.word	0xcccccccd
 800d10c:	ff05c010 	.word	0xff05c010
 800d110:	ffff1ff0 	.word	0xffff1ff0
 800d114:	fff88000 	.word	0xfff88000

0800d118 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800d118:	b480      	push	{r7}
 800d11a:	b085      	sub	sp, #20
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800d120:	4b17      	ldr	r3, [pc, #92]	; (800d180 <SAI_Disable+0x68>)
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	4a17      	ldr	r2, [pc, #92]	; (800d184 <SAI_Disable+0x6c>)
 800d126:	fba2 2303 	umull	r2, r3, r2, r3
 800d12a:	0b1b      	lsrs	r3, r3, #12
 800d12c:	009b      	lsls	r3, r3, #2
 800d12e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800d130:	2300      	movs	r3, #0
 800d132:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	681a      	ldr	r2, [r3, #0]
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d142:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	1e5a      	subs	r2, r3, #1
 800d148:	60fa      	str	r2, [r7, #12]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d10a      	bne.n	800d164 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d154:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800d15e:	2303      	movs	r3, #3
 800d160:	72fb      	strb	r3, [r7, #11]
      break;
 800d162:	e006      	b.n	800d172 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d1e8      	bne.n	800d144 <SAI_Disable+0x2c>

  return status;
 800d172:	7afb      	ldrb	r3, [r7, #11]
}
 800d174:	4618      	mov	r0, r3
 800d176:	3714      	adds	r7, #20
 800d178:	46bd      	mov	sp, r7
 800d17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17e:	4770      	bx	lr
 800d180:	20000018 	.word	0x20000018
 800d184:	95cbec1b 	.word	0x95cbec1b

0800d188 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b082      	sub	sp, #8
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d101      	bne.n	800d19a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d196:	2301      	movs	r3, #1
 800d198:	e022      	b.n	800d1e0 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d1a0:	b2db      	uxtb	r3, r3
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d105      	bne.n	800d1b2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d1ac:	6878      	ldr	r0, [r7, #4]
 800d1ae:	f7f6 fd37 	bl	8003c20 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2203      	movs	r2, #3
 800d1b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d1ba:	6878      	ldr	r0, [r7, #4]
 800d1bc:	f000 f814 	bl	800d1e8 <HAL_SD_InitCard>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d001      	beq.n	800d1ca <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	e00a      	b.n	800d1e0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2201      	movs	r2, #1
 800d1da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d1de:	2300      	movs	r3, #0
}
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	3708      	adds	r7, #8
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd80      	pop	{r7, pc}

0800d1e8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d1e8:	b5b0      	push	{r4, r5, r7, lr}
 800d1ea:	b08e      	sub	sp, #56	; 0x38
 800d1ec:	af04      	add	r7, sp, #16
 800d1ee:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d200:	2300      	movs	r3, #0
 800d202:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800d204:	2376      	movs	r3, #118	; 0x76
 800d206:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681d      	ldr	r5, [r3, #0]
 800d20c:	466c      	mov	r4, sp
 800d20e:	f107 0314 	add.w	r3, r7, #20
 800d212:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d216:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d21a:	f107 0308 	add.w	r3, r7, #8
 800d21e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d220:	4628      	mov	r0, r5
 800d222:	f003 f8f9 	bl	8010418 <SDMMC_Init>
 800d226:	4603      	mov	r3, r0
 800d228:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800d22c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d230:	2b00      	cmp	r3, #0
 800d232:	d001      	beq.n	800d238 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800d234:	2301      	movs	r3, #1
 800d236:	e059      	b.n	800d2ec <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	685a      	ldr	r2, [r3, #4]
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d246:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	4618      	mov	r0, r3
 800d24e:	f003 f92d 	bl	80104ac <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	685a      	ldr	r2, [r3, #4]
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d260:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800d262:	2002      	movs	r0, #2
 800d264:	f7f7 fb04 	bl	8004870 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f000 fff3 	bl	800e254 <SD_PowerON>
 800d26e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d270:	6a3b      	ldr	r3, [r7, #32]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d00b      	beq.n	800d28e <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	2201      	movs	r2, #1
 800d27a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d282:	6a3b      	ldr	r3, [r7, #32]
 800d284:	431a      	orrs	r2, r3
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d28a:	2301      	movs	r3, #1
 800d28c:	e02e      	b.n	800d2ec <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d28e:	6878      	ldr	r0, [r7, #4]
 800d290:	f000 ff12 	bl	800e0b8 <SD_InitCard>
 800d294:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d296:	6a3b      	ldr	r3, [r7, #32]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d00b      	beq.n	800d2b4 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	2201      	movs	r2, #1
 800d2a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d2a8:	6a3b      	ldr	r3, [r7, #32]
 800d2aa:	431a      	orrs	r2, r3
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	e01b      	b.n	800d2ec <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f003 f987 	bl	80105d0 <SDMMC_CmdBlockLength>
 800d2c2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d2c4:	6a3b      	ldr	r3, [r7, #32]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d00f      	beq.n	800d2ea <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	4a09      	ldr	r2, [pc, #36]	; (800d2f4 <HAL_SD_InitCard+0x10c>)
 800d2d0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d2d6:	6a3b      	ldr	r3, [r7, #32]
 800d2d8:	431a      	orrs	r2, r3
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	2201      	movs	r2, #1
 800d2e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d2e6:	2301      	movs	r3, #1
 800d2e8:	e000      	b.n	800d2ec <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800d2ea:	2300      	movs	r3, #0
}
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	3728      	adds	r7, #40	; 0x28
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bdb0      	pop	{r4, r5, r7, pc}
 800d2f4:	004005ff 	.word	0x004005ff

0800d2f8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b08c      	sub	sp, #48	; 0x30
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	60f8      	str	r0, [r7, #12]
 800d300:	60b9      	str	r1, [r7, #8]
 800d302:	607a      	str	r2, [r7, #4]
 800d304:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d107      	bne.n	800d320 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d314:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d31c:	2301      	movs	r3, #1
 800d31e:	e0c3      	b.n	800d4a8 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d326:	b2db      	uxtb	r3, r3
 800d328:	2b01      	cmp	r3, #1
 800d32a:	f040 80bc 	bne.w	800d4a6 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	2200      	movs	r2, #0
 800d332:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d334:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	441a      	add	r2, r3
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d33e:	429a      	cmp	r2, r3
 800d340:	d907      	bls.n	800d352 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d346:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d34e:	2301      	movs	r3, #1
 800d350:	e0aa      	b.n	800d4a8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	2203      	movs	r2, #3
 800d356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	2200      	movs	r2, #0
 800d360:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d370:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d376:	4a4e      	ldr	r2, [pc, #312]	; (800d4b0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800d378:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d37e:	4a4d      	ldr	r2, [pc, #308]	; (800d4b4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800d380:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d386:	2200      	movs	r2, #0
 800d388:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d38e:	2200      	movs	r2, #0
 800d390:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3a2:	689a      	ldr	r2, [r3, #8]
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	430a      	orrs	r2, r1
 800d3ac:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	3380      	adds	r3, #128	; 0x80
 800d3b8:	4619      	mov	r1, r3
 800d3ba:	68ba      	ldr	r2, [r7, #8]
 800d3bc:	683b      	ldr	r3, [r7, #0]
 800d3be:	025b      	lsls	r3, r3, #9
 800d3c0:	089b      	lsrs	r3, r3, #2
 800d3c2:	f7f8 fae1 	bl	8005988 <HAL_DMA_Start_IT>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d017      	beq.n	800d3fc <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800d3da:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	4a35      	ldr	r2, [pc, #212]	; (800d4b8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800d3e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	2201      	movs	r2, #1
 800d3f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d3f8:	2301      	movs	r3, #1
 800d3fa:	e055      	b.n	800d4a8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	f042 0208 	orr.w	r2, r2, #8
 800d40a:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d410:	2b01      	cmp	r3, #1
 800d412:	d002      	beq.n	800d41a <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800d414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d416:	025b      	lsls	r3, r3, #9
 800d418:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d41a:	f04f 33ff 	mov.w	r3, #4294967295
 800d41e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	025b      	lsls	r3, r3, #9
 800d424:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d426:	2390      	movs	r3, #144	; 0x90
 800d428:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d42a:	2302      	movs	r3, #2
 800d42c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d42e:	2300      	movs	r3, #0
 800d430:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800d432:	2301      	movs	r3, #1
 800d434:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	f107 0210 	add.w	r2, r7, #16
 800d43e:	4611      	mov	r1, r2
 800d440:	4618      	mov	r0, r3
 800d442:	f003 f899 	bl	8010578 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	2b01      	cmp	r3, #1
 800d44a:	d90a      	bls.n	800d462 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	2282      	movs	r2, #130	; 0x82
 800d450:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d458:	4618      	mov	r0, r3
 800d45a:	f003 f8fd 	bl	8010658 <SDMMC_CmdReadMultiBlock>
 800d45e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d460:	e009      	b.n	800d476 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	2281      	movs	r2, #129	; 0x81
 800d466:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d46e:	4618      	mov	r0, r3
 800d470:	f003 f8d0 	bl	8010614 <SDMMC_CmdReadSingleBlock>
 800d474:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800d476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d012      	beq.n	800d4a2 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	4a0d      	ldr	r2, [pc, #52]	; (800d4b8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800d482:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d48a:	431a      	orrs	r2, r3
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	2201      	movs	r2, #1
 800d494:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	2200      	movs	r2, #0
 800d49c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800d49e:	2301      	movs	r3, #1
 800d4a0:	e002      	b.n	800d4a8 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	e000      	b.n	800d4a8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800d4a6:	2302      	movs	r3, #2
  }
}
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	3730      	adds	r7, #48	; 0x30
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}
 800d4b0:	0800dec7 	.word	0x0800dec7
 800d4b4:	0800df39 	.word	0x0800df39
 800d4b8:	004005ff 	.word	0x004005ff

0800d4bc <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b08c      	sub	sp, #48	; 0x30
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	60f8      	str	r0, [r7, #12]
 800d4c4:	60b9      	str	r1, [r7, #8]
 800d4c6:	607a      	str	r2, [r7, #4]
 800d4c8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d4ce:	68bb      	ldr	r3, [r7, #8]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d107      	bne.n	800d4e4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4d8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d4e0:	2301      	movs	r3, #1
 800d4e2:	e0c6      	b.n	800d672 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d4ea:	b2db      	uxtb	r3, r3
 800d4ec:	2b01      	cmp	r3, #1
 800d4ee:	f040 80bf 	bne.w	800d670 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d4f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	441a      	add	r2, r3
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d502:	429a      	cmp	r2, r3
 800d504:	d907      	bls.n	800d516 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d50a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d512:	2301      	movs	r3, #1
 800d514:	e0ad      	b.n	800d672 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	2203      	movs	r2, #3
 800d51a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	2200      	movs	r2, #0
 800d524:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	f042 021a 	orr.w	r2, r2, #26
 800d534:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d53a:	4a50      	ldr	r2, [pc, #320]	; (800d67c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800d53c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d542:	4a4f      	ldr	r2, [pc, #316]	; (800d680 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800d544:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d54a:	2200      	movs	r2, #0
 800d54c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d552:	2b01      	cmp	r3, #1
 800d554:	d002      	beq.n	800d55c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800d556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d558:	025b      	lsls	r3, r3, #9
 800d55a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	2b01      	cmp	r3, #1
 800d560:	d90a      	bls.n	800d578 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	22a0      	movs	r2, #160	; 0xa0
 800d566:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d56e:	4618      	mov	r0, r3
 800d570:	f003 f8b6 	bl	80106e0 <SDMMC_CmdWriteMultiBlock>
 800d574:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d576:	e009      	b.n	800d58c <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	2290      	movs	r2, #144	; 0x90
 800d57c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d584:	4618      	mov	r0, r3
 800d586:	f003 f889 	bl	801069c <SDMMC_CmdWriteSingleBlock>
 800d58a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d012      	beq.n	800d5b8 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	4a3b      	ldr	r2, [pc, #236]	; (800d684 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800d598:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d59e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5a0:	431a      	orrs	r2, r3
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	2201      	movs	r2, #1
 800d5aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d5b4:	2301      	movs	r3, #1
 800d5b6:	e05c      	b.n	800d672 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	f042 0208 	orr.w	r2, r2, #8
 800d5c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5cc:	2240      	movs	r2, #64	; 0x40
 800d5ce:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5e0:	689a      	ldr	r2, [r3, #8]
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	430a      	orrs	r2, r1
 800d5ea:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d5f0:	68b9      	ldr	r1, [r7, #8]
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	3380      	adds	r3, #128	; 0x80
 800d5f8:	461a      	mov	r2, r3
 800d5fa:	683b      	ldr	r3, [r7, #0]
 800d5fc:	025b      	lsls	r3, r3, #9
 800d5fe:	089b      	lsrs	r3, r3, #2
 800d600:	f7f8 f9c2 	bl	8005988 <HAL_DMA_Start_IT>
 800d604:	4603      	mov	r3, r0
 800d606:	2b00      	cmp	r3, #0
 800d608:	d01a      	beq.n	800d640 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	f022 021a 	bic.w	r2, r2, #26
 800d618:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	4a19      	ldr	r2, [pc, #100]	; (800d684 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800d620:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d626:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	2201      	movs	r2, #1
 800d632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	2200      	movs	r2, #0
 800d63a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d63c:	2301      	movs	r3, #1
 800d63e:	e018      	b.n	800d672 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d640:	f04f 33ff 	mov.w	r3, #4294967295
 800d644:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	025b      	lsls	r3, r3, #9
 800d64a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d64c:	2390      	movs	r3, #144	; 0x90
 800d64e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d650:	2300      	movs	r3, #0
 800d652:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d654:	2300      	movs	r3, #0
 800d656:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800d658:	2301      	movs	r3, #1
 800d65a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	f107 0210 	add.w	r2, r7, #16
 800d664:	4611      	mov	r1, r2
 800d666:	4618      	mov	r0, r3
 800d668:	f002 ff86 	bl	8010578 <SDMMC_ConfigData>

      return HAL_OK;
 800d66c:	2300      	movs	r3, #0
 800d66e:	e000      	b.n	800d672 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800d670:	2302      	movs	r3, #2
  }
}
 800d672:	4618      	mov	r0, r3
 800d674:	3730      	adds	r7, #48	; 0x30
 800d676:	46bd      	mov	sp, r7
 800d678:	bd80      	pop	{r7, pc}
 800d67a:	bf00      	nop
 800d67c:	0800de9d 	.word	0x0800de9d
 800d680:	0800df39 	.word	0x0800df39
 800d684:	004005ff 	.word	0x004005ff

0800d688 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b084      	sub	sp, #16
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d694:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d69c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d008      	beq.n	800d6b6 <HAL_SD_IRQHandler+0x2e>
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	f003 0308 	and.w	r3, r3, #8
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d003      	beq.n	800d6b6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	f000 ffef 	bl	800e692 <SD_Read_IT>
 800d6b4:	e15a      	b.n	800d96c <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	f000 808d 	beq.w	800d7e0 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d6ce:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681a      	ldr	r2, [r3, #0]
 800d6da:	4b9a      	ldr	r3, [pc, #616]	; (800d944 <HAL_SD_IRQHandler+0x2bc>)
 800d6dc:	400b      	ands	r3, r1
 800d6de:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	f022 0201 	bic.w	r2, r2, #1
 800d6ee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	f003 0308 	and.w	r3, r3, #8
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d039      	beq.n	800d76e <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	f003 0302 	and.w	r3, r3, #2
 800d700:	2b00      	cmp	r3, #0
 800d702:	d104      	bne.n	800d70e <HAL_SD_IRQHandler+0x86>
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	f003 0320 	and.w	r3, r3, #32
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d011      	beq.n	800d732 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	4618      	mov	r0, r3
 800d714:	f003 f806 	bl	8010724 <SDMMC_CmdStopTransfer>
 800d718:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d008      	beq.n	800d732 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d724:	68bb      	ldr	r3, [r7, #8]
 800d726:	431a      	orrs	r2, r3
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d72c:	6878      	ldr	r0, [r7, #4]
 800d72e:	f000 f921 	bl	800d974 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	f240 523a 	movw	r2, #1338	; 0x53a
 800d73a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	2201      	movs	r2, #1
 800d740:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	2200      	movs	r2, #0
 800d748:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	f003 0301 	and.w	r3, r3, #1
 800d750:	2b00      	cmp	r3, #0
 800d752:	d104      	bne.n	800d75e <HAL_SD_IRQHandler+0xd6>
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	f003 0302 	and.w	r3, r3, #2
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d003      	beq.n	800d766 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f004 fc66 	bl	8012030 <HAL_SD_RxCpltCallback>
 800d764:	e102      	b.n	800d96c <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	f004 fc58 	bl	801201c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d76c:	e0fe      	b.n	800d96c <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d774:	2b00      	cmp	r3, #0
 800d776:	f000 80f9 	beq.w	800d96c <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	f003 0320 	and.w	r3, r3, #32
 800d780:	2b00      	cmp	r3, #0
 800d782:	d011      	beq.n	800d7a8 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	4618      	mov	r0, r3
 800d78a:	f002 ffcb 	bl	8010724 <SDMMC_CmdStopTransfer>
 800d78e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d790:	68bb      	ldr	r3, [r7, #8]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d008      	beq.n	800d7a8 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d79a:	68bb      	ldr	r3, [r7, #8]
 800d79c:	431a      	orrs	r2, r3
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	f000 f8e6 	bl	800d974 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	f003 0301 	and.w	r3, r3, #1
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	f040 80dc 	bne.w	800d96c <HAL_SD_IRQHandler+0x2e4>
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	f003 0302 	and.w	r3, r3, #2
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	f040 80d6 	bne.w	800d96c <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	f022 0208 	bic.w	r2, r2, #8
 800d7ce:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	2201      	movs	r2, #1
 800d7d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800d7d8:	6878      	ldr	r0, [r7, #4]
 800d7da:	f004 fc1f 	bl	801201c <HAL_SD_TxCpltCallback>
}
 800d7de:	e0c5      	b.n	800d96c <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d008      	beq.n	800d800 <HAL_SD_IRQHandler+0x178>
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	f003 0308 	and.w	r3, r3, #8
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d003      	beq.n	800d800 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 800d7f8:	6878      	ldr	r0, [r7, #4]
 800d7fa:	f000 ff9b 	bl	800e734 <SD_Write_IT>
 800d7fe:	e0b5      	b.n	800d96c <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d806:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	f000 80ae 	beq.w	800d96c <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d816:	f003 0302 	and.w	r3, r3, #2
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d005      	beq.n	800d82a <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d822:	f043 0202 	orr.w	r2, r3, #2
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d830:	f003 0308 	and.w	r3, r3, #8
 800d834:	2b00      	cmp	r3, #0
 800d836:	d005      	beq.n	800d844 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d83c:	f043 0208 	orr.w	r2, r3, #8
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d84a:	f003 0320 	and.w	r3, r3, #32
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d005      	beq.n	800d85e <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d856:	f043 0220 	orr.w	r2, r3, #32
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d864:	f003 0310 	and.w	r3, r3, #16
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d005      	beq.n	800d878 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d870:	f043 0210 	orr.w	r2, r3, #16
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	f240 523a 	movw	r2, #1338	; 0x53a
 800d880:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d890:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	4618      	mov	r0, r3
 800d898:	f002 ff44 	bl	8010724 <SDMMC_CmdStopTransfer>
 800d89c:	4602      	mov	r2, r0
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8a2:	431a      	orrs	r2, r3
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	f003 0308 	and.w	r3, r3, #8
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d00a      	beq.n	800d8c8 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	2201      	movs	r2, #1
 800d8b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	2200      	movs	r2, #0
 800d8be:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800d8c0:	6878      	ldr	r0, [r7, #4]
 800d8c2:	f000 f857 	bl	800d974 <HAL_SD_ErrorCallback>
}
 800d8c6:	e051      	b.n	800d96c <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d04c      	beq.n	800d96c <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	f003 0310 	and.w	r3, r3, #16
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d104      	bne.n	800d8e6 <HAL_SD_IRQHandler+0x25e>
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	f003 0320 	and.w	r3, r3, #32
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d011      	beq.n	800d90a <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8ea:	4a17      	ldr	r2, [pc, #92]	; (800d948 <HAL_SD_IRQHandler+0x2c0>)
 800d8ec:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	f7f8 f8a8 	bl	8005a48 <HAL_DMA_Abort_IT>
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d036      	beq.n	800d96c <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d902:	4618      	mov	r0, r3
 800d904:	f000 fb6a 	bl	800dfdc <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d908:	e030      	b.n	800d96c <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	f003 0301 	and.w	r3, r3, #1
 800d910:	2b00      	cmp	r3, #0
 800d912:	d104      	bne.n	800d91e <HAL_SD_IRQHandler+0x296>
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	f003 0302 	and.w	r3, r3, #2
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d018      	beq.n	800d950 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d922:	4a0a      	ldr	r2, [pc, #40]	; (800d94c <HAL_SD_IRQHandler+0x2c4>)
 800d924:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d92a:	4618      	mov	r0, r3
 800d92c:	f7f8 f88c 	bl	8005a48 <HAL_DMA_Abort_IT>
 800d930:	4603      	mov	r3, r0
 800d932:	2b00      	cmp	r3, #0
 800d934:	d01a      	beq.n	800d96c <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d93a:	4618      	mov	r0, r3
 800d93c:	f000 fb85 	bl	800e04a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d940:	e014      	b.n	800d96c <HAL_SD_IRQHandler+0x2e4>
 800d942:	bf00      	nop
 800d944:	ffff3ec5 	.word	0xffff3ec5
 800d948:	0800dfdd 	.word	0x0800dfdd
 800d94c:	0800e04b 	.word	0x0800e04b
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2200      	movs	r2, #0
 800d954:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	2201      	movs	r2, #1
 800d95a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2200      	movs	r2, #0
 800d962:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800d964:	6878      	ldr	r0, [r7, #4]
 800d966:	f004 fb4f 	bl	8012008 <HAL_SD_AbortCallback>
}
 800d96a:	e7ff      	b.n	800d96c <HAL_SD_IRQHandler+0x2e4>
 800d96c:	bf00      	nop
 800d96e:	3710      	adds	r7, #16
 800d970:	46bd      	mov	sp, r7
 800d972:	bd80      	pop	{r7, pc}

0800d974 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d974:	b480      	push	{r7}
 800d976:	b083      	sub	sp, #12
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d97c:	bf00      	nop
 800d97e:	370c      	adds	r7, #12
 800d980:	46bd      	mov	sp, r7
 800d982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d986:	4770      	bx	lr

0800d988 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d988:	b480      	push	{r7}
 800d98a:	b083      	sub	sp, #12
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
 800d990:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d996:	0f9b      	lsrs	r3, r3, #30
 800d998:	b2da      	uxtb	r2, r3
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9a2:	0e9b      	lsrs	r3, r3, #26
 800d9a4:	b2db      	uxtb	r3, r3
 800d9a6:	f003 030f 	and.w	r3, r3, #15
 800d9aa:	b2da      	uxtb	r2, r3
 800d9ac:	683b      	ldr	r3, [r7, #0]
 800d9ae:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9b4:	0e1b      	lsrs	r3, r3, #24
 800d9b6:	b2db      	uxtb	r3, r3
 800d9b8:	f003 0303 	and.w	r3, r3, #3
 800d9bc:	b2da      	uxtb	r2, r3
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9c6:	0c1b      	lsrs	r3, r3, #16
 800d9c8:	b2da      	uxtb	r2, r3
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9d2:	0a1b      	lsrs	r3, r3, #8
 800d9d4:	b2da      	uxtb	r2, r3
 800d9d6:	683b      	ldr	r3, [r7, #0]
 800d9d8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9de:	b2da      	uxtb	r2, r3
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9e8:	0d1b      	lsrs	r3, r3, #20
 800d9ea:	b29a      	uxth	r2, r3
 800d9ec:	683b      	ldr	r3, [r7, #0]
 800d9ee:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9f4:	0c1b      	lsrs	r3, r3, #16
 800d9f6:	b2db      	uxtb	r3, r3
 800d9f8:	f003 030f 	and.w	r3, r3, #15
 800d9fc:	b2da      	uxtb	r2, r3
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da06:	0bdb      	lsrs	r3, r3, #15
 800da08:	b2db      	uxtb	r3, r3
 800da0a:	f003 0301 	and.w	r3, r3, #1
 800da0e:	b2da      	uxtb	r2, r3
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da18:	0b9b      	lsrs	r3, r3, #14
 800da1a:	b2db      	uxtb	r3, r3
 800da1c:	f003 0301 	and.w	r3, r3, #1
 800da20:	b2da      	uxtb	r2, r3
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da2a:	0b5b      	lsrs	r3, r3, #13
 800da2c:	b2db      	uxtb	r3, r3
 800da2e:	f003 0301 	and.w	r3, r3, #1
 800da32:	b2da      	uxtb	r2, r3
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da3c:	0b1b      	lsrs	r3, r3, #12
 800da3e:	b2db      	uxtb	r3, r3
 800da40:	f003 0301 	and.w	r3, r3, #1
 800da44:	b2da      	uxtb	r2, r3
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	2200      	movs	r2, #0
 800da4e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da54:	2b00      	cmp	r3, #0
 800da56:	d163      	bne.n	800db20 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da5c:	009a      	lsls	r2, r3, #2
 800da5e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800da62:	4013      	ands	r3, r2
 800da64:	687a      	ldr	r2, [r7, #4]
 800da66:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800da68:	0f92      	lsrs	r2, r2, #30
 800da6a:	431a      	orrs	r2, r3
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da74:	0edb      	lsrs	r3, r3, #27
 800da76:	b2db      	uxtb	r3, r3
 800da78:	f003 0307 	and.w	r3, r3, #7
 800da7c:	b2da      	uxtb	r2, r3
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da86:	0e1b      	lsrs	r3, r3, #24
 800da88:	b2db      	uxtb	r3, r3
 800da8a:	f003 0307 	and.w	r3, r3, #7
 800da8e:	b2da      	uxtb	r2, r3
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da98:	0d5b      	lsrs	r3, r3, #21
 800da9a:	b2db      	uxtb	r3, r3
 800da9c:	f003 0307 	and.w	r3, r3, #7
 800daa0:	b2da      	uxtb	r2, r3
 800daa2:	683b      	ldr	r3, [r7, #0]
 800daa4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800daaa:	0c9b      	lsrs	r3, r3, #18
 800daac:	b2db      	uxtb	r3, r3
 800daae:	f003 0307 	and.w	r3, r3, #7
 800dab2:	b2da      	uxtb	r2, r3
 800dab4:	683b      	ldr	r3, [r7, #0]
 800dab6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dabc:	0bdb      	lsrs	r3, r3, #15
 800dabe:	b2db      	uxtb	r3, r3
 800dac0:	f003 0307 	and.w	r3, r3, #7
 800dac4:	b2da      	uxtb	r2, r3
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800daca:	683b      	ldr	r3, [r7, #0]
 800dacc:	691b      	ldr	r3, [r3, #16]
 800dace:	1c5a      	adds	r2, r3, #1
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	7e1b      	ldrb	r3, [r3, #24]
 800dad8:	b2db      	uxtb	r3, r3
 800dada:	f003 0307 	and.w	r3, r3, #7
 800dade:	3302      	adds	r3, #2
 800dae0:	2201      	movs	r2, #1
 800dae2:	fa02 f303 	lsl.w	r3, r2, r3
 800dae6:	687a      	ldr	r2, [r7, #4]
 800dae8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800daea:	fb03 f202 	mul.w	r2, r3, r2
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800daf2:	683b      	ldr	r3, [r7, #0]
 800daf4:	7a1b      	ldrb	r3, [r3, #8]
 800daf6:	b2db      	uxtb	r3, r3
 800daf8:	f003 030f 	and.w	r3, r3, #15
 800dafc:	2201      	movs	r2, #1
 800dafe:	409a      	lsls	r2, r3
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db08:	687a      	ldr	r2, [r7, #4]
 800db0a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800db0c:	0a52      	lsrs	r2, r2, #9
 800db0e:	fb03 f202 	mul.w	r2, r3, r2
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db1c:	661a      	str	r2, [r3, #96]	; 0x60
 800db1e:	e031      	b.n	800db84 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db24:	2b01      	cmp	r3, #1
 800db26:	d11d      	bne.n	800db64 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db2c:	041b      	lsls	r3, r3, #16
 800db2e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db36:	0c1b      	lsrs	r3, r3, #16
 800db38:	431a      	orrs	r2, r3
 800db3a:	683b      	ldr	r3, [r7, #0]
 800db3c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800db3e:	683b      	ldr	r3, [r7, #0]
 800db40:	691b      	ldr	r3, [r3, #16]
 800db42:	3301      	adds	r3, #1
 800db44:	029a      	lsls	r2, r3, #10
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db58:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	661a      	str	r2, [r3, #96]	; 0x60
 800db62:	e00f      	b.n	800db84 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	4a58      	ldr	r2, [pc, #352]	; (800dccc <HAL_SD_GetCardCSD+0x344>)
 800db6a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db70:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2201      	movs	r2, #1
 800db7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800db80:	2301      	movs	r3, #1
 800db82:	e09d      	b.n	800dcc0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db88:	0b9b      	lsrs	r3, r3, #14
 800db8a:	b2db      	uxtb	r3, r3
 800db8c:	f003 0301 	and.w	r3, r3, #1
 800db90:	b2da      	uxtb	r2, r3
 800db92:	683b      	ldr	r3, [r7, #0]
 800db94:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db9a:	09db      	lsrs	r3, r3, #7
 800db9c:	b2db      	uxtb	r3, r3
 800db9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dba2:	b2da      	uxtb	r2, r3
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbac:	b2db      	uxtb	r3, r3
 800dbae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dbb2:	b2da      	uxtb	r2, r3
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbbc:	0fdb      	lsrs	r3, r3, #31
 800dbbe:	b2da      	uxtb	r2, r3
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbc8:	0f5b      	lsrs	r3, r3, #29
 800dbca:	b2db      	uxtb	r3, r3
 800dbcc:	f003 0303 	and.w	r3, r3, #3
 800dbd0:	b2da      	uxtb	r2, r3
 800dbd2:	683b      	ldr	r3, [r7, #0]
 800dbd4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbda:	0e9b      	lsrs	r3, r3, #26
 800dbdc:	b2db      	uxtb	r3, r3
 800dbde:	f003 0307 	and.w	r3, r3, #7
 800dbe2:	b2da      	uxtb	r2, r3
 800dbe4:	683b      	ldr	r3, [r7, #0]
 800dbe6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbec:	0d9b      	lsrs	r3, r3, #22
 800dbee:	b2db      	uxtb	r3, r3
 800dbf0:	f003 030f 	and.w	r3, r3, #15
 800dbf4:	b2da      	uxtb	r2, r3
 800dbf6:	683b      	ldr	r3, [r7, #0]
 800dbf8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbfe:	0d5b      	lsrs	r3, r3, #21
 800dc00:	b2db      	uxtb	r3, r3
 800dc02:	f003 0301 	and.w	r3, r3, #1
 800dc06:	b2da      	uxtb	r2, r3
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800dc0e:	683b      	ldr	r3, [r7, #0]
 800dc10:	2200      	movs	r2, #0
 800dc12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc1a:	0c1b      	lsrs	r3, r3, #16
 800dc1c:	b2db      	uxtb	r3, r3
 800dc1e:	f003 0301 	and.w	r3, r3, #1
 800dc22:	b2da      	uxtb	r2, r3
 800dc24:	683b      	ldr	r3, [r7, #0]
 800dc26:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc2e:	0bdb      	lsrs	r3, r3, #15
 800dc30:	b2db      	uxtb	r3, r3
 800dc32:	f003 0301 	and.w	r3, r3, #1
 800dc36:	b2da      	uxtb	r2, r3
 800dc38:	683b      	ldr	r3, [r7, #0]
 800dc3a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc42:	0b9b      	lsrs	r3, r3, #14
 800dc44:	b2db      	uxtb	r3, r3
 800dc46:	f003 0301 	and.w	r3, r3, #1
 800dc4a:	b2da      	uxtb	r2, r3
 800dc4c:	683b      	ldr	r3, [r7, #0]
 800dc4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc56:	0b5b      	lsrs	r3, r3, #13
 800dc58:	b2db      	uxtb	r3, r3
 800dc5a:	f003 0301 	and.w	r3, r3, #1
 800dc5e:	b2da      	uxtb	r2, r3
 800dc60:	683b      	ldr	r3, [r7, #0]
 800dc62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc6a:	0b1b      	lsrs	r3, r3, #12
 800dc6c:	b2db      	uxtb	r3, r3
 800dc6e:	f003 0301 	and.w	r3, r3, #1
 800dc72:	b2da      	uxtb	r2, r3
 800dc74:	683b      	ldr	r3, [r7, #0]
 800dc76:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc7e:	0a9b      	lsrs	r3, r3, #10
 800dc80:	b2db      	uxtb	r3, r3
 800dc82:	f003 0303 	and.w	r3, r3, #3
 800dc86:	b2da      	uxtb	r2, r3
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc92:	0a1b      	lsrs	r3, r3, #8
 800dc94:	b2db      	uxtb	r3, r3
 800dc96:	f003 0303 	and.w	r3, r3, #3
 800dc9a:	b2da      	uxtb	r2, r3
 800dc9c:	683b      	ldr	r3, [r7, #0]
 800dc9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dca6:	085b      	lsrs	r3, r3, #1
 800dca8:	b2db      	uxtb	r3, r3
 800dcaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dcae:	b2da      	uxtb	r2, r3
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	2201      	movs	r2, #1
 800dcba:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800dcbe:	2300      	movs	r3, #0
}
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	370c      	adds	r7, #12
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcca:	4770      	bx	lr
 800dccc:	004005ff 	.word	0x004005ff

0800dcd0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800dcd0:	b480      	push	{r7}
 800dcd2:	b083      	sub	sp, #12
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
 800dcd8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dcf6:	683b      	ldr	r3, [r7, #0]
 800dcf8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dcfe:	683b      	ldr	r3, [r7, #0]
 800dd00:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dd0e:	683b      	ldr	r3, [r7, #0]
 800dd10:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800dd16:	683b      	ldr	r3, [r7, #0]
 800dd18:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800dd1a:	2300      	movs	r3, #0
}
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	370c      	adds	r7, #12
 800dd20:	46bd      	mov	sp, r7
 800dd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd26:	4770      	bx	lr

0800dd28 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800dd28:	b5b0      	push	{r4, r5, r7, lr}
 800dd2a:	b08e      	sub	sp, #56	; 0x38
 800dd2c:	af04      	add	r7, sp, #16
 800dd2e:	6078      	str	r0, [r7, #4]
 800dd30:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800dd32:	2300      	movs	r3, #0
 800dd34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	2203      	movs	r2, #3
 800dd3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd44:	2b03      	cmp	r3, #3
 800dd46:	d02e      	beq.n	800dda6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800dd48:	683b      	ldr	r3, [r7, #0]
 800dd4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dd4e:	d106      	bne.n	800dd5e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd54:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	639a      	str	r2, [r3, #56]	; 0x38
 800dd5c:	e029      	b.n	800ddb2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800dd5e:	683b      	ldr	r3, [r7, #0]
 800dd60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dd64:	d10a      	bne.n	800dd7c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	f000 fb2a 	bl	800e3c0 <SD_WideBus_Enable>
 800dd6c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd72:	6a3b      	ldr	r3, [r7, #32]
 800dd74:	431a      	orrs	r2, r3
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	639a      	str	r2, [r3, #56]	; 0x38
 800dd7a:	e01a      	b.n	800ddb2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d10a      	bne.n	800dd98 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800dd82:	6878      	ldr	r0, [r7, #4]
 800dd84:	f000 fb67 	bl	800e456 <SD_WideBus_Disable>
 800dd88:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd8e:	6a3b      	ldr	r3, [r7, #32]
 800dd90:	431a      	orrs	r2, r3
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	639a      	str	r2, [r3, #56]	; 0x38
 800dd96:	e00c      	b.n	800ddb2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd9c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	639a      	str	r2, [r3, #56]	; 0x38
 800dda4:	e005      	b.n	800ddb2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddaa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d00b      	beq.n	800ddd2 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	4a26      	ldr	r2, [pc, #152]	; (800de58 <HAL_SD_ConfigWideBusOperation+0x130>)
 800ddc0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	2201      	movs	r2, #1
 800ddc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800ddca:	2301      	movs	r3, #1
 800ddcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ddd0:	e01f      	b.n	800de12 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	685b      	ldr	r3, [r3, #4]
 800ddd6:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	689b      	ldr	r3, [r3, #8]
 800dddc:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	68db      	ldr	r3, [r3, #12]
 800dde2:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800dde4:	683b      	ldr	r3, [r7, #0]
 800dde6:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	695b      	ldr	r3, [r3, #20]
 800ddec:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	699b      	ldr	r3, [r3, #24]
 800ddf2:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681d      	ldr	r5, [r3, #0]
 800ddf8:	466c      	mov	r4, sp
 800ddfa:	f107 0314 	add.w	r3, r7, #20
 800ddfe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800de02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800de06:	f107 0308 	add.w	r3, r7, #8
 800de0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800de0c:	4628      	mov	r0, r5
 800de0e:	f002 fb03 	bl	8010418 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	f44f 7100 	mov.w	r1, #512	; 0x200
 800de1a:	4618      	mov	r0, r3
 800de1c:	f002 fbd8 	bl	80105d0 <SDMMC_CmdBlockLength>
 800de20:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800de22:	6a3b      	ldr	r3, [r7, #32]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d00c      	beq.n	800de42 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	4a0a      	ldr	r2, [pc, #40]	; (800de58 <HAL_SD_ConfigWideBusOperation+0x130>)
 800de2e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de34:	6a3b      	ldr	r3, [r7, #32]
 800de36:	431a      	orrs	r2, r3
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800de3c:	2301      	movs	r3, #1
 800de3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	2201      	movs	r2, #1
 800de46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800de4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800de4e:	4618      	mov	r0, r3
 800de50:	3728      	adds	r7, #40	; 0x28
 800de52:	46bd      	mov	sp, r7
 800de54:	bdb0      	pop	{r4, r5, r7, pc}
 800de56:	bf00      	nop
 800de58:	004005ff 	.word	0x004005ff

0800de5c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b086      	sub	sp, #24
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800de64:	2300      	movs	r3, #0
 800de66:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800de68:	f107 030c 	add.w	r3, r7, #12
 800de6c:	4619      	mov	r1, r3
 800de6e:	6878      	ldr	r0, [r7, #4]
 800de70:	f000 fa7e 	bl	800e370 <SD_SendStatus>
 800de74:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800de76:	697b      	ldr	r3, [r7, #20]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d005      	beq.n	800de88 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	431a      	orrs	r2, r3
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	0a5b      	lsrs	r3, r3, #9
 800de8c:	f003 030f 	and.w	r3, r3, #15
 800de90:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800de92:	693b      	ldr	r3, [r7, #16]
}
 800de94:	4618      	mov	r0, r3
 800de96:	3718      	adds	r7, #24
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd80      	pop	{r7, pc}

0800de9c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800de9c:	b480      	push	{r7}
 800de9e:	b085      	sub	sp, #20
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dea8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800deb8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800deba:	bf00      	nop
 800debc:	3714      	adds	r7, #20
 800debe:	46bd      	mov	sp, r7
 800dec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec4:	4770      	bx	lr

0800dec6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800dec6:	b580      	push	{r7, lr}
 800dec8:	b084      	sub	sp, #16
 800deca:	af00      	add	r7, sp, #0
 800decc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ded2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ded8:	2b82      	cmp	r3, #130	; 0x82
 800deda:	d111      	bne.n	800df00 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	4618      	mov	r0, r3
 800dee2:	f002 fc1f 	bl	8010724 <SDMMC_CmdStopTransfer>
 800dee6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dee8:	68bb      	ldr	r3, [r7, #8]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d008      	beq.n	800df00 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800def2:	68bb      	ldr	r3, [r7, #8]
 800def4:	431a      	orrs	r2, r3
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800defa:	68f8      	ldr	r0, [r7, #12]
 800defc:	f7ff fd3a 	bl	800d974 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	f022 0208 	bic.w	r2, r2, #8
 800df0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	f240 523a 	movw	r2, #1338	; 0x53a
 800df18:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	2201      	movs	r2, #1
 800df1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	2200      	movs	r2, #0
 800df26:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800df28:	68f8      	ldr	r0, [r7, #12]
 800df2a:	f004 f881 	bl	8012030 <HAL_SD_RxCpltCallback>
#endif
}
 800df2e:	bf00      	nop
 800df30:	3710      	adds	r7, #16
 800df32:	46bd      	mov	sp, r7
 800df34:	bd80      	pop	{r7, pc}
	...

0800df38 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b086      	sub	sp, #24
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df44:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800df46:	6878      	ldr	r0, [r7, #4]
 800df48:	f7f7 ff2a 	bl	8005da0 <HAL_DMA_GetError>
 800df4c:	4603      	mov	r3, r0
 800df4e:	2b02      	cmp	r3, #2
 800df50:	d03e      	beq.n	800dfd0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800df52:	697b      	ldr	r3, [r7, #20]
 800df54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df58:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800df5a:	697b      	ldr	r3, [r7, #20]
 800df5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df60:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800df62:	693b      	ldr	r3, [r7, #16]
 800df64:	2b01      	cmp	r3, #1
 800df66:	d002      	beq.n	800df6e <SD_DMAError+0x36>
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	2b01      	cmp	r3, #1
 800df6c:	d12d      	bne.n	800dfca <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800df6e:	697b      	ldr	r3, [r7, #20]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	4a19      	ldr	r2, [pc, #100]	; (800dfd8 <SD_DMAError+0xa0>)
 800df74:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800df76:	697b      	ldr	r3, [r7, #20]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800df7c:	697b      	ldr	r3, [r7, #20]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800df84:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800df86:	697b      	ldr	r3, [r7, #20]
 800df88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df8a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800df8e:	697b      	ldr	r3, [r7, #20]
 800df90:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800df92:	6978      	ldr	r0, [r7, #20]
 800df94:	f7ff ff62 	bl	800de5c <HAL_SD_GetCardState>
 800df98:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800df9a:	68bb      	ldr	r3, [r7, #8]
 800df9c:	2b06      	cmp	r3, #6
 800df9e:	d002      	beq.n	800dfa6 <SD_DMAError+0x6e>
 800dfa0:	68bb      	ldr	r3, [r7, #8]
 800dfa2:	2b05      	cmp	r3, #5
 800dfa4:	d10a      	bne.n	800dfbc <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dfa6:	697b      	ldr	r3, [r7, #20]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	4618      	mov	r0, r3
 800dfac:	f002 fbba 	bl	8010724 <SDMMC_CmdStopTransfer>
 800dfb0:	4602      	mov	r2, r0
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfb6:	431a      	orrs	r2, r3
 800dfb8:	697b      	ldr	r3, [r7, #20]
 800dfba:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800dfbc:	697b      	ldr	r3, [r7, #20]
 800dfbe:	2201      	movs	r2, #1
 800dfc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dfc4:	697b      	ldr	r3, [r7, #20]
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800dfca:	6978      	ldr	r0, [r7, #20]
 800dfcc:	f7ff fcd2 	bl	800d974 <HAL_SD_ErrorCallback>
#endif
  }
}
 800dfd0:	bf00      	nop
 800dfd2:	3718      	adds	r7, #24
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	bd80      	pop	{r7, pc}
 800dfd8:	004005ff 	.word	0x004005ff

0800dfdc <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b084      	sub	sp, #16
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfe8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	f240 523a 	movw	r2, #1338	; 0x53a
 800dff2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800dff4:	68f8      	ldr	r0, [r7, #12]
 800dff6:	f7ff ff31 	bl	800de5c <HAL_SD_GetCardState>
 800dffa:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	2201      	movs	r2, #1
 800e000:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	2200      	movs	r2, #0
 800e008:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800e00a:	68bb      	ldr	r3, [r7, #8]
 800e00c:	2b06      	cmp	r3, #6
 800e00e:	d002      	beq.n	800e016 <SD_DMATxAbort+0x3a>
 800e010:	68bb      	ldr	r3, [r7, #8]
 800e012:	2b05      	cmp	r3, #5
 800e014:	d10a      	bne.n	800e02c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	4618      	mov	r0, r3
 800e01c:	f002 fb82 	bl	8010724 <SDMMC_CmdStopTransfer>
 800e020:	4602      	mov	r2, r0
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e026:	431a      	orrs	r2, r3
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e030:	2b00      	cmp	r3, #0
 800e032:	d103      	bne.n	800e03c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800e034:	68f8      	ldr	r0, [r7, #12]
 800e036:	f003 ffe7 	bl	8012008 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800e03a:	e002      	b.n	800e042 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800e03c:	68f8      	ldr	r0, [r7, #12]
 800e03e:	f7ff fc99 	bl	800d974 <HAL_SD_ErrorCallback>
}
 800e042:	bf00      	nop
 800e044:	3710      	adds	r7, #16
 800e046:	46bd      	mov	sp, r7
 800e048:	bd80      	pop	{r7, pc}

0800e04a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800e04a:	b580      	push	{r7, lr}
 800e04c:	b084      	sub	sp, #16
 800e04e:	af00      	add	r7, sp, #0
 800e050:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e056:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	f240 523a 	movw	r2, #1338	; 0x53a
 800e060:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800e062:	68f8      	ldr	r0, [r7, #12]
 800e064:	f7ff fefa 	bl	800de5c <HAL_SD_GetCardState>
 800e068:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	2201      	movs	r2, #1
 800e06e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	2200      	movs	r2, #0
 800e076:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800e078:	68bb      	ldr	r3, [r7, #8]
 800e07a:	2b06      	cmp	r3, #6
 800e07c:	d002      	beq.n	800e084 <SD_DMARxAbort+0x3a>
 800e07e:	68bb      	ldr	r3, [r7, #8]
 800e080:	2b05      	cmp	r3, #5
 800e082:	d10a      	bne.n	800e09a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	4618      	mov	r0, r3
 800e08a:	f002 fb4b 	bl	8010724 <SDMMC_CmdStopTransfer>
 800e08e:	4602      	mov	r2, r0
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e094:	431a      	orrs	r2, r3
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d103      	bne.n	800e0aa <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800e0a2:	68f8      	ldr	r0, [r7, #12]
 800e0a4:	f003 ffb0 	bl	8012008 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800e0a8:	e002      	b.n	800e0b0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800e0aa:	68f8      	ldr	r0, [r7, #12]
 800e0ac:	f7ff fc62 	bl	800d974 <HAL_SD_ErrorCallback>
}
 800e0b0:	bf00      	nop
 800e0b2:	3710      	adds	r7, #16
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	bd80      	pop	{r7, pc}

0800e0b8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e0b8:	b5b0      	push	{r4, r5, r7, lr}
 800e0ba:	b094      	sub	sp, #80	; 0x50
 800e0bc:	af04      	add	r7, sp, #16
 800e0be:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800e0c0:	2301      	movs	r3, #1
 800e0c2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	f002 f9fd 	bl	80104c8 <SDMMC_GetPowerState>
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d102      	bne.n	800e0da <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e0d4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e0d8:	e0b8      	b.n	800e24c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0de:	2b03      	cmp	r3, #3
 800e0e0:	d02f      	beq.n	800e142 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	f002 fc27 	bl	801093a <SDMMC_CmdSendCID>
 800e0ec:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e0ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d001      	beq.n	800e0f8 <SD_InitCard+0x40>
    {
      return errorstate;
 800e0f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0f6:	e0a9      	b.n	800e24c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	2100      	movs	r1, #0
 800e0fe:	4618      	mov	r0, r3
 800e100:	f002 fa27 	bl	8010552 <SDMMC_GetResponse>
 800e104:	4602      	mov	r2, r0
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	2104      	movs	r1, #4
 800e110:	4618      	mov	r0, r3
 800e112:	f002 fa1e 	bl	8010552 <SDMMC_GetResponse>
 800e116:	4602      	mov	r2, r0
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	2108      	movs	r1, #8
 800e122:	4618      	mov	r0, r3
 800e124:	f002 fa15 	bl	8010552 <SDMMC_GetResponse>
 800e128:	4602      	mov	r2, r0
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	210c      	movs	r1, #12
 800e134:	4618      	mov	r0, r3
 800e136:	f002 fa0c 	bl	8010552 <SDMMC_GetResponse>
 800e13a:	4602      	mov	r2, r0
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e146:	2b03      	cmp	r3, #3
 800e148:	d00d      	beq.n	800e166 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	f107 020e 	add.w	r2, r7, #14
 800e152:	4611      	mov	r1, r2
 800e154:	4618      	mov	r0, r3
 800e156:	f002 fc2d 	bl	80109b4 <SDMMC_CmdSetRelAdd>
 800e15a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e15c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d001      	beq.n	800e166 <SD_InitCard+0xae>
    {
      return errorstate;
 800e162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e164:	e072      	b.n	800e24c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e16a:	2b03      	cmp	r3, #3
 800e16c:	d036      	beq.n	800e1dc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e16e:	89fb      	ldrh	r3, [r7, #14]
 800e170:	461a      	mov	r2, r3
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	681a      	ldr	r2, [r3, #0]
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e17e:	041b      	lsls	r3, r3, #16
 800e180:	4619      	mov	r1, r3
 800e182:	4610      	mov	r0, r2
 800e184:	f002 fbf7 	bl	8010976 <SDMMC_CmdSendCSD>
 800e188:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e18a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d001      	beq.n	800e194 <SD_InitCard+0xdc>
    {
      return errorstate;
 800e190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e192:	e05b      	b.n	800e24c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	2100      	movs	r1, #0
 800e19a:	4618      	mov	r0, r3
 800e19c:	f002 f9d9 	bl	8010552 <SDMMC_GetResponse>
 800e1a0:	4602      	mov	r2, r0
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	2104      	movs	r1, #4
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	f002 f9d0 	bl	8010552 <SDMMC_GetResponse>
 800e1b2:	4602      	mov	r2, r0
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	2108      	movs	r1, #8
 800e1be:	4618      	mov	r0, r3
 800e1c0:	f002 f9c7 	bl	8010552 <SDMMC_GetResponse>
 800e1c4:	4602      	mov	r2, r0
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	210c      	movs	r1, #12
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	f002 f9be 	bl	8010552 <SDMMC_GetResponse>
 800e1d6:	4602      	mov	r2, r0
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	2104      	movs	r1, #4
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	f002 f9b5 	bl	8010552 <SDMMC_GetResponse>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	0d1a      	lsrs	r2, r3, #20
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e1f0:	f107 0310 	add.w	r3, r7, #16
 800e1f4:	4619      	mov	r1, r3
 800e1f6:	6878      	ldr	r0, [r7, #4]
 800e1f8:	f7ff fbc6 	bl	800d988 <HAL_SD_GetCardCSD>
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d002      	beq.n	800e208 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e202:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e206:	e021      	b.n	800e24c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	6819      	ldr	r1, [r3, #0]
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e210:	041b      	lsls	r3, r3, #16
 800e212:	2200      	movs	r2, #0
 800e214:	461c      	mov	r4, r3
 800e216:	4615      	mov	r5, r2
 800e218:	4622      	mov	r2, r4
 800e21a:	462b      	mov	r3, r5
 800e21c:	4608      	mov	r0, r1
 800e21e:	f002 faa3 	bl	8010768 <SDMMC_CmdSelDesel>
 800e222:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800e224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e226:	2b00      	cmp	r3, #0
 800e228:	d001      	beq.n	800e22e <SD_InitCard+0x176>
  {
    return errorstate;
 800e22a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e22c:	e00e      	b.n	800e24c <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	681d      	ldr	r5, [r3, #0]
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	466c      	mov	r4, sp
 800e236:	f103 0210 	add.w	r2, r3, #16
 800e23a:	ca07      	ldmia	r2, {r0, r1, r2}
 800e23c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e240:	3304      	adds	r3, #4
 800e242:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e244:	4628      	mov	r0, r5
 800e246:	f002 f8e7 	bl	8010418 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e24a:	2300      	movs	r3, #0
}
 800e24c:	4618      	mov	r0, r3
 800e24e:	3740      	adds	r7, #64	; 0x40
 800e250:	46bd      	mov	sp, r7
 800e252:	bdb0      	pop	{r4, r5, r7, pc}

0800e254 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b086      	sub	sp, #24
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e25c:	2300      	movs	r3, #0
 800e25e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800e260:	2300      	movs	r3, #0
 800e262:	617b      	str	r3, [r7, #20]
 800e264:	2300      	movs	r3, #0
 800e266:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	4618      	mov	r0, r3
 800e26e:	f002 fa9e 	bl	80107ae <SDMMC_CmdGoIdleState>
 800e272:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d001      	beq.n	800e27e <SD_PowerON+0x2a>
  {
    return errorstate;
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	e072      	b.n	800e364 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	4618      	mov	r0, r3
 800e284:	f002 fab1 	bl	80107ea <SDMMC_CmdOperCond>
 800e288:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d00d      	beq.n	800e2ac <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	2200      	movs	r2, #0
 800e294:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	4618      	mov	r0, r3
 800e29c:	f002 fa87 	bl	80107ae <SDMMC_CmdGoIdleState>
 800e2a0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d004      	beq.n	800e2b2 <SD_PowerON+0x5e>
    {
      return errorstate;
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	e05b      	b.n	800e364 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	2201      	movs	r2, #1
 800e2b0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e2b6:	2b01      	cmp	r3, #1
 800e2b8:	d137      	bne.n	800e32a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	2100      	movs	r1, #0
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	f002 fab1 	bl	8010828 <SDMMC_CmdAppCommand>
 800e2c6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d02d      	beq.n	800e32a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e2ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e2d2:	e047      	b.n	800e364 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	2100      	movs	r1, #0
 800e2da:	4618      	mov	r0, r3
 800e2dc:	f002 faa4 	bl	8010828 <SDMMC_CmdAppCommand>
 800e2e0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d001      	beq.n	800e2ec <SD_PowerON+0x98>
    {
      return errorstate;
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	e03b      	b.n	800e364 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	491e      	ldr	r1, [pc, #120]	; (800e36c <SD_PowerON+0x118>)
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	f002 faba 	bl	801086c <SDMMC_CmdAppOperCommand>
 800e2f8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d002      	beq.n	800e306 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e300:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e304:	e02e      	b.n	800e364 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	2100      	movs	r1, #0
 800e30c:	4618      	mov	r0, r3
 800e30e:	f002 f920 	bl	8010552 <SDMMC_GetResponse>
 800e312:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e314:	697b      	ldr	r3, [r7, #20]
 800e316:	0fdb      	lsrs	r3, r3, #31
 800e318:	2b01      	cmp	r3, #1
 800e31a:	d101      	bne.n	800e320 <SD_PowerON+0xcc>
 800e31c:	2301      	movs	r3, #1
 800e31e:	e000      	b.n	800e322 <SD_PowerON+0xce>
 800e320:	2300      	movs	r3, #0
 800e322:	613b      	str	r3, [r7, #16]

    count++;
 800e324:	68bb      	ldr	r3, [r7, #8]
 800e326:	3301      	adds	r3, #1
 800e328:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e32a:	68bb      	ldr	r3, [r7, #8]
 800e32c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e330:	4293      	cmp	r3, r2
 800e332:	d802      	bhi.n	800e33a <SD_PowerON+0xe6>
 800e334:	693b      	ldr	r3, [r7, #16]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d0cc      	beq.n	800e2d4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800e33a:	68bb      	ldr	r3, [r7, #8]
 800e33c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e340:	4293      	cmp	r3, r2
 800e342:	d902      	bls.n	800e34a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e344:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e348:	e00c      	b.n	800e364 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800e34a:	697b      	ldr	r3, [r7, #20]
 800e34c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e350:	2b00      	cmp	r3, #0
 800e352:	d003      	beq.n	800e35c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	2201      	movs	r2, #1
 800e358:	645a      	str	r2, [r3, #68]	; 0x44
 800e35a:	e002      	b.n	800e362 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	2200      	movs	r2, #0
 800e360:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800e362:	2300      	movs	r3, #0
}
 800e364:	4618      	mov	r0, r3
 800e366:	3718      	adds	r7, #24
 800e368:	46bd      	mov	sp, r7
 800e36a:	bd80      	pop	{r7, pc}
 800e36c:	c1100000 	.word	0xc1100000

0800e370 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b084      	sub	sp, #16
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
 800e378:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800e37a:	683b      	ldr	r3, [r7, #0]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d102      	bne.n	800e386 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e380:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e384:	e018      	b.n	800e3b8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681a      	ldr	r2, [r3, #0]
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e38e:	041b      	lsls	r3, r3, #16
 800e390:	4619      	mov	r1, r3
 800e392:	4610      	mov	r0, r2
 800e394:	f002 fb2f 	bl	80109f6 <SDMMC_CmdSendStatus>
 800e398:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d001      	beq.n	800e3a4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	e009      	b.n	800e3b8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	2100      	movs	r1, #0
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	f002 f8d1 	bl	8010552 <SDMMC_GetResponse>
 800e3b0:	4602      	mov	r2, r0
 800e3b2:	683b      	ldr	r3, [r7, #0]
 800e3b4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e3b6:	2300      	movs	r3, #0
}
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	3710      	adds	r7, #16
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	bd80      	pop	{r7, pc}

0800e3c0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b086      	sub	sp, #24
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	60fb      	str	r3, [r7, #12]
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	2100      	movs	r1, #0
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f002 f8bb 	bl	8010552 <SDMMC_GetResponse>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e3e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e3e6:	d102      	bne.n	800e3ee <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e3e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e3ec:	e02f      	b.n	800e44e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e3ee:	f107 030c 	add.w	r3, r7, #12
 800e3f2:	4619      	mov	r1, r3
 800e3f4:	6878      	ldr	r0, [r7, #4]
 800e3f6:	f000 f879 	bl	800e4ec <SD_FindSCR>
 800e3fa:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e3fc:	697b      	ldr	r3, [r7, #20]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d001      	beq.n	800e406 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e402:	697b      	ldr	r3, [r7, #20]
 800e404:	e023      	b.n	800e44e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e406:	693b      	ldr	r3, [r7, #16]
 800e408:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d01c      	beq.n	800e44a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681a      	ldr	r2, [r3, #0]
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e418:	041b      	lsls	r3, r3, #16
 800e41a:	4619      	mov	r1, r3
 800e41c:	4610      	mov	r0, r2
 800e41e:	f002 fa03 	bl	8010828 <SDMMC_CmdAppCommand>
 800e422:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e424:	697b      	ldr	r3, [r7, #20]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d001      	beq.n	800e42e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e42a:	697b      	ldr	r3, [r7, #20]
 800e42c:	e00f      	b.n	800e44e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	2102      	movs	r1, #2
 800e434:	4618      	mov	r0, r3
 800e436:	f002 fa3d 	bl	80108b4 <SDMMC_CmdBusWidth>
 800e43a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e43c:	697b      	ldr	r3, [r7, #20]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d001      	beq.n	800e446 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e442:	697b      	ldr	r3, [r7, #20]
 800e444:	e003      	b.n	800e44e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e446:	2300      	movs	r3, #0
 800e448:	e001      	b.n	800e44e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e44a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e44e:	4618      	mov	r0, r3
 800e450:	3718      	adds	r7, #24
 800e452:	46bd      	mov	sp, r7
 800e454:	bd80      	pop	{r7, pc}

0800e456 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e456:	b580      	push	{r7, lr}
 800e458:	b086      	sub	sp, #24
 800e45a:	af00      	add	r7, sp, #0
 800e45c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e45e:	2300      	movs	r3, #0
 800e460:	60fb      	str	r3, [r7, #12]
 800e462:	2300      	movs	r3, #0
 800e464:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	2100      	movs	r1, #0
 800e46c:	4618      	mov	r0, r3
 800e46e:	f002 f870 	bl	8010552 <SDMMC_GetResponse>
 800e472:	4603      	mov	r3, r0
 800e474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e478:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e47c:	d102      	bne.n	800e484 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e47e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e482:	e02f      	b.n	800e4e4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e484:	f107 030c 	add.w	r3, r7, #12
 800e488:	4619      	mov	r1, r3
 800e48a:	6878      	ldr	r0, [r7, #4]
 800e48c:	f000 f82e 	bl	800e4ec <SD_FindSCR>
 800e490:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e492:	697b      	ldr	r3, [r7, #20]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d001      	beq.n	800e49c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e498:	697b      	ldr	r3, [r7, #20]
 800e49a:	e023      	b.n	800e4e4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e49c:	693b      	ldr	r3, [r7, #16]
 800e49e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d01c      	beq.n	800e4e0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681a      	ldr	r2, [r3, #0]
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e4ae:	041b      	lsls	r3, r3, #16
 800e4b0:	4619      	mov	r1, r3
 800e4b2:	4610      	mov	r0, r2
 800e4b4:	f002 f9b8 	bl	8010828 <SDMMC_CmdAppCommand>
 800e4b8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e4ba:	697b      	ldr	r3, [r7, #20]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d001      	beq.n	800e4c4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e4c0:	697b      	ldr	r3, [r7, #20]
 800e4c2:	e00f      	b.n	800e4e4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	2100      	movs	r1, #0
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f002 f9f2 	bl	80108b4 <SDMMC_CmdBusWidth>
 800e4d0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e4d2:	697b      	ldr	r3, [r7, #20]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d001      	beq.n	800e4dc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e4d8:	697b      	ldr	r3, [r7, #20]
 800e4da:	e003      	b.n	800e4e4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e4dc:	2300      	movs	r3, #0
 800e4de:	e001      	b.n	800e4e4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e4e0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	3718      	adds	r7, #24
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd80      	pop	{r7, pc}

0800e4ec <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e4ec:	b590      	push	{r4, r7, lr}
 800e4ee:	b08f      	sub	sp, #60	; 0x3c
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
 800e4f4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e4f6:	f7f6 f9af 	bl	8004858 <HAL_GetTick>
 800e4fa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800e500:	2300      	movs	r3, #0
 800e502:	60bb      	str	r3, [r7, #8]
 800e504:	2300      	movs	r3, #0
 800e506:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e508:	683b      	ldr	r3, [r7, #0]
 800e50a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	2108      	movs	r1, #8
 800e512:	4618      	mov	r0, r3
 800e514:	f002 f85c 	bl	80105d0 <SDMMC_CmdBlockLength>
 800e518:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d001      	beq.n	800e524 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e522:	e0b2      	b.n	800e68a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681a      	ldr	r2, [r3, #0]
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e52c:	041b      	lsls	r3, r3, #16
 800e52e:	4619      	mov	r1, r3
 800e530:	4610      	mov	r0, r2
 800e532:	f002 f979 	bl	8010828 <SDMMC_CmdAppCommand>
 800e536:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d001      	beq.n	800e542 <SD_FindSCR+0x56>
  {
    return errorstate;
 800e53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e540:	e0a3      	b.n	800e68a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e542:	f04f 33ff 	mov.w	r3, #4294967295
 800e546:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e548:	2308      	movs	r3, #8
 800e54a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800e54c:	2330      	movs	r3, #48	; 0x30
 800e54e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e550:	2302      	movs	r3, #2
 800e552:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e554:	2300      	movs	r3, #0
 800e556:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e558:	2301      	movs	r3, #1
 800e55a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	f107 0210 	add.w	r2, r7, #16
 800e564:	4611      	mov	r1, r2
 800e566:	4618      	mov	r0, r3
 800e568:	f002 f806 	bl	8010578 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	4618      	mov	r0, r3
 800e572:	f002 f9c1 	bl	80108f8 <SDMMC_CmdSendSCR>
 800e576:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d02a      	beq.n	800e5d4 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800e57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e580:	e083      	b.n	800e68a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e588:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d00f      	beq.n	800e5b0 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	6819      	ldr	r1, [r3, #0]
 800e594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e596:	009b      	lsls	r3, r3, #2
 800e598:	f107 0208 	add.w	r2, r7, #8
 800e59c:	18d4      	adds	r4, r2, r3
 800e59e:	4608      	mov	r0, r1
 800e5a0:	f001 ff66 	bl	8010470 <SDMMC_ReadFIFO>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	6023      	str	r3, [r4, #0]
      index++;
 800e5a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5aa:	3301      	adds	r3, #1
 800e5ac:	637b      	str	r3, [r7, #52]	; 0x34
 800e5ae:	e006      	b.n	800e5be <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d012      	beq.n	800e5e4 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e5be:	f7f6 f94b 	bl	8004858 <HAL_GetTick>
 800e5c2:	4602      	mov	r2, r0
 800e5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5c6:	1ad3      	subs	r3, r2, r3
 800e5c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5cc:	d102      	bne.n	800e5d4 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e5ce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e5d2:	e05a      	b.n	800e68a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5da:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d0cf      	beq.n	800e582 <SD_FindSCR+0x96>
 800e5e2:	e000      	b.n	800e5e6 <SD_FindSCR+0xfa>
      break;
 800e5e4:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5ec:	f003 0308 	and.w	r3, r3, #8
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d005      	beq.n	800e600 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	2208      	movs	r2, #8
 800e5fa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e5fc:	2308      	movs	r3, #8
 800e5fe:	e044      	b.n	800e68a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e606:	f003 0302 	and.w	r3, r3, #2
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d005      	beq.n	800e61a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	2202      	movs	r2, #2
 800e614:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e616:	2302      	movs	r3, #2
 800e618:	e037      	b.n	800e68a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e620:	f003 0320 	and.w	r3, r3, #32
 800e624:	2b00      	cmp	r3, #0
 800e626:	d005      	beq.n	800e634 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	2220      	movs	r2, #32
 800e62e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e630:	2320      	movs	r3, #32
 800e632:	e02a      	b.n	800e68a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	f240 523a 	movw	r2, #1338	; 0x53a
 800e63c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	061a      	lsls	r2, r3, #24
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	021b      	lsls	r3, r3, #8
 800e646:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e64a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	0a1b      	lsrs	r3, r3, #8
 800e650:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e654:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	0e1b      	lsrs	r3, r3, #24
 800e65a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e65e:	601a      	str	r2, [r3, #0]
    scr++;
 800e660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e662:	3304      	adds	r3, #4
 800e664:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e666:	68bb      	ldr	r3, [r7, #8]
 800e668:	061a      	lsls	r2, r3, #24
 800e66a:	68bb      	ldr	r3, [r7, #8]
 800e66c:	021b      	lsls	r3, r3, #8
 800e66e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e672:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e674:	68bb      	ldr	r3, [r7, #8]
 800e676:	0a1b      	lsrs	r3, r3, #8
 800e678:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e67c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e67e:	68bb      	ldr	r3, [r7, #8]
 800e680:	0e1b      	lsrs	r3, r3, #24
 800e682:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e686:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e688:	2300      	movs	r3, #0
}
 800e68a:	4618      	mov	r0, r3
 800e68c:	373c      	adds	r7, #60	; 0x3c
 800e68e:	46bd      	mov	sp, r7
 800e690:	bd90      	pop	{r4, r7, pc}

0800e692 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e692:	b580      	push	{r7, lr}
 800e694:	b086      	sub	sp, #24
 800e696:	af00      	add	r7, sp, #0
 800e698:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e69e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6a4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e6a6:	693b      	ldr	r3, [r7, #16]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d03f      	beq.n	800e72c <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	617b      	str	r3, [r7, #20]
 800e6b0:	e033      	b.n	800e71a <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	f001 feda 	bl	8010470 <SDMMC_ReadFIFO>
 800e6bc:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800e6be:	68bb      	ldr	r3, [r7, #8]
 800e6c0:	b2da      	uxtb	r2, r3
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	3301      	adds	r3, #1
 800e6ca:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e6cc:	693b      	ldr	r3, [r7, #16]
 800e6ce:	3b01      	subs	r3, #1
 800e6d0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e6d2:	68bb      	ldr	r3, [r7, #8]
 800e6d4:	0a1b      	lsrs	r3, r3, #8
 800e6d6:	b2da      	uxtb	r2, r3
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	3301      	adds	r3, #1
 800e6e0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e6e2:	693b      	ldr	r3, [r7, #16]
 800e6e4:	3b01      	subs	r3, #1
 800e6e6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e6e8:	68bb      	ldr	r3, [r7, #8]
 800e6ea:	0c1b      	lsrs	r3, r3, #16
 800e6ec:	b2da      	uxtb	r2, r3
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	3301      	adds	r3, #1
 800e6f6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e6f8:	693b      	ldr	r3, [r7, #16]
 800e6fa:	3b01      	subs	r3, #1
 800e6fc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e6fe:	68bb      	ldr	r3, [r7, #8]
 800e700:	0e1b      	lsrs	r3, r3, #24
 800e702:	b2da      	uxtb	r2, r3
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	3301      	adds	r3, #1
 800e70c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e70e:	693b      	ldr	r3, [r7, #16]
 800e710:	3b01      	subs	r3, #1
 800e712:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800e714:	697b      	ldr	r3, [r7, #20]
 800e716:	3301      	adds	r3, #1
 800e718:	617b      	str	r3, [r7, #20]
 800e71a:	697b      	ldr	r3, [r7, #20]
 800e71c:	2b07      	cmp	r3, #7
 800e71e:	d9c8      	bls.n	800e6b2 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	68fa      	ldr	r2, [r7, #12]
 800e724:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	693a      	ldr	r2, [r7, #16]
 800e72a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800e72c:	bf00      	nop
 800e72e:	3718      	adds	r7, #24
 800e730:	46bd      	mov	sp, r7
 800e732:	bd80      	pop	{r7, pc}

0800e734 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e734:	b580      	push	{r7, lr}
 800e736:	b086      	sub	sp, #24
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	6a1b      	ldr	r3, [r3, #32]
 800e740:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e746:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e748:	693b      	ldr	r3, [r7, #16]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d043      	beq.n	800e7d6 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800e74e:	2300      	movs	r3, #0
 800e750:	617b      	str	r3, [r7, #20]
 800e752:	e037      	b.n	800e7c4 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	781b      	ldrb	r3, [r3, #0]
 800e758:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	3301      	adds	r3, #1
 800e75e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e760:	693b      	ldr	r3, [r7, #16]
 800e762:	3b01      	subs	r3, #1
 800e764:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	781b      	ldrb	r3, [r3, #0]
 800e76a:	021a      	lsls	r2, r3, #8
 800e76c:	68bb      	ldr	r3, [r7, #8]
 800e76e:	4313      	orrs	r3, r2
 800e770:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	3301      	adds	r3, #1
 800e776:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e778:	693b      	ldr	r3, [r7, #16]
 800e77a:	3b01      	subs	r3, #1
 800e77c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	781b      	ldrb	r3, [r3, #0]
 800e782:	041a      	lsls	r2, r3, #16
 800e784:	68bb      	ldr	r3, [r7, #8]
 800e786:	4313      	orrs	r3, r2
 800e788:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	3301      	adds	r3, #1
 800e78e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e790:	693b      	ldr	r3, [r7, #16]
 800e792:	3b01      	subs	r3, #1
 800e794:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	781b      	ldrb	r3, [r3, #0]
 800e79a:	061a      	lsls	r2, r3, #24
 800e79c:	68bb      	ldr	r3, [r7, #8]
 800e79e:	4313      	orrs	r3, r2
 800e7a0:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	3301      	adds	r3, #1
 800e7a6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e7a8:	693b      	ldr	r3, [r7, #16]
 800e7aa:	3b01      	subs	r3, #1
 800e7ac:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	f107 0208 	add.w	r2, r7, #8
 800e7b6:	4611      	mov	r1, r2
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	f001 fe66 	bl	801048a <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800e7be:	697b      	ldr	r3, [r7, #20]
 800e7c0:	3301      	adds	r3, #1
 800e7c2:	617b      	str	r3, [r7, #20]
 800e7c4:	697b      	ldr	r3, [r7, #20]
 800e7c6:	2b07      	cmp	r3, #7
 800e7c8:	d9c4      	bls.n	800e754 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	68fa      	ldr	r2, [r7, #12]
 800e7ce:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	693a      	ldr	r2, [r7, #16]
 800e7d4:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800e7d6:	bf00      	nop
 800e7d8:	3718      	adds	r7, #24
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bd80      	pop	{r7, pc}

0800e7de <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800e7de:	b580      	push	{r7, lr}
 800e7e0:	b082      	sub	sp, #8
 800e7e2:	af00      	add	r7, sp, #0
 800e7e4:	6078      	str	r0, [r7, #4]
 800e7e6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d101      	bne.n	800e7f2 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800e7ee:	2301      	movs	r3, #1
 800e7f0:	e025      	b.n	800e83e <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e7f8:	b2db      	uxtb	r3, r3
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d106      	bne.n	800e80c <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	2200      	movs	r2, #0
 800e802:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800e806:	6878      	ldr	r0, [r7, #4]
 800e808:	f7f5 fe6e 	bl	80044e8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	2202      	movs	r2, #2
 800e810:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	681a      	ldr	r2, [r3, #0]
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	3304      	adds	r3, #4
 800e81c:	4619      	mov	r1, r3
 800e81e:	4610      	mov	r0, r2
 800e820:	f001 fcf8 	bl	8010214 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	6818      	ldr	r0, [r3, #0]
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	685b      	ldr	r3, [r3, #4]
 800e82c:	461a      	mov	r2, r3
 800e82e:	6839      	ldr	r1, [r7, #0]
 800e830:	f001 fd4c 	bl	80102cc <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	2201      	movs	r2, #1
 800e838:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800e83c:	2300      	movs	r3, #0
}
 800e83e:	4618      	mov	r0, r3
 800e840:	3708      	adds	r7, #8
 800e842:	46bd      	mov	sp, r7
 800e844:	bd80      	pop	{r7, pc}

0800e846 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800e846:	b580      	push	{r7, lr}
 800e848:	b086      	sub	sp, #24
 800e84a:	af00      	add	r7, sp, #0
 800e84c:	60f8      	str	r0, [r7, #12]
 800e84e:	60b9      	str	r1, [r7, #8]
 800e850:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e858:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800e85a:	7dfb      	ldrb	r3, [r7, #23]
 800e85c:	2b02      	cmp	r3, #2
 800e85e:	d101      	bne.n	800e864 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800e860:	2302      	movs	r3, #2
 800e862:	e021      	b.n	800e8a8 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800e864:	7dfb      	ldrb	r3, [r7, #23]
 800e866:	2b01      	cmp	r3, #1
 800e868:	d002      	beq.n	800e870 <HAL_SDRAM_SendCommand+0x2a>
 800e86a:	7dfb      	ldrb	r3, [r7, #23]
 800e86c:	2b05      	cmp	r3, #5
 800e86e:	d118      	bne.n	800e8a2 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	2202      	movs	r2, #2
 800e874:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	687a      	ldr	r2, [r7, #4]
 800e87e:	68b9      	ldr	r1, [r7, #8]
 800e880:	4618      	mov	r0, r3
 800e882:	f001 fd8d 	bl	80103a0 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800e886:	68bb      	ldr	r3, [r7, #8]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	2b02      	cmp	r3, #2
 800e88c:	d104      	bne.n	800e898 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	2205      	movs	r2, #5
 800e892:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800e896:	e006      	b.n	800e8a6 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	2201      	movs	r2, #1
 800e89c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800e8a0:	e001      	b.n	800e8a6 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800e8a2:	2301      	movs	r3, #1
 800e8a4:	e000      	b.n	800e8a8 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800e8a6:	2300      	movs	r3, #0
}
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	3718      	adds	r7, #24
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	bd80      	pop	{r7, pc}

0800e8b0 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b082      	sub	sp, #8
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
 800e8b8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e8c0:	b2db      	uxtb	r3, r3
 800e8c2:	2b02      	cmp	r3, #2
 800e8c4:	d101      	bne.n	800e8ca <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800e8c6:	2302      	movs	r3, #2
 800e8c8:	e016      	b.n	800e8f8 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e8d0:	b2db      	uxtb	r3, r3
 800e8d2:	2b01      	cmp	r3, #1
 800e8d4:	d10f      	bne.n	800e8f6 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	2202      	movs	r2, #2
 800e8da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	6839      	ldr	r1, [r7, #0]
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	f001 fd7f 	bl	80103e8 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	2201      	movs	r2, #1
 800e8ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	e000      	b.n	800e8f8 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800e8f6:	2301      	movs	r3, #1
}
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	3708      	adds	r7, #8
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	bd80      	pop	{r7, pc}

0800e900 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800e900:	b580      	push	{r7, lr}
 800e902:	b084      	sub	sp, #16
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d101      	bne.n	800e912 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800e90e:	2301      	movs	r3, #1
 800e910:	e04c      	b.n	800e9ac <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e918:	b2db      	uxtb	r3, r3
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d106      	bne.n	800e92c <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	2200      	movs	r2, #0
 800e922:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800e926:	6878      	ldr	r0, [r7, #4]
 800e928:	f7f5 fa64 	bl	8003df4 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2202      	movs	r2, #2
 800e930:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	681a      	ldr	r2, [r3, #0]
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	f022 0203 	bic.w	r2, r2, #3
 800e942:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800e94c:	68fa      	ldr	r2, [r7, #12]
 800e94e:	4b19      	ldr	r3, [pc, #100]	; (800e9b4 <HAL_SPDIFRX_Init+0xb4>)
 800e950:	4013      	ands	r3, r2
 800e952:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800e95c:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800e962:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800e968:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800e96e:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800e974:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800e97a:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800e980:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800e986:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800e98c:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800e98e:	68fa      	ldr	r2, [r7, #12]
 800e990:	4313      	orrs	r3, r2
 800e992:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	68fa      	ldr	r2, [r7, #12]
 800e99a:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	2200      	movs	r2, #0
 800e9a0:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	2201      	movs	r2, #1
 800e9a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800e9aa:	2300      	movs	r3, #0
}
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	3710      	adds	r7, #16
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	bd80      	pop	{r7, pc}
 800e9b4:	fff88407 	.word	0xfff88407

0800e9b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b084      	sub	sp, #16
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d101      	bne.n	800e9ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e9c6:	2301      	movs	r3, #1
 800e9c8:	e09d      	b.n	800eb06 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d108      	bne.n	800e9e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	685b      	ldr	r3, [r3, #4]
 800e9d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e9da:	d009      	beq.n	800e9f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	2200      	movs	r2, #0
 800e9e0:	61da      	str	r2, [r3, #28]
 800e9e2:	e005      	b.n	800e9f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e9fc:	b2db      	uxtb	r3, r3
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d106      	bne.n	800ea10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	2200      	movs	r2, #0
 800ea06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ea0a:	6878      	ldr	r0, [r7, #4]
 800ea0c:	f7f5 fa56 	bl	8003ebc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	2202      	movs	r2, #2
 800ea14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	681a      	ldr	r2, [r3, #0]
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ea26:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	68db      	ldr	r3, [r3, #12]
 800ea2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ea30:	d902      	bls.n	800ea38 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ea32:	2300      	movs	r3, #0
 800ea34:	60fb      	str	r3, [r7, #12]
 800ea36:	e002      	b.n	800ea3e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ea38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ea3c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	68db      	ldr	r3, [r3, #12]
 800ea42:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800ea46:	d007      	beq.n	800ea58 <HAL_SPI_Init+0xa0>
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	68db      	ldr	r3, [r3, #12]
 800ea4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ea50:	d002      	beq.n	800ea58 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	2200      	movs	r2, #0
 800ea56:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	685b      	ldr	r3, [r3, #4]
 800ea5c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	689b      	ldr	r3, [r3, #8]
 800ea64:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ea68:	431a      	orrs	r2, r3
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	691b      	ldr	r3, [r3, #16]
 800ea6e:	f003 0302 	and.w	r3, r3, #2
 800ea72:	431a      	orrs	r2, r3
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	695b      	ldr	r3, [r3, #20]
 800ea78:	f003 0301 	and.w	r3, r3, #1
 800ea7c:	431a      	orrs	r2, r3
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	699b      	ldr	r3, [r3, #24]
 800ea82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ea86:	431a      	orrs	r2, r3
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	69db      	ldr	r3, [r3, #28]
 800ea8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ea90:	431a      	orrs	r2, r3
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	6a1b      	ldr	r3, [r3, #32]
 800ea96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea9a:	ea42 0103 	orr.w	r1, r2, r3
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eaa2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	430a      	orrs	r2, r1
 800eaac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	699b      	ldr	r3, [r3, #24]
 800eab2:	0c1b      	lsrs	r3, r3, #16
 800eab4:	f003 0204 	and.w	r2, r3, #4
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eabc:	f003 0310 	and.w	r3, r3, #16
 800eac0:	431a      	orrs	r2, r3
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eac6:	f003 0308 	and.w	r3, r3, #8
 800eaca:	431a      	orrs	r2, r3
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	68db      	ldr	r3, [r3, #12]
 800ead0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800ead4:	ea42 0103 	orr.w	r1, r2, r3
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	430a      	orrs	r2, r1
 800eae4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	69da      	ldr	r2, [r3, #28]
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800eaf4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	2200      	movs	r2, #0
 800eafa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	2201      	movs	r2, #1
 800eb00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800eb04:	2300      	movs	r3, #0
}
 800eb06:	4618      	mov	r0, r3
 800eb08:	3710      	adds	r7, #16
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	bd80      	pop	{r7, pc}

0800eb0e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800eb0e:	b580      	push	{r7, lr}
 800eb10:	b082      	sub	sp, #8
 800eb12:	af00      	add	r7, sp, #0
 800eb14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d101      	bne.n	800eb20 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800eb1c:	2301      	movs	r3, #1
 800eb1e:	e049      	b.n	800ebb4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eb26:	b2db      	uxtb	r3, r3
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d106      	bne.n	800eb3a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	2200      	movs	r2, #0
 800eb30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800eb34:	6878      	ldr	r0, [r7, #4]
 800eb36:	f7f5 fa23 	bl	8003f80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	2202      	movs	r2, #2
 800eb3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	681a      	ldr	r2, [r3, #0]
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	3304      	adds	r3, #4
 800eb4a:	4619      	mov	r1, r3
 800eb4c:	4610      	mov	r0, r2
 800eb4e:	f000 fa6b 	bl	800f028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	2201      	movs	r2, #1
 800eb56:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	2201      	movs	r2, #1
 800eb5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	2201      	movs	r2, #1
 800eb66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	2201      	movs	r2, #1
 800eb6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	2201      	movs	r2, #1
 800eb76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	2201      	movs	r2, #1
 800eb7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	2201      	movs	r2, #1
 800eb86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	2201      	movs	r2, #1
 800eb8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	2201      	movs	r2, #1
 800eb96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	2201      	movs	r2, #1
 800eb9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	2201      	movs	r2, #1
 800eba6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	2201      	movs	r2, #1
 800ebae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ebb2:	2300      	movs	r3, #0
}
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	3708      	adds	r7, #8
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	bd80      	pop	{r7, pc}

0800ebbc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b082      	sub	sp, #8
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d101      	bne.n	800ebce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ebca:	2301      	movs	r3, #1
 800ebcc:	e049      	b.n	800ec62 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ebd4:	b2db      	uxtb	r3, r3
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d106      	bne.n	800ebe8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	2200      	movs	r2, #0
 800ebde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ebe2:	6878      	ldr	r0, [r7, #4]
 800ebe4:	f7f5 fa3a 	bl	800405c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	2202      	movs	r2, #2
 800ebec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681a      	ldr	r2, [r3, #0]
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	3304      	adds	r3, #4
 800ebf8:	4619      	mov	r1, r3
 800ebfa:	4610      	mov	r0, r2
 800ebfc:	f000 fa14 	bl	800f028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	2201      	movs	r2, #1
 800ec04:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	2201      	movs	r2, #1
 800ec0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	2201      	movs	r2, #1
 800ec14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	2201      	movs	r2, #1
 800ec1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	2201      	movs	r2, #1
 800ec24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2201      	movs	r2, #1
 800ec2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	2201      	movs	r2, #1
 800ec34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	2201      	movs	r2, #1
 800ec3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	2201      	movs	r2, #1
 800ec44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	2201      	movs	r2, #1
 800ec4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	2201      	movs	r2, #1
 800ec54:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	2201      	movs	r2, #1
 800ec5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ec60:	2300      	movs	r3, #0
}
 800ec62:	4618      	mov	r0, r3
 800ec64:	3708      	adds	r7, #8
 800ec66:	46bd      	mov	sp, r7
 800ec68:	bd80      	pop	{r7, pc}
	...

0800ec6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b086      	sub	sp, #24
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	60f8      	str	r0, [r7, #12]
 800ec74:	60b9      	str	r1, [r7, #8]
 800ec76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ec78:	2300      	movs	r3, #0
 800ec7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ec82:	2b01      	cmp	r3, #1
 800ec84:	d101      	bne.n	800ec8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ec86:	2302      	movs	r3, #2
 800ec88:	e0ff      	b.n	800ee8a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	2201      	movs	r2, #1
 800ec8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	2b14      	cmp	r3, #20
 800ec96:	f200 80f0 	bhi.w	800ee7a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ec9a:	a201      	add	r2, pc, #4	; (adr r2, 800eca0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ec9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eca0:	0800ecf5 	.word	0x0800ecf5
 800eca4:	0800ee7b 	.word	0x0800ee7b
 800eca8:	0800ee7b 	.word	0x0800ee7b
 800ecac:	0800ee7b 	.word	0x0800ee7b
 800ecb0:	0800ed35 	.word	0x0800ed35
 800ecb4:	0800ee7b 	.word	0x0800ee7b
 800ecb8:	0800ee7b 	.word	0x0800ee7b
 800ecbc:	0800ee7b 	.word	0x0800ee7b
 800ecc0:	0800ed77 	.word	0x0800ed77
 800ecc4:	0800ee7b 	.word	0x0800ee7b
 800ecc8:	0800ee7b 	.word	0x0800ee7b
 800eccc:	0800ee7b 	.word	0x0800ee7b
 800ecd0:	0800edb7 	.word	0x0800edb7
 800ecd4:	0800ee7b 	.word	0x0800ee7b
 800ecd8:	0800ee7b 	.word	0x0800ee7b
 800ecdc:	0800ee7b 	.word	0x0800ee7b
 800ece0:	0800edf9 	.word	0x0800edf9
 800ece4:	0800ee7b 	.word	0x0800ee7b
 800ece8:	0800ee7b 	.word	0x0800ee7b
 800ecec:	0800ee7b 	.word	0x0800ee7b
 800ecf0:	0800ee39 	.word	0x0800ee39
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	68b9      	ldr	r1, [r7, #8]
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	f000 fa34 	bl	800f168 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	699a      	ldr	r2, [r3, #24]
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	f042 0208 	orr.w	r2, r2, #8
 800ed0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	699a      	ldr	r2, [r3, #24]
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	f022 0204 	bic.w	r2, r2, #4
 800ed1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	6999      	ldr	r1, [r3, #24]
 800ed26:	68bb      	ldr	r3, [r7, #8]
 800ed28:	691a      	ldr	r2, [r3, #16]
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	430a      	orrs	r2, r1
 800ed30:	619a      	str	r2, [r3, #24]
      break;
 800ed32:	e0a5      	b.n	800ee80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	68b9      	ldr	r1, [r7, #8]
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	f000 fa86 	bl	800f24c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	699a      	ldr	r2, [r3, #24]
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ed4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	699a      	ldr	r2, [r3, #24]
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ed5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	6999      	ldr	r1, [r3, #24]
 800ed66:	68bb      	ldr	r3, [r7, #8]
 800ed68:	691b      	ldr	r3, [r3, #16]
 800ed6a:	021a      	lsls	r2, r3, #8
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	430a      	orrs	r2, r1
 800ed72:	619a      	str	r2, [r3, #24]
      break;
 800ed74:	e084      	b.n	800ee80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	68b9      	ldr	r1, [r7, #8]
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	f000 fadd 	bl	800f33c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	69da      	ldr	r2, [r3, #28]
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	f042 0208 	orr.w	r2, r2, #8
 800ed90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	69da      	ldr	r2, [r3, #28]
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	f022 0204 	bic.w	r2, r2, #4
 800eda0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	69d9      	ldr	r1, [r3, #28]
 800eda8:	68bb      	ldr	r3, [r7, #8]
 800edaa:	691a      	ldr	r2, [r3, #16]
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	430a      	orrs	r2, r1
 800edb2:	61da      	str	r2, [r3, #28]
      break;
 800edb4:	e064      	b.n	800ee80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	68b9      	ldr	r1, [r7, #8]
 800edbc:	4618      	mov	r0, r3
 800edbe:	f000 fb33 	bl	800f428 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	69da      	ldr	r2, [r3, #28]
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800edd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	69da      	ldr	r2, [r3, #28]
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ede0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	69d9      	ldr	r1, [r3, #28]
 800ede8:	68bb      	ldr	r3, [r7, #8]
 800edea:	691b      	ldr	r3, [r3, #16]
 800edec:	021a      	lsls	r2, r3, #8
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	430a      	orrs	r2, r1
 800edf4:	61da      	str	r2, [r3, #28]
      break;
 800edf6:	e043      	b.n	800ee80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	68b9      	ldr	r1, [r7, #8]
 800edfe:	4618      	mov	r0, r3
 800ee00:	f000 fb6a 	bl	800f4d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	f042 0208 	orr.w	r2, r2, #8
 800ee12:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	f022 0204 	bic.w	r2, r2, #4
 800ee22:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ee2a:	68bb      	ldr	r3, [r7, #8]
 800ee2c:	691a      	ldr	r2, [r3, #16]
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	430a      	orrs	r2, r1
 800ee34:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ee36:	e023      	b.n	800ee80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	68b9      	ldr	r1, [r7, #8]
 800ee3e:	4618      	mov	r0, r3
 800ee40:	f000 fb9c 	bl	800f57c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ee52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ee62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ee6a:	68bb      	ldr	r3, [r7, #8]
 800ee6c:	691b      	ldr	r3, [r3, #16]
 800ee6e:	021a      	lsls	r2, r3, #8
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	430a      	orrs	r2, r1
 800ee76:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ee78:	e002      	b.n	800ee80 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ee7a:	2301      	movs	r3, #1
 800ee7c:	75fb      	strb	r3, [r7, #23]
      break;
 800ee7e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	2200      	movs	r2, #0
 800ee84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ee88:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	3718      	adds	r7, #24
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	bd80      	pop	{r7, pc}
 800ee92:	bf00      	nop

0800ee94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b084      	sub	sp, #16
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
 800ee9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ee9e:	2300      	movs	r3, #0
 800eea0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eea8:	2b01      	cmp	r3, #1
 800eeaa:	d101      	bne.n	800eeb0 <HAL_TIM_ConfigClockSource+0x1c>
 800eeac:	2302      	movs	r3, #2
 800eeae:	e0b4      	b.n	800f01a <HAL_TIM_ConfigClockSource+0x186>
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	2201      	movs	r2, #1
 800eeb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	2202      	movs	r2, #2
 800eebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	689b      	ldr	r3, [r3, #8]
 800eec6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800eec8:	68ba      	ldr	r2, [r7, #8]
 800eeca:	4b56      	ldr	r3, [pc, #344]	; (800f024 <HAL_TIM_ConfigClockSource+0x190>)
 800eecc:	4013      	ands	r3, r2
 800eece:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800eed0:	68bb      	ldr	r3, [r7, #8]
 800eed2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800eed6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	68ba      	ldr	r2, [r7, #8]
 800eede:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800eee0:	683b      	ldr	r3, [r7, #0]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eee8:	d03e      	beq.n	800ef68 <HAL_TIM_ConfigClockSource+0xd4>
 800eeea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eeee:	f200 8087 	bhi.w	800f000 <HAL_TIM_ConfigClockSource+0x16c>
 800eef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eef6:	f000 8086 	beq.w	800f006 <HAL_TIM_ConfigClockSource+0x172>
 800eefa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eefe:	d87f      	bhi.n	800f000 <HAL_TIM_ConfigClockSource+0x16c>
 800ef00:	2b70      	cmp	r3, #112	; 0x70
 800ef02:	d01a      	beq.n	800ef3a <HAL_TIM_ConfigClockSource+0xa6>
 800ef04:	2b70      	cmp	r3, #112	; 0x70
 800ef06:	d87b      	bhi.n	800f000 <HAL_TIM_ConfigClockSource+0x16c>
 800ef08:	2b60      	cmp	r3, #96	; 0x60
 800ef0a:	d050      	beq.n	800efae <HAL_TIM_ConfigClockSource+0x11a>
 800ef0c:	2b60      	cmp	r3, #96	; 0x60
 800ef0e:	d877      	bhi.n	800f000 <HAL_TIM_ConfigClockSource+0x16c>
 800ef10:	2b50      	cmp	r3, #80	; 0x50
 800ef12:	d03c      	beq.n	800ef8e <HAL_TIM_ConfigClockSource+0xfa>
 800ef14:	2b50      	cmp	r3, #80	; 0x50
 800ef16:	d873      	bhi.n	800f000 <HAL_TIM_ConfigClockSource+0x16c>
 800ef18:	2b40      	cmp	r3, #64	; 0x40
 800ef1a:	d058      	beq.n	800efce <HAL_TIM_ConfigClockSource+0x13a>
 800ef1c:	2b40      	cmp	r3, #64	; 0x40
 800ef1e:	d86f      	bhi.n	800f000 <HAL_TIM_ConfigClockSource+0x16c>
 800ef20:	2b30      	cmp	r3, #48	; 0x30
 800ef22:	d064      	beq.n	800efee <HAL_TIM_ConfigClockSource+0x15a>
 800ef24:	2b30      	cmp	r3, #48	; 0x30
 800ef26:	d86b      	bhi.n	800f000 <HAL_TIM_ConfigClockSource+0x16c>
 800ef28:	2b20      	cmp	r3, #32
 800ef2a:	d060      	beq.n	800efee <HAL_TIM_ConfigClockSource+0x15a>
 800ef2c:	2b20      	cmp	r3, #32
 800ef2e:	d867      	bhi.n	800f000 <HAL_TIM_ConfigClockSource+0x16c>
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d05c      	beq.n	800efee <HAL_TIM_ConfigClockSource+0x15a>
 800ef34:	2b10      	cmp	r3, #16
 800ef36:	d05a      	beq.n	800efee <HAL_TIM_ConfigClockSource+0x15a>
 800ef38:	e062      	b.n	800f000 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	6818      	ldr	r0, [r3, #0]
 800ef3e:	683b      	ldr	r3, [r7, #0]
 800ef40:	6899      	ldr	r1, [r3, #8]
 800ef42:	683b      	ldr	r3, [r7, #0]
 800ef44:	685a      	ldr	r2, [r3, #4]
 800ef46:	683b      	ldr	r3, [r7, #0]
 800ef48:	68db      	ldr	r3, [r3, #12]
 800ef4a:	f000 fbe5 	bl	800f718 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	689b      	ldr	r3, [r3, #8]
 800ef54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ef56:	68bb      	ldr	r3, [r7, #8]
 800ef58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ef5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	68ba      	ldr	r2, [r7, #8]
 800ef64:	609a      	str	r2, [r3, #8]
      break;
 800ef66:	e04f      	b.n	800f008 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	6818      	ldr	r0, [r3, #0]
 800ef6c:	683b      	ldr	r3, [r7, #0]
 800ef6e:	6899      	ldr	r1, [r3, #8]
 800ef70:	683b      	ldr	r3, [r7, #0]
 800ef72:	685a      	ldr	r2, [r3, #4]
 800ef74:	683b      	ldr	r3, [r7, #0]
 800ef76:	68db      	ldr	r3, [r3, #12]
 800ef78:	f000 fbce 	bl	800f718 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	689a      	ldr	r2, [r3, #8]
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ef8a:	609a      	str	r2, [r3, #8]
      break;
 800ef8c:	e03c      	b.n	800f008 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	6818      	ldr	r0, [r3, #0]
 800ef92:	683b      	ldr	r3, [r7, #0]
 800ef94:	6859      	ldr	r1, [r3, #4]
 800ef96:	683b      	ldr	r3, [r7, #0]
 800ef98:	68db      	ldr	r3, [r3, #12]
 800ef9a:	461a      	mov	r2, r3
 800ef9c:	f000 fb42 	bl	800f624 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	2150      	movs	r1, #80	; 0x50
 800efa6:	4618      	mov	r0, r3
 800efa8:	f000 fb9b 	bl	800f6e2 <TIM_ITRx_SetConfig>
      break;
 800efac:	e02c      	b.n	800f008 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	6818      	ldr	r0, [r3, #0]
 800efb2:	683b      	ldr	r3, [r7, #0]
 800efb4:	6859      	ldr	r1, [r3, #4]
 800efb6:	683b      	ldr	r3, [r7, #0]
 800efb8:	68db      	ldr	r3, [r3, #12]
 800efba:	461a      	mov	r2, r3
 800efbc:	f000 fb61 	bl	800f682 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	2160      	movs	r1, #96	; 0x60
 800efc6:	4618      	mov	r0, r3
 800efc8:	f000 fb8b 	bl	800f6e2 <TIM_ITRx_SetConfig>
      break;
 800efcc:	e01c      	b.n	800f008 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	6818      	ldr	r0, [r3, #0]
 800efd2:	683b      	ldr	r3, [r7, #0]
 800efd4:	6859      	ldr	r1, [r3, #4]
 800efd6:	683b      	ldr	r3, [r7, #0]
 800efd8:	68db      	ldr	r3, [r3, #12]
 800efda:	461a      	mov	r2, r3
 800efdc:	f000 fb22 	bl	800f624 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	2140      	movs	r1, #64	; 0x40
 800efe6:	4618      	mov	r0, r3
 800efe8:	f000 fb7b 	bl	800f6e2 <TIM_ITRx_SetConfig>
      break;
 800efec:	e00c      	b.n	800f008 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681a      	ldr	r2, [r3, #0]
 800eff2:	683b      	ldr	r3, [r7, #0]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	4619      	mov	r1, r3
 800eff8:	4610      	mov	r0, r2
 800effa:	f000 fb72 	bl	800f6e2 <TIM_ITRx_SetConfig>
      break;
 800effe:	e003      	b.n	800f008 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800f000:	2301      	movs	r3, #1
 800f002:	73fb      	strb	r3, [r7, #15]
      break;
 800f004:	e000      	b.n	800f008 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800f006:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	2201      	movs	r2, #1
 800f00c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	2200      	movs	r2, #0
 800f014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f018:	7bfb      	ldrb	r3, [r7, #15]
}
 800f01a:	4618      	mov	r0, r3
 800f01c:	3710      	adds	r7, #16
 800f01e:	46bd      	mov	sp, r7
 800f020:	bd80      	pop	{r7, pc}
 800f022:	bf00      	nop
 800f024:	fffeff88 	.word	0xfffeff88

0800f028 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f028:	b480      	push	{r7}
 800f02a:	b085      	sub	sp, #20
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
 800f030:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	4a40      	ldr	r2, [pc, #256]	; (800f13c <TIM_Base_SetConfig+0x114>)
 800f03c:	4293      	cmp	r3, r2
 800f03e:	d013      	beq.n	800f068 <TIM_Base_SetConfig+0x40>
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f046:	d00f      	beq.n	800f068 <TIM_Base_SetConfig+0x40>
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	4a3d      	ldr	r2, [pc, #244]	; (800f140 <TIM_Base_SetConfig+0x118>)
 800f04c:	4293      	cmp	r3, r2
 800f04e:	d00b      	beq.n	800f068 <TIM_Base_SetConfig+0x40>
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	4a3c      	ldr	r2, [pc, #240]	; (800f144 <TIM_Base_SetConfig+0x11c>)
 800f054:	4293      	cmp	r3, r2
 800f056:	d007      	beq.n	800f068 <TIM_Base_SetConfig+0x40>
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	4a3b      	ldr	r2, [pc, #236]	; (800f148 <TIM_Base_SetConfig+0x120>)
 800f05c:	4293      	cmp	r3, r2
 800f05e:	d003      	beq.n	800f068 <TIM_Base_SetConfig+0x40>
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	4a3a      	ldr	r2, [pc, #232]	; (800f14c <TIM_Base_SetConfig+0x124>)
 800f064:	4293      	cmp	r3, r2
 800f066:	d108      	bne.n	800f07a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f06e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f070:	683b      	ldr	r3, [r7, #0]
 800f072:	685b      	ldr	r3, [r3, #4]
 800f074:	68fa      	ldr	r2, [r7, #12]
 800f076:	4313      	orrs	r3, r2
 800f078:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	4a2f      	ldr	r2, [pc, #188]	; (800f13c <TIM_Base_SetConfig+0x114>)
 800f07e:	4293      	cmp	r3, r2
 800f080:	d02b      	beq.n	800f0da <TIM_Base_SetConfig+0xb2>
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f088:	d027      	beq.n	800f0da <TIM_Base_SetConfig+0xb2>
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	4a2c      	ldr	r2, [pc, #176]	; (800f140 <TIM_Base_SetConfig+0x118>)
 800f08e:	4293      	cmp	r3, r2
 800f090:	d023      	beq.n	800f0da <TIM_Base_SetConfig+0xb2>
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	4a2b      	ldr	r2, [pc, #172]	; (800f144 <TIM_Base_SetConfig+0x11c>)
 800f096:	4293      	cmp	r3, r2
 800f098:	d01f      	beq.n	800f0da <TIM_Base_SetConfig+0xb2>
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	4a2a      	ldr	r2, [pc, #168]	; (800f148 <TIM_Base_SetConfig+0x120>)
 800f09e:	4293      	cmp	r3, r2
 800f0a0:	d01b      	beq.n	800f0da <TIM_Base_SetConfig+0xb2>
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	4a29      	ldr	r2, [pc, #164]	; (800f14c <TIM_Base_SetConfig+0x124>)
 800f0a6:	4293      	cmp	r3, r2
 800f0a8:	d017      	beq.n	800f0da <TIM_Base_SetConfig+0xb2>
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	4a28      	ldr	r2, [pc, #160]	; (800f150 <TIM_Base_SetConfig+0x128>)
 800f0ae:	4293      	cmp	r3, r2
 800f0b0:	d013      	beq.n	800f0da <TIM_Base_SetConfig+0xb2>
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	4a27      	ldr	r2, [pc, #156]	; (800f154 <TIM_Base_SetConfig+0x12c>)
 800f0b6:	4293      	cmp	r3, r2
 800f0b8:	d00f      	beq.n	800f0da <TIM_Base_SetConfig+0xb2>
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	4a26      	ldr	r2, [pc, #152]	; (800f158 <TIM_Base_SetConfig+0x130>)
 800f0be:	4293      	cmp	r3, r2
 800f0c0:	d00b      	beq.n	800f0da <TIM_Base_SetConfig+0xb2>
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	4a25      	ldr	r2, [pc, #148]	; (800f15c <TIM_Base_SetConfig+0x134>)
 800f0c6:	4293      	cmp	r3, r2
 800f0c8:	d007      	beq.n	800f0da <TIM_Base_SetConfig+0xb2>
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	4a24      	ldr	r2, [pc, #144]	; (800f160 <TIM_Base_SetConfig+0x138>)
 800f0ce:	4293      	cmp	r3, r2
 800f0d0:	d003      	beq.n	800f0da <TIM_Base_SetConfig+0xb2>
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	4a23      	ldr	r2, [pc, #140]	; (800f164 <TIM_Base_SetConfig+0x13c>)
 800f0d6:	4293      	cmp	r3, r2
 800f0d8:	d108      	bne.n	800f0ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f0e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f0e2:	683b      	ldr	r3, [r7, #0]
 800f0e4:	68db      	ldr	r3, [r3, #12]
 800f0e6:	68fa      	ldr	r2, [r7, #12]
 800f0e8:	4313      	orrs	r3, r2
 800f0ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f0f2:	683b      	ldr	r3, [r7, #0]
 800f0f4:	695b      	ldr	r3, [r3, #20]
 800f0f6:	4313      	orrs	r3, r2
 800f0f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	68fa      	ldr	r2, [r7, #12]
 800f0fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	689a      	ldr	r2, [r3, #8]
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f108:	683b      	ldr	r3, [r7, #0]
 800f10a:	681a      	ldr	r2, [r3, #0]
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	4a0a      	ldr	r2, [pc, #40]	; (800f13c <TIM_Base_SetConfig+0x114>)
 800f114:	4293      	cmp	r3, r2
 800f116:	d003      	beq.n	800f120 <TIM_Base_SetConfig+0xf8>
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	4a0c      	ldr	r2, [pc, #48]	; (800f14c <TIM_Base_SetConfig+0x124>)
 800f11c:	4293      	cmp	r3, r2
 800f11e:	d103      	bne.n	800f128 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	691a      	ldr	r2, [r3, #16]
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	2201      	movs	r2, #1
 800f12c:	615a      	str	r2, [r3, #20]
}
 800f12e:	bf00      	nop
 800f130:	3714      	adds	r7, #20
 800f132:	46bd      	mov	sp, r7
 800f134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f138:	4770      	bx	lr
 800f13a:	bf00      	nop
 800f13c:	40010000 	.word	0x40010000
 800f140:	40000400 	.word	0x40000400
 800f144:	40000800 	.word	0x40000800
 800f148:	40000c00 	.word	0x40000c00
 800f14c:	40010400 	.word	0x40010400
 800f150:	40014000 	.word	0x40014000
 800f154:	40014400 	.word	0x40014400
 800f158:	40014800 	.word	0x40014800
 800f15c:	40001800 	.word	0x40001800
 800f160:	40001c00 	.word	0x40001c00
 800f164:	40002000 	.word	0x40002000

0800f168 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f168:	b480      	push	{r7}
 800f16a:	b087      	sub	sp, #28
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	6078      	str	r0, [r7, #4]
 800f170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	6a1b      	ldr	r3, [r3, #32]
 800f176:	f023 0201 	bic.w	r2, r3, #1
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	6a1b      	ldr	r3, [r3, #32]
 800f182:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	685b      	ldr	r3, [r3, #4]
 800f188:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	699b      	ldr	r3, [r3, #24]
 800f18e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f190:	68fa      	ldr	r2, [r7, #12]
 800f192:	4b2b      	ldr	r3, [pc, #172]	; (800f240 <TIM_OC1_SetConfig+0xd8>)
 800f194:	4013      	ands	r3, r2
 800f196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	f023 0303 	bic.w	r3, r3, #3
 800f19e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f1a0:	683b      	ldr	r3, [r7, #0]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	68fa      	ldr	r2, [r7, #12]
 800f1a6:	4313      	orrs	r3, r2
 800f1a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f1aa:	697b      	ldr	r3, [r7, #20]
 800f1ac:	f023 0302 	bic.w	r3, r3, #2
 800f1b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	689b      	ldr	r3, [r3, #8]
 800f1b6:	697a      	ldr	r2, [r7, #20]
 800f1b8:	4313      	orrs	r3, r2
 800f1ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	4a21      	ldr	r2, [pc, #132]	; (800f244 <TIM_OC1_SetConfig+0xdc>)
 800f1c0:	4293      	cmp	r3, r2
 800f1c2:	d003      	beq.n	800f1cc <TIM_OC1_SetConfig+0x64>
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	4a20      	ldr	r2, [pc, #128]	; (800f248 <TIM_OC1_SetConfig+0xe0>)
 800f1c8:	4293      	cmp	r3, r2
 800f1ca:	d10c      	bne.n	800f1e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f1cc:	697b      	ldr	r3, [r7, #20]
 800f1ce:	f023 0308 	bic.w	r3, r3, #8
 800f1d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	68db      	ldr	r3, [r3, #12]
 800f1d8:	697a      	ldr	r2, [r7, #20]
 800f1da:	4313      	orrs	r3, r2
 800f1dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f1de:	697b      	ldr	r3, [r7, #20]
 800f1e0:	f023 0304 	bic.w	r3, r3, #4
 800f1e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	4a16      	ldr	r2, [pc, #88]	; (800f244 <TIM_OC1_SetConfig+0xdc>)
 800f1ea:	4293      	cmp	r3, r2
 800f1ec:	d003      	beq.n	800f1f6 <TIM_OC1_SetConfig+0x8e>
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	4a15      	ldr	r2, [pc, #84]	; (800f248 <TIM_OC1_SetConfig+0xe0>)
 800f1f2:	4293      	cmp	r3, r2
 800f1f4:	d111      	bne.n	800f21a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f1f6:	693b      	ldr	r3, [r7, #16]
 800f1f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f1fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f1fe:	693b      	ldr	r3, [r7, #16]
 800f200:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f204:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	695b      	ldr	r3, [r3, #20]
 800f20a:	693a      	ldr	r2, [r7, #16]
 800f20c:	4313      	orrs	r3, r2
 800f20e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f210:	683b      	ldr	r3, [r7, #0]
 800f212:	699b      	ldr	r3, [r3, #24]
 800f214:	693a      	ldr	r2, [r7, #16]
 800f216:	4313      	orrs	r3, r2
 800f218:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	693a      	ldr	r2, [r7, #16]
 800f21e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	68fa      	ldr	r2, [r7, #12]
 800f224:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f226:	683b      	ldr	r3, [r7, #0]
 800f228:	685a      	ldr	r2, [r3, #4]
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	697a      	ldr	r2, [r7, #20]
 800f232:	621a      	str	r2, [r3, #32]
}
 800f234:	bf00      	nop
 800f236:	371c      	adds	r7, #28
 800f238:	46bd      	mov	sp, r7
 800f23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23e:	4770      	bx	lr
 800f240:	fffeff8f 	.word	0xfffeff8f
 800f244:	40010000 	.word	0x40010000
 800f248:	40010400 	.word	0x40010400

0800f24c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f24c:	b480      	push	{r7}
 800f24e:	b087      	sub	sp, #28
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
 800f254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	6a1b      	ldr	r3, [r3, #32]
 800f25a:	f023 0210 	bic.w	r2, r3, #16
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	6a1b      	ldr	r3, [r3, #32]
 800f266:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	685b      	ldr	r3, [r3, #4]
 800f26c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	699b      	ldr	r3, [r3, #24]
 800f272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f274:	68fa      	ldr	r2, [r7, #12]
 800f276:	4b2e      	ldr	r3, [pc, #184]	; (800f330 <TIM_OC2_SetConfig+0xe4>)
 800f278:	4013      	ands	r3, r2
 800f27a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f282:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f284:	683b      	ldr	r3, [r7, #0]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	021b      	lsls	r3, r3, #8
 800f28a:	68fa      	ldr	r2, [r7, #12]
 800f28c:	4313      	orrs	r3, r2
 800f28e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f290:	697b      	ldr	r3, [r7, #20]
 800f292:	f023 0320 	bic.w	r3, r3, #32
 800f296:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f298:	683b      	ldr	r3, [r7, #0]
 800f29a:	689b      	ldr	r3, [r3, #8]
 800f29c:	011b      	lsls	r3, r3, #4
 800f29e:	697a      	ldr	r2, [r7, #20]
 800f2a0:	4313      	orrs	r3, r2
 800f2a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	4a23      	ldr	r2, [pc, #140]	; (800f334 <TIM_OC2_SetConfig+0xe8>)
 800f2a8:	4293      	cmp	r3, r2
 800f2aa:	d003      	beq.n	800f2b4 <TIM_OC2_SetConfig+0x68>
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	4a22      	ldr	r2, [pc, #136]	; (800f338 <TIM_OC2_SetConfig+0xec>)
 800f2b0:	4293      	cmp	r3, r2
 800f2b2:	d10d      	bne.n	800f2d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f2b4:	697b      	ldr	r3, [r7, #20]
 800f2b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f2ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f2bc:	683b      	ldr	r3, [r7, #0]
 800f2be:	68db      	ldr	r3, [r3, #12]
 800f2c0:	011b      	lsls	r3, r3, #4
 800f2c2:	697a      	ldr	r2, [r7, #20]
 800f2c4:	4313      	orrs	r3, r2
 800f2c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f2c8:	697b      	ldr	r3, [r7, #20]
 800f2ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f2ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	4a18      	ldr	r2, [pc, #96]	; (800f334 <TIM_OC2_SetConfig+0xe8>)
 800f2d4:	4293      	cmp	r3, r2
 800f2d6:	d003      	beq.n	800f2e0 <TIM_OC2_SetConfig+0x94>
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	4a17      	ldr	r2, [pc, #92]	; (800f338 <TIM_OC2_SetConfig+0xec>)
 800f2dc:	4293      	cmp	r3, r2
 800f2de:	d113      	bne.n	800f308 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f2e0:	693b      	ldr	r3, [r7, #16]
 800f2e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f2e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f2e8:	693b      	ldr	r3, [r7, #16]
 800f2ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f2ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f2f0:	683b      	ldr	r3, [r7, #0]
 800f2f2:	695b      	ldr	r3, [r3, #20]
 800f2f4:	009b      	lsls	r3, r3, #2
 800f2f6:	693a      	ldr	r2, [r7, #16]
 800f2f8:	4313      	orrs	r3, r2
 800f2fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	699b      	ldr	r3, [r3, #24]
 800f300:	009b      	lsls	r3, r3, #2
 800f302:	693a      	ldr	r2, [r7, #16]
 800f304:	4313      	orrs	r3, r2
 800f306:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	693a      	ldr	r2, [r7, #16]
 800f30c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	68fa      	ldr	r2, [r7, #12]
 800f312:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f314:	683b      	ldr	r3, [r7, #0]
 800f316:	685a      	ldr	r2, [r3, #4]
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	697a      	ldr	r2, [r7, #20]
 800f320:	621a      	str	r2, [r3, #32]
}
 800f322:	bf00      	nop
 800f324:	371c      	adds	r7, #28
 800f326:	46bd      	mov	sp, r7
 800f328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32c:	4770      	bx	lr
 800f32e:	bf00      	nop
 800f330:	feff8fff 	.word	0xfeff8fff
 800f334:	40010000 	.word	0x40010000
 800f338:	40010400 	.word	0x40010400

0800f33c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f33c:	b480      	push	{r7}
 800f33e:	b087      	sub	sp, #28
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
 800f344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	6a1b      	ldr	r3, [r3, #32]
 800f34a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	6a1b      	ldr	r3, [r3, #32]
 800f356:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	685b      	ldr	r3, [r3, #4]
 800f35c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	69db      	ldr	r3, [r3, #28]
 800f362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f364:	68fa      	ldr	r2, [r7, #12]
 800f366:	4b2d      	ldr	r3, [pc, #180]	; (800f41c <TIM_OC3_SetConfig+0xe0>)
 800f368:	4013      	ands	r3, r2
 800f36a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	f023 0303 	bic.w	r3, r3, #3
 800f372:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f374:	683b      	ldr	r3, [r7, #0]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	68fa      	ldr	r2, [r7, #12]
 800f37a:	4313      	orrs	r3, r2
 800f37c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f37e:	697b      	ldr	r3, [r7, #20]
 800f380:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f384:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f386:	683b      	ldr	r3, [r7, #0]
 800f388:	689b      	ldr	r3, [r3, #8]
 800f38a:	021b      	lsls	r3, r3, #8
 800f38c:	697a      	ldr	r2, [r7, #20]
 800f38e:	4313      	orrs	r3, r2
 800f390:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	4a22      	ldr	r2, [pc, #136]	; (800f420 <TIM_OC3_SetConfig+0xe4>)
 800f396:	4293      	cmp	r3, r2
 800f398:	d003      	beq.n	800f3a2 <TIM_OC3_SetConfig+0x66>
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	4a21      	ldr	r2, [pc, #132]	; (800f424 <TIM_OC3_SetConfig+0xe8>)
 800f39e:	4293      	cmp	r3, r2
 800f3a0:	d10d      	bne.n	800f3be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f3a2:	697b      	ldr	r3, [r7, #20]
 800f3a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f3a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f3aa:	683b      	ldr	r3, [r7, #0]
 800f3ac:	68db      	ldr	r3, [r3, #12]
 800f3ae:	021b      	lsls	r3, r3, #8
 800f3b0:	697a      	ldr	r2, [r7, #20]
 800f3b2:	4313      	orrs	r3, r2
 800f3b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f3b6:	697b      	ldr	r3, [r7, #20]
 800f3b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f3bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	4a17      	ldr	r2, [pc, #92]	; (800f420 <TIM_OC3_SetConfig+0xe4>)
 800f3c2:	4293      	cmp	r3, r2
 800f3c4:	d003      	beq.n	800f3ce <TIM_OC3_SetConfig+0x92>
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	4a16      	ldr	r2, [pc, #88]	; (800f424 <TIM_OC3_SetConfig+0xe8>)
 800f3ca:	4293      	cmp	r3, r2
 800f3cc:	d113      	bne.n	800f3f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f3ce:	693b      	ldr	r3, [r7, #16]
 800f3d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f3d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f3d6:	693b      	ldr	r3, [r7, #16]
 800f3d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f3dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f3de:	683b      	ldr	r3, [r7, #0]
 800f3e0:	695b      	ldr	r3, [r3, #20]
 800f3e2:	011b      	lsls	r3, r3, #4
 800f3e4:	693a      	ldr	r2, [r7, #16]
 800f3e6:	4313      	orrs	r3, r2
 800f3e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f3ea:	683b      	ldr	r3, [r7, #0]
 800f3ec:	699b      	ldr	r3, [r3, #24]
 800f3ee:	011b      	lsls	r3, r3, #4
 800f3f0:	693a      	ldr	r2, [r7, #16]
 800f3f2:	4313      	orrs	r3, r2
 800f3f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	693a      	ldr	r2, [r7, #16]
 800f3fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	68fa      	ldr	r2, [r7, #12]
 800f400:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f402:	683b      	ldr	r3, [r7, #0]
 800f404:	685a      	ldr	r2, [r3, #4]
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	697a      	ldr	r2, [r7, #20]
 800f40e:	621a      	str	r2, [r3, #32]
}
 800f410:	bf00      	nop
 800f412:	371c      	adds	r7, #28
 800f414:	46bd      	mov	sp, r7
 800f416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41a:	4770      	bx	lr
 800f41c:	fffeff8f 	.word	0xfffeff8f
 800f420:	40010000 	.word	0x40010000
 800f424:	40010400 	.word	0x40010400

0800f428 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f428:	b480      	push	{r7}
 800f42a:	b087      	sub	sp, #28
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	6078      	str	r0, [r7, #4]
 800f430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	6a1b      	ldr	r3, [r3, #32]
 800f436:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	6a1b      	ldr	r3, [r3, #32]
 800f442:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	685b      	ldr	r3, [r3, #4]
 800f448:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	69db      	ldr	r3, [r3, #28]
 800f44e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f450:	68fa      	ldr	r2, [r7, #12]
 800f452:	4b1e      	ldr	r3, [pc, #120]	; (800f4cc <TIM_OC4_SetConfig+0xa4>)
 800f454:	4013      	ands	r3, r2
 800f456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f45e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f460:	683b      	ldr	r3, [r7, #0]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	021b      	lsls	r3, r3, #8
 800f466:	68fa      	ldr	r2, [r7, #12]
 800f468:	4313      	orrs	r3, r2
 800f46a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f46c:	693b      	ldr	r3, [r7, #16]
 800f46e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f472:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f474:	683b      	ldr	r3, [r7, #0]
 800f476:	689b      	ldr	r3, [r3, #8]
 800f478:	031b      	lsls	r3, r3, #12
 800f47a:	693a      	ldr	r2, [r7, #16]
 800f47c:	4313      	orrs	r3, r2
 800f47e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	4a13      	ldr	r2, [pc, #76]	; (800f4d0 <TIM_OC4_SetConfig+0xa8>)
 800f484:	4293      	cmp	r3, r2
 800f486:	d003      	beq.n	800f490 <TIM_OC4_SetConfig+0x68>
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	4a12      	ldr	r2, [pc, #72]	; (800f4d4 <TIM_OC4_SetConfig+0xac>)
 800f48c:	4293      	cmp	r3, r2
 800f48e:	d109      	bne.n	800f4a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f490:	697b      	ldr	r3, [r7, #20]
 800f492:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f496:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f498:	683b      	ldr	r3, [r7, #0]
 800f49a:	695b      	ldr	r3, [r3, #20]
 800f49c:	019b      	lsls	r3, r3, #6
 800f49e:	697a      	ldr	r2, [r7, #20]
 800f4a0:	4313      	orrs	r3, r2
 800f4a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	697a      	ldr	r2, [r7, #20]
 800f4a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	68fa      	ldr	r2, [r7, #12]
 800f4ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f4b0:	683b      	ldr	r3, [r7, #0]
 800f4b2:	685a      	ldr	r2, [r3, #4]
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	693a      	ldr	r2, [r7, #16]
 800f4bc:	621a      	str	r2, [r3, #32]
}
 800f4be:	bf00      	nop
 800f4c0:	371c      	adds	r7, #28
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c8:	4770      	bx	lr
 800f4ca:	bf00      	nop
 800f4cc:	feff8fff 	.word	0xfeff8fff
 800f4d0:	40010000 	.word	0x40010000
 800f4d4:	40010400 	.word	0x40010400

0800f4d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f4d8:	b480      	push	{r7}
 800f4da:	b087      	sub	sp, #28
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
 800f4e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	6a1b      	ldr	r3, [r3, #32]
 800f4e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	6a1b      	ldr	r3, [r3, #32]
 800f4f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	685b      	ldr	r3, [r3, #4]
 800f4f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f4fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f500:	68fa      	ldr	r2, [r7, #12]
 800f502:	4b1b      	ldr	r3, [pc, #108]	; (800f570 <TIM_OC5_SetConfig+0x98>)
 800f504:	4013      	ands	r3, r2
 800f506:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f508:	683b      	ldr	r3, [r7, #0]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	68fa      	ldr	r2, [r7, #12]
 800f50e:	4313      	orrs	r3, r2
 800f510:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f512:	693b      	ldr	r3, [r7, #16]
 800f514:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f518:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f51a:	683b      	ldr	r3, [r7, #0]
 800f51c:	689b      	ldr	r3, [r3, #8]
 800f51e:	041b      	lsls	r3, r3, #16
 800f520:	693a      	ldr	r2, [r7, #16]
 800f522:	4313      	orrs	r3, r2
 800f524:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	4a12      	ldr	r2, [pc, #72]	; (800f574 <TIM_OC5_SetConfig+0x9c>)
 800f52a:	4293      	cmp	r3, r2
 800f52c:	d003      	beq.n	800f536 <TIM_OC5_SetConfig+0x5e>
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	4a11      	ldr	r2, [pc, #68]	; (800f578 <TIM_OC5_SetConfig+0xa0>)
 800f532:	4293      	cmp	r3, r2
 800f534:	d109      	bne.n	800f54a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f536:	697b      	ldr	r3, [r7, #20]
 800f538:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f53c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f53e:	683b      	ldr	r3, [r7, #0]
 800f540:	695b      	ldr	r3, [r3, #20]
 800f542:	021b      	lsls	r3, r3, #8
 800f544:	697a      	ldr	r2, [r7, #20]
 800f546:	4313      	orrs	r3, r2
 800f548:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	697a      	ldr	r2, [r7, #20]
 800f54e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	68fa      	ldr	r2, [r7, #12]
 800f554:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f556:	683b      	ldr	r3, [r7, #0]
 800f558:	685a      	ldr	r2, [r3, #4]
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	693a      	ldr	r2, [r7, #16]
 800f562:	621a      	str	r2, [r3, #32]
}
 800f564:	bf00      	nop
 800f566:	371c      	adds	r7, #28
 800f568:	46bd      	mov	sp, r7
 800f56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56e:	4770      	bx	lr
 800f570:	fffeff8f 	.word	0xfffeff8f
 800f574:	40010000 	.word	0x40010000
 800f578:	40010400 	.word	0x40010400

0800f57c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f57c:	b480      	push	{r7}
 800f57e:	b087      	sub	sp, #28
 800f580:	af00      	add	r7, sp, #0
 800f582:	6078      	str	r0, [r7, #4]
 800f584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	6a1b      	ldr	r3, [r3, #32]
 800f58a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	6a1b      	ldr	r3, [r3, #32]
 800f596:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	685b      	ldr	r3, [r3, #4]
 800f59c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f5a4:	68fa      	ldr	r2, [r7, #12]
 800f5a6:	4b1c      	ldr	r3, [pc, #112]	; (800f618 <TIM_OC6_SetConfig+0x9c>)
 800f5a8:	4013      	ands	r3, r2
 800f5aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f5ac:	683b      	ldr	r3, [r7, #0]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	021b      	lsls	r3, r3, #8
 800f5b2:	68fa      	ldr	r2, [r7, #12]
 800f5b4:	4313      	orrs	r3, r2
 800f5b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f5b8:	693b      	ldr	r3, [r7, #16]
 800f5ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f5be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f5c0:	683b      	ldr	r3, [r7, #0]
 800f5c2:	689b      	ldr	r3, [r3, #8]
 800f5c4:	051b      	lsls	r3, r3, #20
 800f5c6:	693a      	ldr	r2, [r7, #16]
 800f5c8:	4313      	orrs	r3, r2
 800f5ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	4a13      	ldr	r2, [pc, #76]	; (800f61c <TIM_OC6_SetConfig+0xa0>)
 800f5d0:	4293      	cmp	r3, r2
 800f5d2:	d003      	beq.n	800f5dc <TIM_OC6_SetConfig+0x60>
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	4a12      	ldr	r2, [pc, #72]	; (800f620 <TIM_OC6_SetConfig+0xa4>)
 800f5d8:	4293      	cmp	r3, r2
 800f5da:	d109      	bne.n	800f5f0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f5dc:	697b      	ldr	r3, [r7, #20]
 800f5de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f5e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f5e4:	683b      	ldr	r3, [r7, #0]
 800f5e6:	695b      	ldr	r3, [r3, #20]
 800f5e8:	029b      	lsls	r3, r3, #10
 800f5ea:	697a      	ldr	r2, [r7, #20]
 800f5ec:	4313      	orrs	r3, r2
 800f5ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	697a      	ldr	r2, [r7, #20]
 800f5f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	68fa      	ldr	r2, [r7, #12]
 800f5fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f5fc:	683b      	ldr	r3, [r7, #0]
 800f5fe:	685a      	ldr	r2, [r3, #4]
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	693a      	ldr	r2, [r7, #16]
 800f608:	621a      	str	r2, [r3, #32]
}
 800f60a:	bf00      	nop
 800f60c:	371c      	adds	r7, #28
 800f60e:	46bd      	mov	sp, r7
 800f610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f614:	4770      	bx	lr
 800f616:	bf00      	nop
 800f618:	feff8fff 	.word	0xfeff8fff
 800f61c:	40010000 	.word	0x40010000
 800f620:	40010400 	.word	0x40010400

0800f624 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f624:	b480      	push	{r7}
 800f626:	b087      	sub	sp, #28
 800f628:	af00      	add	r7, sp, #0
 800f62a:	60f8      	str	r0, [r7, #12]
 800f62c:	60b9      	str	r1, [r7, #8]
 800f62e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	6a1b      	ldr	r3, [r3, #32]
 800f634:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	6a1b      	ldr	r3, [r3, #32]
 800f63a:	f023 0201 	bic.w	r2, r3, #1
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	699b      	ldr	r3, [r3, #24]
 800f646:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f648:	693b      	ldr	r3, [r7, #16]
 800f64a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f64e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	011b      	lsls	r3, r3, #4
 800f654:	693a      	ldr	r2, [r7, #16]
 800f656:	4313      	orrs	r3, r2
 800f658:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f65a:	697b      	ldr	r3, [r7, #20]
 800f65c:	f023 030a 	bic.w	r3, r3, #10
 800f660:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f662:	697a      	ldr	r2, [r7, #20]
 800f664:	68bb      	ldr	r3, [r7, #8]
 800f666:	4313      	orrs	r3, r2
 800f668:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	693a      	ldr	r2, [r7, #16]
 800f66e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	697a      	ldr	r2, [r7, #20]
 800f674:	621a      	str	r2, [r3, #32]
}
 800f676:	bf00      	nop
 800f678:	371c      	adds	r7, #28
 800f67a:	46bd      	mov	sp, r7
 800f67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f680:	4770      	bx	lr

0800f682 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f682:	b480      	push	{r7}
 800f684:	b087      	sub	sp, #28
 800f686:	af00      	add	r7, sp, #0
 800f688:	60f8      	str	r0, [r7, #12]
 800f68a:	60b9      	str	r1, [r7, #8]
 800f68c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	6a1b      	ldr	r3, [r3, #32]
 800f692:	f023 0210 	bic.w	r2, r3, #16
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	699b      	ldr	r3, [r3, #24]
 800f69e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	6a1b      	ldr	r3, [r3, #32]
 800f6a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f6a6:	697b      	ldr	r3, [r7, #20]
 800f6a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f6ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	031b      	lsls	r3, r3, #12
 800f6b2:	697a      	ldr	r2, [r7, #20]
 800f6b4:	4313      	orrs	r3, r2
 800f6b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f6b8:	693b      	ldr	r3, [r7, #16]
 800f6ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f6be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f6c0:	68bb      	ldr	r3, [r7, #8]
 800f6c2:	011b      	lsls	r3, r3, #4
 800f6c4:	693a      	ldr	r2, [r7, #16]
 800f6c6:	4313      	orrs	r3, r2
 800f6c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	697a      	ldr	r2, [r7, #20]
 800f6ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	693a      	ldr	r2, [r7, #16]
 800f6d4:	621a      	str	r2, [r3, #32]
}
 800f6d6:	bf00      	nop
 800f6d8:	371c      	adds	r7, #28
 800f6da:	46bd      	mov	sp, r7
 800f6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e0:	4770      	bx	lr

0800f6e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f6e2:	b480      	push	{r7}
 800f6e4:	b085      	sub	sp, #20
 800f6e6:	af00      	add	r7, sp, #0
 800f6e8:	6078      	str	r0, [r7, #4]
 800f6ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	689b      	ldr	r3, [r3, #8]
 800f6f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f6f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f6fa:	683a      	ldr	r2, [r7, #0]
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	4313      	orrs	r3, r2
 800f700:	f043 0307 	orr.w	r3, r3, #7
 800f704:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	68fa      	ldr	r2, [r7, #12]
 800f70a:	609a      	str	r2, [r3, #8]
}
 800f70c:	bf00      	nop
 800f70e:	3714      	adds	r7, #20
 800f710:	46bd      	mov	sp, r7
 800f712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f716:	4770      	bx	lr

0800f718 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f718:	b480      	push	{r7}
 800f71a:	b087      	sub	sp, #28
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	60f8      	str	r0, [r7, #12]
 800f720:	60b9      	str	r1, [r7, #8]
 800f722:	607a      	str	r2, [r7, #4]
 800f724:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	689b      	ldr	r3, [r3, #8]
 800f72a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f72c:	697b      	ldr	r3, [r7, #20]
 800f72e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f732:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f734:	683b      	ldr	r3, [r7, #0]
 800f736:	021a      	lsls	r2, r3, #8
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	431a      	orrs	r2, r3
 800f73c:	68bb      	ldr	r3, [r7, #8]
 800f73e:	4313      	orrs	r3, r2
 800f740:	697a      	ldr	r2, [r7, #20]
 800f742:	4313      	orrs	r3, r2
 800f744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	697a      	ldr	r2, [r7, #20]
 800f74a:	609a      	str	r2, [r3, #8]
}
 800f74c:	bf00      	nop
 800f74e:	371c      	adds	r7, #28
 800f750:	46bd      	mov	sp, r7
 800f752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f756:	4770      	bx	lr

0800f758 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f758:	b480      	push	{r7}
 800f75a:	b085      	sub	sp, #20
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
 800f760:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f768:	2b01      	cmp	r3, #1
 800f76a:	d101      	bne.n	800f770 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f76c:	2302      	movs	r3, #2
 800f76e:	e06d      	b.n	800f84c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	2201      	movs	r2, #1
 800f774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	2202      	movs	r2, #2
 800f77c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	685b      	ldr	r3, [r3, #4]
 800f786:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	689b      	ldr	r3, [r3, #8]
 800f78e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	4a30      	ldr	r2, [pc, #192]	; (800f858 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f796:	4293      	cmp	r3, r2
 800f798:	d004      	beq.n	800f7a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	4a2f      	ldr	r2, [pc, #188]	; (800f85c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f7a0:	4293      	cmp	r3, r2
 800f7a2:	d108      	bne.n	800f7b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f7aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f7ac:	683b      	ldr	r3, [r7, #0]
 800f7ae:	685b      	ldr	r3, [r3, #4]
 800f7b0:	68fa      	ldr	r2, [r7, #12]
 800f7b2:	4313      	orrs	r3, r2
 800f7b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f7bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f7be:	683b      	ldr	r3, [r7, #0]
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	68fa      	ldr	r2, [r7, #12]
 800f7c4:	4313      	orrs	r3, r2
 800f7c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	68fa      	ldr	r2, [r7, #12]
 800f7ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	4a20      	ldr	r2, [pc, #128]	; (800f858 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f7d6:	4293      	cmp	r3, r2
 800f7d8:	d022      	beq.n	800f820 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f7e2:	d01d      	beq.n	800f820 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	4a1d      	ldr	r2, [pc, #116]	; (800f860 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f7ea:	4293      	cmp	r3, r2
 800f7ec:	d018      	beq.n	800f820 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	4a1c      	ldr	r2, [pc, #112]	; (800f864 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f7f4:	4293      	cmp	r3, r2
 800f7f6:	d013      	beq.n	800f820 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	4a1a      	ldr	r2, [pc, #104]	; (800f868 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f7fe:	4293      	cmp	r3, r2
 800f800:	d00e      	beq.n	800f820 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	4a15      	ldr	r2, [pc, #84]	; (800f85c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f808:	4293      	cmp	r3, r2
 800f80a:	d009      	beq.n	800f820 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	4a16      	ldr	r2, [pc, #88]	; (800f86c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f812:	4293      	cmp	r3, r2
 800f814:	d004      	beq.n	800f820 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	4a15      	ldr	r2, [pc, #84]	; (800f870 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f81c:	4293      	cmp	r3, r2
 800f81e:	d10c      	bne.n	800f83a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f820:	68bb      	ldr	r3, [r7, #8]
 800f822:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f826:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f828:	683b      	ldr	r3, [r7, #0]
 800f82a:	689b      	ldr	r3, [r3, #8]
 800f82c:	68ba      	ldr	r2, [r7, #8]
 800f82e:	4313      	orrs	r3, r2
 800f830:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	68ba      	ldr	r2, [r7, #8]
 800f838:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	2201      	movs	r2, #1
 800f83e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	2200      	movs	r2, #0
 800f846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f84a:	2300      	movs	r3, #0
}
 800f84c:	4618      	mov	r0, r3
 800f84e:	3714      	adds	r7, #20
 800f850:	46bd      	mov	sp, r7
 800f852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f856:	4770      	bx	lr
 800f858:	40010000 	.word	0x40010000
 800f85c:	40010400 	.word	0x40010400
 800f860:	40000400 	.word	0x40000400
 800f864:	40000800 	.word	0x40000800
 800f868:	40000c00 	.word	0x40000c00
 800f86c:	40014000 	.word	0x40014000
 800f870:	40001800 	.word	0x40001800

0800f874 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f874:	b480      	push	{r7}
 800f876:	b085      	sub	sp, #20
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
 800f87c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f87e:	2300      	movs	r3, #0
 800f880:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f888:	2b01      	cmp	r3, #1
 800f88a:	d101      	bne.n	800f890 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f88c:	2302      	movs	r3, #2
 800f88e:	e065      	b.n	800f95c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	2201      	movs	r2, #1
 800f894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f89e:	683b      	ldr	r3, [r7, #0]
 800f8a0:	68db      	ldr	r3, [r3, #12]
 800f8a2:	4313      	orrs	r3, r2
 800f8a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f8ac:	683b      	ldr	r3, [r7, #0]
 800f8ae:	689b      	ldr	r3, [r3, #8]
 800f8b0:	4313      	orrs	r3, r2
 800f8b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f8ba:	683b      	ldr	r3, [r7, #0]
 800f8bc:	685b      	ldr	r3, [r3, #4]
 800f8be:	4313      	orrs	r3, r2
 800f8c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f8c8:	683b      	ldr	r3, [r7, #0]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	4313      	orrs	r3, r2
 800f8ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f8d6:	683b      	ldr	r3, [r7, #0]
 800f8d8:	691b      	ldr	r3, [r3, #16]
 800f8da:	4313      	orrs	r3, r2
 800f8dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f8e4:	683b      	ldr	r3, [r7, #0]
 800f8e6:	695b      	ldr	r3, [r3, #20]
 800f8e8:	4313      	orrs	r3, r2
 800f8ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f8f2:	683b      	ldr	r3, [r7, #0]
 800f8f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8f6:	4313      	orrs	r3, r2
 800f8f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800f900:	683b      	ldr	r3, [r7, #0]
 800f902:	699b      	ldr	r3, [r3, #24]
 800f904:	041b      	lsls	r3, r3, #16
 800f906:	4313      	orrs	r3, r2
 800f908:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	4a16      	ldr	r2, [pc, #88]	; (800f968 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800f910:	4293      	cmp	r3, r2
 800f912:	d004      	beq.n	800f91e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	4a14      	ldr	r2, [pc, #80]	; (800f96c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800f91a:	4293      	cmp	r3, r2
 800f91c:	d115      	bne.n	800f94a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800f924:	683b      	ldr	r3, [r7, #0]
 800f926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f928:	051b      	lsls	r3, r3, #20
 800f92a:	4313      	orrs	r3, r2
 800f92c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800f934:	683b      	ldr	r3, [r7, #0]
 800f936:	69db      	ldr	r3, [r3, #28]
 800f938:	4313      	orrs	r3, r2
 800f93a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800f942:	683b      	ldr	r3, [r7, #0]
 800f944:	6a1b      	ldr	r3, [r3, #32]
 800f946:	4313      	orrs	r3, r2
 800f948:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	68fa      	ldr	r2, [r7, #12]
 800f950:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	2200      	movs	r2, #0
 800f956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f95a:	2300      	movs	r3, #0
}
 800f95c:	4618      	mov	r0, r3
 800f95e:	3714      	adds	r7, #20
 800f960:	46bd      	mov	sp, r7
 800f962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f966:	4770      	bx	lr
 800f968:	40010000 	.word	0x40010000
 800f96c:	40010400 	.word	0x40010400

0800f970 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b082      	sub	sp, #8
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d101      	bne.n	800f982 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f97e:	2301      	movs	r3, #1
 800f980:	e040      	b.n	800fa04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f986:	2b00      	cmp	r3, #0
 800f988:	d106      	bne.n	800f998 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	2200      	movs	r2, #0
 800f98e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f992:	6878      	ldr	r0, [r7, #4]
 800f994:	f7f4 fc50 	bl	8004238 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	2224      	movs	r2, #36	; 0x24
 800f99c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	681a      	ldr	r2, [r3, #0]
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	f022 0201 	bic.w	r2, r2, #1
 800f9ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f9ae:	6878      	ldr	r0, [r7, #4]
 800f9b0:	f000 f82c 	bl	800fa0c <UART_SetConfig>
 800f9b4:	4603      	mov	r3, r0
 800f9b6:	2b01      	cmp	r3, #1
 800f9b8:	d101      	bne.n	800f9be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800f9ba:	2301      	movs	r3, #1
 800f9bc:	e022      	b.n	800fa04 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d002      	beq.n	800f9cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800f9c6:	6878      	ldr	r0, [r7, #4]
 800f9c8:	f000 fa84 	bl	800fed4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	685a      	ldr	r2, [r3, #4]
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f9da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	689a      	ldr	r2, [r3, #8]
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f9ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	681a      	ldr	r2, [r3, #0]
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	f042 0201 	orr.w	r2, r2, #1
 800f9fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f9fc:	6878      	ldr	r0, [r7, #4]
 800f9fe:	f000 fb0b 	bl	8010018 <UART_CheckIdleState>
 800fa02:	4603      	mov	r3, r0
}
 800fa04:	4618      	mov	r0, r3
 800fa06:	3708      	adds	r7, #8
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	bd80      	pop	{r7, pc}

0800fa0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fa0c:	b580      	push	{r7, lr}
 800fa0e:	b088      	sub	sp, #32
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fa14:	2300      	movs	r3, #0
 800fa16:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	689a      	ldr	r2, [r3, #8]
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	691b      	ldr	r3, [r3, #16]
 800fa20:	431a      	orrs	r2, r3
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	695b      	ldr	r3, [r3, #20]
 800fa26:	431a      	orrs	r2, r3
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	69db      	ldr	r3, [r3, #28]
 800fa2c:	4313      	orrs	r3, r2
 800fa2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	681a      	ldr	r2, [r3, #0]
 800fa36:	4ba6      	ldr	r3, [pc, #664]	; (800fcd0 <UART_SetConfig+0x2c4>)
 800fa38:	4013      	ands	r3, r2
 800fa3a:	687a      	ldr	r2, [r7, #4]
 800fa3c:	6812      	ldr	r2, [r2, #0]
 800fa3e:	6979      	ldr	r1, [r7, #20]
 800fa40:	430b      	orrs	r3, r1
 800fa42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	685b      	ldr	r3, [r3, #4]
 800fa4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	68da      	ldr	r2, [r3, #12]
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	430a      	orrs	r2, r1
 800fa58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	699b      	ldr	r3, [r3, #24]
 800fa5e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	6a1b      	ldr	r3, [r3, #32]
 800fa64:	697a      	ldr	r2, [r7, #20]
 800fa66:	4313      	orrs	r3, r2
 800fa68:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	689b      	ldr	r3, [r3, #8]
 800fa70:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	697a      	ldr	r2, [r7, #20]
 800fa7a:	430a      	orrs	r2, r1
 800fa7c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	4a94      	ldr	r2, [pc, #592]	; (800fcd4 <UART_SetConfig+0x2c8>)
 800fa84:	4293      	cmp	r3, r2
 800fa86:	d120      	bne.n	800faca <UART_SetConfig+0xbe>
 800fa88:	4b93      	ldr	r3, [pc, #588]	; (800fcd8 <UART_SetConfig+0x2cc>)
 800fa8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa8e:	f003 0303 	and.w	r3, r3, #3
 800fa92:	2b03      	cmp	r3, #3
 800fa94:	d816      	bhi.n	800fac4 <UART_SetConfig+0xb8>
 800fa96:	a201      	add	r2, pc, #4	; (adr r2, 800fa9c <UART_SetConfig+0x90>)
 800fa98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa9c:	0800faad 	.word	0x0800faad
 800faa0:	0800fab9 	.word	0x0800fab9
 800faa4:	0800fab3 	.word	0x0800fab3
 800faa8:	0800fabf 	.word	0x0800fabf
 800faac:	2301      	movs	r3, #1
 800faae:	77fb      	strb	r3, [r7, #31]
 800fab0:	e150      	b.n	800fd54 <UART_SetConfig+0x348>
 800fab2:	2302      	movs	r3, #2
 800fab4:	77fb      	strb	r3, [r7, #31]
 800fab6:	e14d      	b.n	800fd54 <UART_SetConfig+0x348>
 800fab8:	2304      	movs	r3, #4
 800faba:	77fb      	strb	r3, [r7, #31]
 800fabc:	e14a      	b.n	800fd54 <UART_SetConfig+0x348>
 800fabe:	2308      	movs	r3, #8
 800fac0:	77fb      	strb	r3, [r7, #31]
 800fac2:	e147      	b.n	800fd54 <UART_SetConfig+0x348>
 800fac4:	2310      	movs	r3, #16
 800fac6:	77fb      	strb	r3, [r7, #31]
 800fac8:	e144      	b.n	800fd54 <UART_SetConfig+0x348>
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	4a83      	ldr	r2, [pc, #524]	; (800fcdc <UART_SetConfig+0x2d0>)
 800fad0:	4293      	cmp	r3, r2
 800fad2:	d132      	bne.n	800fb3a <UART_SetConfig+0x12e>
 800fad4:	4b80      	ldr	r3, [pc, #512]	; (800fcd8 <UART_SetConfig+0x2cc>)
 800fad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fada:	f003 030c 	and.w	r3, r3, #12
 800fade:	2b0c      	cmp	r3, #12
 800fae0:	d828      	bhi.n	800fb34 <UART_SetConfig+0x128>
 800fae2:	a201      	add	r2, pc, #4	; (adr r2, 800fae8 <UART_SetConfig+0xdc>)
 800fae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fae8:	0800fb1d 	.word	0x0800fb1d
 800faec:	0800fb35 	.word	0x0800fb35
 800faf0:	0800fb35 	.word	0x0800fb35
 800faf4:	0800fb35 	.word	0x0800fb35
 800faf8:	0800fb29 	.word	0x0800fb29
 800fafc:	0800fb35 	.word	0x0800fb35
 800fb00:	0800fb35 	.word	0x0800fb35
 800fb04:	0800fb35 	.word	0x0800fb35
 800fb08:	0800fb23 	.word	0x0800fb23
 800fb0c:	0800fb35 	.word	0x0800fb35
 800fb10:	0800fb35 	.word	0x0800fb35
 800fb14:	0800fb35 	.word	0x0800fb35
 800fb18:	0800fb2f 	.word	0x0800fb2f
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	77fb      	strb	r3, [r7, #31]
 800fb20:	e118      	b.n	800fd54 <UART_SetConfig+0x348>
 800fb22:	2302      	movs	r3, #2
 800fb24:	77fb      	strb	r3, [r7, #31]
 800fb26:	e115      	b.n	800fd54 <UART_SetConfig+0x348>
 800fb28:	2304      	movs	r3, #4
 800fb2a:	77fb      	strb	r3, [r7, #31]
 800fb2c:	e112      	b.n	800fd54 <UART_SetConfig+0x348>
 800fb2e:	2308      	movs	r3, #8
 800fb30:	77fb      	strb	r3, [r7, #31]
 800fb32:	e10f      	b.n	800fd54 <UART_SetConfig+0x348>
 800fb34:	2310      	movs	r3, #16
 800fb36:	77fb      	strb	r3, [r7, #31]
 800fb38:	e10c      	b.n	800fd54 <UART_SetConfig+0x348>
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	4a68      	ldr	r2, [pc, #416]	; (800fce0 <UART_SetConfig+0x2d4>)
 800fb40:	4293      	cmp	r3, r2
 800fb42:	d120      	bne.n	800fb86 <UART_SetConfig+0x17a>
 800fb44:	4b64      	ldr	r3, [pc, #400]	; (800fcd8 <UART_SetConfig+0x2cc>)
 800fb46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb4a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800fb4e:	2b30      	cmp	r3, #48	; 0x30
 800fb50:	d013      	beq.n	800fb7a <UART_SetConfig+0x16e>
 800fb52:	2b30      	cmp	r3, #48	; 0x30
 800fb54:	d814      	bhi.n	800fb80 <UART_SetConfig+0x174>
 800fb56:	2b20      	cmp	r3, #32
 800fb58:	d009      	beq.n	800fb6e <UART_SetConfig+0x162>
 800fb5a:	2b20      	cmp	r3, #32
 800fb5c:	d810      	bhi.n	800fb80 <UART_SetConfig+0x174>
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d002      	beq.n	800fb68 <UART_SetConfig+0x15c>
 800fb62:	2b10      	cmp	r3, #16
 800fb64:	d006      	beq.n	800fb74 <UART_SetConfig+0x168>
 800fb66:	e00b      	b.n	800fb80 <UART_SetConfig+0x174>
 800fb68:	2300      	movs	r3, #0
 800fb6a:	77fb      	strb	r3, [r7, #31]
 800fb6c:	e0f2      	b.n	800fd54 <UART_SetConfig+0x348>
 800fb6e:	2302      	movs	r3, #2
 800fb70:	77fb      	strb	r3, [r7, #31]
 800fb72:	e0ef      	b.n	800fd54 <UART_SetConfig+0x348>
 800fb74:	2304      	movs	r3, #4
 800fb76:	77fb      	strb	r3, [r7, #31]
 800fb78:	e0ec      	b.n	800fd54 <UART_SetConfig+0x348>
 800fb7a:	2308      	movs	r3, #8
 800fb7c:	77fb      	strb	r3, [r7, #31]
 800fb7e:	e0e9      	b.n	800fd54 <UART_SetConfig+0x348>
 800fb80:	2310      	movs	r3, #16
 800fb82:	77fb      	strb	r3, [r7, #31]
 800fb84:	e0e6      	b.n	800fd54 <UART_SetConfig+0x348>
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	4a56      	ldr	r2, [pc, #344]	; (800fce4 <UART_SetConfig+0x2d8>)
 800fb8c:	4293      	cmp	r3, r2
 800fb8e:	d120      	bne.n	800fbd2 <UART_SetConfig+0x1c6>
 800fb90:	4b51      	ldr	r3, [pc, #324]	; (800fcd8 <UART_SetConfig+0x2cc>)
 800fb92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb96:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800fb9a:	2bc0      	cmp	r3, #192	; 0xc0
 800fb9c:	d013      	beq.n	800fbc6 <UART_SetConfig+0x1ba>
 800fb9e:	2bc0      	cmp	r3, #192	; 0xc0
 800fba0:	d814      	bhi.n	800fbcc <UART_SetConfig+0x1c0>
 800fba2:	2b80      	cmp	r3, #128	; 0x80
 800fba4:	d009      	beq.n	800fbba <UART_SetConfig+0x1ae>
 800fba6:	2b80      	cmp	r3, #128	; 0x80
 800fba8:	d810      	bhi.n	800fbcc <UART_SetConfig+0x1c0>
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d002      	beq.n	800fbb4 <UART_SetConfig+0x1a8>
 800fbae:	2b40      	cmp	r3, #64	; 0x40
 800fbb0:	d006      	beq.n	800fbc0 <UART_SetConfig+0x1b4>
 800fbb2:	e00b      	b.n	800fbcc <UART_SetConfig+0x1c0>
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	77fb      	strb	r3, [r7, #31]
 800fbb8:	e0cc      	b.n	800fd54 <UART_SetConfig+0x348>
 800fbba:	2302      	movs	r3, #2
 800fbbc:	77fb      	strb	r3, [r7, #31]
 800fbbe:	e0c9      	b.n	800fd54 <UART_SetConfig+0x348>
 800fbc0:	2304      	movs	r3, #4
 800fbc2:	77fb      	strb	r3, [r7, #31]
 800fbc4:	e0c6      	b.n	800fd54 <UART_SetConfig+0x348>
 800fbc6:	2308      	movs	r3, #8
 800fbc8:	77fb      	strb	r3, [r7, #31]
 800fbca:	e0c3      	b.n	800fd54 <UART_SetConfig+0x348>
 800fbcc:	2310      	movs	r3, #16
 800fbce:	77fb      	strb	r3, [r7, #31]
 800fbd0:	e0c0      	b.n	800fd54 <UART_SetConfig+0x348>
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	4a44      	ldr	r2, [pc, #272]	; (800fce8 <UART_SetConfig+0x2dc>)
 800fbd8:	4293      	cmp	r3, r2
 800fbda:	d125      	bne.n	800fc28 <UART_SetConfig+0x21c>
 800fbdc:	4b3e      	ldr	r3, [pc, #248]	; (800fcd8 <UART_SetConfig+0x2cc>)
 800fbde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fbe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fbe6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fbea:	d017      	beq.n	800fc1c <UART_SetConfig+0x210>
 800fbec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fbf0:	d817      	bhi.n	800fc22 <UART_SetConfig+0x216>
 800fbf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fbf6:	d00b      	beq.n	800fc10 <UART_SetConfig+0x204>
 800fbf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fbfc:	d811      	bhi.n	800fc22 <UART_SetConfig+0x216>
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d003      	beq.n	800fc0a <UART_SetConfig+0x1fe>
 800fc02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fc06:	d006      	beq.n	800fc16 <UART_SetConfig+0x20a>
 800fc08:	e00b      	b.n	800fc22 <UART_SetConfig+0x216>
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	77fb      	strb	r3, [r7, #31]
 800fc0e:	e0a1      	b.n	800fd54 <UART_SetConfig+0x348>
 800fc10:	2302      	movs	r3, #2
 800fc12:	77fb      	strb	r3, [r7, #31]
 800fc14:	e09e      	b.n	800fd54 <UART_SetConfig+0x348>
 800fc16:	2304      	movs	r3, #4
 800fc18:	77fb      	strb	r3, [r7, #31]
 800fc1a:	e09b      	b.n	800fd54 <UART_SetConfig+0x348>
 800fc1c:	2308      	movs	r3, #8
 800fc1e:	77fb      	strb	r3, [r7, #31]
 800fc20:	e098      	b.n	800fd54 <UART_SetConfig+0x348>
 800fc22:	2310      	movs	r3, #16
 800fc24:	77fb      	strb	r3, [r7, #31]
 800fc26:	e095      	b.n	800fd54 <UART_SetConfig+0x348>
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	4a2f      	ldr	r2, [pc, #188]	; (800fcec <UART_SetConfig+0x2e0>)
 800fc2e:	4293      	cmp	r3, r2
 800fc30:	d125      	bne.n	800fc7e <UART_SetConfig+0x272>
 800fc32:	4b29      	ldr	r3, [pc, #164]	; (800fcd8 <UART_SetConfig+0x2cc>)
 800fc34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800fc3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fc40:	d017      	beq.n	800fc72 <UART_SetConfig+0x266>
 800fc42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fc46:	d817      	bhi.n	800fc78 <UART_SetConfig+0x26c>
 800fc48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fc4c:	d00b      	beq.n	800fc66 <UART_SetConfig+0x25a>
 800fc4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fc52:	d811      	bhi.n	800fc78 <UART_SetConfig+0x26c>
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d003      	beq.n	800fc60 <UART_SetConfig+0x254>
 800fc58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fc5c:	d006      	beq.n	800fc6c <UART_SetConfig+0x260>
 800fc5e:	e00b      	b.n	800fc78 <UART_SetConfig+0x26c>
 800fc60:	2301      	movs	r3, #1
 800fc62:	77fb      	strb	r3, [r7, #31]
 800fc64:	e076      	b.n	800fd54 <UART_SetConfig+0x348>
 800fc66:	2302      	movs	r3, #2
 800fc68:	77fb      	strb	r3, [r7, #31]
 800fc6a:	e073      	b.n	800fd54 <UART_SetConfig+0x348>
 800fc6c:	2304      	movs	r3, #4
 800fc6e:	77fb      	strb	r3, [r7, #31]
 800fc70:	e070      	b.n	800fd54 <UART_SetConfig+0x348>
 800fc72:	2308      	movs	r3, #8
 800fc74:	77fb      	strb	r3, [r7, #31]
 800fc76:	e06d      	b.n	800fd54 <UART_SetConfig+0x348>
 800fc78:	2310      	movs	r3, #16
 800fc7a:	77fb      	strb	r3, [r7, #31]
 800fc7c:	e06a      	b.n	800fd54 <UART_SetConfig+0x348>
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	4a1b      	ldr	r2, [pc, #108]	; (800fcf0 <UART_SetConfig+0x2e4>)
 800fc84:	4293      	cmp	r3, r2
 800fc86:	d138      	bne.n	800fcfa <UART_SetConfig+0x2ee>
 800fc88:	4b13      	ldr	r3, [pc, #76]	; (800fcd8 <UART_SetConfig+0x2cc>)
 800fc8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc8e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800fc92:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800fc96:	d017      	beq.n	800fcc8 <UART_SetConfig+0x2bc>
 800fc98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800fc9c:	d82a      	bhi.n	800fcf4 <UART_SetConfig+0x2e8>
 800fc9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fca2:	d00b      	beq.n	800fcbc <UART_SetConfig+0x2b0>
 800fca4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fca8:	d824      	bhi.n	800fcf4 <UART_SetConfig+0x2e8>
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d003      	beq.n	800fcb6 <UART_SetConfig+0x2aa>
 800fcae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fcb2:	d006      	beq.n	800fcc2 <UART_SetConfig+0x2b6>
 800fcb4:	e01e      	b.n	800fcf4 <UART_SetConfig+0x2e8>
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	77fb      	strb	r3, [r7, #31]
 800fcba:	e04b      	b.n	800fd54 <UART_SetConfig+0x348>
 800fcbc:	2302      	movs	r3, #2
 800fcbe:	77fb      	strb	r3, [r7, #31]
 800fcc0:	e048      	b.n	800fd54 <UART_SetConfig+0x348>
 800fcc2:	2304      	movs	r3, #4
 800fcc4:	77fb      	strb	r3, [r7, #31]
 800fcc6:	e045      	b.n	800fd54 <UART_SetConfig+0x348>
 800fcc8:	2308      	movs	r3, #8
 800fcca:	77fb      	strb	r3, [r7, #31]
 800fccc:	e042      	b.n	800fd54 <UART_SetConfig+0x348>
 800fcce:	bf00      	nop
 800fcd0:	efff69f3 	.word	0xefff69f3
 800fcd4:	40011000 	.word	0x40011000
 800fcd8:	40023800 	.word	0x40023800
 800fcdc:	40004400 	.word	0x40004400
 800fce0:	40004800 	.word	0x40004800
 800fce4:	40004c00 	.word	0x40004c00
 800fce8:	40005000 	.word	0x40005000
 800fcec:	40011400 	.word	0x40011400
 800fcf0:	40007800 	.word	0x40007800
 800fcf4:	2310      	movs	r3, #16
 800fcf6:	77fb      	strb	r3, [r7, #31]
 800fcf8:	e02c      	b.n	800fd54 <UART_SetConfig+0x348>
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	4a72      	ldr	r2, [pc, #456]	; (800fec8 <UART_SetConfig+0x4bc>)
 800fd00:	4293      	cmp	r3, r2
 800fd02:	d125      	bne.n	800fd50 <UART_SetConfig+0x344>
 800fd04:	4b71      	ldr	r3, [pc, #452]	; (800fecc <UART_SetConfig+0x4c0>)
 800fd06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd0a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800fd0e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800fd12:	d017      	beq.n	800fd44 <UART_SetConfig+0x338>
 800fd14:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800fd18:	d817      	bhi.n	800fd4a <UART_SetConfig+0x33e>
 800fd1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fd1e:	d00b      	beq.n	800fd38 <UART_SetConfig+0x32c>
 800fd20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fd24:	d811      	bhi.n	800fd4a <UART_SetConfig+0x33e>
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d003      	beq.n	800fd32 <UART_SetConfig+0x326>
 800fd2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fd2e:	d006      	beq.n	800fd3e <UART_SetConfig+0x332>
 800fd30:	e00b      	b.n	800fd4a <UART_SetConfig+0x33e>
 800fd32:	2300      	movs	r3, #0
 800fd34:	77fb      	strb	r3, [r7, #31]
 800fd36:	e00d      	b.n	800fd54 <UART_SetConfig+0x348>
 800fd38:	2302      	movs	r3, #2
 800fd3a:	77fb      	strb	r3, [r7, #31]
 800fd3c:	e00a      	b.n	800fd54 <UART_SetConfig+0x348>
 800fd3e:	2304      	movs	r3, #4
 800fd40:	77fb      	strb	r3, [r7, #31]
 800fd42:	e007      	b.n	800fd54 <UART_SetConfig+0x348>
 800fd44:	2308      	movs	r3, #8
 800fd46:	77fb      	strb	r3, [r7, #31]
 800fd48:	e004      	b.n	800fd54 <UART_SetConfig+0x348>
 800fd4a:	2310      	movs	r3, #16
 800fd4c:	77fb      	strb	r3, [r7, #31]
 800fd4e:	e001      	b.n	800fd54 <UART_SetConfig+0x348>
 800fd50:	2310      	movs	r3, #16
 800fd52:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	69db      	ldr	r3, [r3, #28]
 800fd58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fd5c:	d15b      	bne.n	800fe16 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800fd5e:	7ffb      	ldrb	r3, [r7, #31]
 800fd60:	2b08      	cmp	r3, #8
 800fd62:	d828      	bhi.n	800fdb6 <UART_SetConfig+0x3aa>
 800fd64:	a201      	add	r2, pc, #4	; (adr r2, 800fd6c <UART_SetConfig+0x360>)
 800fd66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd6a:	bf00      	nop
 800fd6c:	0800fd91 	.word	0x0800fd91
 800fd70:	0800fd99 	.word	0x0800fd99
 800fd74:	0800fda1 	.word	0x0800fda1
 800fd78:	0800fdb7 	.word	0x0800fdb7
 800fd7c:	0800fda7 	.word	0x0800fda7
 800fd80:	0800fdb7 	.word	0x0800fdb7
 800fd84:	0800fdb7 	.word	0x0800fdb7
 800fd88:	0800fdb7 	.word	0x0800fdb7
 800fd8c:	0800fdaf 	.word	0x0800fdaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fd90:	f7fb ff12 	bl	800bbb8 <HAL_RCC_GetPCLK1Freq>
 800fd94:	61b8      	str	r0, [r7, #24]
        break;
 800fd96:	e013      	b.n	800fdc0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fd98:	f7fb ff22 	bl	800bbe0 <HAL_RCC_GetPCLK2Freq>
 800fd9c:	61b8      	str	r0, [r7, #24]
        break;
 800fd9e:	e00f      	b.n	800fdc0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fda0:	4b4b      	ldr	r3, [pc, #300]	; (800fed0 <UART_SetConfig+0x4c4>)
 800fda2:	61bb      	str	r3, [r7, #24]
        break;
 800fda4:	e00c      	b.n	800fdc0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fda6:	f7fb fe35 	bl	800ba14 <HAL_RCC_GetSysClockFreq>
 800fdaa:	61b8      	str	r0, [r7, #24]
        break;
 800fdac:	e008      	b.n	800fdc0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fdae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fdb2:	61bb      	str	r3, [r7, #24]
        break;
 800fdb4:	e004      	b.n	800fdc0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800fdba:	2301      	movs	r3, #1
 800fdbc:	77bb      	strb	r3, [r7, #30]
        break;
 800fdbe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fdc0:	69bb      	ldr	r3, [r7, #24]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d074      	beq.n	800feb0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800fdc6:	69bb      	ldr	r3, [r7, #24]
 800fdc8:	005a      	lsls	r2, r3, #1
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	685b      	ldr	r3, [r3, #4]
 800fdce:	085b      	lsrs	r3, r3, #1
 800fdd0:	441a      	add	r2, r3
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	685b      	ldr	r3, [r3, #4]
 800fdd6:	fbb2 f3f3 	udiv	r3, r2, r3
 800fdda:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fddc:	693b      	ldr	r3, [r7, #16]
 800fdde:	2b0f      	cmp	r3, #15
 800fde0:	d916      	bls.n	800fe10 <UART_SetConfig+0x404>
 800fde2:	693b      	ldr	r3, [r7, #16]
 800fde4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fde8:	d212      	bcs.n	800fe10 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fdea:	693b      	ldr	r3, [r7, #16]
 800fdec:	b29b      	uxth	r3, r3
 800fdee:	f023 030f 	bic.w	r3, r3, #15
 800fdf2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fdf4:	693b      	ldr	r3, [r7, #16]
 800fdf6:	085b      	lsrs	r3, r3, #1
 800fdf8:	b29b      	uxth	r3, r3
 800fdfa:	f003 0307 	and.w	r3, r3, #7
 800fdfe:	b29a      	uxth	r2, r3
 800fe00:	89fb      	ldrh	r3, [r7, #14]
 800fe02:	4313      	orrs	r3, r2
 800fe04:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	89fa      	ldrh	r2, [r7, #14]
 800fe0c:	60da      	str	r2, [r3, #12]
 800fe0e:	e04f      	b.n	800feb0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800fe10:	2301      	movs	r3, #1
 800fe12:	77bb      	strb	r3, [r7, #30]
 800fe14:	e04c      	b.n	800feb0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800fe16:	7ffb      	ldrb	r3, [r7, #31]
 800fe18:	2b08      	cmp	r3, #8
 800fe1a:	d828      	bhi.n	800fe6e <UART_SetConfig+0x462>
 800fe1c:	a201      	add	r2, pc, #4	; (adr r2, 800fe24 <UART_SetConfig+0x418>)
 800fe1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe22:	bf00      	nop
 800fe24:	0800fe49 	.word	0x0800fe49
 800fe28:	0800fe51 	.word	0x0800fe51
 800fe2c:	0800fe59 	.word	0x0800fe59
 800fe30:	0800fe6f 	.word	0x0800fe6f
 800fe34:	0800fe5f 	.word	0x0800fe5f
 800fe38:	0800fe6f 	.word	0x0800fe6f
 800fe3c:	0800fe6f 	.word	0x0800fe6f
 800fe40:	0800fe6f 	.word	0x0800fe6f
 800fe44:	0800fe67 	.word	0x0800fe67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fe48:	f7fb feb6 	bl	800bbb8 <HAL_RCC_GetPCLK1Freq>
 800fe4c:	61b8      	str	r0, [r7, #24]
        break;
 800fe4e:	e013      	b.n	800fe78 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fe50:	f7fb fec6 	bl	800bbe0 <HAL_RCC_GetPCLK2Freq>
 800fe54:	61b8      	str	r0, [r7, #24]
        break;
 800fe56:	e00f      	b.n	800fe78 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fe58:	4b1d      	ldr	r3, [pc, #116]	; (800fed0 <UART_SetConfig+0x4c4>)
 800fe5a:	61bb      	str	r3, [r7, #24]
        break;
 800fe5c:	e00c      	b.n	800fe78 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fe5e:	f7fb fdd9 	bl	800ba14 <HAL_RCC_GetSysClockFreq>
 800fe62:	61b8      	str	r0, [r7, #24]
        break;
 800fe64:	e008      	b.n	800fe78 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fe66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fe6a:	61bb      	str	r3, [r7, #24]
        break;
 800fe6c:	e004      	b.n	800fe78 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800fe6e:	2300      	movs	r3, #0
 800fe70:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800fe72:	2301      	movs	r3, #1
 800fe74:	77bb      	strb	r3, [r7, #30]
        break;
 800fe76:	bf00      	nop
    }

    if (pclk != 0U)
 800fe78:	69bb      	ldr	r3, [r7, #24]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d018      	beq.n	800feb0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	685b      	ldr	r3, [r3, #4]
 800fe82:	085a      	lsrs	r2, r3, #1
 800fe84:	69bb      	ldr	r3, [r7, #24]
 800fe86:	441a      	add	r2, r3
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	685b      	ldr	r3, [r3, #4]
 800fe8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe90:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fe92:	693b      	ldr	r3, [r7, #16]
 800fe94:	2b0f      	cmp	r3, #15
 800fe96:	d909      	bls.n	800feac <UART_SetConfig+0x4a0>
 800fe98:	693b      	ldr	r3, [r7, #16]
 800fe9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fe9e:	d205      	bcs.n	800feac <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fea0:	693b      	ldr	r3, [r7, #16]
 800fea2:	b29a      	uxth	r2, r3
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	60da      	str	r2, [r3, #12]
 800feaa:	e001      	b.n	800feb0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800feac:	2301      	movs	r3, #1
 800feae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	2200      	movs	r2, #0
 800feb4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	2200      	movs	r2, #0
 800feba:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800febc:	7fbb      	ldrb	r3, [r7, #30]
}
 800febe:	4618      	mov	r0, r3
 800fec0:	3720      	adds	r7, #32
 800fec2:	46bd      	mov	sp, r7
 800fec4:	bd80      	pop	{r7, pc}
 800fec6:	bf00      	nop
 800fec8:	40007c00 	.word	0x40007c00
 800fecc:	40023800 	.word	0x40023800
 800fed0:	00f42400 	.word	0x00f42400

0800fed4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fed4:	b480      	push	{r7}
 800fed6:	b083      	sub	sp, #12
 800fed8:	af00      	add	r7, sp, #0
 800feda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fee0:	f003 0301 	and.w	r3, r3, #1
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d00a      	beq.n	800fefe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	685b      	ldr	r3, [r3, #4]
 800feee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	430a      	orrs	r2, r1
 800fefc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff02:	f003 0302 	and.w	r3, r3, #2
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d00a      	beq.n	800ff20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	685b      	ldr	r3, [r3, #4]
 800ff10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	430a      	orrs	r2, r1
 800ff1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff24:	f003 0304 	and.w	r3, r3, #4
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d00a      	beq.n	800ff42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	685b      	ldr	r3, [r3, #4]
 800ff32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	430a      	orrs	r2, r1
 800ff40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff46:	f003 0308 	and.w	r3, r3, #8
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d00a      	beq.n	800ff64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	685b      	ldr	r3, [r3, #4]
 800ff54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	430a      	orrs	r2, r1
 800ff62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff68:	f003 0310 	and.w	r3, r3, #16
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d00a      	beq.n	800ff86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	689b      	ldr	r3, [r3, #8]
 800ff76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	430a      	orrs	r2, r1
 800ff84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff8a:	f003 0320 	and.w	r3, r3, #32
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d00a      	beq.n	800ffa8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	689b      	ldr	r3, [r3, #8]
 800ff98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	430a      	orrs	r2, r1
 800ffa6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d01a      	beq.n	800ffea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	685b      	ldr	r3, [r3, #4]
 800ffba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	430a      	orrs	r2, r1
 800ffc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ffd2:	d10a      	bne.n	800ffea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	685b      	ldr	r3, [r3, #4]
 800ffda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	430a      	orrs	r2, r1
 800ffe8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d00a      	beq.n	801000c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	685b      	ldr	r3, [r3, #4]
 800fffc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	430a      	orrs	r2, r1
 801000a:	605a      	str	r2, [r3, #4]
  }
}
 801000c:	bf00      	nop
 801000e:	370c      	adds	r7, #12
 8010010:	46bd      	mov	sp, r7
 8010012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010016:	4770      	bx	lr

08010018 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010018:	b580      	push	{r7, lr}
 801001a:	b086      	sub	sp, #24
 801001c:	af02      	add	r7, sp, #8
 801001e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	2200      	movs	r2, #0
 8010024:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010028:	f7f4 fc16 	bl	8004858 <HAL_GetTick>
 801002c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	f003 0308 	and.w	r3, r3, #8
 8010038:	2b08      	cmp	r3, #8
 801003a:	d10e      	bne.n	801005a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801003c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010040:	9300      	str	r3, [sp, #0]
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	2200      	movs	r2, #0
 8010046:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801004a:	6878      	ldr	r0, [r7, #4]
 801004c:	f000 f81b 	bl	8010086 <UART_WaitOnFlagUntilTimeout>
 8010050:	4603      	mov	r3, r0
 8010052:	2b00      	cmp	r3, #0
 8010054:	d001      	beq.n	801005a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010056:	2303      	movs	r3, #3
 8010058:	e011      	b.n	801007e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	2220      	movs	r2, #32
 801005e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	2220      	movs	r2, #32
 8010064:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	2200      	movs	r2, #0
 801006c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	2200      	movs	r2, #0
 8010072:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	2200      	movs	r2, #0
 8010078:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 801007c:	2300      	movs	r3, #0
}
 801007e:	4618      	mov	r0, r3
 8010080:	3710      	adds	r7, #16
 8010082:	46bd      	mov	sp, r7
 8010084:	bd80      	pop	{r7, pc}

08010086 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010086:	b580      	push	{r7, lr}
 8010088:	b09c      	sub	sp, #112	; 0x70
 801008a:	af00      	add	r7, sp, #0
 801008c:	60f8      	str	r0, [r7, #12]
 801008e:	60b9      	str	r1, [r7, #8]
 8010090:	603b      	str	r3, [r7, #0]
 8010092:	4613      	mov	r3, r2
 8010094:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010096:	e0a7      	b.n	80101e8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010098:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801009a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801009e:	f000 80a3 	beq.w	80101e8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80100a2:	f7f4 fbd9 	bl	8004858 <HAL_GetTick>
 80100a6:	4602      	mov	r2, r0
 80100a8:	683b      	ldr	r3, [r7, #0]
 80100aa:	1ad3      	subs	r3, r2, r3
 80100ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80100ae:	429a      	cmp	r2, r3
 80100b0:	d302      	bcc.n	80100b8 <UART_WaitOnFlagUntilTimeout+0x32>
 80100b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d13f      	bne.n	8010138 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100c0:	e853 3f00 	ldrex	r3, [r3]
 80100c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80100c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80100cc:	667b      	str	r3, [r7, #100]	; 0x64
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	461a      	mov	r2, r3
 80100d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80100d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80100d8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80100dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80100de:	e841 2300 	strex	r3, r2, [r1]
 80100e2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80100e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d1e6      	bne.n	80100b8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	3308      	adds	r3, #8
 80100f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100f4:	e853 3f00 	ldrex	r3, [r3]
 80100f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80100fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100fc:	f023 0301 	bic.w	r3, r3, #1
 8010100:	663b      	str	r3, [r7, #96]	; 0x60
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	3308      	adds	r3, #8
 8010108:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801010a:	64ba      	str	r2, [r7, #72]	; 0x48
 801010c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801010e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010110:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010112:	e841 2300 	strex	r3, r2, [r1]
 8010116:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010118:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801011a:	2b00      	cmp	r3, #0
 801011c:	d1e5      	bne.n	80100ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	2220      	movs	r2, #32
 8010122:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	2220      	movs	r2, #32
 8010128:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	2200      	movs	r2, #0
 8010130:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8010134:	2303      	movs	r3, #3
 8010136:	e068      	b.n	801020a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	f003 0304 	and.w	r3, r3, #4
 8010142:	2b00      	cmp	r3, #0
 8010144:	d050      	beq.n	80101e8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	69db      	ldr	r3, [r3, #28]
 801014c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010150:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010154:	d148      	bne.n	80101e8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801015e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010168:	e853 3f00 	ldrex	r3, [r3]
 801016c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801016e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010170:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010174:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	461a      	mov	r2, r3
 801017c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801017e:	637b      	str	r3, [r7, #52]	; 0x34
 8010180:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010182:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010184:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010186:	e841 2300 	strex	r3, r2, [r1]
 801018a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801018c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801018e:	2b00      	cmp	r3, #0
 8010190:	d1e6      	bne.n	8010160 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	3308      	adds	r3, #8
 8010198:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801019a:	697b      	ldr	r3, [r7, #20]
 801019c:	e853 3f00 	ldrex	r3, [r3]
 80101a0:	613b      	str	r3, [r7, #16]
   return(result);
 80101a2:	693b      	ldr	r3, [r7, #16]
 80101a4:	f023 0301 	bic.w	r3, r3, #1
 80101a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	3308      	adds	r3, #8
 80101b0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80101b2:	623a      	str	r2, [r7, #32]
 80101b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101b6:	69f9      	ldr	r1, [r7, #28]
 80101b8:	6a3a      	ldr	r2, [r7, #32]
 80101ba:	e841 2300 	strex	r3, r2, [r1]
 80101be:	61bb      	str	r3, [r7, #24]
   return(result);
 80101c0:	69bb      	ldr	r3, [r7, #24]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d1e5      	bne.n	8010192 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	2220      	movs	r2, #32
 80101ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	2220      	movs	r2, #32
 80101d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	2220      	movs	r2, #32
 80101d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	2200      	movs	r2, #0
 80101e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80101e4:	2303      	movs	r3, #3
 80101e6:	e010      	b.n	801020a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	69da      	ldr	r2, [r3, #28]
 80101ee:	68bb      	ldr	r3, [r7, #8]
 80101f0:	4013      	ands	r3, r2
 80101f2:	68ba      	ldr	r2, [r7, #8]
 80101f4:	429a      	cmp	r2, r3
 80101f6:	bf0c      	ite	eq
 80101f8:	2301      	moveq	r3, #1
 80101fa:	2300      	movne	r3, #0
 80101fc:	b2db      	uxtb	r3, r3
 80101fe:	461a      	mov	r2, r3
 8010200:	79fb      	ldrb	r3, [r7, #7]
 8010202:	429a      	cmp	r2, r3
 8010204:	f43f af48 	beq.w	8010098 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010208:	2300      	movs	r3, #0
}
 801020a:	4618      	mov	r0, r3
 801020c:	3770      	adds	r7, #112	; 0x70
 801020e:	46bd      	mov	sp, r7
 8010210:	bd80      	pop	{r7, pc}
	...

08010214 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8010214:	b480      	push	{r7}
 8010216:	b083      	sub	sp, #12
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
 801021c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 801021e:	683b      	ldr	r3, [r7, #0]
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d121      	bne.n	801026a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	681a      	ldr	r2, [r3, #0]
 801022a:	4b27      	ldr	r3, [pc, #156]	; (80102c8 <FMC_SDRAM_Init+0xb4>)
 801022c:	4013      	ands	r3, r2
 801022e:	683a      	ldr	r2, [r7, #0]
 8010230:	6851      	ldr	r1, [r2, #4]
 8010232:	683a      	ldr	r2, [r7, #0]
 8010234:	6892      	ldr	r2, [r2, #8]
 8010236:	4311      	orrs	r1, r2
 8010238:	683a      	ldr	r2, [r7, #0]
 801023a:	68d2      	ldr	r2, [r2, #12]
 801023c:	4311      	orrs	r1, r2
 801023e:	683a      	ldr	r2, [r7, #0]
 8010240:	6912      	ldr	r2, [r2, #16]
 8010242:	4311      	orrs	r1, r2
 8010244:	683a      	ldr	r2, [r7, #0]
 8010246:	6952      	ldr	r2, [r2, #20]
 8010248:	4311      	orrs	r1, r2
 801024a:	683a      	ldr	r2, [r7, #0]
 801024c:	6992      	ldr	r2, [r2, #24]
 801024e:	4311      	orrs	r1, r2
 8010250:	683a      	ldr	r2, [r7, #0]
 8010252:	69d2      	ldr	r2, [r2, #28]
 8010254:	4311      	orrs	r1, r2
 8010256:	683a      	ldr	r2, [r7, #0]
 8010258:	6a12      	ldr	r2, [r2, #32]
 801025a:	4311      	orrs	r1, r2
 801025c:	683a      	ldr	r2, [r7, #0]
 801025e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8010260:	430a      	orrs	r2, r1
 8010262:	431a      	orrs	r2, r3
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	601a      	str	r2, [r3, #0]
 8010268:	e026      	b.n	80102b8 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8010272:	683b      	ldr	r3, [r7, #0]
 8010274:	69d9      	ldr	r1, [r3, #28]
 8010276:	683b      	ldr	r3, [r7, #0]
 8010278:	6a1b      	ldr	r3, [r3, #32]
 801027a:	4319      	orrs	r1, r3
 801027c:	683b      	ldr	r3, [r7, #0]
 801027e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010280:	430b      	orrs	r3, r1
 8010282:	431a      	orrs	r2, r3
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	685a      	ldr	r2, [r3, #4]
 801028c:	4b0e      	ldr	r3, [pc, #56]	; (80102c8 <FMC_SDRAM_Init+0xb4>)
 801028e:	4013      	ands	r3, r2
 8010290:	683a      	ldr	r2, [r7, #0]
 8010292:	6851      	ldr	r1, [r2, #4]
 8010294:	683a      	ldr	r2, [r7, #0]
 8010296:	6892      	ldr	r2, [r2, #8]
 8010298:	4311      	orrs	r1, r2
 801029a:	683a      	ldr	r2, [r7, #0]
 801029c:	68d2      	ldr	r2, [r2, #12]
 801029e:	4311      	orrs	r1, r2
 80102a0:	683a      	ldr	r2, [r7, #0]
 80102a2:	6912      	ldr	r2, [r2, #16]
 80102a4:	4311      	orrs	r1, r2
 80102a6:	683a      	ldr	r2, [r7, #0]
 80102a8:	6952      	ldr	r2, [r2, #20]
 80102aa:	4311      	orrs	r1, r2
 80102ac:	683a      	ldr	r2, [r7, #0]
 80102ae:	6992      	ldr	r2, [r2, #24]
 80102b0:	430a      	orrs	r2, r1
 80102b2:	431a      	orrs	r2, r3
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80102b8:	2300      	movs	r3, #0
}
 80102ba:	4618      	mov	r0, r3
 80102bc:	370c      	adds	r7, #12
 80102be:	46bd      	mov	sp, r7
 80102c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c4:	4770      	bx	lr
 80102c6:	bf00      	nop
 80102c8:	ffff8000 	.word	0xffff8000

080102cc <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80102cc:	b480      	push	{r7}
 80102ce:	b085      	sub	sp, #20
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	60f8      	str	r0, [r7, #12]
 80102d4:	60b9      	str	r1, [r7, #8]
 80102d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d128      	bne.n	8010330 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	689b      	ldr	r3, [r3, #8]
 80102e2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80102e6:	68bb      	ldr	r3, [r7, #8]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	1e59      	subs	r1, r3, #1
 80102ec:	68bb      	ldr	r3, [r7, #8]
 80102ee:	685b      	ldr	r3, [r3, #4]
 80102f0:	3b01      	subs	r3, #1
 80102f2:	011b      	lsls	r3, r3, #4
 80102f4:	4319      	orrs	r1, r3
 80102f6:	68bb      	ldr	r3, [r7, #8]
 80102f8:	689b      	ldr	r3, [r3, #8]
 80102fa:	3b01      	subs	r3, #1
 80102fc:	021b      	lsls	r3, r3, #8
 80102fe:	4319      	orrs	r1, r3
 8010300:	68bb      	ldr	r3, [r7, #8]
 8010302:	68db      	ldr	r3, [r3, #12]
 8010304:	3b01      	subs	r3, #1
 8010306:	031b      	lsls	r3, r3, #12
 8010308:	4319      	orrs	r1, r3
 801030a:	68bb      	ldr	r3, [r7, #8]
 801030c:	691b      	ldr	r3, [r3, #16]
 801030e:	3b01      	subs	r3, #1
 8010310:	041b      	lsls	r3, r3, #16
 8010312:	4319      	orrs	r1, r3
 8010314:	68bb      	ldr	r3, [r7, #8]
 8010316:	695b      	ldr	r3, [r3, #20]
 8010318:	3b01      	subs	r3, #1
 801031a:	051b      	lsls	r3, r3, #20
 801031c:	4319      	orrs	r1, r3
 801031e:	68bb      	ldr	r3, [r7, #8]
 8010320:	699b      	ldr	r3, [r3, #24]
 8010322:	3b01      	subs	r3, #1
 8010324:	061b      	lsls	r3, r3, #24
 8010326:	430b      	orrs	r3, r1
 8010328:	431a      	orrs	r2, r3
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	609a      	str	r2, [r3, #8]
 801032e:	e02d      	b.n	801038c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	689a      	ldr	r2, [r3, #8]
 8010334:	4b19      	ldr	r3, [pc, #100]	; (801039c <FMC_SDRAM_Timing_Init+0xd0>)
 8010336:	4013      	ands	r3, r2
 8010338:	68ba      	ldr	r2, [r7, #8]
 801033a:	68d2      	ldr	r2, [r2, #12]
 801033c:	3a01      	subs	r2, #1
 801033e:	0311      	lsls	r1, r2, #12
 8010340:	68ba      	ldr	r2, [r7, #8]
 8010342:	6952      	ldr	r2, [r2, #20]
 8010344:	3a01      	subs	r2, #1
 8010346:	0512      	lsls	r2, r2, #20
 8010348:	430a      	orrs	r2, r1
 801034a:	431a      	orrs	r2, r3
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	68db      	ldr	r3, [r3, #12]
 8010354:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8010358:	68bb      	ldr	r3, [r7, #8]
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	1e59      	subs	r1, r3, #1
 801035e:	68bb      	ldr	r3, [r7, #8]
 8010360:	685b      	ldr	r3, [r3, #4]
 8010362:	3b01      	subs	r3, #1
 8010364:	011b      	lsls	r3, r3, #4
 8010366:	4319      	orrs	r1, r3
 8010368:	68bb      	ldr	r3, [r7, #8]
 801036a:	689b      	ldr	r3, [r3, #8]
 801036c:	3b01      	subs	r3, #1
 801036e:	021b      	lsls	r3, r3, #8
 8010370:	4319      	orrs	r1, r3
 8010372:	68bb      	ldr	r3, [r7, #8]
 8010374:	691b      	ldr	r3, [r3, #16]
 8010376:	3b01      	subs	r3, #1
 8010378:	041b      	lsls	r3, r3, #16
 801037a:	4319      	orrs	r1, r3
 801037c:	68bb      	ldr	r3, [r7, #8]
 801037e:	699b      	ldr	r3, [r3, #24]
 8010380:	3b01      	subs	r3, #1
 8010382:	061b      	lsls	r3, r3, #24
 8010384:	430b      	orrs	r3, r1
 8010386:	431a      	orrs	r2, r3
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 801038c:	2300      	movs	r3, #0
}
 801038e:	4618      	mov	r0, r3
 8010390:	3714      	adds	r7, #20
 8010392:	46bd      	mov	sp, r7
 8010394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010398:	4770      	bx	lr
 801039a:	bf00      	nop
 801039c:	ff0f0fff 	.word	0xff0f0fff

080103a0 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80103a0:	b480      	push	{r7}
 80103a2:	b085      	sub	sp, #20
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	60f8      	str	r0, [r7, #12]
 80103a8:	60b9      	str	r1, [r7, #8]
 80103aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	691a      	ldr	r2, [r3, #16]
 80103b0:	4b0c      	ldr	r3, [pc, #48]	; (80103e4 <FMC_SDRAM_SendCommand+0x44>)
 80103b2:	4013      	ands	r3, r2
 80103b4:	68ba      	ldr	r2, [r7, #8]
 80103b6:	6811      	ldr	r1, [r2, #0]
 80103b8:	68ba      	ldr	r2, [r7, #8]
 80103ba:	6852      	ldr	r2, [r2, #4]
 80103bc:	4311      	orrs	r1, r2
 80103be:	68ba      	ldr	r2, [r7, #8]
 80103c0:	6892      	ldr	r2, [r2, #8]
 80103c2:	3a01      	subs	r2, #1
 80103c4:	0152      	lsls	r2, r2, #5
 80103c6:	4311      	orrs	r1, r2
 80103c8:	68ba      	ldr	r2, [r7, #8]
 80103ca:	68d2      	ldr	r2, [r2, #12]
 80103cc:	0252      	lsls	r2, r2, #9
 80103ce:	430a      	orrs	r2, r1
 80103d0:	431a      	orrs	r2, r3
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 80103d6:	2300      	movs	r3, #0
}
 80103d8:	4618      	mov	r0, r3
 80103da:	3714      	adds	r7, #20
 80103dc:	46bd      	mov	sp, r7
 80103de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e2:	4770      	bx	lr
 80103e4:	ffc00000 	.word	0xffc00000

080103e8 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80103e8:	b480      	push	{r7}
 80103ea:	b083      	sub	sp, #12
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	6078      	str	r0, [r7, #4]
 80103f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	695a      	ldr	r2, [r3, #20]
 80103f6:	4b07      	ldr	r3, [pc, #28]	; (8010414 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 80103f8:	4013      	ands	r3, r2
 80103fa:	683a      	ldr	r2, [r7, #0]
 80103fc:	0052      	lsls	r2, r2, #1
 80103fe:	431a      	orrs	r2, r3
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8010404:	2300      	movs	r3, #0
}
 8010406:	4618      	mov	r0, r3
 8010408:	370c      	adds	r7, #12
 801040a:	46bd      	mov	sp, r7
 801040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010410:	4770      	bx	lr
 8010412:	bf00      	nop
 8010414:	ffffc001 	.word	0xffffc001

08010418 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8010418:	b084      	sub	sp, #16
 801041a:	b480      	push	{r7}
 801041c:	b085      	sub	sp, #20
 801041e:	af00      	add	r7, sp, #0
 8010420:	6078      	str	r0, [r7, #4]
 8010422:	f107 001c 	add.w	r0, r7, #28
 8010426:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801042a:	2300      	movs	r3, #0
 801042c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 801042e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8010430:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8010432:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8010434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8010436:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8010438:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 801043a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 801043c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 801043e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8010442:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8010444:	68fa      	ldr	r2, [r7, #12]
 8010446:	4313      	orrs	r3, r2
 8010448:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	685a      	ldr	r2, [r3, #4]
 801044e:	4b07      	ldr	r3, [pc, #28]	; (801046c <SDMMC_Init+0x54>)
 8010450:	4013      	ands	r3, r2
 8010452:	68fa      	ldr	r2, [r7, #12]
 8010454:	431a      	orrs	r2, r3
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801045a:	2300      	movs	r3, #0
}
 801045c:	4618      	mov	r0, r3
 801045e:	3714      	adds	r7, #20
 8010460:	46bd      	mov	sp, r7
 8010462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010466:	b004      	add	sp, #16
 8010468:	4770      	bx	lr
 801046a:	bf00      	nop
 801046c:	ffff8100 	.word	0xffff8100

08010470 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8010470:	b480      	push	{r7}
 8010472:	b083      	sub	sp, #12
 8010474:	af00      	add	r7, sp, #0
 8010476:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 801047e:	4618      	mov	r0, r3
 8010480:	370c      	adds	r7, #12
 8010482:	46bd      	mov	sp, r7
 8010484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010488:	4770      	bx	lr

0801048a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 801048a:	b480      	push	{r7}
 801048c:	b083      	sub	sp, #12
 801048e:	af00      	add	r7, sp, #0
 8010490:	6078      	str	r0, [r7, #4]
 8010492:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8010494:	683b      	ldr	r3, [r7, #0]
 8010496:	681a      	ldr	r2, [r3, #0]
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801049e:	2300      	movs	r3, #0
}
 80104a0:	4618      	mov	r0, r3
 80104a2:	370c      	adds	r7, #12
 80104a4:	46bd      	mov	sp, r7
 80104a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104aa:	4770      	bx	lr

080104ac <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 80104ac:	b480      	push	{r7}
 80104ae:	b083      	sub	sp, #12
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	2203      	movs	r2, #3
 80104b8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80104ba:	2300      	movs	r3, #0
}
 80104bc:	4618      	mov	r0, r3
 80104be:	370c      	adds	r7, #12
 80104c0:	46bd      	mov	sp, r7
 80104c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c6:	4770      	bx	lr

080104c8 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 80104c8:	b480      	push	{r7}
 80104ca:	b083      	sub	sp, #12
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	f003 0303 	and.w	r3, r3, #3
}
 80104d8:	4618      	mov	r0, r3
 80104da:	370c      	adds	r7, #12
 80104dc:	46bd      	mov	sp, r7
 80104de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e2:	4770      	bx	lr

080104e4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80104e4:	b480      	push	{r7}
 80104e6:	b085      	sub	sp, #20
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	6078      	str	r0, [r7, #4]
 80104ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80104ee:	2300      	movs	r3, #0
 80104f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80104f2:	683b      	ldr	r3, [r7, #0]
 80104f4:	681a      	ldr	r2, [r3, #0]
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80104fa:	683b      	ldr	r3, [r7, #0]
 80104fc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80104fe:	683b      	ldr	r3, [r7, #0]
 8010500:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010502:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8010504:	683b      	ldr	r3, [r7, #0]
 8010506:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8010508:	431a      	orrs	r2, r3
                       Command->CPSM);
 801050a:	683b      	ldr	r3, [r7, #0]
 801050c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 801050e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010510:	68fa      	ldr	r2, [r7, #12]
 8010512:	4313      	orrs	r3, r2
 8010514:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	68da      	ldr	r2, [r3, #12]
 801051a:	4b06      	ldr	r3, [pc, #24]	; (8010534 <SDMMC_SendCommand+0x50>)
 801051c:	4013      	ands	r3, r2
 801051e:	68fa      	ldr	r2, [r7, #12]
 8010520:	431a      	orrs	r2, r3
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8010526:	2300      	movs	r3, #0
}
 8010528:	4618      	mov	r0, r3
 801052a:	3714      	adds	r7, #20
 801052c:	46bd      	mov	sp, r7
 801052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010532:	4770      	bx	lr
 8010534:	fffff000 	.word	0xfffff000

08010538 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8010538:	b480      	push	{r7}
 801053a:	b083      	sub	sp, #12
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	691b      	ldr	r3, [r3, #16]
 8010544:	b2db      	uxtb	r3, r3
}
 8010546:	4618      	mov	r0, r3
 8010548:	370c      	adds	r7, #12
 801054a:	46bd      	mov	sp, r7
 801054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010550:	4770      	bx	lr

08010552 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8010552:	b480      	push	{r7}
 8010554:	b085      	sub	sp, #20
 8010556:	af00      	add	r7, sp, #0
 8010558:	6078      	str	r0, [r7, #4]
 801055a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	3314      	adds	r3, #20
 8010560:	461a      	mov	r2, r3
 8010562:	683b      	ldr	r3, [r7, #0]
 8010564:	4413      	add	r3, r2
 8010566:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	681b      	ldr	r3, [r3, #0]
}  
 801056c:	4618      	mov	r0, r3
 801056e:	3714      	adds	r7, #20
 8010570:	46bd      	mov	sp, r7
 8010572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010576:	4770      	bx	lr

08010578 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8010578:	b480      	push	{r7}
 801057a:	b085      	sub	sp, #20
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
 8010580:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010582:	2300      	movs	r3, #0
 8010584:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8010586:	683b      	ldr	r3, [r7, #0]
 8010588:	681a      	ldr	r2, [r3, #0]
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 801058e:	683b      	ldr	r3, [r7, #0]
 8010590:	685a      	ldr	r2, [r3, #4]
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010596:	683b      	ldr	r3, [r7, #0]
 8010598:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 801059a:	683b      	ldr	r3, [r7, #0]
 801059c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801059e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80105a0:	683b      	ldr	r3, [r7, #0]
 80105a2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80105a4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80105a6:	683b      	ldr	r3, [r7, #0]
 80105a8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80105aa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80105ac:	68fa      	ldr	r2, [r7, #12]
 80105ae:	4313      	orrs	r3, r2
 80105b0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105b6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	431a      	orrs	r2, r3
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80105c2:	2300      	movs	r3, #0

}
 80105c4:	4618      	mov	r0, r3
 80105c6:	3714      	adds	r7, #20
 80105c8:	46bd      	mov	sp, r7
 80105ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ce:	4770      	bx	lr

080105d0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b088      	sub	sp, #32
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	6078      	str	r0, [r7, #4]
 80105d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80105da:	683b      	ldr	r3, [r7, #0]
 80105dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80105de:	2310      	movs	r3, #16
 80105e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80105e2:	2340      	movs	r3, #64	; 0x40
 80105e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80105e6:	2300      	movs	r3, #0
 80105e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80105ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80105ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80105f0:	f107 0308 	add.w	r3, r7, #8
 80105f4:	4619      	mov	r1, r3
 80105f6:	6878      	ldr	r0, [r7, #4]
 80105f8:	f7ff ff74 	bl	80104e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80105fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8010600:	2110      	movs	r1, #16
 8010602:	6878      	ldr	r0, [r7, #4]
 8010604:	f000 fa1a 	bl	8010a3c <SDMMC_GetCmdResp1>
 8010608:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801060a:	69fb      	ldr	r3, [r7, #28]
}
 801060c:	4618      	mov	r0, r3
 801060e:	3720      	adds	r7, #32
 8010610:	46bd      	mov	sp, r7
 8010612:	bd80      	pop	{r7, pc}

08010614 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010614:	b580      	push	{r7, lr}
 8010616:	b088      	sub	sp, #32
 8010618:	af00      	add	r7, sp, #0
 801061a:	6078      	str	r0, [r7, #4]
 801061c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801061e:	683b      	ldr	r3, [r7, #0]
 8010620:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8010622:	2311      	movs	r3, #17
 8010624:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010626:	2340      	movs	r3, #64	; 0x40
 8010628:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801062a:	2300      	movs	r3, #0
 801062c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801062e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010632:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010634:	f107 0308 	add.w	r3, r7, #8
 8010638:	4619      	mov	r1, r3
 801063a:	6878      	ldr	r0, [r7, #4]
 801063c:	f7ff ff52 	bl	80104e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010640:	f241 3288 	movw	r2, #5000	; 0x1388
 8010644:	2111      	movs	r1, #17
 8010646:	6878      	ldr	r0, [r7, #4]
 8010648:	f000 f9f8 	bl	8010a3c <SDMMC_GetCmdResp1>
 801064c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801064e:	69fb      	ldr	r3, [r7, #28]
}
 8010650:	4618      	mov	r0, r3
 8010652:	3720      	adds	r7, #32
 8010654:	46bd      	mov	sp, r7
 8010656:	bd80      	pop	{r7, pc}

08010658 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b088      	sub	sp, #32
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
 8010660:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010662:	683b      	ldr	r3, [r7, #0]
 8010664:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8010666:	2312      	movs	r3, #18
 8010668:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801066a:	2340      	movs	r3, #64	; 0x40
 801066c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801066e:	2300      	movs	r3, #0
 8010670:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010672:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010676:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010678:	f107 0308 	add.w	r3, r7, #8
 801067c:	4619      	mov	r1, r3
 801067e:	6878      	ldr	r0, [r7, #4]
 8010680:	f7ff ff30 	bl	80104e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010684:	f241 3288 	movw	r2, #5000	; 0x1388
 8010688:	2112      	movs	r1, #18
 801068a:	6878      	ldr	r0, [r7, #4]
 801068c:	f000 f9d6 	bl	8010a3c <SDMMC_GetCmdResp1>
 8010690:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010692:	69fb      	ldr	r3, [r7, #28]
}
 8010694:	4618      	mov	r0, r3
 8010696:	3720      	adds	r7, #32
 8010698:	46bd      	mov	sp, r7
 801069a:	bd80      	pop	{r7, pc}

0801069c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801069c:	b580      	push	{r7, lr}
 801069e:	b088      	sub	sp, #32
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	6078      	str	r0, [r7, #4]
 80106a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80106a6:	683b      	ldr	r3, [r7, #0]
 80106a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80106aa:	2318      	movs	r3, #24
 80106ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80106ae:	2340      	movs	r3, #64	; 0x40
 80106b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80106b2:	2300      	movs	r3, #0
 80106b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80106b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80106ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80106bc:	f107 0308 	add.w	r3, r7, #8
 80106c0:	4619      	mov	r1, r3
 80106c2:	6878      	ldr	r0, [r7, #4]
 80106c4:	f7ff ff0e 	bl	80104e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80106c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80106cc:	2118      	movs	r1, #24
 80106ce:	6878      	ldr	r0, [r7, #4]
 80106d0:	f000 f9b4 	bl	8010a3c <SDMMC_GetCmdResp1>
 80106d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80106d6:	69fb      	ldr	r3, [r7, #28]
}
 80106d8:	4618      	mov	r0, r3
 80106da:	3720      	adds	r7, #32
 80106dc:	46bd      	mov	sp, r7
 80106de:	bd80      	pop	{r7, pc}

080106e0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80106e0:	b580      	push	{r7, lr}
 80106e2:	b088      	sub	sp, #32
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	6078      	str	r0, [r7, #4]
 80106e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80106ea:	683b      	ldr	r3, [r7, #0]
 80106ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80106ee:	2319      	movs	r3, #25
 80106f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80106f2:	2340      	movs	r3, #64	; 0x40
 80106f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80106f6:	2300      	movs	r3, #0
 80106f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80106fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80106fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010700:	f107 0308 	add.w	r3, r7, #8
 8010704:	4619      	mov	r1, r3
 8010706:	6878      	ldr	r0, [r7, #4]
 8010708:	f7ff feec 	bl	80104e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801070c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010710:	2119      	movs	r1, #25
 8010712:	6878      	ldr	r0, [r7, #4]
 8010714:	f000 f992 	bl	8010a3c <SDMMC_GetCmdResp1>
 8010718:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801071a:	69fb      	ldr	r3, [r7, #28]
}
 801071c:	4618      	mov	r0, r3
 801071e:	3720      	adds	r7, #32
 8010720:	46bd      	mov	sp, r7
 8010722:	bd80      	pop	{r7, pc}

08010724 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8010724:	b580      	push	{r7, lr}
 8010726:	b088      	sub	sp, #32
 8010728:	af00      	add	r7, sp, #0
 801072a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 801072c:	2300      	movs	r3, #0
 801072e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010730:	230c      	movs	r3, #12
 8010732:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010734:	2340      	movs	r3, #64	; 0x40
 8010736:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010738:	2300      	movs	r3, #0
 801073a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801073c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010740:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010742:	f107 0308 	add.w	r3, r7, #8
 8010746:	4619      	mov	r1, r3
 8010748:	6878      	ldr	r0, [r7, #4]
 801074a:	f7ff fecb 	bl	80104e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 801074e:	4a05      	ldr	r2, [pc, #20]	; (8010764 <SDMMC_CmdStopTransfer+0x40>)
 8010750:	210c      	movs	r1, #12
 8010752:	6878      	ldr	r0, [r7, #4]
 8010754:	f000 f972 	bl	8010a3c <SDMMC_GetCmdResp1>
 8010758:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801075a:	69fb      	ldr	r3, [r7, #28]
}
 801075c:	4618      	mov	r0, r3
 801075e:	3720      	adds	r7, #32
 8010760:	46bd      	mov	sp, r7
 8010762:	bd80      	pop	{r7, pc}
 8010764:	05f5e100 	.word	0x05f5e100

08010768 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8010768:	b580      	push	{r7, lr}
 801076a:	b08a      	sub	sp, #40	; 0x28
 801076c:	af00      	add	r7, sp, #0
 801076e:	60f8      	str	r0, [r7, #12]
 8010770:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010774:	683b      	ldr	r3, [r7, #0]
 8010776:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010778:	2307      	movs	r3, #7
 801077a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801077c:	2340      	movs	r3, #64	; 0x40
 801077e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010780:	2300      	movs	r3, #0
 8010782:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010784:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010788:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801078a:	f107 0310 	add.w	r3, r7, #16
 801078e:	4619      	mov	r1, r3
 8010790:	68f8      	ldr	r0, [r7, #12]
 8010792:	f7ff fea7 	bl	80104e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8010796:	f241 3288 	movw	r2, #5000	; 0x1388
 801079a:	2107      	movs	r1, #7
 801079c:	68f8      	ldr	r0, [r7, #12]
 801079e:	f000 f94d 	bl	8010a3c <SDMMC_GetCmdResp1>
 80107a2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80107a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80107a6:	4618      	mov	r0, r3
 80107a8:	3728      	adds	r7, #40	; 0x28
 80107aa:	46bd      	mov	sp, r7
 80107ac:	bd80      	pop	{r7, pc}

080107ae <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80107ae:	b580      	push	{r7, lr}
 80107b0:	b088      	sub	sp, #32
 80107b2:	af00      	add	r7, sp, #0
 80107b4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80107b6:	2300      	movs	r3, #0
 80107b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80107ba:	2300      	movs	r3, #0
 80107bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80107be:	2300      	movs	r3, #0
 80107c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80107c2:	2300      	movs	r3, #0
 80107c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80107c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80107ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80107cc:	f107 0308 	add.w	r3, r7, #8
 80107d0:	4619      	mov	r1, r3
 80107d2:	6878      	ldr	r0, [r7, #4]
 80107d4:	f7ff fe86 	bl	80104e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80107d8:	6878      	ldr	r0, [r7, #4]
 80107da:	f000 fb67 	bl	8010eac <SDMMC_GetCmdError>
 80107de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80107e0:	69fb      	ldr	r3, [r7, #28]
}
 80107e2:	4618      	mov	r0, r3
 80107e4:	3720      	adds	r7, #32
 80107e6:	46bd      	mov	sp, r7
 80107e8:	bd80      	pop	{r7, pc}

080107ea <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80107ea:	b580      	push	{r7, lr}
 80107ec:	b088      	sub	sp, #32
 80107ee:	af00      	add	r7, sp, #0
 80107f0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80107f2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80107f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80107f8:	2308      	movs	r3, #8
 80107fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80107fc:	2340      	movs	r3, #64	; 0x40
 80107fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010800:	2300      	movs	r3, #0
 8010802:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010808:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801080a:	f107 0308 	add.w	r3, r7, #8
 801080e:	4619      	mov	r1, r3
 8010810:	6878      	ldr	r0, [r7, #4]
 8010812:	f7ff fe67 	bl	80104e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8010816:	6878      	ldr	r0, [r7, #4]
 8010818:	f000 fafa 	bl	8010e10 <SDMMC_GetCmdResp7>
 801081c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801081e:	69fb      	ldr	r3, [r7, #28]
}
 8010820:	4618      	mov	r0, r3
 8010822:	3720      	adds	r7, #32
 8010824:	46bd      	mov	sp, r7
 8010826:	bd80      	pop	{r7, pc}

08010828 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010828:	b580      	push	{r7, lr}
 801082a:	b088      	sub	sp, #32
 801082c:	af00      	add	r7, sp, #0
 801082e:	6078      	str	r0, [r7, #4]
 8010830:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010832:	683b      	ldr	r3, [r7, #0]
 8010834:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010836:	2337      	movs	r3, #55	; 0x37
 8010838:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801083a:	2340      	movs	r3, #64	; 0x40
 801083c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801083e:	2300      	movs	r3, #0
 8010840:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010842:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010846:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010848:	f107 0308 	add.w	r3, r7, #8
 801084c:	4619      	mov	r1, r3
 801084e:	6878      	ldr	r0, [r7, #4]
 8010850:	f7ff fe48 	bl	80104e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8010854:	f241 3288 	movw	r2, #5000	; 0x1388
 8010858:	2137      	movs	r1, #55	; 0x37
 801085a:	6878      	ldr	r0, [r7, #4]
 801085c:	f000 f8ee 	bl	8010a3c <SDMMC_GetCmdResp1>
 8010860:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010862:	69fb      	ldr	r3, [r7, #28]
}
 8010864:	4618      	mov	r0, r3
 8010866:	3720      	adds	r7, #32
 8010868:	46bd      	mov	sp, r7
 801086a:	bd80      	pop	{r7, pc}

0801086c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801086c:	b580      	push	{r7, lr}
 801086e:	b088      	sub	sp, #32
 8010870:	af00      	add	r7, sp, #0
 8010872:	6078      	str	r0, [r7, #4]
 8010874:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8010876:	683a      	ldr	r2, [r7, #0]
 8010878:	4b0d      	ldr	r3, [pc, #52]	; (80108b0 <SDMMC_CmdAppOperCommand+0x44>)
 801087a:	4313      	orrs	r3, r2
 801087c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801087e:	2329      	movs	r3, #41	; 0x29
 8010880:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010882:	2340      	movs	r3, #64	; 0x40
 8010884:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010886:	2300      	movs	r3, #0
 8010888:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801088a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801088e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010890:	f107 0308 	add.w	r3, r7, #8
 8010894:	4619      	mov	r1, r3
 8010896:	6878      	ldr	r0, [r7, #4]
 8010898:	f7ff fe24 	bl	80104e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 801089c:	6878      	ldr	r0, [r7, #4]
 801089e:	f000 fa03 	bl	8010ca8 <SDMMC_GetCmdResp3>
 80108a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80108a4:	69fb      	ldr	r3, [r7, #28]
}
 80108a6:	4618      	mov	r0, r3
 80108a8:	3720      	adds	r7, #32
 80108aa:	46bd      	mov	sp, r7
 80108ac:	bd80      	pop	{r7, pc}
 80108ae:	bf00      	nop
 80108b0:	80100000 	.word	0x80100000

080108b4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80108b4:	b580      	push	{r7, lr}
 80108b6:	b088      	sub	sp, #32
 80108b8:	af00      	add	r7, sp, #0
 80108ba:	6078      	str	r0, [r7, #4]
 80108bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80108be:	683b      	ldr	r3, [r7, #0]
 80108c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80108c2:	2306      	movs	r3, #6
 80108c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80108c6:	2340      	movs	r3, #64	; 0x40
 80108c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80108ca:	2300      	movs	r3, #0
 80108cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80108ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80108d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80108d4:	f107 0308 	add.w	r3, r7, #8
 80108d8:	4619      	mov	r1, r3
 80108da:	6878      	ldr	r0, [r7, #4]
 80108dc:	f7ff fe02 	bl	80104e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80108e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80108e4:	2106      	movs	r1, #6
 80108e6:	6878      	ldr	r0, [r7, #4]
 80108e8:	f000 f8a8 	bl	8010a3c <SDMMC_GetCmdResp1>
 80108ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80108ee:	69fb      	ldr	r3, [r7, #28]
}
 80108f0:	4618      	mov	r0, r3
 80108f2:	3720      	adds	r7, #32
 80108f4:	46bd      	mov	sp, r7
 80108f6:	bd80      	pop	{r7, pc}

080108f8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80108f8:	b580      	push	{r7, lr}
 80108fa:	b088      	sub	sp, #32
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010900:	2300      	movs	r3, #0
 8010902:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010904:	2333      	movs	r3, #51	; 0x33
 8010906:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010908:	2340      	movs	r3, #64	; 0x40
 801090a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801090c:	2300      	movs	r3, #0
 801090e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010910:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010914:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010916:	f107 0308 	add.w	r3, r7, #8
 801091a:	4619      	mov	r1, r3
 801091c:	6878      	ldr	r0, [r7, #4]
 801091e:	f7ff fde1 	bl	80104e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8010922:	f241 3288 	movw	r2, #5000	; 0x1388
 8010926:	2133      	movs	r1, #51	; 0x33
 8010928:	6878      	ldr	r0, [r7, #4]
 801092a:	f000 f887 	bl	8010a3c <SDMMC_GetCmdResp1>
 801092e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010930:	69fb      	ldr	r3, [r7, #28]
}
 8010932:	4618      	mov	r0, r3
 8010934:	3720      	adds	r7, #32
 8010936:	46bd      	mov	sp, r7
 8010938:	bd80      	pop	{r7, pc}

0801093a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 801093a:	b580      	push	{r7, lr}
 801093c:	b088      	sub	sp, #32
 801093e:	af00      	add	r7, sp, #0
 8010940:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010942:	2300      	movs	r3, #0
 8010944:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010946:	2302      	movs	r3, #2
 8010948:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801094a:	23c0      	movs	r3, #192	; 0xc0
 801094c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801094e:	2300      	movs	r3, #0
 8010950:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010952:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010956:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010958:	f107 0308 	add.w	r3, r7, #8
 801095c:	4619      	mov	r1, r3
 801095e:	6878      	ldr	r0, [r7, #4]
 8010960:	f7ff fdc0 	bl	80104e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010964:	6878      	ldr	r0, [r7, #4]
 8010966:	f000 f957 	bl	8010c18 <SDMMC_GetCmdResp2>
 801096a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801096c:	69fb      	ldr	r3, [r7, #28]
}
 801096e:	4618      	mov	r0, r3
 8010970:	3720      	adds	r7, #32
 8010972:	46bd      	mov	sp, r7
 8010974:	bd80      	pop	{r7, pc}

08010976 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010976:	b580      	push	{r7, lr}
 8010978:	b088      	sub	sp, #32
 801097a:	af00      	add	r7, sp, #0
 801097c:	6078      	str	r0, [r7, #4]
 801097e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010980:	683b      	ldr	r3, [r7, #0]
 8010982:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010984:	2309      	movs	r3, #9
 8010986:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010988:	23c0      	movs	r3, #192	; 0xc0
 801098a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801098c:	2300      	movs	r3, #0
 801098e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010990:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010994:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010996:	f107 0308 	add.w	r3, r7, #8
 801099a:	4619      	mov	r1, r3
 801099c:	6878      	ldr	r0, [r7, #4]
 801099e:	f7ff fda1 	bl	80104e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80109a2:	6878      	ldr	r0, [r7, #4]
 80109a4:	f000 f938 	bl	8010c18 <SDMMC_GetCmdResp2>
 80109a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109aa:	69fb      	ldr	r3, [r7, #28]
}
 80109ac:	4618      	mov	r0, r3
 80109ae:	3720      	adds	r7, #32
 80109b0:	46bd      	mov	sp, r7
 80109b2:	bd80      	pop	{r7, pc}

080109b4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b088      	sub	sp, #32
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
 80109bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80109be:	2300      	movs	r3, #0
 80109c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80109c2:	2303      	movs	r3, #3
 80109c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80109c6:	2340      	movs	r3, #64	; 0x40
 80109c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80109ca:	2300      	movs	r3, #0
 80109cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80109ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80109d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80109d4:	f107 0308 	add.w	r3, r7, #8
 80109d8:	4619      	mov	r1, r3
 80109da:	6878      	ldr	r0, [r7, #4]
 80109dc:	f7ff fd82 	bl	80104e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80109e0:	683a      	ldr	r2, [r7, #0]
 80109e2:	2103      	movs	r1, #3
 80109e4:	6878      	ldr	r0, [r7, #4]
 80109e6:	f000 f99d 	bl	8010d24 <SDMMC_GetCmdResp6>
 80109ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109ec:	69fb      	ldr	r3, [r7, #28]
}
 80109ee:	4618      	mov	r0, r3
 80109f0:	3720      	adds	r7, #32
 80109f2:	46bd      	mov	sp, r7
 80109f4:	bd80      	pop	{r7, pc}

080109f6 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80109f6:	b580      	push	{r7, lr}
 80109f8:	b088      	sub	sp, #32
 80109fa:	af00      	add	r7, sp, #0
 80109fc:	6078      	str	r0, [r7, #4]
 80109fe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8010a00:	683b      	ldr	r3, [r7, #0]
 8010a02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010a04:	230d      	movs	r3, #13
 8010a06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010a08:	2340      	movs	r3, #64	; 0x40
 8010a0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a14:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010a16:	f107 0308 	add.w	r3, r7, #8
 8010a1a:	4619      	mov	r1, r3
 8010a1c:	6878      	ldr	r0, [r7, #4]
 8010a1e:	f7ff fd61 	bl	80104e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8010a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a26:	210d      	movs	r1, #13
 8010a28:	6878      	ldr	r0, [r7, #4]
 8010a2a:	f000 f807 	bl	8010a3c <SDMMC_GetCmdResp1>
 8010a2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a30:	69fb      	ldr	r3, [r7, #28]
}
 8010a32:	4618      	mov	r0, r3
 8010a34:	3720      	adds	r7, #32
 8010a36:	46bd      	mov	sp, r7
 8010a38:	bd80      	pop	{r7, pc}
	...

08010a3c <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010a3c:	b580      	push	{r7, lr}
 8010a3e:	b088      	sub	sp, #32
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	60f8      	str	r0, [r7, #12]
 8010a44:	460b      	mov	r3, r1
 8010a46:	607a      	str	r2, [r7, #4]
 8010a48:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010a4a:	4b70      	ldr	r3, [pc, #448]	; (8010c0c <SDMMC_GetCmdResp1+0x1d0>)
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	4a70      	ldr	r2, [pc, #448]	; (8010c10 <SDMMC_GetCmdResp1+0x1d4>)
 8010a50:	fba2 2303 	umull	r2, r3, r2, r3
 8010a54:	0a5a      	lsrs	r2, r3, #9
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	fb02 f303 	mul.w	r3, r2, r3
 8010a5c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8010a5e:	69fb      	ldr	r3, [r7, #28]
 8010a60:	1e5a      	subs	r2, r3, #1
 8010a62:	61fa      	str	r2, [r7, #28]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d102      	bne.n	8010a6e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010a68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010a6c:	e0c9      	b.n	8010c02 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a72:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010a74:	69bb      	ldr	r3, [r7, #24]
 8010a76:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d0ef      	beq.n	8010a5e <SDMMC_GetCmdResp1+0x22>
 8010a7e:	69bb      	ldr	r3, [r7, #24]
 8010a80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d1ea      	bne.n	8010a5e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a8c:	f003 0304 	and.w	r3, r3, #4
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d004      	beq.n	8010a9e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	2204      	movs	r2, #4
 8010a98:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010a9a:	2304      	movs	r3, #4
 8010a9c:	e0b1      	b.n	8010c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010aa2:	f003 0301 	and.w	r3, r3, #1
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d004      	beq.n	8010ab4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	2201      	movs	r2, #1
 8010aae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010ab0:	2301      	movs	r3, #1
 8010ab2:	e0a6      	b.n	8010c02 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	22c5      	movs	r2, #197	; 0xc5
 8010ab8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010aba:	68f8      	ldr	r0, [r7, #12]
 8010abc:	f7ff fd3c 	bl	8010538 <SDMMC_GetCommandResponse>
 8010ac0:	4603      	mov	r3, r0
 8010ac2:	461a      	mov	r2, r3
 8010ac4:	7afb      	ldrb	r3, [r7, #11]
 8010ac6:	4293      	cmp	r3, r2
 8010ac8:	d001      	beq.n	8010ace <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010aca:	2301      	movs	r3, #1
 8010acc:	e099      	b.n	8010c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010ace:	2100      	movs	r1, #0
 8010ad0:	68f8      	ldr	r0, [r7, #12]
 8010ad2:	f7ff fd3e 	bl	8010552 <SDMMC_GetResponse>
 8010ad6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010ad8:	697a      	ldr	r2, [r7, #20]
 8010ada:	4b4e      	ldr	r3, [pc, #312]	; (8010c14 <SDMMC_GetCmdResp1+0x1d8>)
 8010adc:	4013      	ands	r3, r2
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d101      	bne.n	8010ae6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	e08d      	b.n	8010c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010ae6:	697b      	ldr	r3, [r7, #20]
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	da02      	bge.n	8010af2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010aec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010af0:	e087      	b.n	8010c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010af2:	697b      	ldr	r3, [r7, #20]
 8010af4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d001      	beq.n	8010b00 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010afc:	2340      	movs	r3, #64	; 0x40
 8010afe:	e080      	b.n	8010c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010b00:	697b      	ldr	r3, [r7, #20]
 8010b02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d001      	beq.n	8010b0e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010b0a:	2380      	movs	r3, #128	; 0x80
 8010b0c:	e079      	b.n	8010c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010b0e:	697b      	ldr	r3, [r7, #20]
 8010b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d002      	beq.n	8010b1e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010b18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010b1c:	e071      	b.n	8010c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010b1e:	697b      	ldr	r3, [r7, #20]
 8010b20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d002      	beq.n	8010b2e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010b28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010b2c:	e069      	b.n	8010c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010b2e:	697b      	ldr	r3, [r7, #20]
 8010b30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d002      	beq.n	8010b3e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b3c:	e061      	b.n	8010c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010b3e:	697b      	ldr	r3, [r7, #20]
 8010b40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d002      	beq.n	8010b4e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010b48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010b4c:	e059      	b.n	8010c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010b4e:	697b      	ldr	r3, [r7, #20]
 8010b50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d002      	beq.n	8010b5e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010b58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010b5c:	e051      	b.n	8010c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010b5e:	697b      	ldr	r3, [r7, #20]
 8010b60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d002      	beq.n	8010b6e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010b68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010b6c:	e049      	b.n	8010c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010b6e:	697b      	ldr	r3, [r7, #20]
 8010b70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d002      	beq.n	8010b7e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010b78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010b7c:	e041      	b.n	8010c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010b7e:	697b      	ldr	r3, [r7, #20]
 8010b80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d002      	beq.n	8010b8e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8010b88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010b8c:	e039      	b.n	8010c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010b8e:	697b      	ldr	r3, [r7, #20]
 8010b90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d002      	beq.n	8010b9e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010b98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010b9c:	e031      	b.n	8010c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010b9e:	697b      	ldr	r3, [r7, #20]
 8010ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d002      	beq.n	8010bae <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010ba8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010bac:	e029      	b.n	8010c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010bae:	697b      	ldr	r3, [r7, #20]
 8010bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d002      	beq.n	8010bbe <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010bb8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010bbc:	e021      	b.n	8010c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010bbe:	697b      	ldr	r3, [r7, #20]
 8010bc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d002      	beq.n	8010bce <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010bc8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010bcc:	e019      	b.n	8010c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010bce:	697b      	ldr	r3, [r7, #20]
 8010bd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d002      	beq.n	8010bde <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010bd8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010bdc:	e011      	b.n	8010c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010bde:	697b      	ldr	r3, [r7, #20]
 8010be0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d002      	beq.n	8010bee <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010be8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010bec:	e009      	b.n	8010c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010bee:	697b      	ldr	r3, [r7, #20]
 8010bf0:	f003 0308 	and.w	r3, r3, #8
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d002      	beq.n	8010bfe <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010bf8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010bfc:	e001      	b.n	8010c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010bfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010c02:	4618      	mov	r0, r3
 8010c04:	3720      	adds	r7, #32
 8010c06:	46bd      	mov	sp, r7
 8010c08:	bd80      	pop	{r7, pc}
 8010c0a:	bf00      	nop
 8010c0c:	20000018 	.word	0x20000018
 8010c10:	10624dd3 	.word	0x10624dd3
 8010c14:	fdffe008 	.word	0xfdffe008

08010c18 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8010c18:	b480      	push	{r7}
 8010c1a:	b085      	sub	sp, #20
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010c20:	4b1f      	ldr	r3, [pc, #124]	; (8010ca0 <SDMMC_GetCmdResp2+0x88>)
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	4a1f      	ldr	r2, [pc, #124]	; (8010ca4 <SDMMC_GetCmdResp2+0x8c>)
 8010c26:	fba2 2303 	umull	r2, r3, r2, r3
 8010c2a:	0a5b      	lsrs	r3, r3, #9
 8010c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010c30:	fb02 f303 	mul.w	r3, r2, r3
 8010c34:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	1e5a      	subs	r2, r3, #1
 8010c3a:	60fa      	str	r2, [r7, #12]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d102      	bne.n	8010c46 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010c40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010c44:	e026      	b.n	8010c94 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c4a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010c4c:	68bb      	ldr	r3, [r7, #8]
 8010c4e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d0ef      	beq.n	8010c36 <SDMMC_GetCmdResp2+0x1e>
 8010c56:	68bb      	ldr	r3, [r7, #8]
 8010c58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d1ea      	bne.n	8010c36 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c64:	f003 0304 	and.w	r3, r3, #4
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d004      	beq.n	8010c76 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	2204      	movs	r2, #4
 8010c70:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010c72:	2304      	movs	r3, #4
 8010c74:	e00e      	b.n	8010c94 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c7a:	f003 0301 	and.w	r3, r3, #1
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d004      	beq.n	8010c8c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	2201      	movs	r2, #1
 8010c86:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010c88:	2301      	movs	r3, #1
 8010c8a:	e003      	b.n	8010c94 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	22c5      	movs	r2, #197	; 0xc5
 8010c90:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010c92:	2300      	movs	r3, #0
}
 8010c94:	4618      	mov	r0, r3
 8010c96:	3714      	adds	r7, #20
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c9e:	4770      	bx	lr
 8010ca0:	20000018 	.word	0x20000018
 8010ca4:	10624dd3 	.word	0x10624dd3

08010ca8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8010ca8:	b480      	push	{r7}
 8010caa:	b085      	sub	sp, #20
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010cb0:	4b1a      	ldr	r3, [pc, #104]	; (8010d1c <SDMMC_GetCmdResp3+0x74>)
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	4a1a      	ldr	r2, [pc, #104]	; (8010d20 <SDMMC_GetCmdResp3+0x78>)
 8010cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8010cba:	0a5b      	lsrs	r3, r3, #9
 8010cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8010cc0:	fb02 f303 	mul.w	r3, r2, r3
 8010cc4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	1e5a      	subs	r2, r3, #1
 8010cca:	60fa      	str	r2, [r7, #12]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d102      	bne.n	8010cd6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010cd0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010cd4:	e01b      	b.n	8010d0e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cda:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010cdc:	68bb      	ldr	r3, [r7, #8]
 8010cde:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d0ef      	beq.n	8010cc6 <SDMMC_GetCmdResp3+0x1e>
 8010ce6:	68bb      	ldr	r3, [r7, #8]
 8010ce8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d1ea      	bne.n	8010cc6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cf4:	f003 0304 	and.w	r3, r3, #4
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d004      	beq.n	8010d06 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	2204      	movs	r2, #4
 8010d00:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010d02:	2304      	movs	r3, #4
 8010d04:	e003      	b.n	8010d0e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	22c5      	movs	r2, #197	; 0xc5
 8010d0a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010d0c:	2300      	movs	r3, #0
}
 8010d0e:	4618      	mov	r0, r3
 8010d10:	3714      	adds	r7, #20
 8010d12:	46bd      	mov	sp, r7
 8010d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d18:	4770      	bx	lr
 8010d1a:	bf00      	nop
 8010d1c:	20000018 	.word	0x20000018
 8010d20:	10624dd3 	.word	0x10624dd3

08010d24 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010d24:	b580      	push	{r7, lr}
 8010d26:	b088      	sub	sp, #32
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	60f8      	str	r0, [r7, #12]
 8010d2c:	460b      	mov	r3, r1
 8010d2e:	607a      	str	r2, [r7, #4]
 8010d30:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010d32:	4b35      	ldr	r3, [pc, #212]	; (8010e08 <SDMMC_GetCmdResp6+0xe4>)
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	4a35      	ldr	r2, [pc, #212]	; (8010e0c <SDMMC_GetCmdResp6+0xe8>)
 8010d38:	fba2 2303 	umull	r2, r3, r2, r3
 8010d3c:	0a5b      	lsrs	r3, r3, #9
 8010d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010d42:	fb02 f303 	mul.w	r3, r2, r3
 8010d46:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8010d48:	69fb      	ldr	r3, [r7, #28]
 8010d4a:	1e5a      	subs	r2, r3, #1
 8010d4c:	61fa      	str	r2, [r7, #28]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d102      	bne.n	8010d58 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010d52:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010d56:	e052      	b.n	8010dfe <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d5c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010d5e:	69bb      	ldr	r3, [r7, #24]
 8010d60:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d0ef      	beq.n	8010d48 <SDMMC_GetCmdResp6+0x24>
 8010d68:	69bb      	ldr	r3, [r7, #24]
 8010d6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d1ea      	bne.n	8010d48 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d76:	f003 0304 	and.w	r3, r3, #4
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d004      	beq.n	8010d88 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	2204      	movs	r2, #4
 8010d82:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010d84:	2304      	movs	r3, #4
 8010d86:	e03a      	b.n	8010dfe <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d8c:	f003 0301 	and.w	r3, r3, #1
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d004      	beq.n	8010d9e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	2201      	movs	r2, #1
 8010d98:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010d9a:	2301      	movs	r3, #1
 8010d9c:	e02f      	b.n	8010dfe <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010d9e:	68f8      	ldr	r0, [r7, #12]
 8010da0:	f7ff fbca 	bl	8010538 <SDMMC_GetCommandResponse>
 8010da4:	4603      	mov	r3, r0
 8010da6:	461a      	mov	r2, r3
 8010da8:	7afb      	ldrb	r3, [r7, #11]
 8010daa:	4293      	cmp	r3, r2
 8010dac:	d001      	beq.n	8010db2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010dae:	2301      	movs	r3, #1
 8010db0:	e025      	b.n	8010dfe <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	22c5      	movs	r2, #197	; 0xc5
 8010db6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010db8:	2100      	movs	r1, #0
 8010dba:	68f8      	ldr	r0, [r7, #12]
 8010dbc:	f7ff fbc9 	bl	8010552 <SDMMC_GetResponse>
 8010dc0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8010dc2:	697b      	ldr	r3, [r7, #20]
 8010dc4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d106      	bne.n	8010dda <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8010dcc:	697b      	ldr	r3, [r7, #20]
 8010dce:	0c1b      	lsrs	r3, r3, #16
 8010dd0:	b29a      	uxth	r2, r3
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8010dd6:	2300      	movs	r3, #0
 8010dd8:	e011      	b.n	8010dfe <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010dda:	697b      	ldr	r3, [r7, #20]
 8010ddc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d002      	beq.n	8010dea <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010de4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010de8:	e009      	b.n	8010dfe <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010dea:	697b      	ldr	r3, [r7, #20]
 8010dec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d002      	beq.n	8010dfa <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010df4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010df8:	e001      	b.n	8010dfe <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010dfa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010dfe:	4618      	mov	r0, r3
 8010e00:	3720      	adds	r7, #32
 8010e02:	46bd      	mov	sp, r7
 8010e04:	bd80      	pop	{r7, pc}
 8010e06:	bf00      	nop
 8010e08:	20000018 	.word	0x20000018
 8010e0c:	10624dd3 	.word	0x10624dd3

08010e10 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8010e10:	b480      	push	{r7}
 8010e12:	b085      	sub	sp, #20
 8010e14:	af00      	add	r7, sp, #0
 8010e16:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010e18:	4b22      	ldr	r3, [pc, #136]	; (8010ea4 <SDMMC_GetCmdResp7+0x94>)
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	4a22      	ldr	r2, [pc, #136]	; (8010ea8 <SDMMC_GetCmdResp7+0x98>)
 8010e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8010e22:	0a5b      	lsrs	r3, r3, #9
 8010e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e28:	fb02 f303 	mul.w	r3, r2, r3
 8010e2c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	1e5a      	subs	r2, r3, #1
 8010e32:	60fa      	str	r2, [r7, #12]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d102      	bne.n	8010e3e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010e38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010e3c:	e02c      	b.n	8010e98 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e42:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010e44:	68bb      	ldr	r3, [r7, #8]
 8010e46:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d0ef      	beq.n	8010e2e <SDMMC_GetCmdResp7+0x1e>
 8010e4e:	68bb      	ldr	r3, [r7, #8]
 8010e50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d1ea      	bne.n	8010e2e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e5c:	f003 0304 	and.w	r3, r3, #4
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d004      	beq.n	8010e6e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	2204      	movs	r2, #4
 8010e68:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010e6a:	2304      	movs	r3, #4
 8010e6c:	e014      	b.n	8010e98 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e72:	f003 0301 	and.w	r3, r3, #1
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d004      	beq.n	8010e84 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	2201      	movs	r2, #1
 8010e7e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010e80:	2301      	movs	r3, #1
 8010e82:	e009      	b.n	8010e98 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d002      	beq.n	8010e96 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	2240      	movs	r2, #64	; 0x40
 8010e94:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010e96:	2300      	movs	r3, #0
  
}
 8010e98:	4618      	mov	r0, r3
 8010e9a:	3714      	adds	r7, #20
 8010e9c:	46bd      	mov	sp, r7
 8010e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea2:	4770      	bx	lr
 8010ea4:	20000018 	.word	0x20000018
 8010ea8:	10624dd3 	.word	0x10624dd3

08010eac <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8010eac:	b480      	push	{r7}
 8010eae:	b085      	sub	sp, #20
 8010eb0:	af00      	add	r7, sp, #0
 8010eb2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010eb4:	4b11      	ldr	r3, [pc, #68]	; (8010efc <SDMMC_GetCmdError+0x50>)
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	4a11      	ldr	r2, [pc, #68]	; (8010f00 <SDMMC_GetCmdError+0x54>)
 8010eba:	fba2 2303 	umull	r2, r3, r2, r3
 8010ebe:	0a5b      	lsrs	r3, r3, #9
 8010ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8010ec4:	fb02 f303 	mul.w	r3, r2, r3
 8010ec8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	1e5a      	subs	r2, r3, #1
 8010ece:	60fa      	str	r2, [r7, #12]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d102      	bne.n	8010eda <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010ed4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010ed8:	e009      	b.n	8010eee <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d0f1      	beq.n	8010eca <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	22c5      	movs	r2, #197	; 0xc5
 8010eea:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8010eec:	2300      	movs	r3, #0
}
 8010eee:	4618      	mov	r0, r3
 8010ef0:	3714      	adds	r7, #20
 8010ef2:	46bd      	mov	sp, r7
 8010ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef8:	4770      	bx	lr
 8010efa:	bf00      	nop
 8010efc:	20000018 	.word	0x20000018
 8010f00:	10624dd3 	.word	0x10624dd3

08010f04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010f04:	b084      	sub	sp, #16
 8010f06:	b580      	push	{r7, lr}
 8010f08:	b084      	sub	sp, #16
 8010f0a:	af00      	add	r7, sp, #0
 8010f0c:	6078      	str	r0, [r7, #4]
 8010f0e:	f107 001c 	add.w	r0, r7, #28
 8010f12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f18:	2b01      	cmp	r3, #1
 8010f1a:	d120      	bne.n	8010f5e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	68da      	ldr	r2, [r3, #12]
 8010f2c:	4b20      	ldr	r3, [pc, #128]	; (8010fb0 <USB_CoreInit+0xac>)
 8010f2e:	4013      	ands	r3, r2
 8010f30:	687a      	ldr	r2, [r7, #4]
 8010f32:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	68db      	ldr	r3, [r3, #12]
 8010f38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8010f40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f42:	2b01      	cmp	r3, #1
 8010f44:	d105      	bne.n	8010f52 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	68db      	ldr	r3, [r3, #12]
 8010f4a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8010f52:	6878      	ldr	r0, [r7, #4]
 8010f54:	f000 f9d8 	bl	8011308 <USB_CoreReset>
 8010f58:	4603      	mov	r3, r0
 8010f5a:	73fb      	strb	r3, [r7, #15]
 8010f5c:	e010      	b.n	8010f80 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	68db      	ldr	r3, [r3, #12]
 8010f62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8010f6a:	6878      	ldr	r0, [r7, #4]
 8010f6c:	f000 f9cc 	bl	8011308 <USB_CoreReset>
 8010f70:	4603      	mov	r3, r0
 8010f72:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f78:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8010f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f82:	2b01      	cmp	r3, #1
 8010f84:	d10b      	bne.n	8010f9e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	689b      	ldr	r3, [r3, #8]
 8010f8a:	f043 0206 	orr.w	r2, r3, #6
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	689b      	ldr	r3, [r3, #8]
 8010f96:	f043 0220 	orr.w	r2, r3, #32
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8010f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fa0:	4618      	mov	r0, r3
 8010fa2:	3710      	adds	r7, #16
 8010fa4:	46bd      	mov	sp, r7
 8010fa6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010faa:	b004      	add	sp, #16
 8010fac:	4770      	bx	lr
 8010fae:	bf00      	nop
 8010fb0:	ffbdffbf 	.word	0xffbdffbf

08010fb4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010fb4:	b480      	push	{r7}
 8010fb6:	b083      	sub	sp, #12
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	689b      	ldr	r3, [r3, #8]
 8010fc0:	f043 0201 	orr.w	r2, r3, #1
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010fc8:	2300      	movs	r3, #0
}
 8010fca:	4618      	mov	r0, r3
 8010fcc:	370c      	adds	r7, #12
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd4:	4770      	bx	lr

08010fd6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010fd6:	b480      	push	{r7}
 8010fd8:	b083      	sub	sp, #12
 8010fda:	af00      	add	r7, sp, #0
 8010fdc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	689b      	ldr	r3, [r3, #8]
 8010fe2:	f023 0201 	bic.w	r2, r3, #1
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010fea:	2300      	movs	r3, #0
}
 8010fec:	4618      	mov	r0, r3
 8010fee:	370c      	adds	r7, #12
 8010ff0:	46bd      	mov	sp, r7
 8010ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff6:	4770      	bx	lr

08010ff8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8010ff8:	b580      	push	{r7, lr}
 8010ffa:	b084      	sub	sp, #16
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	6078      	str	r0, [r7, #4]
 8011000:	460b      	mov	r3, r1
 8011002:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8011004:	2300      	movs	r3, #0
 8011006:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	68db      	ldr	r3, [r3, #12]
 801100c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011014:	78fb      	ldrb	r3, [r7, #3]
 8011016:	2b01      	cmp	r3, #1
 8011018:	d115      	bne.n	8011046 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	68db      	ldr	r3, [r3, #12]
 801101e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8011026:	2001      	movs	r0, #1
 8011028:	f7f3 fc22 	bl	8004870 <HAL_Delay>
      ms++;
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	3301      	adds	r3, #1
 8011030:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8011032:	6878      	ldr	r0, [r7, #4]
 8011034:	f000 f95a 	bl	80112ec <USB_GetMode>
 8011038:	4603      	mov	r3, r0
 801103a:	2b01      	cmp	r3, #1
 801103c:	d01e      	beq.n	801107c <USB_SetCurrentMode+0x84>
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	2b31      	cmp	r3, #49	; 0x31
 8011042:	d9f0      	bls.n	8011026 <USB_SetCurrentMode+0x2e>
 8011044:	e01a      	b.n	801107c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8011046:	78fb      	ldrb	r3, [r7, #3]
 8011048:	2b00      	cmp	r3, #0
 801104a:	d115      	bne.n	8011078 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	68db      	ldr	r3, [r3, #12]
 8011050:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8011058:	2001      	movs	r0, #1
 801105a:	f7f3 fc09 	bl	8004870 <HAL_Delay>
      ms++;
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	3301      	adds	r3, #1
 8011062:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8011064:	6878      	ldr	r0, [r7, #4]
 8011066:	f000 f941 	bl	80112ec <USB_GetMode>
 801106a:	4603      	mov	r3, r0
 801106c:	2b00      	cmp	r3, #0
 801106e:	d005      	beq.n	801107c <USB_SetCurrentMode+0x84>
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	2b31      	cmp	r3, #49	; 0x31
 8011074:	d9f0      	bls.n	8011058 <USB_SetCurrentMode+0x60>
 8011076:	e001      	b.n	801107c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8011078:	2301      	movs	r3, #1
 801107a:	e005      	b.n	8011088 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	2b32      	cmp	r3, #50	; 0x32
 8011080:	d101      	bne.n	8011086 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8011082:	2301      	movs	r3, #1
 8011084:	e000      	b.n	8011088 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8011086:	2300      	movs	r3, #0
}
 8011088:	4618      	mov	r0, r3
 801108a:	3710      	adds	r7, #16
 801108c:	46bd      	mov	sp, r7
 801108e:	bd80      	pop	{r7, pc}

08011090 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011090:	b480      	push	{r7}
 8011092:	b085      	sub	sp, #20
 8011094:	af00      	add	r7, sp, #0
 8011096:	6078      	str	r0, [r7, #4]
 8011098:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801109a:	2300      	movs	r3, #0
 801109c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	3301      	adds	r3, #1
 80110a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	4a13      	ldr	r2, [pc, #76]	; (80110f4 <USB_FlushTxFifo+0x64>)
 80110a8:	4293      	cmp	r3, r2
 80110aa:	d901      	bls.n	80110b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80110ac:	2303      	movs	r3, #3
 80110ae:	e01b      	b.n	80110e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	691b      	ldr	r3, [r3, #16]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	daf2      	bge.n	801109e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80110b8:	2300      	movs	r3, #0
 80110ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80110bc:	683b      	ldr	r3, [r7, #0]
 80110be:	019b      	lsls	r3, r3, #6
 80110c0:	f043 0220 	orr.w	r2, r3, #32
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	3301      	adds	r3, #1
 80110cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	4a08      	ldr	r2, [pc, #32]	; (80110f4 <USB_FlushTxFifo+0x64>)
 80110d2:	4293      	cmp	r3, r2
 80110d4:	d901      	bls.n	80110da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80110d6:	2303      	movs	r3, #3
 80110d8:	e006      	b.n	80110e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	691b      	ldr	r3, [r3, #16]
 80110de:	f003 0320 	and.w	r3, r3, #32
 80110e2:	2b20      	cmp	r3, #32
 80110e4:	d0f0      	beq.n	80110c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80110e6:	2300      	movs	r3, #0
}
 80110e8:	4618      	mov	r0, r3
 80110ea:	3714      	adds	r7, #20
 80110ec:	46bd      	mov	sp, r7
 80110ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f2:	4770      	bx	lr
 80110f4:	00030d40 	.word	0x00030d40

080110f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80110f8:	b480      	push	{r7}
 80110fa:	b085      	sub	sp, #20
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011100:	2300      	movs	r3, #0
 8011102:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	3301      	adds	r3, #1
 8011108:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	4a11      	ldr	r2, [pc, #68]	; (8011154 <USB_FlushRxFifo+0x5c>)
 801110e:	4293      	cmp	r3, r2
 8011110:	d901      	bls.n	8011116 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8011112:	2303      	movs	r3, #3
 8011114:	e018      	b.n	8011148 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	691b      	ldr	r3, [r3, #16]
 801111a:	2b00      	cmp	r3, #0
 801111c:	daf2      	bge.n	8011104 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801111e:	2300      	movs	r3, #0
 8011120:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	2210      	movs	r2, #16
 8011126:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	3301      	adds	r3, #1
 801112c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	4a08      	ldr	r2, [pc, #32]	; (8011154 <USB_FlushRxFifo+0x5c>)
 8011132:	4293      	cmp	r3, r2
 8011134:	d901      	bls.n	801113a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8011136:	2303      	movs	r3, #3
 8011138:	e006      	b.n	8011148 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	691b      	ldr	r3, [r3, #16]
 801113e:	f003 0310 	and.w	r3, r3, #16
 8011142:	2b10      	cmp	r3, #16
 8011144:	d0f0      	beq.n	8011128 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8011146:	2300      	movs	r3, #0
}
 8011148:	4618      	mov	r0, r3
 801114a:	3714      	adds	r7, #20
 801114c:	46bd      	mov	sp, r7
 801114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011152:	4770      	bx	lr
 8011154:	00030d40 	.word	0x00030d40

08011158 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8011158:	b480      	push	{r7}
 801115a:	b089      	sub	sp, #36	; 0x24
 801115c:	af00      	add	r7, sp, #0
 801115e:	60f8      	str	r0, [r7, #12]
 8011160:	60b9      	str	r1, [r7, #8]
 8011162:	4611      	mov	r1, r2
 8011164:	461a      	mov	r2, r3
 8011166:	460b      	mov	r3, r1
 8011168:	71fb      	strb	r3, [r7, #7]
 801116a:	4613      	mov	r3, r2
 801116c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8011172:	68bb      	ldr	r3, [r7, #8]
 8011174:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8011176:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801117a:	2b00      	cmp	r3, #0
 801117c:	d123      	bne.n	80111c6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801117e:	88bb      	ldrh	r3, [r7, #4]
 8011180:	3303      	adds	r3, #3
 8011182:	089b      	lsrs	r3, r3, #2
 8011184:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8011186:	2300      	movs	r3, #0
 8011188:	61bb      	str	r3, [r7, #24]
 801118a:	e018      	b.n	80111be <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801118c:	79fb      	ldrb	r3, [r7, #7]
 801118e:	031a      	lsls	r2, r3, #12
 8011190:	697b      	ldr	r3, [r7, #20]
 8011192:	4413      	add	r3, r2
 8011194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011198:	461a      	mov	r2, r3
 801119a:	69fb      	ldr	r3, [r7, #28]
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	6013      	str	r3, [r2, #0]
      pSrc++;
 80111a0:	69fb      	ldr	r3, [r7, #28]
 80111a2:	3301      	adds	r3, #1
 80111a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80111a6:	69fb      	ldr	r3, [r7, #28]
 80111a8:	3301      	adds	r3, #1
 80111aa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80111ac:	69fb      	ldr	r3, [r7, #28]
 80111ae:	3301      	adds	r3, #1
 80111b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80111b2:	69fb      	ldr	r3, [r7, #28]
 80111b4:	3301      	adds	r3, #1
 80111b6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80111b8:	69bb      	ldr	r3, [r7, #24]
 80111ba:	3301      	adds	r3, #1
 80111bc:	61bb      	str	r3, [r7, #24]
 80111be:	69ba      	ldr	r2, [r7, #24]
 80111c0:	693b      	ldr	r3, [r7, #16]
 80111c2:	429a      	cmp	r2, r3
 80111c4:	d3e2      	bcc.n	801118c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80111c6:	2300      	movs	r3, #0
}
 80111c8:	4618      	mov	r0, r3
 80111ca:	3724      	adds	r7, #36	; 0x24
 80111cc:	46bd      	mov	sp, r7
 80111ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d2:	4770      	bx	lr

080111d4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80111d4:	b480      	push	{r7}
 80111d6:	b08b      	sub	sp, #44	; 0x2c
 80111d8:	af00      	add	r7, sp, #0
 80111da:	60f8      	str	r0, [r7, #12]
 80111dc:	60b9      	str	r1, [r7, #8]
 80111de:	4613      	mov	r3, r2
 80111e0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80111e6:	68bb      	ldr	r3, [r7, #8]
 80111e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80111ea:	88fb      	ldrh	r3, [r7, #6]
 80111ec:	089b      	lsrs	r3, r3, #2
 80111ee:	b29b      	uxth	r3, r3
 80111f0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80111f2:	88fb      	ldrh	r3, [r7, #6]
 80111f4:	f003 0303 	and.w	r3, r3, #3
 80111f8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80111fa:	2300      	movs	r3, #0
 80111fc:	623b      	str	r3, [r7, #32]
 80111fe:	e014      	b.n	801122a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8011200:	69bb      	ldr	r3, [r7, #24]
 8011202:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011206:	681a      	ldr	r2, [r3, #0]
 8011208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801120a:	601a      	str	r2, [r3, #0]
    pDest++;
 801120c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801120e:	3301      	adds	r3, #1
 8011210:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8011212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011214:	3301      	adds	r3, #1
 8011216:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8011218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801121a:	3301      	adds	r3, #1
 801121c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801121e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011220:	3301      	adds	r3, #1
 8011222:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8011224:	6a3b      	ldr	r3, [r7, #32]
 8011226:	3301      	adds	r3, #1
 8011228:	623b      	str	r3, [r7, #32]
 801122a:	6a3a      	ldr	r2, [r7, #32]
 801122c:	697b      	ldr	r3, [r7, #20]
 801122e:	429a      	cmp	r2, r3
 8011230:	d3e6      	bcc.n	8011200 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8011232:	8bfb      	ldrh	r3, [r7, #30]
 8011234:	2b00      	cmp	r3, #0
 8011236:	d01e      	beq.n	8011276 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8011238:	2300      	movs	r3, #0
 801123a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801123c:	69bb      	ldr	r3, [r7, #24]
 801123e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011242:	461a      	mov	r2, r3
 8011244:	f107 0310 	add.w	r3, r7, #16
 8011248:	6812      	ldr	r2, [r2, #0]
 801124a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801124c:	693a      	ldr	r2, [r7, #16]
 801124e:	6a3b      	ldr	r3, [r7, #32]
 8011250:	b2db      	uxtb	r3, r3
 8011252:	00db      	lsls	r3, r3, #3
 8011254:	fa22 f303 	lsr.w	r3, r2, r3
 8011258:	b2da      	uxtb	r2, r3
 801125a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801125c:	701a      	strb	r2, [r3, #0]
      i++;
 801125e:	6a3b      	ldr	r3, [r7, #32]
 8011260:	3301      	adds	r3, #1
 8011262:	623b      	str	r3, [r7, #32]
      pDest++;
 8011264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011266:	3301      	adds	r3, #1
 8011268:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801126a:	8bfb      	ldrh	r3, [r7, #30]
 801126c:	3b01      	subs	r3, #1
 801126e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8011270:	8bfb      	ldrh	r3, [r7, #30]
 8011272:	2b00      	cmp	r3, #0
 8011274:	d1ea      	bne.n	801124c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8011276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011278:	4618      	mov	r0, r3
 801127a:	372c      	adds	r7, #44	; 0x2c
 801127c:	46bd      	mov	sp, r7
 801127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011282:	4770      	bx	lr

08011284 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8011284:	b480      	push	{r7}
 8011286:	b085      	sub	sp, #20
 8011288:	af00      	add	r7, sp, #0
 801128a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	695b      	ldr	r3, [r3, #20]
 8011290:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	699b      	ldr	r3, [r3, #24]
 8011296:	68fa      	ldr	r2, [r7, #12]
 8011298:	4013      	ands	r3, r2
 801129a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801129c:	68fb      	ldr	r3, [r7, #12]
}
 801129e:	4618      	mov	r0, r3
 80112a0:	3714      	adds	r7, #20
 80112a2:	46bd      	mov	sp, r7
 80112a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a8:	4770      	bx	lr

080112aa <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80112aa:	b480      	push	{r7}
 80112ac:	b085      	sub	sp, #20
 80112ae:	af00      	add	r7, sp, #0
 80112b0:	6078      	str	r0, [r7, #4]
 80112b2:	460b      	mov	r3, r1
 80112b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80112ba:	78fb      	ldrb	r3, [r7, #3]
 80112bc:	015a      	lsls	r2, r3, #5
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	4413      	add	r3, r2
 80112c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80112c6:	689b      	ldr	r3, [r3, #8]
 80112c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80112ca:	78fb      	ldrb	r3, [r7, #3]
 80112cc:	015a      	lsls	r2, r3, #5
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	4413      	add	r3, r2
 80112d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80112d6:	68db      	ldr	r3, [r3, #12]
 80112d8:	68ba      	ldr	r2, [r7, #8]
 80112da:	4013      	ands	r3, r2
 80112dc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80112de:	68bb      	ldr	r3, [r7, #8]
}
 80112e0:	4618      	mov	r0, r3
 80112e2:	3714      	adds	r7, #20
 80112e4:	46bd      	mov	sp, r7
 80112e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ea:	4770      	bx	lr

080112ec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80112ec:	b480      	push	{r7}
 80112ee:	b083      	sub	sp, #12
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	695b      	ldr	r3, [r3, #20]
 80112f8:	f003 0301 	and.w	r3, r3, #1
}
 80112fc:	4618      	mov	r0, r3
 80112fe:	370c      	adds	r7, #12
 8011300:	46bd      	mov	sp, r7
 8011302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011306:	4770      	bx	lr

08011308 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8011308:	b480      	push	{r7}
 801130a:	b085      	sub	sp, #20
 801130c:	af00      	add	r7, sp, #0
 801130e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011310:	2300      	movs	r3, #0
 8011312:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	3301      	adds	r3, #1
 8011318:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	4a13      	ldr	r2, [pc, #76]	; (801136c <USB_CoreReset+0x64>)
 801131e:	4293      	cmp	r3, r2
 8011320:	d901      	bls.n	8011326 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8011322:	2303      	movs	r3, #3
 8011324:	e01b      	b.n	801135e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	691b      	ldr	r3, [r3, #16]
 801132a:	2b00      	cmp	r3, #0
 801132c:	daf2      	bge.n	8011314 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801132e:	2300      	movs	r3, #0
 8011330:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	691b      	ldr	r3, [r3, #16]
 8011336:	f043 0201 	orr.w	r2, r3, #1
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	3301      	adds	r3, #1
 8011342:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	4a09      	ldr	r2, [pc, #36]	; (801136c <USB_CoreReset+0x64>)
 8011348:	4293      	cmp	r3, r2
 801134a:	d901      	bls.n	8011350 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801134c:	2303      	movs	r3, #3
 801134e:	e006      	b.n	801135e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	691b      	ldr	r3, [r3, #16]
 8011354:	f003 0301 	and.w	r3, r3, #1
 8011358:	2b01      	cmp	r3, #1
 801135a:	d0f0      	beq.n	801133e <USB_CoreReset+0x36>

  return HAL_OK;
 801135c:	2300      	movs	r3, #0
}
 801135e:	4618      	mov	r0, r3
 8011360:	3714      	adds	r7, #20
 8011362:	46bd      	mov	sp, r7
 8011364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011368:	4770      	bx	lr
 801136a:	bf00      	nop
 801136c:	00030d40 	.word	0x00030d40

08011370 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011370:	b084      	sub	sp, #16
 8011372:	b580      	push	{r7, lr}
 8011374:	b086      	sub	sp, #24
 8011376:	af00      	add	r7, sp, #0
 8011378:	6078      	str	r0, [r7, #4]
 801137a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801137e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8011382:	2300      	movs	r3, #0
 8011384:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011390:	461a      	mov	r2, r3
 8011392:	2300      	movs	r3, #0
 8011394:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801139a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80113a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d018      	beq.n	80113e0 <USB_HostInit+0x70>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80113ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113b0:	2b01      	cmp	r3, #1
 80113b2:	d10a      	bne.n	80113ca <USB_HostInit+0x5a>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	68fa      	ldr	r2, [r7, #12]
 80113be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80113c2:	f043 0304 	orr.w	r3, r3, #4
 80113c6:	6013      	str	r3, [r2, #0]
 80113c8:	e014      	b.n	80113f4 <USB_HostInit+0x84>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	68fa      	ldr	r2, [r7, #12]
 80113d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80113d8:	f023 0304 	bic.w	r3, r3, #4
 80113dc:	6013      	str	r3, [r2, #0]
 80113de:	e009      	b.n	80113f4 <USB_HostInit+0x84>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	68fa      	ldr	r2, [r7, #12]
 80113ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80113ee:	f023 0304 	bic.w	r3, r3, #4
 80113f2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80113f4:	2110      	movs	r1, #16
 80113f6:	6878      	ldr	r0, [r7, #4]
 80113f8:	f7ff fe4a 	bl	8011090 <USB_FlushTxFifo>
 80113fc:	4603      	mov	r3, r0
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d001      	beq.n	8011406 <USB_HostInit+0x96>
  {
    ret = HAL_ERROR;
 8011402:	2301      	movs	r3, #1
 8011404:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011406:	6878      	ldr	r0, [r7, #4]
 8011408:	f7ff fe76 	bl	80110f8 <USB_FlushRxFifo>
 801140c:	4603      	mov	r3, r0
 801140e:	2b00      	cmp	r3, #0
 8011410:	d001      	beq.n	8011416 <USB_HostInit+0xa6>
  {
    ret = HAL_ERROR;
 8011412:	2301      	movs	r3, #1
 8011414:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8011416:	2300      	movs	r3, #0
 8011418:	613b      	str	r3, [r7, #16]
 801141a:	e015      	b.n	8011448 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 801141c:	693b      	ldr	r3, [r7, #16]
 801141e:	015a      	lsls	r2, r3, #5
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	4413      	add	r3, r2
 8011424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011428:	461a      	mov	r2, r3
 801142a:	f04f 33ff 	mov.w	r3, #4294967295
 801142e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8011430:	693b      	ldr	r3, [r7, #16]
 8011432:	015a      	lsls	r2, r3, #5
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	4413      	add	r3, r2
 8011438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801143c:	461a      	mov	r2, r3
 801143e:	2300      	movs	r3, #0
 8011440:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8011442:	693b      	ldr	r3, [r7, #16]
 8011444:	3301      	adds	r3, #1
 8011446:	613b      	str	r3, [r7, #16]
 8011448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801144a:	693a      	ldr	r2, [r7, #16]
 801144c:	429a      	cmp	r2, r3
 801144e:	d3e5      	bcc.n	801141c <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	2200      	movs	r2, #0
 8011454:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	f04f 32ff 	mov.w	r2, #4294967295
 801145c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011466:	2b00      	cmp	r3, #0
 8011468:	d00b      	beq.n	8011482 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011470:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	4a13      	ldr	r2, [pc, #76]	; (80114c4 <USB_HostInit+0x154>)
 8011476:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	4a13      	ldr	r2, [pc, #76]	; (80114c8 <USB_HostInit+0x158>)
 801147c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8011480:	e009      	b.n	8011496 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	2280      	movs	r2, #128	; 0x80
 8011486:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	4a10      	ldr	r2, [pc, #64]	; (80114cc <USB_HostInit+0x15c>)
 801148c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	4a0f      	ldr	r2, [pc, #60]	; (80114d0 <USB_HostInit+0x160>)
 8011492:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8011496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011498:	2b00      	cmp	r3, #0
 801149a:	d105      	bne.n	80114a8 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	699b      	ldr	r3, [r3, #24]
 80114a0:	f043 0210 	orr.w	r2, r3, #16
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	699a      	ldr	r2, [r3, #24]
 80114ac:	4b09      	ldr	r3, [pc, #36]	; (80114d4 <USB_HostInit+0x164>)
 80114ae:	4313      	orrs	r3, r2
 80114b0:	687a      	ldr	r2, [r7, #4]
 80114b2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80114b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80114b6:	4618      	mov	r0, r3
 80114b8:	3718      	adds	r7, #24
 80114ba:	46bd      	mov	sp, r7
 80114bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80114c0:	b004      	add	sp, #16
 80114c2:	4770      	bx	lr
 80114c4:	01000200 	.word	0x01000200
 80114c8:	00e00300 	.word	0x00e00300
 80114cc:	00600080 	.word	0x00600080
 80114d0:	004000e0 	.word	0x004000e0
 80114d4:	a3200008 	.word	0xa3200008

080114d8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80114d8:	b480      	push	{r7}
 80114da:	b085      	sub	sp, #20
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]
 80114e0:	460b      	mov	r3, r1
 80114e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	68fa      	ldr	r2, [r7, #12]
 80114f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80114f6:	f023 0303 	bic.w	r3, r3, #3
 80114fa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011502:	681a      	ldr	r2, [r3, #0]
 8011504:	78fb      	ldrb	r3, [r7, #3]
 8011506:	f003 0303 	and.w	r3, r3, #3
 801150a:	68f9      	ldr	r1, [r7, #12]
 801150c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011510:	4313      	orrs	r3, r2
 8011512:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8011514:	78fb      	ldrb	r3, [r7, #3]
 8011516:	2b01      	cmp	r3, #1
 8011518:	d107      	bne.n	801152a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011520:	461a      	mov	r2, r3
 8011522:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8011526:	6053      	str	r3, [r2, #4]
 8011528:	e009      	b.n	801153e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 801152a:	78fb      	ldrb	r3, [r7, #3]
 801152c:	2b02      	cmp	r3, #2
 801152e:	d106      	bne.n	801153e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011536:	461a      	mov	r2, r3
 8011538:	f241 7370 	movw	r3, #6000	; 0x1770
 801153c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 801153e:	2300      	movs	r3, #0
}
 8011540:	4618      	mov	r0, r3
 8011542:	3714      	adds	r7, #20
 8011544:	46bd      	mov	sp, r7
 8011546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801154a:	4770      	bx	lr

0801154c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 801154c:	b580      	push	{r7, lr}
 801154e:	b084      	sub	sp, #16
 8011550:	af00      	add	r7, sp, #0
 8011552:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8011558:	2300      	movs	r3, #0
 801155a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8011566:	68bb      	ldr	r3, [r7, #8]
 8011568:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 801156c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 801156e:	68bb      	ldr	r3, [r7, #8]
 8011570:	68fa      	ldr	r2, [r7, #12]
 8011572:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8011576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801157a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 801157c:	2064      	movs	r0, #100	; 0x64
 801157e:	f7f3 f977 	bl	8004870 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8011582:	68bb      	ldr	r3, [r7, #8]
 8011584:	68fa      	ldr	r2, [r7, #12]
 8011586:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 801158a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801158e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8011590:	200a      	movs	r0, #10
 8011592:	f7f3 f96d 	bl	8004870 <HAL_Delay>

  return HAL_OK;
 8011596:	2300      	movs	r3, #0
}
 8011598:	4618      	mov	r0, r3
 801159a:	3710      	adds	r7, #16
 801159c:	46bd      	mov	sp, r7
 801159e:	bd80      	pop	{r7, pc}

080115a0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80115a0:	b480      	push	{r7}
 80115a2:	b085      	sub	sp, #20
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	6078      	str	r0, [r7, #4]
 80115a8:	460b      	mov	r3, r1
 80115aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80115b0:	2300      	movs	r3, #0
 80115b2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80115be:	68bb      	ldr	r3, [r7, #8]
 80115c0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80115c4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80115c6:	68bb      	ldr	r3, [r7, #8]
 80115c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d109      	bne.n	80115e4 <USB_DriveVbus+0x44>
 80115d0:	78fb      	ldrb	r3, [r7, #3]
 80115d2:	2b01      	cmp	r3, #1
 80115d4:	d106      	bne.n	80115e4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80115d6:	68bb      	ldr	r3, [r7, #8]
 80115d8:	68fa      	ldr	r2, [r7, #12]
 80115da:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80115de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80115e2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80115e4:	68bb      	ldr	r3, [r7, #8]
 80115e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80115ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80115ee:	d109      	bne.n	8011604 <USB_DriveVbus+0x64>
 80115f0:	78fb      	ldrb	r3, [r7, #3]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d106      	bne.n	8011604 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80115f6:	68bb      	ldr	r3, [r7, #8]
 80115f8:	68fa      	ldr	r2, [r7, #12]
 80115fa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80115fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011602:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8011604:	2300      	movs	r3, #0
}
 8011606:	4618      	mov	r0, r3
 8011608:	3714      	adds	r7, #20
 801160a:	46bd      	mov	sp, r7
 801160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011610:	4770      	bx	lr

08011612 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8011612:	b480      	push	{r7}
 8011614:	b085      	sub	sp, #20
 8011616:	af00      	add	r7, sp, #0
 8011618:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 801161e:	2300      	movs	r3, #0
 8011620:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 801162c:	68bb      	ldr	r3, [r7, #8]
 801162e:	0c5b      	lsrs	r3, r3, #17
 8011630:	f003 0303 	and.w	r3, r3, #3
}
 8011634:	4618      	mov	r0, r3
 8011636:	3714      	adds	r7, #20
 8011638:	46bd      	mov	sp, r7
 801163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801163e:	4770      	bx	lr

08011640 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8011640:	b480      	push	{r7}
 8011642:	b085      	sub	sp, #20
 8011644:	af00      	add	r7, sp, #0
 8011646:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011652:	689b      	ldr	r3, [r3, #8]
 8011654:	b29b      	uxth	r3, r3
}
 8011656:	4618      	mov	r0, r3
 8011658:	3714      	adds	r7, #20
 801165a:	46bd      	mov	sp, r7
 801165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011660:	4770      	bx	lr
	...

08011664 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8011664:	b580      	push	{r7, lr}
 8011666:	b088      	sub	sp, #32
 8011668:	af00      	add	r7, sp, #0
 801166a:	6078      	str	r0, [r7, #4]
 801166c:	4608      	mov	r0, r1
 801166e:	4611      	mov	r1, r2
 8011670:	461a      	mov	r2, r3
 8011672:	4603      	mov	r3, r0
 8011674:	70fb      	strb	r3, [r7, #3]
 8011676:	460b      	mov	r3, r1
 8011678:	70bb      	strb	r3, [r7, #2]
 801167a:	4613      	mov	r3, r2
 801167c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 801167e:	2300      	movs	r3, #0
 8011680:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8011686:	78fb      	ldrb	r3, [r7, #3]
 8011688:	015a      	lsls	r2, r3, #5
 801168a:	693b      	ldr	r3, [r7, #16]
 801168c:	4413      	add	r3, r2
 801168e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011692:	461a      	mov	r2, r3
 8011694:	f04f 33ff 	mov.w	r3, #4294967295
 8011698:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 801169a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801169e:	2b03      	cmp	r3, #3
 80116a0:	d87e      	bhi.n	80117a0 <USB_HC_Init+0x13c>
 80116a2:	a201      	add	r2, pc, #4	; (adr r2, 80116a8 <USB_HC_Init+0x44>)
 80116a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116a8:	080116b9 	.word	0x080116b9
 80116ac:	08011763 	.word	0x08011763
 80116b0:	080116b9 	.word	0x080116b9
 80116b4:	08011725 	.word	0x08011725
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80116b8:	78fb      	ldrb	r3, [r7, #3]
 80116ba:	015a      	lsls	r2, r3, #5
 80116bc:	693b      	ldr	r3, [r7, #16]
 80116be:	4413      	add	r3, r2
 80116c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80116c4:	461a      	mov	r2, r3
 80116c6:	f240 439d 	movw	r3, #1181	; 0x49d
 80116ca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80116cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	da10      	bge.n	80116f6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80116d4:	78fb      	ldrb	r3, [r7, #3]
 80116d6:	015a      	lsls	r2, r3, #5
 80116d8:	693b      	ldr	r3, [r7, #16]
 80116da:	4413      	add	r3, r2
 80116dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80116e0:	68db      	ldr	r3, [r3, #12]
 80116e2:	78fa      	ldrb	r2, [r7, #3]
 80116e4:	0151      	lsls	r1, r2, #5
 80116e6:	693a      	ldr	r2, [r7, #16]
 80116e8:	440a      	add	r2, r1
 80116ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80116ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80116f2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80116f4:	e057      	b.n	80117a6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80116fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d051      	beq.n	80117a6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8011702:	78fb      	ldrb	r3, [r7, #3]
 8011704:	015a      	lsls	r2, r3, #5
 8011706:	693b      	ldr	r3, [r7, #16]
 8011708:	4413      	add	r3, r2
 801170a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801170e:	68db      	ldr	r3, [r3, #12]
 8011710:	78fa      	ldrb	r2, [r7, #3]
 8011712:	0151      	lsls	r1, r2, #5
 8011714:	693a      	ldr	r2, [r7, #16]
 8011716:	440a      	add	r2, r1
 8011718:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801171c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8011720:	60d3      	str	r3, [r2, #12]
      break;
 8011722:	e040      	b.n	80117a6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8011724:	78fb      	ldrb	r3, [r7, #3]
 8011726:	015a      	lsls	r2, r3, #5
 8011728:	693b      	ldr	r3, [r7, #16]
 801172a:	4413      	add	r3, r2
 801172c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011730:	461a      	mov	r2, r3
 8011732:	f240 639d 	movw	r3, #1693	; 0x69d
 8011736:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8011738:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801173c:	2b00      	cmp	r3, #0
 801173e:	da34      	bge.n	80117aa <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8011740:	78fb      	ldrb	r3, [r7, #3]
 8011742:	015a      	lsls	r2, r3, #5
 8011744:	693b      	ldr	r3, [r7, #16]
 8011746:	4413      	add	r3, r2
 8011748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801174c:	68db      	ldr	r3, [r3, #12]
 801174e:	78fa      	ldrb	r2, [r7, #3]
 8011750:	0151      	lsls	r1, r2, #5
 8011752:	693a      	ldr	r2, [r7, #16]
 8011754:	440a      	add	r2, r1
 8011756:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801175a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801175e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8011760:	e023      	b.n	80117aa <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8011762:	78fb      	ldrb	r3, [r7, #3]
 8011764:	015a      	lsls	r2, r3, #5
 8011766:	693b      	ldr	r3, [r7, #16]
 8011768:	4413      	add	r3, r2
 801176a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801176e:	461a      	mov	r2, r3
 8011770:	f240 2325 	movw	r3, #549	; 0x225
 8011774:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8011776:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801177a:	2b00      	cmp	r3, #0
 801177c:	da17      	bge.n	80117ae <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 801177e:	78fb      	ldrb	r3, [r7, #3]
 8011780:	015a      	lsls	r2, r3, #5
 8011782:	693b      	ldr	r3, [r7, #16]
 8011784:	4413      	add	r3, r2
 8011786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801178a:	68db      	ldr	r3, [r3, #12]
 801178c:	78fa      	ldrb	r2, [r7, #3]
 801178e:	0151      	lsls	r1, r2, #5
 8011790:	693a      	ldr	r2, [r7, #16]
 8011792:	440a      	add	r2, r1
 8011794:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011798:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 801179c:	60d3      	str	r3, [r2, #12]
      }
      break;
 801179e:	e006      	b.n	80117ae <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80117a0:	2301      	movs	r3, #1
 80117a2:	77fb      	strb	r3, [r7, #31]
      break;
 80117a4:	e004      	b.n	80117b0 <USB_HC_Init+0x14c>
      break;
 80117a6:	bf00      	nop
 80117a8:	e002      	b.n	80117b0 <USB_HC_Init+0x14c>
      break;
 80117aa:	bf00      	nop
 80117ac:	e000      	b.n	80117b0 <USB_HC_Init+0x14c>
      break;
 80117ae:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80117b0:	78fb      	ldrb	r3, [r7, #3]
 80117b2:	015a      	lsls	r2, r3, #5
 80117b4:	693b      	ldr	r3, [r7, #16]
 80117b6:	4413      	add	r3, r2
 80117b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80117bc:	68db      	ldr	r3, [r3, #12]
 80117be:	78fa      	ldrb	r2, [r7, #3]
 80117c0:	0151      	lsls	r1, r2, #5
 80117c2:	693a      	ldr	r2, [r7, #16]
 80117c4:	440a      	add	r2, r1
 80117c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80117ca:	f043 0302 	orr.w	r3, r3, #2
 80117ce:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80117d0:	693b      	ldr	r3, [r7, #16]
 80117d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80117d6:	699a      	ldr	r2, [r3, #24]
 80117d8:	78fb      	ldrb	r3, [r7, #3]
 80117da:	f003 030f 	and.w	r3, r3, #15
 80117de:	2101      	movs	r1, #1
 80117e0:	fa01 f303 	lsl.w	r3, r1, r3
 80117e4:	6939      	ldr	r1, [r7, #16]
 80117e6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80117ea:	4313      	orrs	r3, r2
 80117ec:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	699b      	ldr	r3, [r3, #24]
 80117f2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80117fa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	da03      	bge.n	801180a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8011802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011806:	61bb      	str	r3, [r7, #24]
 8011808:	e001      	b.n	801180e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 801180a:	2300      	movs	r3, #0
 801180c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 801180e:	6878      	ldr	r0, [r7, #4]
 8011810:	f7ff feff 	bl	8011612 <USB_GetHostSpeed>
 8011814:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8011816:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801181a:	2b02      	cmp	r3, #2
 801181c:	d106      	bne.n	801182c <USB_HC_Init+0x1c8>
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	2b02      	cmp	r3, #2
 8011822:	d003      	beq.n	801182c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8011824:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011828:	617b      	str	r3, [r7, #20]
 801182a:	e001      	b.n	8011830 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 801182c:	2300      	movs	r3, #0
 801182e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8011830:	787b      	ldrb	r3, [r7, #1]
 8011832:	059b      	lsls	r3, r3, #22
 8011834:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8011838:	78bb      	ldrb	r3, [r7, #2]
 801183a:	02db      	lsls	r3, r3, #11
 801183c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8011840:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8011842:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011846:	049b      	lsls	r3, r3, #18
 8011848:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 801184c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 801184e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011850:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8011854:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8011856:	69bb      	ldr	r3, [r7, #24]
 8011858:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 801185a:	78fb      	ldrb	r3, [r7, #3]
 801185c:	0159      	lsls	r1, r3, #5
 801185e:	693b      	ldr	r3, [r7, #16]
 8011860:	440b      	add	r3, r1
 8011862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011866:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8011868:	697b      	ldr	r3, [r7, #20]
 801186a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 801186c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 801186e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011872:	2b03      	cmp	r3, #3
 8011874:	d003      	beq.n	801187e <USB_HC_Init+0x21a>
 8011876:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801187a:	2b01      	cmp	r3, #1
 801187c:	d10f      	bne.n	801189e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 801187e:	78fb      	ldrb	r3, [r7, #3]
 8011880:	015a      	lsls	r2, r3, #5
 8011882:	693b      	ldr	r3, [r7, #16]
 8011884:	4413      	add	r3, r2
 8011886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	78fa      	ldrb	r2, [r7, #3]
 801188e:	0151      	lsls	r1, r2, #5
 8011890:	693a      	ldr	r2, [r7, #16]
 8011892:	440a      	add	r2, r1
 8011894:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011898:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801189c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 801189e:	7ffb      	ldrb	r3, [r7, #31]
}
 80118a0:	4618      	mov	r0, r3
 80118a2:	3720      	adds	r7, #32
 80118a4:	46bd      	mov	sp, r7
 80118a6:	bd80      	pop	{r7, pc}

080118a8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80118a8:	b580      	push	{r7, lr}
 80118aa:	b08c      	sub	sp, #48	; 0x30
 80118ac:	af02      	add	r7, sp, #8
 80118ae:	60f8      	str	r0, [r7, #12]
 80118b0:	60b9      	str	r1, [r7, #8]
 80118b2:	4613      	mov	r3, r2
 80118b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80118ba:	68bb      	ldr	r3, [r7, #8]
 80118bc:	785b      	ldrb	r3, [r3, #1]
 80118be:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80118c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80118c4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80118ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d02d      	beq.n	801192e <USB_HC_StartXfer+0x86>
 80118d2:	68bb      	ldr	r3, [r7, #8]
 80118d4:	791b      	ldrb	r3, [r3, #4]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d129      	bne.n	801192e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80118da:	79fb      	ldrb	r3, [r7, #7]
 80118dc:	2b01      	cmp	r3, #1
 80118de:	d117      	bne.n	8011910 <USB_HC_StartXfer+0x68>
 80118e0:	68bb      	ldr	r3, [r7, #8]
 80118e2:	79db      	ldrb	r3, [r3, #7]
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d003      	beq.n	80118f0 <USB_HC_StartXfer+0x48>
 80118e8:	68bb      	ldr	r3, [r7, #8]
 80118ea:	79db      	ldrb	r3, [r3, #7]
 80118ec:	2b02      	cmp	r3, #2
 80118ee:	d10f      	bne.n	8011910 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80118f0:	69fb      	ldr	r3, [r7, #28]
 80118f2:	015a      	lsls	r2, r3, #5
 80118f4:	6a3b      	ldr	r3, [r7, #32]
 80118f6:	4413      	add	r3, r2
 80118f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80118fc:	68db      	ldr	r3, [r3, #12]
 80118fe:	69fa      	ldr	r2, [r7, #28]
 8011900:	0151      	lsls	r1, r2, #5
 8011902:	6a3a      	ldr	r2, [r7, #32]
 8011904:	440a      	add	r2, r1
 8011906:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801190a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801190e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8011910:	79fb      	ldrb	r3, [r7, #7]
 8011912:	2b00      	cmp	r3, #0
 8011914:	d10b      	bne.n	801192e <USB_HC_StartXfer+0x86>
 8011916:	68bb      	ldr	r3, [r7, #8]
 8011918:	795b      	ldrb	r3, [r3, #5]
 801191a:	2b01      	cmp	r3, #1
 801191c:	d107      	bne.n	801192e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 801191e:	68bb      	ldr	r3, [r7, #8]
 8011920:	785b      	ldrb	r3, [r3, #1]
 8011922:	4619      	mov	r1, r3
 8011924:	68f8      	ldr	r0, [r7, #12]
 8011926:	f000 fa0f 	bl	8011d48 <USB_DoPing>
      return HAL_OK;
 801192a:	2300      	movs	r3, #0
 801192c:	e0f8      	b.n	8011b20 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 801192e:	68bb      	ldr	r3, [r7, #8]
 8011930:	695b      	ldr	r3, [r3, #20]
 8011932:	2b00      	cmp	r3, #0
 8011934:	d018      	beq.n	8011968 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8011936:	68bb      	ldr	r3, [r7, #8]
 8011938:	695b      	ldr	r3, [r3, #20]
 801193a:	68ba      	ldr	r2, [r7, #8]
 801193c:	8912      	ldrh	r2, [r2, #8]
 801193e:	4413      	add	r3, r2
 8011940:	3b01      	subs	r3, #1
 8011942:	68ba      	ldr	r2, [r7, #8]
 8011944:	8912      	ldrh	r2, [r2, #8]
 8011946:	fbb3 f3f2 	udiv	r3, r3, r2
 801194a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 801194c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801194e:	8b7b      	ldrh	r3, [r7, #26]
 8011950:	429a      	cmp	r2, r3
 8011952:	d90b      	bls.n	801196c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8011954:	8b7b      	ldrh	r3, [r7, #26]
 8011956:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8011958:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801195a:	68ba      	ldr	r2, [r7, #8]
 801195c:	8912      	ldrh	r2, [r2, #8]
 801195e:	fb03 f202 	mul.w	r2, r3, r2
 8011962:	68bb      	ldr	r3, [r7, #8]
 8011964:	611a      	str	r2, [r3, #16]
 8011966:	e001      	b.n	801196c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8011968:	2301      	movs	r3, #1
 801196a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 801196c:	68bb      	ldr	r3, [r7, #8]
 801196e:	78db      	ldrb	r3, [r3, #3]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d007      	beq.n	8011984 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8011974:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011976:	68ba      	ldr	r2, [r7, #8]
 8011978:	8912      	ldrh	r2, [r2, #8]
 801197a:	fb03 f202 	mul.w	r2, r3, r2
 801197e:	68bb      	ldr	r3, [r7, #8]
 8011980:	611a      	str	r2, [r3, #16]
 8011982:	e003      	b.n	801198c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8011984:	68bb      	ldr	r3, [r7, #8]
 8011986:	695a      	ldr	r2, [r3, #20]
 8011988:	68bb      	ldr	r3, [r7, #8]
 801198a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 801198c:	68bb      	ldr	r3, [r7, #8]
 801198e:	691b      	ldr	r3, [r3, #16]
 8011990:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8011994:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011996:	04d9      	lsls	r1, r3, #19
 8011998:	4b63      	ldr	r3, [pc, #396]	; (8011b28 <USB_HC_StartXfer+0x280>)
 801199a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 801199c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 801199e:	68bb      	ldr	r3, [r7, #8]
 80119a0:	7a9b      	ldrb	r3, [r3, #10]
 80119a2:	075b      	lsls	r3, r3, #29
 80119a4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80119a8:	69f9      	ldr	r1, [r7, #28]
 80119aa:	0148      	lsls	r0, r1, #5
 80119ac:	6a39      	ldr	r1, [r7, #32]
 80119ae:	4401      	add	r1, r0
 80119b0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80119b4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80119b6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80119b8:	79fb      	ldrb	r3, [r7, #7]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d009      	beq.n	80119d2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80119be:	68bb      	ldr	r3, [r7, #8]
 80119c0:	68d9      	ldr	r1, [r3, #12]
 80119c2:	69fb      	ldr	r3, [r7, #28]
 80119c4:	015a      	lsls	r2, r3, #5
 80119c6:	6a3b      	ldr	r3, [r7, #32]
 80119c8:	4413      	add	r3, r2
 80119ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80119ce:	460a      	mov	r2, r1
 80119d0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80119d2:	6a3b      	ldr	r3, [r7, #32]
 80119d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80119d8:	689b      	ldr	r3, [r3, #8]
 80119da:	f003 0301 	and.w	r3, r3, #1
 80119de:	2b00      	cmp	r3, #0
 80119e0:	bf0c      	ite	eq
 80119e2:	2301      	moveq	r3, #1
 80119e4:	2300      	movne	r3, #0
 80119e6:	b2db      	uxtb	r3, r3
 80119e8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80119ea:	69fb      	ldr	r3, [r7, #28]
 80119ec:	015a      	lsls	r2, r3, #5
 80119ee:	6a3b      	ldr	r3, [r7, #32]
 80119f0:	4413      	add	r3, r2
 80119f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	69fa      	ldr	r2, [r7, #28]
 80119fa:	0151      	lsls	r1, r2, #5
 80119fc:	6a3a      	ldr	r2, [r7, #32]
 80119fe:	440a      	add	r2, r1
 8011a00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011a04:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011a08:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8011a0a:	69fb      	ldr	r3, [r7, #28]
 8011a0c:	015a      	lsls	r2, r3, #5
 8011a0e:	6a3b      	ldr	r3, [r7, #32]
 8011a10:	4413      	add	r3, r2
 8011a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011a16:	681a      	ldr	r2, [r3, #0]
 8011a18:	7e7b      	ldrb	r3, [r7, #25]
 8011a1a:	075b      	lsls	r3, r3, #29
 8011a1c:	69f9      	ldr	r1, [r7, #28]
 8011a1e:	0148      	lsls	r0, r1, #5
 8011a20:	6a39      	ldr	r1, [r7, #32]
 8011a22:	4401      	add	r1, r0
 8011a24:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8011a28:	4313      	orrs	r3, r2
 8011a2a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8011a2c:	69fb      	ldr	r3, [r7, #28]
 8011a2e:	015a      	lsls	r2, r3, #5
 8011a30:	6a3b      	ldr	r3, [r7, #32]
 8011a32:	4413      	add	r3, r2
 8011a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8011a3c:	693b      	ldr	r3, [r7, #16]
 8011a3e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011a42:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8011a44:	68bb      	ldr	r3, [r7, #8]
 8011a46:	78db      	ldrb	r3, [r3, #3]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d004      	beq.n	8011a56 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8011a4c:	693b      	ldr	r3, [r7, #16]
 8011a4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011a52:	613b      	str	r3, [r7, #16]
 8011a54:	e003      	b.n	8011a5e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8011a56:	693b      	ldr	r3, [r7, #16]
 8011a58:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8011a5c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8011a5e:	693b      	ldr	r3, [r7, #16]
 8011a60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011a64:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8011a66:	69fb      	ldr	r3, [r7, #28]
 8011a68:	015a      	lsls	r2, r3, #5
 8011a6a:	6a3b      	ldr	r3, [r7, #32]
 8011a6c:	4413      	add	r3, r2
 8011a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011a72:	461a      	mov	r2, r3
 8011a74:	693b      	ldr	r3, [r7, #16]
 8011a76:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8011a78:	79fb      	ldrb	r3, [r7, #7]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d001      	beq.n	8011a82 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8011a7e:	2300      	movs	r3, #0
 8011a80:	e04e      	b.n	8011b20 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8011a82:	68bb      	ldr	r3, [r7, #8]
 8011a84:	78db      	ldrb	r3, [r3, #3]
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d149      	bne.n	8011b1e <USB_HC_StartXfer+0x276>
 8011a8a:	68bb      	ldr	r3, [r7, #8]
 8011a8c:	695b      	ldr	r3, [r3, #20]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d045      	beq.n	8011b1e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8011a92:	68bb      	ldr	r3, [r7, #8]
 8011a94:	79db      	ldrb	r3, [r3, #7]
 8011a96:	2b03      	cmp	r3, #3
 8011a98:	d830      	bhi.n	8011afc <USB_HC_StartXfer+0x254>
 8011a9a:	a201      	add	r2, pc, #4	; (adr r2, 8011aa0 <USB_HC_StartXfer+0x1f8>)
 8011a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011aa0:	08011ab1 	.word	0x08011ab1
 8011aa4:	08011ad5 	.word	0x08011ad5
 8011aa8:	08011ab1 	.word	0x08011ab1
 8011aac:	08011ad5 	.word	0x08011ad5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8011ab0:	68bb      	ldr	r3, [r7, #8]
 8011ab2:	695b      	ldr	r3, [r3, #20]
 8011ab4:	3303      	adds	r3, #3
 8011ab6:	089b      	lsrs	r3, r3, #2
 8011ab8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8011aba:	8afa      	ldrh	r2, [r7, #22]
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ac0:	b29b      	uxth	r3, r3
 8011ac2:	429a      	cmp	r2, r3
 8011ac4:	d91c      	bls.n	8011b00 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	699b      	ldr	r3, [r3, #24]
 8011aca:	f043 0220 	orr.w	r2, r3, #32
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	619a      	str	r2, [r3, #24]
        }
        break;
 8011ad2:	e015      	b.n	8011b00 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8011ad4:	68bb      	ldr	r3, [r7, #8]
 8011ad6:	695b      	ldr	r3, [r3, #20]
 8011ad8:	3303      	adds	r3, #3
 8011ada:	089b      	lsrs	r3, r3, #2
 8011adc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8011ade:	8afa      	ldrh	r2, [r7, #22]
 8011ae0:	6a3b      	ldr	r3, [r7, #32]
 8011ae2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011ae6:	691b      	ldr	r3, [r3, #16]
 8011ae8:	b29b      	uxth	r3, r3
 8011aea:	429a      	cmp	r2, r3
 8011aec:	d90a      	bls.n	8011b04 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	699b      	ldr	r3, [r3, #24]
 8011af2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	619a      	str	r2, [r3, #24]
        }
        break;
 8011afa:	e003      	b.n	8011b04 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8011afc:	bf00      	nop
 8011afe:	e002      	b.n	8011b06 <USB_HC_StartXfer+0x25e>
        break;
 8011b00:	bf00      	nop
 8011b02:	e000      	b.n	8011b06 <USB_HC_StartXfer+0x25e>
        break;
 8011b04:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8011b06:	68bb      	ldr	r3, [r7, #8]
 8011b08:	68d9      	ldr	r1, [r3, #12]
 8011b0a:	68bb      	ldr	r3, [r7, #8]
 8011b0c:	785a      	ldrb	r2, [r3, #1]
 8011b0e:	68bb      	ldr	r3, [r7, #8]
 8011b10:	695b      	ldr	r3, [r3, #20]
 8011b12:	b29b      	uxth	r3, r3
 8011b14:	2000      	movs	r0, #0
 8011b16:	9000      	str	r0, [sp, #0]
 8011b18:	68f8      	ldr	r0, [r7, #12]
 8011b1a:	f7ff fb1d 	bl	8011158 <USB_WritePacket>
  }

  return HAL_OK;
 8011b1e:	2300      	movs	r3, #0
}
 8011b20:	4618      	mov	r0, r3
 8011b22:	3728      	adds	r7, #40	; 0x28
 8011b24:	46bd      	mov	sp, r7
 8011b26:	bd80      	pop	{r7, pc}
 8011b28:	1ff80000 	.word	0x1ff80000

08011b2c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8011b2c:	b480      	push	{r7}
 8011b2e:	b085      	sub	sp, #20
 8011b30:	af00      	add	r7, sp, #0
 8011b32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011b3e:	695b      	ldr	r3, [r3, #20]
 8011b40:	b29b      	uxth	r3, r3
}
 8011b42:	4618      	mov	r0, r3
 8011b44:	3714      	adds	r7, #20
 8011b46:	46bd      	mov	sp, r7
 8011b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b4c:	4770      	bx	lr

08011b4e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8011b4e:	b480      	push	{r7}
 8011b50:	b089      	sub	sp, #36	; 0x24
 8011b52:	af00      	add	r7, sp, #0
 8011b54:	6078      	str	r0, [r7, #4]
 8011b56:	460b      	mov	r3, r1
 8011b58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8011b5e:	78fb      	ldrb	r3, [r7, #3]
 8011b60:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8011b62:	2300      	movs	r3, #0
 8011b64:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8011b66:	69bb      	ldr	r3, [r7, #24]
 8011b68:	015a      	lsls	r2, r3, #5
 8011b6a:	69fb      	ldr	r3, [r7, #28]
 8011b6c:	4413      	add	r3, r2
 8011b6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	0c9b      	lsrs	r3, r3, #18
 8011b76:	f003 0303 	and.w	r3, r3, #3
 8011b7a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8011b7c:	69bb      	ldr	r3, [r7, #24]
 8011b7e:	015a      	lsls	r2, r3, #5
 8011b80:	69fb      	ldr	r3, [r7, #28]
 8011b82:	4413      	add	r3, r2
 8011b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	0fdb      	lsrs	r3, r3, #31
 8011b8c:	f003 0301 	and.w	r3, r3, #1
 8011b90:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	689b      	ldr	r3, [r3, #8]
 8011b96:	f003 0320 	and.w	r3, r3, #32
 8011b9a:	2b20      	cmp	r3, #32
 8011b9c:	d104      	bne.n	8011ba8 <USB_HC_Halt+0x5a>
 8011b9e:	693b      	ldr	r3, [r7, #16]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d101      	bne.n	8011ba8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8011ba4:	2300      	movs	r3, #0
 8011ba6:	e0c8      	b.n	8011d3a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8011ba8:	697b      	ldr	r3, [r7, #20]
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d002      	beq.n	8011bb4 <USB_HC_Halt+0x66>
 8011bae:	697b      	ldr	r3, [r7, #20]
 8011bb0:	2b02      	cmp	r3, #2
 8011bb2:	d163      	bne.n	8011c7c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8011bb4:	69bb      	ldr	r3, [r7, #24]
 8011bb6:	015a      	lsls	r2, r3, #5
 8011bb8:	69fb      	ldr	r3, [r7, #28]
 8011bba:	4413      	add	r3, r2
 8011bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	69ba      	ldr	r2, [r7, #24]
 8011bc4:	0151      	lsls	r1, r2, #5
 8011bc6:	69fa      	ldr	r2, [r7, #28]
 8011bc8:	440a      	add	r2, r1
 8011bca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011bce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011bd2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	689b      	ldr	r3, [r3, #8]
 8011bd8:	f003 0320 	and.w	r3, r3, #32
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	f040 80ab 	bne.w	8011d38 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011be6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d133      	bne.n	8011c56 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8011bee:	69bb      	ldr	r3, [r7, #24]
 8011bf0:	015a      	lsls	r2, r3, #5
 8011bf2:	69fb      	ldr	r3, [r7, #28]
 8011bf4:	4413      	add	r3, r2
 8011bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	69ba      	ldr	r2, [r7, #24]
 8011bfe:	0151      	lsls	r1, r2, #5
 8011c00:	69fa      	ldr	r2, [r7, #28]
 8011c02:	440a      	add	r2, r1
 8011c04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011c08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011c0c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8011c0e:	69bb      	ldr	r3, [r7, #24]
 8011c10:	015a      	lsls	r2, r3, #5
 8011c12:	69fb      	ldr	r3, [r7, #28]
 8011c14:	4413      	add	r3, r2
 8011c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	69ba      	ldr	r2, [r7, #24]
 8011c1e:	0151      	lsls	r1, r2, #5
 8011c20:	69fa      	ldr	r2, [r7, #28]
 8011c22:	440a      	add	r2, r1
 8011c24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011c28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011c2c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	3301      	adds	r3, #1
 8011c32:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011c3a:	d81d      	bhi.n	8011c78 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8011c3c:	69bb      	ldr	r3, [r7, #24]
 8011c3e:	015a      	lsls	r2, r3, #5
 8011c40:	69fb      	ldr	r3, [r7, #28]
 8011c42:	4413      	add	r3, r2
 8011c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011c4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011c52:	d0ec      	beq.n	8011c2e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8011c54:	e070      	b.n	8011d38 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8011c56:	69bb      	ldr	r3, [r7, #24]
 8011c58:	015a      	lsls	r2, r3, #5
 8011c5a:	69fb      	ldr	r3, [r7, #28]
 8011c5c:	4413      	add	r3, r2
 8011c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	69ba      	ldr	r2, [r7, #24]
 8011c66:	0151      	lsls	r1, r2, #5
 8011c68:	69fa      	ldr	r2, [r7, #28]
 8011c6a:	440a      	add	r2, r1
 8011c6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011c70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011c74:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8011c76:	e05f      	b.n	8011d38 <USB_HC_Halt+0x1ea>
            break;
 8011c78:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8011c7a:	e05d      	b.n	8011d38 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8011c7c:	69bb      	ldr	r3, [r7, #24]
 8011c7e:	015a      	lsls	r2, r3, #5
 8011c80:	69fb      	ldr	r3, [r7, #28]
 8011c82:	4413      	add	r3, r2
 8011c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	69ba      	ldr	r2, [r7, #24]
 8011c8c:	0151      	lsls	r1, r2, #5
 8011c8e:	69fa      	ldr	r2, [r7, #28]
 8011c90:	440a      	add	r2, r1
 8011c92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011c96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011c9a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8011c9c:	69fb      	ldr	r3, [r7, #28]
 8011c9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011ca2:	691b      	ldr	r3, [r3, #16]
 8011ca4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d133      	bne.n	8011d14 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8011cac:	69bb      	ldr	r3, [r7, #24]
 8011cae:	015a      	lsls	r2, r3, #5
 8011cb0:	69fb      	ldr	r3, [r7, #28]
 8011cb2:	4413      	add	r3, r2
 8011cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	69ba      	ldr	r2, [r7, #24]
 8011cbc:	0151      	lsls	r1, r2, #5
 8011cbe:	69fa      	ldr	r2, [r7, #28]
 8011cc0:	440a      	add	r2, r1
 8011cc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011cc6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011cca:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8011ccc:	69bb      	ldr	r3, [r7, #24]
 8011cce:	015a      	lsls	r2, r3, #5
 8011cd0:	69fb      	ldr	r3, [r7, #28]
 8011cd2:	4413      	add	r3, r2
 8011cd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	69ba      	ldr	r2, [r7, #24]
 8011cdc:	0151      	lsls	r1, r2, #5
 8011cde:	69fa      	ldr	r2, [r7, #28]
 8011ce0:	440a      	add	r2, r1
 8011ce2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011ce6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011cea:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	3301      	adds	r3, #1
 8011cf0:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011cf8:	d81d      	bhi.n	8011d36 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8011cfa:	69bb      	ldr	r3, [r7, #24]
 8011cfc:	015a      	lsls	r2, r3, #5
 8011cfe:	69fb      	ldr	r3, [r7, #28]
 8011d00:	4413      	add	r3, r2
 8011d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011d0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011d10:	d0ec      	beq.n	8011cec <USB_HC_Halt+0x19e>
 8011d12:	e011      	b.n	8011d38 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8011d14:	69bb      	ldr	r3, [r7, #24]
 8011d16:	015a      	lsls	r2, r3, #5
 8011d18:	69fb      	ldr	r3, [r7, #28]
 8011d1a:	4413      	add	r3, r2
 8011d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	69ba      	ldr	r2, [r7, #24]
 8011d24:	0151      	lsls	r1, r2, #5
 8011d26:	69fa      	ldr	r2, [r7, #28]
 8011d28:	440a      	add	r2, r1
 8011d2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011d2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011d32:	6013      	str	r3, [r2, #0]
 8011d34:	e000      	b.n	8011d38 <USB_HC_Halt+0x1ea>
          break;
 8011d36:	bf00      	nop
    }
  }

  return HAL_OK;
 8011d38:	2300      	movs	r3, #0
}
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	3724      	adds	r7, #36	; 0x24
 8011d3e:	46bd      	mov	sp, r7
 8011d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d44:	4770      	bx	lr
	...

08011d48 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8011d48:	b480      	push	{r7}
 8011d4a:	b087      	sub	sp, #28
 8011d4c:	af00      	add	r7, sp, #0
 8011d4e:	6078      	str	r0, [r7, #4]
 8011d50:	460b      	mov	r3, r1
 8011d52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8011d58:	78fb      	ldrb	r3, [r7, #3]
 8011d5a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8011d5c:	2301      	movs	r3, #1
 8011d5e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	04da      	lsls	r2, r3, #19
 8011d64:	4b15      	ldr	r3, [pc, #84]	; (8011dbc <USB_DoPing+0x74>)
 8011d66:	4013      	ands	r3, r2
 8011d68:	693a      	ldr	r2, [r7, #16]
 8011d6a:	0151      	lsls	r1, r2, #5
 8011d6c:	697a      	ldr	r2, [r7, #20]
 8011d6e:	440a      	add	r2, r1
 8011d70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011d74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011d78:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8011d7a:	693b      	ldr	r3, [r7, #16]
 8011d7c:	015a      	lsls	r2, r3, #5
 8011d7e:	697b      	ldr	r3, [r7, #20]
 8011d80:	4413      	add	r3, r2
 8011d82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8011d8a:	68bb      	ldr	r3, [r7, #8]
 8011d8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011d90:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8011d92:	68bb      	ldr	r3, [r7, #8]
 8011d94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011d98:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8011d9a:	693b      	ldr	r3, [r7, #16]
 8011d9c:	015a      	lsls	r2, r3, #5
 8011d9e:	697b      	ldr	r3, [r7, #20]
 8011da0:	4413      	add	r3, r2
 8011da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011da6:	461a      	mov	r2, r3
 8011da8:	68bb      	ldr	r3, [r7, #8]
 8011daa:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8011dac:	2300      	movs	r3, #0
}
 8011dae:	4618      	mov	r0, r3
 8011db0:	371c      	adds	r7, #28
 8011db2:	46bd      	mov	sp, r7
 8011db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db8:	4770      	bx	lr
 8011dba:	bf00      	nop
 8011dbc:	1ff80000 	.word	0x1ff80000

08011dc0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8011dc0:	b580      	push	{r7, lr}
 8011dc2:	b088      	sub	sp, #32
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8011dc8:	2300      	movs	r3, #0
 8011dca:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8011dd0:	2300      	movs	r3, #0
 8011dd2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8011dd4:	6878      	ldr	r0, [r7, #4]
 8011dd6:	f7ff f8fe 	bl	8010fd6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8011dda:	2110      	movs	r1, #16
 8011ddc:	6878      	ldr	r0, [r7, #4]
 8011dde:	f7ff f957 	bl	8011090 <USB_FlushTxFifo>
 8011de2:	4603      	mov	r3, r0
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d001      	beq.n	8011dec <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8011de8:	2301      	movs	r3, #1
 8011dea:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011dec:	6878      	ldr	r0, [r7, #4]
 8011dee:	f7ff f983 	bl	80110f8 <USB_FlushRxFifo>
 8011df2:	4603      	mov	r3, r0
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d001      	beq.n	8011dfc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8011df8:	2301      	movs	r3, #1
 8011dfa:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8011dfc:	2300      	movs	r3, #0
 8011dfe:	61bb      	str	r3, [r7, #24]
 8011e00:	e01f      	b.n	8011e42 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8011e02:	69bb      	ldr	r3, [r7, #24]
 8011e04:	015a      	lsls	r2, r3, #5
 8011e06:	697b      	ldr	r3, [r7, #20]
 8011e08:	4413      	add	r3, r2
 8011e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8011e12:	693b      	ldr	r3, [r7, #16]
 8011e14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011e18:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8011e1a:	693b      	ldr	r3, [r7, #16]
 8011e1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011e20:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8011e22:	693b      	ldr	r3, [r7, #16]
 8011e24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8011e28:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8011e2a:	69bb      	ldr	r3, [r7, #24]
 8011e2c:	015a      	lsls	r2, r3, #5
 8011e2e:	697b      	ldr	r3, [r7, #20]
 8011e30:	4413      	add	r3, r2
 8011e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011e36:	461a      	mov	r2, r3
 8011e38:	693b      	ldr	r3, [r7, #16]
 8011e3a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8011e3c:	69bb      	ldr	r3, [r7, #24]
 8011e3e:	3301      	adds	r3, #1
 8011e40:	61bb      	str	r3, [r7, #24]
 8011e42:	69bb      	ldr	r3, [r7, #24]
 8011e44:	2b0f      	cmp	r3, #15
 8011e46:	d9dc      	bls.n	8011e02 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8011e48:	2300      	movs	r3, #0
 8011e4a:	61bb      	str	r3, [r7, #24]
 8011e4c:	e034      	b.n	8011eb8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8011e4e:	69bb      	ldr	r3, [r7, #24]
 8011e50:	015a      	lsls	r2, r3, #5
 8011e52:	697b      	ldr	r3, [r7, #20]
 8011e54:	4413      	add	r3, r2
 8011e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8011e5e:	693b      	ldr	r3, [r7, #16]
 8011e60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011e64:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8011e66:	693b      	ldr	r3, [r7, #16]
 8011e68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011e6c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8011e6e:	693b      	ldr	r3, [r7, #16]
 8011e70:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8011e74:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8011e76:	69bb      	ldr	r3, [r7, #24]
 8011e78:	015a      	lsls	r2, r3, #5
 8011e7a:	697b      	ldr	r3, [r7, #20]
 8011e7c:	4413      	add	r3, r2
 8011e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011e82:	461a      	mov	r2, r3
 8011e84:	693b      	ldr	r3, [r7, #16]
 8011e86:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	3301      	adds	r3, #1
 8011e8c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011e94:	d80c      	bhi.n	8011eb0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8011e96:	69bb      	ldr	r3, [r7, #24]
 8011e98:	015a      	lsls	r2, r3, #5
 8011e9a:	697b      	ldr	r3, [r7, #20]
 8011e9c:	4413      	add	r3, r2
 8011e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011ea8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011eac:	d0ec      	beq.n	8011e88 <USB_StopHost+0xc8>
 8011eae:	e000      	b.n	8011eb2 <USB_StopHost+0xf2>
        break;
 8011eb0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8011eb2:	69bb      	ldr	r3, [r7, #24]
 8011eb4:	3301      	adds	r3, #1
 8011eb6:	61bb      	str	r3, [r7, #24]
 8011eb8:	69bb      	ldr	r3, [r7, #24]
 8011eba:	2b0f      	cmp	r3, #15
 8011ebc:	d9c7      	bls.n	8011e4e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8011ebe:	697b      	ldr	r3, [r7, #20]
 8011ec0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011ec4:	461a      	mov	r2, r3
 8011ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8011eca:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	f04f 32ff 	mov.w	r2, #4294967295
 8011ed2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8011ed4:	6878      	ldr	r0, [r7, #4]
 8011ed6:	f7ff f86d 	bl	8010fb4 <USB_EnableGlobalInt>

  return ret;
 8011eda:	7ffb      	ldrb	r3, [r7, #31]
}
 8011edc:	4618      	mov	r0, r3
 8011ede:	3720      	adds	r7, #32
 8011ee0:	46bd      	mov	sp, r7
 8011ee2:	bd80      	pop	{r7, pc}

08011ee4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8011ee4:	b580      	push	{r7, lr}
 8011ee6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8011ee8:	4904      	ldr	r1, [pc, #16]	; (8011efc <MX_FATFS_Init+0x18>)
 8011eea:	4805      	ldr	r0, [pc, #20]	; (8011f00 <MX_FATFS_Init+0x1c>)
 8011eec:	f004 fbf0 	bl	80166d0 <FATFS_LinkDriver>
 8011ef0:	4603      	mov	r3, r0
 8011ef2:	461a      	mov	r2, r3
 8011ef4:	4b03      	ldr	r3, [pc, #12]	; (8011f04 <MX_FATFS_Init+0x20>)
 8011ef6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8011ef8:	bf00      	nop
 8011efa:	bd80      	pop	{r7, pc}
 8011efc:	20000e74 	.word	0x20000e74
 8011f00:	08018f3c 	.word	0x08018f3c
 8011f04:	20000e70 	.word	0x20000e70

08011f08 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8011f08:	b480      	push	{r7}
 8011f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8011f0c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8011f0e:	4618      	mov	r0, r3
 8011f10:	46bd      	mov	sp, r7
 8011f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f16:	4770      	bx	lr

08011f18 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8011f18:	b580      	push	{r7, lr}
 8011f1a:	b082      	sub	sp, #8
 8011f1c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8011f1e:	2300      	movs	r3, #0
 8011f20:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8011f22:	f000 f896 	bl	8012052 <BSP_SD_IsDetected>
 8011f26:	4603      	mov	r3, r0
 8011f28:	2b01      	cmp	r3, #1
 8011f2a:	d001      	beq.n	8011f30 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8011f2c:	2302      	movs	r3, #2
 8011f2e:	e012      	b.n	8011f56 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8011f30:	480b      	ldr	r0, [pc, #44]	; (8011f60 <BSP_SD_Init+0x48>)
 8011f32:	f7fb f929 	bl	800d188 <HAL_SD_Init>
 8011f36:	4603      	mov	r3, r0
 8011f38:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8011f3a:	79fb      	ldrb	r3, [r7, #7]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d109      	bne.n	8011f54 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8011f40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011f44:	4806      	ldr	r0, [pc, #24]	; (8011f60 <BSP_SD_Init+0x48>)
 8011f46:	f7fb feef 	bl	800dd28 <HAL_SD_ConfigWideBusOperation>
 8011f4a:	4603      	mov	r3, r0
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d001      	beq.n	8011f54 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8011f50:	2301      	movs	r3, #1
 8011f52:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8011f54:	79fb      	ldrb	r3, [r7, #7]
}
 8011f56:	4618      	mov	r0, r3
 8011f58:	3708      	adds	r7, #8
 8011f5a:	46bd      	mov	sp, r7
 8011f5c:	bd80      	pop	{r7, pc}
 8011f5e:	bf00      	nop
 8011f60:	2000070c 	.word	0x2000070c

08011f64 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8011f64:	b580      	push	{r7, lr}
 8011f66:	b086      	sub	sp, #24
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	60f8      	str	r0, [r7, #12]
 8011f6c:	60b9      	str	r1, [r7, #8]
 8011f6e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011f70:	2300      	movs	r3, #0
 8011f72:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	68ba      	ldr	r2, [r7, #8]
 8011f78:	68f9      	ldr	r1, [r7, #12]
 8011f7a:	4806      	ldr	r0, [pc, #24]	; (8011f94 <BSP_SD_ReadBlocks_DMA+0x30>)
 8011f7c:	f7fb f9bc 	bl	800d2f8 <HAL_SD_ReadBlocks_DMA>
 8011f80:	4603      	mov	r3, r0
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d001      	beq.n	8011f8a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8011f86:	2301      	movs	r3, #1
 8011f88:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f8c:	4618      	mov	r0, r3
 8011f8e:	3718      	adds	r7, #24
 8011f90:	46bd      	mov	sp, r7
 8011f92:	bd80      	pop	{r7, pc}
 8011f94:	2000070c 	.word	0x2000070c

08011f98 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8011f98:	b580      	push	{r7, lr}
 8011f9a:	b086      	sub	sp, #24
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	60f8      	str	r0, [r7, #12]
 8011fa0:	60b9      	str	r1, [r7, #8]
 8011fa2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011fa4:	2300      	movs	r3, #0
 8011fa6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	68ba      	ldr	r2, [r7, #8]
 8011fac:	68f9      	ldr	r1, [r7, #12]
 8011fae:	4806      	ldr	r0, [pc, #24]	; (8011fc8 <BSP_SD_WriteBlocks_DMA+0x30>)
 8011fb0:	f7fb fa84 	bl	800d4bc <HAL_SD_WriteBlocks_DMA>
 8011fb4:	4603      	mov	r3, r0
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d001      	beq.n	8011fbe <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8011fba:	2301      	movs	r3, #1
 8011fbc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011fbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8011fc0:	4618      	mov	r0, r3
 8011fc2:	3718      	adds	r7, #24
 8011fc4:	46bd      	mov	sp, r7
 8011fc6:	bd80      	pop	{r7, pc}
 8011fc8:	2000070c 	.word	0x2000070c

08011fcc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011fcc:	b580      	push	{r7, lr}
 8011fce:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011fd0:	4805      	ldr	r0, [pc, #20]	; (8011fe8 <BSP_SD_GetCardState+0x1c>)
 8011fd2:	f7fb ff43 	bl	800de5c <HAL_SD_GetCardState>
 8011fd6:	4603      	mov	r3, r0
 8011fd8:	2b04      	cmp	r3, #4
 8011fda:	bf14      	ite	ne
 8011fdc:	2301      	movne	r3, #1
 8011fde:	2300      	moveq	r3, #0
 8011fe0:	b2db      	uxtb	r3, r3
}
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	bd80      	pop	{r7, pc}
 8011fe6:	bf00      	nop
 8011fe8:	2000070c 	.word	0x2000070c

08011fec <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8011fec:	b580      	push	{r7, lr}
 8011fee:	b082      	sub	sp, #8
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8011ff4:	6879      	ldr	r1, [r7, #4]
 8011ff6:	4803      	ldr	r0, [pc, #12]	; (8012004 <BSP_SD_GetCardInfo+0x18>)
 8011ff8:	f7fb fe6a 	bl	800dcd0 <HAL_SD_GetCardInfo>
}
 8011ffc:	bf00      	nop
 8011ffe:	3708      	adds	r7, #8
 8012000:	46bd      	mov	sp, r7
 8012002:	bd80      	pop	{r7, pc}
 8012004:	2000070c 	.word	0x2000070c

08012008 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8012008:	b580      	push	{r7, lr}
 801200a:	b082      	sub	sp, #8
 801200c:	af00      	add	r7, sp, #0
 801200e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8012010:	f000 f818 	bl	8012044 <BSP_SD_AbortCallback>
}
 8012014:	bf00      	nop
 8012016:	3708      	adds	r7, #8
 8012018:	46bd      	mov	sp, r7
 801201a:	bd80      	pop	{r7, pc}

0801201c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 801201c:	b580      	push	{r7, lr}
 801201e:	b082      	sub	sp, #8
 8012020:	af00      	add	r7, sp, #0
 8012022:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8012024:	f000 f9a8 	bl	8012378 <BSP_SD_WriteCpltCallback>
}
 8012028:	bf00      	nop
 801202a:	3708      	adds	r7, #8
 801202c:	46bd      	mov	sp, r7
 801202e:	bd80      	pop	{r7, pc}

08012030 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8012030:	b580      	push	{r7, lr}
 8012032:	b082      	sub	sp, #8
 8012034:	af00      	add	r7, sp, #0
 8012036:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8012038:	f000 f9aa 	bl	8012390 <BSP_SD_ReadCpltCallback>
}
 801203c:	bf00      	nop
 801203e:	3708      	adds	r7, #8
 8012040:	46bd      	mov	sp, r7
 8012042:	bd80      	pop	{r7, pc}

08012044 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8012044:	b480      	push	{r7}
 8012046:	af00      	add	r7, sp, #0

}
 8012048:	bf00      	nop
 801204a:	46bd      	mov	sp, r7
 801204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012050:	4770      	bx	lr

08012052 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8012052:	b580      	push	{r7, lr}
 8012054:	b082      	sub	sp, #8
 8012056:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8012058:	2301      	movs	r3, #1
 801205a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 801205c:	f000 f80c 	bl	8012078 <BSP_PlatformIsDetected>
 8012060:	4603      	mov	r3, r0
 8012062:	2b00      	cmp	r3, #0
 8012064:	d101      	bne.n	801206a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8012066:	2300      	movs	r3, #0
 8012068:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801206a:	79fb      	ldrb	r3, [r7, #7]
 801206c:	b2db      	uxtb	r3, r3
}
 801206e:	4618      	mov	r0, r3
 8012070:	3708      	adds	r7, #8
 8012072:	46bd      	mov	sp, r7
 8012074:	bd80      	pop	{r7, pc}
	...

08012078 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8012078:	b580      	push	{r7, lr}
 801207a:	b082      	sub	sp, #8
 801207c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801207e:	2301      	movs	r3, #1
 8012080:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8012082:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8012086:	4806      	ldr	r0, [pc, #24]	; (80120a0 <BSP_PlatformIsDetected+0x28>)
 8012088:	f7f6 f8b6 	bl	80081f8 <HAL_GPIO_ReadPin>
 801208c:	4603      	mov	r3, r0
 801208e:	2b00      	cmp	r3, #0
 8012090:	d001      	beq.n	8012096 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8012092:	2300      	movs	r3, #0
 8012094:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8012096:	79fb      	ldrb	r3, [r7, #7]
}
 8012098:	4618      	mov	r0, r3
 801209a:	3708      	adds	r7, #8
 801209c:	46bd      	mov	sp, r7
 801209e:	bd80      	pop	{r7, pc}
 80120a0:	40020800 	.word	0x40020800

080120a4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80120a4:	b580      	push	{r7, lr}
 80120a6:	b084      	sub	sp, #16
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80120ac:	f7f2 fbd4 	bl	8004858 <HAL_GetTick>
 80120b0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80120b2:	e006      	b.n	80120c2 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80120b4:	f7ff ff8a 	bl	8011fcc <BSP_SD_GetCardState>
 80120b8:	4603      	mov	r3, r0
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d101      	bne.n	80120c2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80120be:	2300      	movs	r3, #0
 80120c0:	e009      	b.n	80120d6 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80120c2:	f7f2 fbc9 	bl	8004858 <HAL_GetTick>
 80120c6:	4602      	mov	r2, r0
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	1ad3      	subs	r3, r2, r3
 80120cc:	687a      	ldr	r2, [r7, #4]
 80120ce:	429a      	cmp	r2, r3
 80120d0:	d8f0      	bhi.n	80120b4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80120d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80120d6:	4618      	mov	r0, r3
 80120d8:	3710      	adds	r7, #16
 80120da:	46bd      	mov	sp, r7
 80120dc:	bd80      	pop	{r7, pc}
	...

080120e0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80120e0:	b580      	push	{r7, lr}
 80120e2:	b082      	sub	sp, #8
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	4603      	mov	r3, r0
 80120e8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80120ea:	4b0b      	ldr	r3, [pc, #44]	; (8012118 <SD_CheckStatus+0x38>)
 80120ec:	2201      	movs	r2, #1
 80120ee:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80120f0:	f7ff ff6c 	bl	8011fcc <BSP_SD_GetCardState>
 80120f4:	4603      	mov	r3, r0
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d107      	bne.n	801210a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80120fa:	4b07      	ldr	r3, [pc, #28]	; (8012118 <SD_CheckStatus+0x38>)
 80120fc:	781b      	ldrb	r3, [r3, #0]
 80120fe:	b2db      	uxtb	r3, r3
 8012100:	f023 0301 	bic.w	r3, r3, #1
 8012104:	b2da      	uxtb	r2, r3
 8012106:	4b04      	ldr	r3, [pc, #16]	; (8012118 <SD_CheckStatus+0x38>)
 8012108:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801210a:	4b03      	ldr	r3, [pc, #12]	; (8012118 <SD_CheckStatus+0x38>)
 801210c:	781b      	ldrb	r3, [r3, #0]
 801210e:	b2db      	uxtb	r3, r3
}
 8012110:	4618      	mov	r0, r3
 8012112:	3708      	adds	r7, #8
 8012114:	46bd      	mov	sp, r7
 8012116:	bd80      	pop	{r7, pc}
 8012118:	20000021 	.word	0x20000021

0801211c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801211c:	b580      	push	{r7, lr}
 801211e:	b082      	sub	sp, #8
 8012120:	af00      	add	r7, sp, #0
 8012122:	4603      	mov	r3, r0
 8012124:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8012126:	f7ff fef7 	bl	8011f18 <BSP_SD_Init>
 801212a:	4603      	mov	r3, r0
 801212c:	2b00      	cmp	r3, #0
 801212e:	d107      	bne.n	8012140 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8012130:	79fb      	ldrb	r3, [r7, #7]
 8012132:	4618      	mov	r0, r3
 8012134:	f7ff ffd4 	bl	80120e0 <SD_CheckStatus>
 8012138:	4603      	mov	r3, r0
 801213a:	461a      	mov	r2, r3
 801213c:	4b04      	ldr	r3, [pc, #16]	; (8012150 <SD_initialize+0x34>)
 801213e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8012140:	4b03      	ldr	r3, [pc, #12]	; (8012150 <SD_initialize+0x34>)
 8012142:	781b      	ldrb	r3, [r3, #0]
 8012144:	b2db      	uxtb	r3, r3
}
 8012146:	4618      	mov	r0, r3
 8012148:	3708      	adds	r7, #8
 801214a:	46bd      	mov	sp, r7
 801214c:	bd80      	pop	{r7, pc}
 801214e:	bf00      	nop
 8012150:	20000021 	.word	0x20000021

08012154 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8012154:	b580      	push	{r7, lr}
 8012156:	b082      	sub	sp, #8
 8012158:	af00      	add	r7, sp, #0
 801215a:	4603      	mov	r3, r0
 801215c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801215e:	79fb      	ldrb	r3, [r7, #7]
 8012160:	4618      	mov	r0, r3
 8012162:	f7ff ffbd 	bl	80120e0 <SD_CheckStatus>
 8012166:	4603      	mov	r3, r0
}
 8012168:	4618      	mov	r0, r3
 801216a:	3708      	adds	r7, #8
 801216c:	46bd      	mov	sp, r7
 801216e:	bd80      	pop	{r7, pc}

08012170 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8012170:	b580      	push	{r7, lr}
 8012172:	b086      	sub	sp, #24
 8012174:	af00      	add	r7, sp, #0
 8012176:	60b9      	str	r1, [r7, #8]
 8012178:	607a      	str	r2, [r7, #4]
 801217a:	603b      	str	r3, [r7, #0]
 801217c:	4603      	mov	r3, r0
 801217e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012180:	2301      	movs	r3, #1
 8012182:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8012184:	f247 5030 	movw	r0, #30000	; 0x7530
 8012188:	f7ff ff8c 	bl	80120a4 <SD_CheckStatusWithTimeout>
 801218c:	4603      	mov	r3, r0
 801218e:	2b00      	cmp	r3, #0
 8012190:	da01      	bge.n	8012196 <SD_read+0x26>
  {
    return res;
 8012192:	7dfb      	ldrb	r3, [r7, #23]
 8012194:	e03b      	b.n	801220e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8012196:	683a      	ldr	r2, [r7, #0]
 8012198:	6879      	ldr	r1, [r7, #4]
 801219a:	68b8      	ldr	r0, [r7, #8]
 801219c:	f7ff fee2 	bl	8011f64 <BSP_SD_ReadBlocks_DMA>
 80121a0:	4603      	mov	r3, r0
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d132      	bne.n	801220c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80121a6:	4b1c      	ldr	r3, [pc, #112]	; (8012218 <SD_read+0xa8>)
 80121a8:	2200      	movs	r2, #0
 80121aa:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80121ac:	f7f2 fb54 	bl	8004858 <HAL_GetTick>
 80121b0:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80121b2:	bf00      	nop
 80121b4:	4b18      	ldr	r3, [pc, #96]	; (8012218 <SD_read+0xa8>)
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d108      	bne.n	80121ce <SD_read+0x5e>
 80121bc:	f7f2 fb4c 	bl	8004858 <HAL_GetTick>
 80121c0:	4602      	mov	r2, r0
 80121c2:	693b      	ldr	r3, [r7, #16]
 80121c4:	1ad3      	subs	r3, r2, r3
 80121c6:	f247 522f 	movw	r2, #29999	; 0x752f
 80121ca:	4293      	cmp	r3, r2
 80121cc:	d9f2      	bls.n	80121b4 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80121ce:	4b12      	ldr	r3, [pc, #72]	; (8012218 <SD_read+0xa8>)
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d102      	bne.n	80121dc <SD_read+0x6c>
      {
        res = RES_ERROR;
 80121d6:	2301      	movs	r3, #1
 80121d8:	75fb      	strb	r3, [r7, #23]
 80121da:	e017      	b.n	801220c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80121dc:	4b0e      	ldr	r3, [pc, #56]	; (8012218 <SD_read+0xa8>)
 80121de:	2200      	movs	r2, #0
 80121e0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80121e2:	f7f2 fb39 	bl	8004858 <HAL_GetTick>
 80121e6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80121e8:	e007      	b.n	80121fa <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80121ea:	f7ff feef 	bl	8011fcc <BSP_SD_GetCardState>
 80121ee:	4603      	mov	r3, r0
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d102      	bne.n	80121fa <SD_read+0x8a>
          {
            res = RES_OK;
 80121f4:	2300      	movs	r3, #0
 80121f6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80121f8:	e008      	b.n	801220c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80121fa:	f7f2 fb2d 	bl	8004858 <HAL_GetTick>
 80121fe:	4602      	mov	r2, r0
 8012200:	693b      	ldr	r3, [r7, #16]
 8012202:	1ad3      	subs	r3, r2, r3
 8012204:	f247 522f 	movw	r2, #29999	; 0x752f
 8012208:	4293      	cmp	r3, r2
 801220a:	d9ee      	bls.n	80121ea <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 801220c:	7dfb      	ldrb	r3, [r7, #23]
}
 801220e:	4618      	mov	r0, r3
 8012210:	3718      	adds	r7, #24
 8012212:	46bd      	mov	sp, r7
 8012214:	bd80      	pop	{r7, pc}
 8012216:	bf00      	nop
 8012218:	20000e7c 	.word	0x20000e7c

0801221c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801221c:	b580      	push	{r7, lr}
 801221e:	b086      	sub	sp, #24
 8012220:	af00      	add	r7, sp, #0
 8012222:	60b9      	str	r1, [r7, #8]
 8012224:	607a      	str	r2, [r7, #4]
 8012226:	603b      	str	r3, [r7, #0]
 8012228:	4603      	mov	r3, r0
 801222a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801222c:	2301      	movs	r3, #1
 801222e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8012230:	4b24      	ldr	r3, [pc, #144]	; (80122c4 <SD_write+0xa8>)
 8012232:	2200      	movs	r2, #0
 8012234:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8012236:	f247 5030 	movw	r0, #30000	; 0x7530
 801223a:	f7ff ff33 	bl	80120a4 <SD_CheckStatusWithTimeout>
 801223e:	4603      	mov	r3, r0
 8012240:	2b00      	cmp	r3, #0
 8012242:	da01      	bge.n	8012248 <SD_write+0x2c>
  {
    return res;
 8012244:	7dfb      	ldrb	r3, [r7, #23]
 8012246:	e038      	b.n	80122ba <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8012248:	683a      	ldr	r2, [r7, #0]
 801224a:	6879      	ldr	r1, [r7, #4]
 801224c:	68b8      	ldr	r0, [r7, #8]
 801224e:	f7ff fea3 	bl	8011f98 <BSP_SD_WriteBlocks_DMA>
 8012252:	4603      	mov	r3, r0
 8012254:	2b00      	cmp	r3, #0
 8012256:	d12f      	bne.n	80122b8 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8012258:	f7f2 fafe 	bl	8004858 <HAL_GetTick>
 801225c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801225e:	bf00      	nop
 8012260:	4b18      	ldr	r3, [pc, #96]	; (80122c4 <SD_write+0xa8>)
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	2b00      	cmp	r3, #0
 8012266:	d108      	bne.n	801227a <SD_write+0x5e>
 8012268:	f7f2 faf6 	bl	8004858 <HAL_GetTick>
 801226c:	4602      	mov	r2, r0
 801226e:	693b      	ldr	r3, [r7, #16]
 8012270:	1ad3      	subs	r3, r2, r3
 8012272:	f247 522f 	movw	r2, #29999	; 0x752f
 8012276:	4293      	cmp	r3, r2
 8012278:	d9f2      	bls.n	8012260 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 801227a:	4b12      	ldr	r3, [pc, #72]	; (80122c4 <SD_write+0xa8>)
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	2b00      	cmp	r3, #0
 8012280:	d102      	bne.n	8012288 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8012282:	2301      	movs	r3, #1
 8012284:	75fb      	strb	r3, [r7, #23]
 8012286:	e017      	b.n	80122b8 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8012288:	4b0e      	ldr	r3, [pc, #56]	; (80122c4 <SD_write+0xa8>)
 801228a:	2200      	movs	r2, #0
 801228c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801228e:	f7f2 fae3 	bl	8004858 <HAL_GetTick>
 8012292:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012294:	e007      	b.n	80122a6 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012296:	f7ff fe99 	bl	8011fcc <BSP_SD_GetCardState>
 801229a:	4603      	mov	r3, r0
 801229c:	2b00      	cmp	r3, #0
 801229e:	d102      	bne.n	80122a6 <SD_write+0x8a>
          {
            res = RES_OK;
 80122a0:	2300      	movs	r3, #0
 80122a2:	75fb      	strb	r3, [r7, #23]
            break;
 80122a4:	e008      	b.n	80122b8 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80122a6:	f7f2 fad7 	bl	8004858 <HAL_GetTick>
 80122aa:	4602      	mov	r2, r0
 80122ac:	693b      	ldr	r3, [r7, #16]
 80122ae:	1ad3      	subs	r3, r2, r3
 80122b0:	f247 522f 	movw	r2, #29999	; 0x752f
 80122b4:	4293      	cmp	r3, r2
 80122b6:	d9ee      	bls.n	8012296 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80122b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80122ba:	4618      	mov	r0, r3
 80122bc:	3718      	adds	r7, #24
 80122be:	46bd      	mov	sp, r7
 80122c0:	bd80      	pop	{r7, pc}
 80122c2:	bf00      	nop
 80122c4:	20000e78 	.word	0x20000e78

080122c8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80122c8:	b580      	push	{r7, lr}
 80122ca:	b08c      	sub	sp, #48	; 0x30
 80122cc:	af00      	add	r7, sp, #0
 80122ce:	4603      	mov	r3, r0
 80122d0:	603a      	str	r2, [r7, #0]
 80122d2:	71fb      	strb	r3, [r7, #7]
 80122d4:	460b      	mov	r3, r1
 80122d6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80122d8:	2301      	movs	r3, #1
 80122da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80122de:	4b25      	ldr	r3, [pc, #148]	; (8012374 <SD_ioctl+0xac>)
 80122e0:	781b      	ldrb	r3, [r3, #0]
 80122e2:	b2db      	uxtb	r3, r3
 80122e4:	f003 0301 	and.w	r3, r3, #1
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d001      	beq.n	80122f0 <SD_ioctl+0x28>
 80122ec:	2303      	movs	r3, #3
 80122ee:	e03c      	b.n	801236a <SD_ioctl+0xa2>

  switch (cmd)
 80122f0:	79bb      	ldrb	r3, [r7, #6]
 80122f2:	2b03      	cmp	r3, #3
 80122f4:	d834      	bhi.n	8012360 <SD_ioctl+0x98>
 80122f6:	a201      	add	r2, pc, #4	; (adr r2, 80122fc <SD_ioctl+0x34>)
 80122f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122fc:	0801230d 	.word	0x0801230d
 8012300:	08012315 	.word	0x08012315
 8012304:	0801232d 	.word	0x0801232d
 8012308:	08012347 	.word	0x08012347
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 801230c:	2300      	movs	r3, #0
 801230e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012312:	e028      	b.n	8012366 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8012314:	f107 030c 	add.w	r3, r7, #12
 8012318:	4618      	mov	r0, r3
 801231a:	f7ff fe67 	bl	8011fec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801231e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012320:	683b      	ldr	r3, [r7, #0]
 8012322:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012324:	2300      	movs	r3, #0
 8012326:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801232a:	e01c      	b.n	8012366 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801232c:	f107 030c 	add.w	r3, r7, #12
 8012330:	4618      	mov	r0, r3
 8012332:	f7ff fe5b 	bl	8011fec <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8012336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012338:	b29a      	uxth	r2, r3
 801233a:	683b      	ldr	r3, [r7, #0]
 801233c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801233e:	2300      	movs	r3, #0
 8012340:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012344:	e00f      	b.n	8012366 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012346:	f107 030c 	add.w	r3, r7, #12
 801234a:	4618      	mov	r0, r3
 801234c:	f7ff fe4e 	bl	8011fec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8012350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012352:	0a5a      	lsrs	r2, r3, #9
 8012354:	683b      	ldr	r3, [r7, #0]
 8012356:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012358:	2300      	movs	r3, #0
 801235a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801235e:	e002      	b.n	8012366 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8012360:	2304      	movs	r3, #4
 8012362:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8012366:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801236a:	4618      	mov	r0, r3
 801236c:	3730      	adds	r7, #48	; 0x30
 801236e:	46bd      	mov	sp, r7
 8012370:	bd80      	pop	{r7, pc}
 8012372:	bf00      	nop
 8012374:	20000021 	.word	0x20000021

08012378 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8012378:	b480      	push	{r7}
 801237a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 801237c:	4b03      	ldr	r3, [pc, #12]	; (801238c <BSP_SD_WriteCpltCallback+0x14>)
 801237e:	2201      	movs	r2, #1
 8012380:	601a      	str	r2, [r3, #0]
}
 8012382:	bf00      	nop
 8012384:	46bd      	mov	sp, r7
 8012386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801238a:	4770      	bx	lr
 801238c:	20000e78 	.word	0x20000e78

08012390 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8012390:	b480      	push	{r7}
 8012392:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8012394:	4b03      	ldr	r3, [pc, #12]	; (80123a4 <BSP_SD_ReadCpltCallback+0x14>)
 8012396:	2201      	movs	r2, #1
 8012398:	601a      	str	r2, [r3, #0]
}
 801239a:	bf00      	nop
 801239c:	46bd      	mov	sp, r7
 801239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a2:	4770      	bx	lr
 80123a4:	20000e7c 	.word	0x20000e7c

080123a8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80123a8:	b590      	push	{r4, r7, lr}
 80123aa:	b089      	sub	sp, #36	; 0x24
 80123ac:	af04      	add	r7, sp, #16
 80123ae:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80123b0:	2301      	movs	r3, #1
 80123b2:	2202      	movs	r2, #2
 80123b4:	2102      	movs	r1, #2
 80123b6:	6878      	ldr	r0, [r7, #4]
 80123b8:	f000 fc85 	bl	8012cc6 <USBH_FindInterface>
 80123bc:	4603      	mov	r3, r0
 80123be:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80123c0:	7bfb      	ldrb	r3, [r7, #15]
 80123c2:	2bff      	cmp	r3, #255	; 0xff
 80123c4:	d002      	beq.n	80123cc <USBH_CDC_InterfaceInit+0x24>
 80123c6:	7bfb      	ldrb	r3, [r7, #15]
 80123c8:	2b01      	cmp	r3, #1
 80123ca:	d901      	bls.n	80123d0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80123cc:	2302      	movs	r3, #2
 80123ce:	e13d      	b.n	801264c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80123d0:	7bfb      	ldrb	r3, [r7, #15]
 80123d2:	4619      	mov	r1, r3
 80123d4:	6878      	ldr	r0, [r7, #4]
 80123d6:	f000 fc5a 	bl	8012c8e <USBH_SelectInterface>
 80123da:	4603      	mov	r3, r0
 80123dc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80123de:	7bbb      	ldrb	r3, [r7, #14]
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d001      	beq.n	80123e8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80123e4:	2302      	movs	r3, #2
 80123e6:	e131      	b.n	801264c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80123ee:	2050      	movs	r0, #80	; 0x50
 80123f0:	f004 fca4 	bl	8016d3c <malloc>
 80123f4:	4603      	mov	r3, r0
 80123f6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80123fe:	69db      	ldr	r3, [r3, #28]
 8012400:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8012402:	68bb      	ldr	r3, [r7, #8]
 8012404:	2b00      	cmp	r3, #0
 8012406:	d101      	bne.n	801240c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8012408:	2302      	movs	r3, #2
 801240a:	e11f      	b.n	801264c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 801240c:	2250      	movs	r2, #80	; 0x50
 801240e:	2100      	movs	r1, #0
 8012410:	68b8      	ldr	r0, [r7, #8]
 8012412:	f004 fcb1 	bl	8016d78 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8012416:	7bfb      	ldrb	r3, [r7, #15]
 8012418:	687a      	ldr	r2, [r7, #4]
 801241a:	211a      	movs	r1, #26
 801241c:	fb01 f303 	mul.w	r3, r1, r3
 8012420:	4413      	add	r3, r2
 8012422:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8012426:	781b      	ldrb	r3, [r3, #0]
 8012428:	b25b      	sxtb	r3, r3
 801242a:	2b00      	cmp	r3, #0
 801242c:	da15      	bge.n	801245a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 801242e:	7bfb      	ldrb	r3, [r7, #15]
 8012430:	687a      	ldr	r2, [r7, #4]
 8012432:	211a      	movs	r1, #26
 8012434:	fb01 f303 	mul.w	r3, r1, r3
 8012438:	4413      	add	r3, r2
 801243a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 801243e:	781a      	ldrb	r2, [r3, #0]
 8012440:	68bb      	ldr	r3, [r7, #8]
 8012442:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8012444:	7bfb      	ldrb	r3, [r7, #15]
 8012446:	687a      	ldr	r2, [r7, #4]
 8012448:	211a      	movs	r1, #26
 801244a:	fb01 f303 	mul.w	r3, r1, r3
 801244e:	4413      	add	r3, r2
 8012450:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8012454:	881a      	ldrh	r2, [r3, #0]
 8012456:	68bb      	ldr	r3, [r7, #8]
 8012458:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 801245a:	68bb      	ldr	r3, [r7, #8]
 801245c:	785b      	ldrb	r3, [r3, #1]
 801245e:	4619      	mov	r1, r3
 8012460:	6878      	ldr	r0, [r7, #4]
 8012462:	f001 ff26 	bl	80142b2 <USBH_AllocPipe>
 8012466:	4603      	mov	r3, r0
 8012468:	461a      	mov	r2, r3
 801246a:	68bb      	ldr	r3, [r7, #8]
 801246c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 801246e:	68bb      	ldr	r3, [r7, #8]
 8012470:	7819      	ldrb	r1, [r3, #0]
 8012472:	68bb      	ldr	r3, [r7, #8]
 8012474:	7858      	ldrb	r0, [r3, #1]
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8012482:	68ba      	ldr	r2, [r7, #8]
 8012484:	8952      	ldrh	r2, [r2, #10]
 8012486:	9202      	str	r2, [sp, #8]
 8012488:	2203      	movs	r2, #3
 801248a:	9201      	str	r2, [sp, #4]
 801248c:	9300      	str	r3, [sp, #0]
 801248e:	4623      	mov	r3, r4
 8012490:	4602      	mov	r2, r0
 8012492:	6878      	ldr	r0, [r7, #4]
 8012494:	f001 fede 	bl	8014254 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8012498:	68bb      	ldr	r3, [r7, #8]
 801249a:	781b      	ldrb	r3, [r3, #0]
 801249c:	2200      	movs	r2, #0
 801249e:	4619      	mov	r1, r3
 80124a0:	6878      	ldr	r0, [r7, #4]
 80124a2:	f004 fb9d 	bl	8016be0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80124a6:	2300      	movs	r3, #0
 80124a8:	2200      	movs	r2, #0
 80124aa:	210a      	movs	r1, #10
 80124ac:	6878      	ldr	r0, [r7, #4]
 80124ae:	f000 fc0a 	bl	8012cc6 <USBH_FindInterface>
 80124b2:	4603      	mov	r3, r0
 80124b4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80124b6:	7bfb      	ldrb	r3, [r7, #15]
 80124b8:	2bff      	cmp	r3, #255	; 0xff
 80124ba:	d002      	beq.n	80124c2 <USBH_CDC_InterfaceInit+0x11a>
 80124bc:	7bfb      	ldrb	r3, [r7, #15]
 80124be:	2b01      	cmp	r3, #1
 80124c0:	d901      	bls.n	80124c6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80124c2:	2302      	movs	r3, #2
 80124c4:	e0c2      	b.n	801264c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80124c6:	7bfb      	ldrb	r3, [r7, #15]
 80124c8:	687a      	ldr	r2, [r7, #4]
 80124ca:	211a      	movs	r1, #26
 80124cc:	fb01 f303 	mul.w	r3, r1, r3
 80124d0:	4413      	add	r3, r2
 80124d2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80124d6:	781b      	ldrb	r3, [r3, #0]
 80124d8:	b25b      	sxtb	r3, r3
 80124da:	2b00      	cmp	r3, #0
 80124dc:	da16      	bge.n	801250c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80124de:	7bfb      	ldrb	r3, [r7, #15]
 80124e0:	687a      	ldr	r2, [r7, #4]
 80124e2:	211a      	movs	r1, #26
 80124e4:	fb01 f303 	mul.w	r3, r1, r3
 80124e8:	4413      	add	r3, r2
 80124ea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80124ee:	781a      	ldrb	r2, [r3, #0]
 80124f0:	68bb      	ldr	r3, [r7, #8]
 80124f2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80124f4:	7bfb      	ldrb	r3, [r7, #15]
 80124f6:	687a      	ldr	r2, [r7, #4]
 80124f8:	211a      	movs	r1, #26
 80124fa:	fb01 f303 	mul.w	r3, r1, r3
 80124fe:	4413      	add	r3, r2
 8012500:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8012504:	881a      	ldrh	r2, [r3, #0]
 8012506:	68bb      	ldr	r3, [r7, #8]
 8012508:	835a      	strh	r2, [r3, #26]
 801250a:	e015      	b.n	8012538 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 801250c:	7bfb      	ldrb	r3, [r7, #15]
 801250e:	687a      	ldr	r2, [r7, #4]
 8012510:	211a      	movs	r1, #26
 8012512:	fb01 f303 	mul.w	r3, r1, r3
 8012516:	4413      	add	r3, r2
 8012518:	f203 334e 	addw	r3, r3, #846	; 0x34e
 801251c:	781a      	ldrb	r2, [r3, #0]
 801251e:	68bb      	ldr	r3, [r7, #8]
 8012520:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8012522:	7bfb      	ldrb	r3, [r7, #15]
 8012524:	687a      	ldr	r2, [r7, #4]
 8012526:	211a      	movs	r1, #26
 8012528:	fb01 f303 	mul.w	r3, r1, r3
 801252c:	4413      	add	r3, r2
 801252e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8012532:	881a      	ldrh	r2, [r3, #0]
 8012534:	68bb      	ldr	r3, [r7, #8]
 8012536:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8012538:	7bfb      	ldrb	r3, [r7, #15]
 801253a:	687a      	ldr	r2, [r7, #4]
 801253c:	211a      	movs	r1, #26
 801253e:	fb01 f303 	mul.w	r3, r1, r3
 8012542:	4413      	add	r3, r2
 8012544:	f203 3356 	addw	r3, r3, #854	; 0x356
 8012548:	781b      	ldrb	r3, [r3, #0]
 801254a:	b25b      	sxtb	r3, r3
 801254c:	2b00      	cmp	r3, #0
 801254e:	da16      	bge.n	801257e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8012550:	7bfb      	ldrb	r3, [r7, #15]
 8012552:	687a      	ldr	r2, [r7, #4]
 8012554:	211a      	movs	r1, #26
 8012556:	fb01 f303 	mul.w	r3, r1, r3
 801255a:	4413      	add	r3, r2
 801255c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8012560:	781a      	ldrb	r2, [r3, #0]
 8012562:	68bb      	ldr	r3, [r7, #8]
 8012564:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8012566:	7bfb      	ldrb	r3, [r7, #15]
 8012568:	687a      	ldr	r2, [r7, #4]
 801256a:	211a      	movs	r1, #26
 801256c:	fb01 f303 	mul.w	r3, r1, r3
 8012570:	4413      	add	r3, r2
 8012572:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8012576:	881a      	ldrh	r2, [r3, #0]
 8012578:	68bb      	ldr	r3, [r7, #8]
 801257a:	835a      	strh	r2, [r3, #26]
 801257c:	e015      	b.n	80125aa <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 801257e:	7bfb      	ldrb	r3, [r7, #15]
 8012580:	687a      	ldr	r2, [r7, #4]
 8012582:	211a      	movs	r1, #26
 8012584:	fb01 f303 	mul.w	r3, r1, r3
 8012588:	4413      	add	r3, r2
 801258a:	f203 3356 	addw	r3, r3, #854	; 0x356
 801258e:	781a      	ldrb	r2, [r3, #0]
 8012590:	68bb      	ldr	r3, [r7, #8]
 8012592:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8012594:	7bfb      	ldrb	r3, [r7, #15]
 8012596:	687a      	ldr	r2, [r7, #4]
 8012598:	211a      	movs	r1, #26
 801259a:	fb01 f303 	mul.w	r3, r1, r3
 801259e:	4413      	add	r3, r2
 80125a0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80125a4:	881a      	ldrh	r2, [r3, #0]
 80125a6:	68bb      	ldr	r3, [r7, #8]
 80125a8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80125aa:	68bb      	ldr	r3, [r7, #8]
 80125ac:	7b9b      	ldrb	r3, [r3, #14]
 80125ae:	4619      	mov	r1, r3
 80125b0:	6878      	ldr	r0, [r7, #4]
 80125b2:	f001 fe7e 	bl	80142b2 <USBH_AllocPipe>
 80125b6:	4603      	mov	r3, r0
 80125b8:	461a      	mov	r2, r3
 80125ba:	68bb      	ldr	r3, [r7, #8]
 80125bc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80125be:	68bb      	ldr	r3, [r7, #8]
 80125c0:	7bdb      	ldrb	r3, [r3, #15]
 80125c2:	4619      	mov	r1, r3
 80125c4:	6878      	ldr	r0, [r7, #4]
 80125c6:	f001 fe74 	bl	80142b2 <USBH_AllocPipe>
 80125ca:	4603      	mov	r3, r0
 80125cc:	461a      	mov	r2, r3
 80125ce:	68bb      	ldr	r3, [r7, #8]
 80125d0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80125d2:	68bb      	ldr	r3, [r7, #8]
 80125d4:	7b59      	ldrb	r1, [r3, #13]
 80125d6:	68bb      	ldr	r3, [r7, #8]
 80125d8:	7b98      	ldrb	r0, [r3, #14]
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80125e6:	68ba      	ldr	r2, [r7, #8]
 80125e8:	8b12      	ldrh	r2, [r2, #24]
 80125ea:	9202      	str	r2, [sp, #8]
 80125ec:	2202      	movs	r2, #2
 80125ee:	9201      	str	r2, [sp, #4]
 80125f0:	9300      	str	r3, [sp, #0]
 80125f2:	4623      	mov	r3, r4
 80125f4:	4602      	mov	r2, r0
 80125f6:	6878      	ldr	r0, [r7, #4]
 80125f8:	f001 fe2c 	bl	8014254 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80125fc:	68bb      	ldr	r3, [r7, #8]
 80125fe:	7b19      	ldrb	r1, [r3, #12]
 8012600:	68bb      	ldr	r3, [r7, #8]
 8012602:	7bd8      	ldrb	r0, [r3, #15]
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8012610:	68ba      	ldr	r2, [r7, #8]
 8012612:	8b52      	ldrh	r2, [r2, #26]
 8012614:	9202      	str	r2, [sp, #8]
 8012616:	2202      	movs	r2, #2
 8012618:	9201      	str	r2, [sp, #4]
 801261a:	9300      	str	r3, [sp, #0]
 801261c:	4623      	mov	r3, r4
 801261e:	4602      	mov	r2, r0
 8012620:	6878      	ldr	r0, [r7, #4]
 8012622:	f001 fe17 	bl	8014254 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8012626:	68bb      	ldr	r3, [r7, #8]
 8012628:	2200      	movs	r2, #0
 801262a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 801262e:	68bb      	ldr	r3, [r7, #8]
 8012630:	7b5b      	ldrb	r3, [r3, #13]
 8012632:	2200      	movs	r2, #0
 8012634:	4619      	mov	r1, r3
 8012636:	6878      	ldr	r0, [r7, #4]
 8012638:	f004 fad2 	bl	8016be0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 801263c:	68bb      	ldr	r3, [r7, #8]
 801263e:	7b1b      	ldrb	r3, [r3, #12]
 8012640:	2200      	movs	r2, #0
 8012642:	4619      	mov	r1, r3
 8012644:	6878      	ldr	r0, [r7, #4]
 8012646:	f004 facb 	bl	8016be0 <USBH_LL_SetToggle>

  return USBH_OK;
 801264a:	2300      	movs	r3, #0
}
 801264c:	4618      	mov	r0, r3
 801264e:	3714      	adds	r7, #20
 8012650:	46bd      	mov	sp, r7
 8012652:	bd90      	pop	{r4, r7, pc}

08012654 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8012654:	b580      	push	{r7, lr}
 8012656:	b084      	sub	sp, #16
 8012658:	af00      	add	r7, sp, #0
 801265a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8012662:	69db      	ldr	r3, [r3, #28]
 8012664:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	781b      	ldrb	r3, [r3, #0]
 801266a:	2b00      	cmp	r3, #0
 801266c:	d00e      	beq.n	801268c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 801266e:	68fb      	ldr	r3, [r7, #12]
 8012670:	781b      	ldrb	r3, [r3, #0]
 8012672:	4619      	mov	r1, r3
 8012674:	6878      	ldr	r0, [r7, #4]
 8012676:	f001 fe0c 	bl	8014292 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	781b      	ldrb	r3, [r3, #0]
 801267e:	4619      	mov	r1, r3
 8012680:	6878      	ldr	r0, [r7, #4]
 8012682:	f001 fe37 	bl	80142f4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	2200      	movs	r2, #0
 801268a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	7b1b      	ldrb	r3, [r3, #12]
 8012690:	2b00      	cmp	r3, #0
 8012692:	d00e      	beq.n	80126b2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	7b1b      	ldrb	r3, [r3, #12]
 8012698:	4619      	mov	r1, r3
 801269a:	6878      	ldr	r0, [r7, #4]
 801269c:	f001 fdf9 	bl	8014292 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	7b1b      	ldrb	r3, [r3, #12]
 80126a4:	4619      	mov	r1, r3
 80126a6:	6878      	ldr	r0, [r7, #4]
 80126a8:	f001 fe24 	bl	80142f4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	2200      	movs	r2, #0
 80126b0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	7b5b      	ldrb	r3, [r3, #13]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d00e      	beq.n	80126d8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	7b5b      	ldrb	r3, [r3, #13]
 80126be:	4619      	mov	r1, r3
 80126c0:	6878      	ldr	r0, [r7, #4]
 80126c2:	f001 fde6 	bl	8014292 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	7b5b      	ldrb	r3, [r3, #13]
 80126ca:	4619      	mov	r1, r3
 80126cc:	6878      	ldr	r0, [r7, #4]
 80126ce:	f001 fe11 	bl	80142f4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	2200      	movs	r2, #0
 80126d6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80126de:	69db      	ldr	r3, [r3, #28]
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d00b      	beq.n	80126fc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80126ea:	69db      	ldr	r3, [r3, #28]
 80126ec:	4618      	mov	r0, r3
 80126ee:	f004 fb2d 	bl	8016d4c <free>
    phost->pActiveClass->pData = 0U;
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80126f8:	2200      	movs	r2, #0
 80126fa:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80126fc:	2300      	movs	r3, #0
}
 80126fe:	4618      	mov	r0, r3
 8012700:	3710      	adds	r7, #16
 8012702:	46bd      	mov	sp, r7
 8012704:	bd80      	pop	{r7, pc}

08012706 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8012706:	b580      	push	{r7, lr}
 8012708:	b084      	sub	sp, #16
 801270a:	af00      	add	r7, sp, #0
 801270c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8012714:	69db      	ldr	r3, [r3, #28]
 8012716:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	3340      	adds	r3, #64	; 0x40
 801271c:	4619      	mov	r1, r3
 801271e:	6878      	ldr	r0, [r7, #4]
 8012720:	f000 f8b1 	bl	8012886 <GetLineCoding>
 8012724:	4603      	mov	r3, r0
 8012726:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8012728:	7afb      	ldrb	r3, [r7, #11]
 801272a:	2b00      	cmp	r3, #0
 801272c:	d105      	bne.n	801273a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8012734:	2102      	movs	r1, #2
 8012736:	6878      	ldr	r0, [r7, #4]
 8012738:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 801273a:	7afb      	ldrb	r3, [r7, #11]
}
 801273c:	4618      	mov	r0, r3
 801273e:	3710      	adds	r7, #16
 8012740:	46bd      	mov	sp, r7
 8012742:	bd80      	pop	{r7, pc}

08012744 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8012744:	b580      	push	{r7, lr}
 8012746:	b084      	sub	sp, #16
 8012748:	af00      	add	r7, sp, #0
 801274a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 801274c:	2301      	movs	r3, #1
 801274e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8012750:	2300      	movs	r3, #0
 8012752:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801275a:	69db      	ldr	r3, [r3, #28]
 801275c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 801275e:	68bb      	ldr	r3, [r7, #8]
 8012760:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8012764:	2b04      	cmp	r3, #4
 8012766:	d877      	bhi.n	8012858 <USBH_CDC_Process+0x114>
 8012768:	a201      	add	r2, pc, #4	; (adr r2, 8012770 <USBH_CDC_Process+0x2c>)
 801276a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801276e:	bf00      	nop
 8012770:	08012785 	.word	0x08012785
 8012774:	0801278b 	.word	0x0801278b
 8012778:	080127bb 	.word	0x080127bb
 801277c:	0801282f 	.word	0x0801282f
 8012780:	0801283d 	.word	0x0801283d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8012784:	2300      	movs	r3, #0
 8012786:	73fb      	strb	r3, [r7, #15]
      break;
 8012788:	e06d      	b.n	8012866 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 801278a:	68bb      	ldr	r3, [r7, #8]
 801278c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801278e:	4619      	mov	r1, r3
 8012790:	6878      	ldr	r0, [r7, #4]
 8012792:	f000 f897 	bl	80128c4 <SetLineCoding>
 8012796:	4603      	mov	r3, r0
 8012798:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 801279a:	7bbb      	ldrb	r3, [r7, #14]
 801279c:	2b00      	cmp	r3, #0
 801279e:	d104      	bne.n	80127aa <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80127a0:	68bb      	ldr	r3, [r7, #8]
 80127a2:	2202      	movs	r2, #2
 80127a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80127a8:	e058      	b.n	801285c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80127aa:	7bbb      	ldrb	r3, [r7, #14]
 80127ac:	2b01      	cmp	r3, #1
 80127ae:	d055      	beq.n	801285c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80127b0:	68bb      	ldr	r3, [r7, #8]
 80127b2:	2204      	movs	r2, #4
 80127b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80127b8:	e050      	b.n	801285c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80127ba:	68bb      	ldr	r3, [r7, #8]
 80127bc:	3340      	adds	r3, #64	; 0x40
 80127be:	4619      	mov	r1, r3
 80127c0:	6878      	ldr	r0, [r7, #4]
 80127c2:	f000 f860 	bl	8012886 <GetLineCoding>
 80127c6:	4603      	mov	r3, r0
 80127c8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80127ca:	7bbb      	ldrb	r3, [r7, #14]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d126      	bne.n	801281e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80127d0:	68bb      	ldr	r3, [r7, #8]
 80127d2:	2200      	movs	r2, #0
 80127d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80127d8:	68bb      	ldr	r3, [r7, #8]
 80127da:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80127de:	68bb      	ldr	r3, [r7, #8]
 80127e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80127e2:	791b      	ldrb	r3, [r3, #4]
 80127e4:	429a      	cmp	r2, r3
 80127e6:	d13b      	bne.n	8012860 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80127e8:	68bb      	ldr	r3, [r7, #8]
 80127ea:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80127ee:	68bb      	ldr	r3, [r7, #8]
 80127f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80127f2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80127f4:	429a      	cmp	r2, r3
 80127f6:	d133      	bne.n	8012860 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80127f8:	68bb      	ldr	r3, [r7, #8]
 80127fa:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80127fe:	68bb      	ldr	r3, [r7, #8]
 8012800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012802:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8012804:	429a      	cmp	r2, r3
 8012806:	d12b      	bne.n	8012860 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8012808:	68bb      	ldr	r3, [r7, #8]
 801280a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801280c:	68bb      	ldr	r3, [r7, #8]
 801280e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012810:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8012812:	429a      	cmp	r2, r3
 8012814:	d124      	bne.n	8012860 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8012816:	6878      	ldr	r0, [r7, #4]
 8012818:	f000 f958 	bl	8012acc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 801281c:	e020      	b.n	8012860 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 801281e:	7bbb      	ldrb	r3, [r7, #14]
 8012820:	2b01      	cmp	r3, #1
 8012822:	d01d      	beq.n	8012860 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8012824:	68bb      	ldr	r3, [r7, #8]
 8012826:	2204      	movs	r2, #4
 8012828:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 801282c:	e018      	b.n	8012860 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 801282e:	6878      	ldr	r0, [r7, #4]
 8012830:	f000 f867 	bl	8012902 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8012834:	6878      	ldr	r0, [r7, #4]
 8012836:	f000 f8da 	bl	80129ee <CDC_ProcessReception>
      break;
 801283a:	e014      	b.n	8012866 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 801283c:	2100      	movs	r1, #0
 801283e:	6878      	ldr	r0, [r7, #4]
 8012840:	f001 f80f 	bl	8013862 <USBH_ClrFeature>
 8012844:	4603      	mov	r3, r0
 8012846:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8012848:	7bbb      	ldrb	r3, [r7, #14]
 801284a:	2b00      	cmp	r3, #0
 801284c:	d10a      	bne.n	8012864 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 801284e:	68bb      	ldr	r3, [r7, #8]
 8012850:	2200      	movs	r2, #0
 8012852:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8012856:	e005      	b.n	8012864 <USBH_CDC_Process+0x120>

    default:
      break;
 8012858:	bf00      	nop
 801285a:	e004      	b.n	8012866 <USBH_CDC_Process+0x122>
      break;
 801285c:	bf00      	nop
 801285e:	e002      	b.n	8012866 <USBH_CDC_Process+0x122>
      break;
 8012860:	bf00      	nop
 8012862:	e000      	b.n	8012866 <USBH_CDC_Process+0x122>
      break;
 8012864:	bf00      	nop

  }

  return status;
 8012866:	7bfb      	ldrb	r3, [r7, #15]
}
 8012868:	4618      	mov	r0, r3
 801286a:	3710      	adds	r7, #16
 801286c:	46bd      	mov	sp, r7
 801286e:	bd80      	pop	{r7, pc}

08012870 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8012870:	b480      	push	{r7}
 8012872:	b083      	sub	sp, #12
 8012874:	af00      	add	r7, sp, #0
 8012876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8012878:	2300      	movs	r3, #0
}
 801287a:	4618      	mov	r0, r3
 801287c:	370c      	adds	r7, #12
 801287e:	46bd      	mov	sp, r7
 8012880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012884:	4770      	bx	lr

08012886 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8012886:	b580      	push	{r7, lr}
 8012888:	b082      	sub	sp, #8
 801288a:	af00      	add	r7, sp, #0
 801288c:	6078      	str	r0, [r7, #4]
 801288e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	22a1      	movs	r2, #161	; 0xa1
 8012894:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	2221      	movs	r2, #33	; 0x21
 801289a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	2200      	movs	r2, #0
 80128a0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	2200      	movs	r2, #0
 80128a6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	2207      	movs	r2, #7
 80128ac:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80128ae:	683b      	ldr	r3, [r7, #0]
 80128b0:	2207      	movs	r2, #7
 80128b2:	4619      	mov	r1, r3
 80128b4:	6878      	ldr	r0, [r7, #4]
 80128b6:	f001 fa7b 	bl	8013db0 <USBH_CtlReq>
 80128ba:	4603      	mov	r3, r0
}
 80128bc:	4618      	mov	r0, r3
 80128be:	3708      	adds	r7, #8
 80128c0:	46bd      	mov	sp, r7
 80128c2:	bd80      	pop	{r7, pc}

080128c4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80128c4:	b580      	push	{r7, lr}
 80128c6:	b082      	sub	sp, #8
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	6078      	str	r0, [r7, #4]
 80128cc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	2221      	movs	r2, #33	; 0x21
 80128d2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	2220      	movs	r2, #32
 80128d8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	2200      	movs	r2, #0
 80128de:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	2200      	movs	r2, #0
 80128e4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	2207      	movs	r2, #7
 80128ea:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80128ec:	683b      	ldr	r3, [r7, #0]
 80128ee:	2207      	movs	r2, #7
 80128f0:	4619      	mov	r1, r3
 80128f2:	6878      	ldr	r0, [r7, #4]
 80128f4:	f001 fa5c 	bl	8013db0 <USBH_CtlReq>
 80128f8:	4603      	mov	r3, r0
}
 80128fa:	4618      	mov	r0, r3
 80128fc:	3708      	adds	r7, #8
 80128fe:	46bd      	mov	sp, r7
 8012900:	bd80      	pop	{r7, pc}

08012902 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8012902:	b580      	push	{r7, lr}
 8012904:	b086      	sub	sp, #24
 8012906:	af02      	add	r7, sp, #8
 8012908:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8012910:	69db      	ldr	r3, [r3, #28]
 8012912:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8012914:	2300      	movs	r3, #0
 8012916:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 801291e:	2b01      	cmp	r3, #1
 8012920:	d002      	beq.n	8012928 <CDC_ProcessTransmission+0x26>
 8012922:	2b02      	cmp	r3, #2
 8012924:	d023      	beq.n	801296e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8012926:	e05e      	b.n	80129e6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801292c:	68fa      	ldr	r2, [r7, #12]
 801292e:	8b12      	ldrh	r2, [r2, #24]
 8012930:	4293      	cmp	r3, r2
 8012932:	d90b      	bls.n	801294c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	69d9      	ldr	r1, [r3, #28]
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	8b1a      	ldrh	r2, [r3, #24]
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	7b5b      	ldrb	r3, [r3, #13]
 8012940:	2001      	movs	r0, #1
 8012942:	9000      	str	r0, [sp, #0]
 8012944:	6878      	ldr	r0, [r7, #4]
 8012946:	f001 fc42 	bl	80141ce <USBH_BulkSendData>
 801294a:	e00b      	b.n	8012964 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8012950:	68fb      	ldr	r3, [r7, #12]
 8012952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8012954:	b29a      	uxth	r2, r3
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	7b5b      	ldrb	r3, [r3, #13]
 801295a:	2001      	movs	r0, #1
 801295c:	9000      	str	r0, [sp, #0]
 801295e:	6878      	ldr	r0, [r7, #4]
 8012960:	f001 fc35 	bl	80141ce <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	2202      	movs	r2, #2
 8012968:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 801296c:	e03b      	b.n	80129e6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	7b5b      	ldrb	r3, [r3, #13]
 8012972:	4619      	mov	r1, r3
 8012974:	6878      	ldr	r0, [r7, #4]
 8012976:	f004 f909 	bl	8016b8c <USBH_LL_GetURBState>
 801297a:	4603      	mov	r3, r0
 801297c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 801297e:	7afb      	ldrb	r3, [r7, #11]
 8012980:	2b01      	cmp	r3, #1
 8012982:	d128      	bne.n	80129d6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012988:	68fa      	ldr	r2, [r7, #12]
 801298a:	8b12      	ldrh	r2, [r2, #24]
 801298c:	4293      	cmp	r3, r2
 801298e:	d90e      	bls.n	80129ae <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012994:	68fa      	ldr	r2, [r7, #12]
 8012996:	8b12      	ldrh	r2, [r2, #24]
 8012998:	1a9a      	subs	r2, r3, r2
 801299a:	68fb      	ldr	r3, [r7, #12]
 801299c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	69db      	ldr	r3, [r3, #28]
 80129a2:	68fa      	ldr	r2, [r7, #12]
 80129a4:	8b12      	ldrh	r2, [r2, #24]
 80129a6:	441a      	add	r2, r3
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	61da      	str	r2, [r3, #28]
 80129ac:	e002      	b.n	80129b4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	2200      	movs	r2, #0
 80129b2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d004      	beq.n	80129c6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	2201      	movs	r2, #1
 80129c0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80129c4:	e00e      	b.n	80129e4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	2200      	movs	r2, #0
 80129ca:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80129ce:	6878      	ldr	r0, [r7, #4]
 80129d0:	f000 f868 	bl	8012aa4 <USBH_CDC_TransmitCallback>
      break;
 80129d4:	e006      	b.n	80129e4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80129d6:	7afb      	ldrb	r3, [r7, #11]
 80129d8:	2b02      	cmp	r3, #2
 80129da:	d103      	bne.n	80129e4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	2201      	movs	r2, #1
 80129e0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80129e4:	bf00      	nop
  }
}
 80129e6:	bf00      	nop
 80129e8:	3710      	adds	r7, #16
 80129ea:	46bd      	mov	sp, r7
 80129ec:	bd80      	pop	{r7, pc}

080129ee <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80129ee:	b580      	push	{r7, lr}
 80129f0:	b086      	sub	sp, #24
 80129f2:	af00      	add	r7, sp, #0
 80129f4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80129fc:	69db      	ldr	r3, [r3, #28]
 80129fe:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8012a00:	2300      	movs	r3, #0
 8012a02:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8012a04:	697b      	ldr	r3, [r7, #20]
 8012a06:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8012a0a:	2b03      	cmp	r3, #3
 8012a0c:	d002      	beq.n	8012a14 <CDC_ProcessReception+0x26>
 8012a0e:	2b04      	cmp	r3, #4
 8012a10:	d00e      	beq.n	8012a30 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8012a12:	e043      	b.n	8012a9c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8012a14:	697b      	ldr	r3, [r7, #20]
 8012a16:	6a19      	ldr	r1, [r3, #32]
 8012a18:	697b      	ldr	r3, [r7, #20]
 8012a1a:	8b5a      	ldrh	r2, [r3, #26]
 8012a1c:	697b      	ldr	r3, [r7, #20]
 8012a1e:	7b1b      	ldrb	r3, [r3, #12]
 8012a20:	6878      	ldr	r0, [r7, #4]
 8012a22:	f001 fbf9 	bl	8014218 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8012a26:	697b      	ldr	r3, [r7, #20]
 8012a28:	2204      	movs	r2, #4
 8012a2a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8012a2e:	e035      	b.n	8012a9c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8012a30:	697b      	ldr	r3, [r7, #20]
 8012a32:	7b1b      	ldrb	r3, [r3, #12]
 8012a34:	4619      	mov	r1, r3
 8012a36:	6878      	ldr	r0, [r7, #4]
 8012a38:	f004 f8a8 	bl	8016b8c <USBH_LL_GetURBState>
 8012a3c:	4603      	mov	r3, r0
 8012a3e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8012a40:	7cfb      	ldrb	r3, [r7, #19]
 8012a42:	2b01      	cmp	r3, #1
 8012a44:	d129      	bne.n	8012a9a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8012a46:	697b      	ldr	r3, [r7, #20]
 8012a48:	7b1b      	ldrb	r3, [r3, #12]
 8012a4a:	4619      	mov	r1, r3
 8012a4c:	6878      	ldr	r0, [r7, #4]
 8012a4e:	f004 f80b 	bl	8016a68 <USBH_LL_GetLastXferSize>
 8012a52:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8012a54:	697b      	ldr	r3, [r7, #20]
 8012a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a58:	68fa      	ldr	r2, [r7, #12]
 8012a5a:	429a      	cmp	r2, r3
 8012a5c:	d016      	beq.n	8012a8c <CDC_ProcessReception+0x9e>
 8012a5e:	697b      	ldr	r3, [r7, #20]
 8012a60:	8b5b      	ldrh	r3, [r3, #26]
 8012a62:	461a      	mov	r2, r3
 8012a64:	68fb      	ldr	r3, [r7, #12]
 8012a66:	4293      	cmp	r3, r2
 8012a68:	d910      	bls.n	8012a8c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8012a6a:	697b      	ldr	r3, [r7, #20]
 8012a6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	1ad2      	subs	r2, r2, r3
 8012a72:	697b      	ldr	r3, [r7, #20]
 8012a74:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8012a76:	697b      	ldr	r3, [r7, #20]
 8012a78:	6a1a      	ldr	r2, [r3, #32]
 8012a7a:	68fb      	ldr	r3, [r7, #12]
 8012a7c:	441a      	add	r2, r3
 8012a7e:	697b      	ldr	r3, [r7, #20]
 8012a80:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8012a82:	697b      	ldr	r3, [r7, #20]
 8012a84:	2203      	movs	r2, #3
 8012a86:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8012a8a:	e006      	b.n	8012a9a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8012a8c:	697b      	ldr	r3, [r7, #20]
 8012a8e:	2200      	movs	r2, #0
 8012a90:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8012a94:	6878      	ldr	r0, [r7, #4]
 8012a96:	f000 f80f 	bl	8012ab8 <USBH_CDC_ReceiveCallback>
      break;
 8012a9a:	bf00      	nop
  }
}
 8012a9c:	bf00      	nop
 8012a9e:	3718      	adds	r7, #24
 8012aa0:	46bd      	mov	sp, r7
 8012aa2:	bd80      	pop	{r7, pc}

08012aa4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8012aa4:	b480      	push	{r7}
 8012aa6:	b083      	sub	sp, #12
 8012aa8:	af00      	add	r7, sp, #0
 8012aaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8012aac:	bf00      	nop
 8012aae:	370c      	adds	r7, #12
 8012ab0:	46bd      	mov	sp, r7
 8012ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ab6:	4770      	bx	lr

08012ab8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8012ab8:	b480      	push	{r7}
 8012aba:	b083      	sub	sp, #12
 8012abc:	af00      	add	r7, sp, #0
 8012abe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8012ac0:	bf00      	nop
 8012ac2:	370c      	adds	r7, #12
 8012ac4:	46bd      	mov	sp, r7
 8012ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aca:	4770      	bx	lr

08012acc <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8012acc:	b480      	push	{r7}
 8012ace:	b083      	sub	sp, #12
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8012ad4:	bf00      	nop
 8012ad6:	370c      	adds	r7, #12
 8012ad8:	46bd      	mov	sp, r7
 8012ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ade:	4770      	bx	lr

08012ae0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8012ae0:	b580      	push	{r7, lr}
 8012ae2:	b084      	sub	sp, #16
 8012ae4:	af00      	add	r7, sp, #0
 8012ae6:	60f8      	str	r0, [r7, #12]
 8012ae8:	60b9      	str	r1, [r7, #8]
 8012aea:	4613      	mov	r3, r2
 8012aec:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d101      	bne.n	8012af8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8012af4:	2302      	movs	r3, #2
 8012af6:	e029      	b.n	8012b4c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8012af8:	68fb      	ldr	r3, [r7, #12]
 8012afa:	79fa      	ldrb	r2, [r7, #7]
 8012afc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	2200      	movs	r2, #0
 8012b04:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8012b08:	68fb      	ldr	r3, [r7, #12]
 8012b0a:	2200      	movs	r2, #0
 8012b0c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8012b10:	68f8      	ldr	r0, [r7, #12]
 8012b12:	f000 f81f 	bl	8012b54 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	2200      	movs	r2, #0
 8012b1a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8012b1e:	68fb      	ldr	r3, [r7, #12]
 8012b20:	2200      	movs	r2, #0
 8012b22:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	2200      	movs	r2, #0
 8012b2a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	2200      	movs	r2, #0
 8012b32:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8012b36:	68bb      	ldr	r3, [r7, #8]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d003      	beq.n	8012b44 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	68ba      	ldr	r2, [r7, #8]
 8012b40:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8012b44:	68f8      	ldr	r0, [r7, #12]
 8012b46:	f003 fedb 	bl	8016900 <USBH_LL_Init>

  return USBH_OK;
 8012b4a:	2300      	movs	r3, #0
}
 8012b4c:	4618      	mov	r0, r3
 8012b4e:	3710      	adds	r7, #16
 8012b50:	46bd      	mov	sp, r7
 8012b52:	bd80      	pop	{r7, pc}

08012b54 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8012b54:	b580      	push	{r7, lr}
 8012b56:	b084      	sub	sp, #16
 8012b58:	af00      	add	r7, sp, #0
 8012b5a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8012b5c:	2300      	movs	r3, #0
 8012b5e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8012b60:	2300      	movs	r3, #0
 8012b62:	60fb      	str	r3, [r7, #12]
 8012b64:	e009      	b.n	8012b7a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8012b66:	687a      	ldr	r2, [r7, #4]
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	33e0      	adds	r3, #224	; 0xe0
 8012b6c:	009b      	lsls	r3, r3, #2
 8012b6e:	4413      	add	r3, r2
 8012b70:	2200      	movs	r2, #0
 8012b72:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8012b74:	68fb      	ldr	r3, [r7, #12]
 8012b76:	3301      	adds	r3, #1
 8012b78:	60fb      	str	r3, [r7, #12]
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	2b0f      	cmp	r3, #15
 8012b7e:	d9f2      	bls.n	8012b66 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8012b80:	2300      	movs	r3, #0
 8012b82:	60fb      	str	r3, [r7, #12]
 8012b84:	e009      	b.n	8012b9a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8012b86:	687a      	ldr	r2, [r7, #4]
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	4413      	add	r3, r2
 8012b8c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8012b90:	2200      	movs	r2, #0
 8012b92:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	3301      	adds	r3, #1
 8012b98:	60fb      	str	r3, [r7, #12]
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012ba0:	d3f1      	bcc.n	8012b86 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	2200      	movs	r2, #0
 8012ba6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	2200      	movs	r2, #0
 8012bac:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	2201      	movs	r2, #1
 8012bb2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	2200      	movs	r2, #0
 8012bb8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	2201      	movs	r2, #1
 8012bc0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	2240      	movs	r2, #64	; 0x40
 8012bc6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	2200      	movs	r2, #0
 8012bcc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	2200      	movs	r2, #0
 8012bd2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	2201      	movs	r2, #1
 8012bda:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	2200      	movs	r2, #0
 8012be2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	2200      	movs	r2, #0
 8012bea:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	331c      	adds	r3, #28
 8012bf2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012bf6:	2100      	movs	r1, #0
 8012bf8:	4618      	mov	r0, r3
 8012bfa:	f004 f8bd 	bl	8016d78 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8012c04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012c08:	2100      	movs	r1, #0
 8012c0a:	4618      	mov	r0, r3
 8012c0c:	f004 f8b4 	bl	8016d78 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	f203 3326 	addw	r3, r3, #806	; 0x326
 8012c16:	2212      	movs	r2, #18
 8012c18:	2100      	movs	r1, #0
 8012c1a:	4618      	mov	r0, r3
 8012c1c:	f004 f8ac 	bl	8016d78 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8012c26:	223e      	movs	r2, #62	; 0x3e
 8012c28:	2100      	movs	r1, #0
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	f004 f8a4 	bl	8016d78 <memset>

  return USBH_OK;
 8012c30:	2300      	movs	r3, #0
}
 8012c32:	4618      	mov	r0, r3
 8012c34:	3710      	adds	r7, #16
 8012c36:	46bd      	mov	sp, r7
 8012c38:	bd80      	pop	{r7, pc}

08012c3a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8012c3a:	b480      	push	{r7}
 8012c3c:	b085      	sub	sp, #20
 8012c3e:	af00      	add	r7, sp, #0
 8012c40:	6078      	str	r0, [r7, #4]
 8012c42:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8012c44:	2300      	movs	r3, #0
 8012c46:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8012c48:	683b      	ldr	r3, [r7, #0]
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d016      	beq.n	8012c7c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d10e      	bne.n	8012c76 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8012c5e:	1c59      	adds	r1, r3, #1
 8012c60:	687a      	ldr	r2, [r7, #4]
 8012c62:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8012c66:	687a      	ldr	r2, [r7, #4]
 8012c68:	33de      	adds	r3, #222	; 0xde
 8012c6a:	6839      	ldr	r1, [r7, #0]
 8012c6c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8012c70:	2300      	movs	r3, #0
 8012c72:	73fb      	strb	r3, [r7, #15]
 8012c74:	e004      	b.n	8012c80 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8012c76:	2302      	movs	r3, #2
 8012c78:	73fb      	strb	r3, [r7, #15]
 8012c7a:	e001      	b.n	8012c80 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8012c7c:	2302      	movs	r3, #2
 8012c7e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8012c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c82:	4618      	mov	r0, r3
 8012c84:	3714      	adds	r7, #20
 8012c86:	46bd      	mov	sp, r7
 8012c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c8c:	4770      	bx	lr

08012c8e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8012c8e:	b480      	push	{r7}
 8012c90:	b085      	sub	sp, #20
 8012c92:	af00      	add	r7, sp, #0
 8012c94:	6078      	str	r0, [r7, #4]
 8012c96:	460b      	mov	r3, r1
 8012c98:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8012c9a:	2300      	movs	r3, #0
 8012c9c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8012ca4:	78fa      	ldrb	r2, [r7, #3]
 8012ca6:	429a      	cmp	r2, r3
 8012ca8:	d204      	bcs.n	8012cb4 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	78fa      	ldrb	r2, [r7, #3]
 8012cae:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8012cb2:	e001      	b.n	8012cb8 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8012cb4:	2302      	movs	r3, #2
 8012cb6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8012cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8012cba:	4618      	mov	r0, r3
 8012cbc:	3714      	adds	r7, #20
 8012cbe:	46bd      	mov	sp, r7
 8012cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cc4:	4770      	bx	lr

08012cc6 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8012cc6:	b480      	push	{r7}
 8012cc8:	b087      	sub	sp, #28
 8012cca:	af00      	add	r7, sp, #0
 8012ccc:	6078      	str	r0, [r7, #4]
 8012cce:	4608      	mov	r0, r1
 8012cd0:	4611      	mov	r1, r2
 8012cd2:	461a      	mov	r2, r3
 8012cd4:	4603      	mov	r3, r0
 8012cd6:	70fb      	strb	r3, [r7, #3]
 8012cd8:	460b      	mov	r3, r1
 8012cda:	70bb      	strb	r3, [r7, #2]
 8012cdc:	4613      	mov	r3, r2
 8012cde:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8012ce0:	2300      	movs	r3, #0
 8012ce2:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8012ce4:	2300      	movs	r3, #0
 8012ce6:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8012cee:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8012cf0:	e025      	b.n	8012d3e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8012cf2:	7dfb      	ldrb	r3, [r7, #23]
 8012cf4:	221a      	movs	r2, #26
 8012cf6:	fb02 f303 	mul.w	r3, r2, r3
 8012cfa:	3308      	adds	r3, #8
 8012cfc:	68fa      	ldr	r2, [r7, #12]
 8012cfe:	4413      	add	r3, r2
 8012d00:	3302      	adds	r3, #2
 8012d02:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8012d04:	693b      	ldr	r3, [r7, #16]
 8012d06:	795b      	ldrb	r3, [r3, #5]
 8012d08:	78fa      	ldrb	r2, [r7, #3]
 8012d0a:	429a      	cmp	r2, r3
 8012d0c:	d002      	beq.n	8012d14 <USBH_FindInterface+0x4e>
 8012d0e:	78fb      	ldrb	r3, [r7, #3]
 8012d10:	2bff      	cmp	r3, #255	; 0xff
 8012d12:	d111      	bne.n	8012d38 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8012d14:	693b      	ldr	r3, [r7, #16]
 8012d16:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8012d18:	78ba      	ldrb	r2, [r7, #2]
 8012d1a:	429a      	cmp	r2, r3
 8012d1c:	d002      	beq.n	8012d24 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8012d1e:	78bb      	ldrb	r3, [r7, #2]
 8012d20:	2bff      	cmp	r3, #255	; 0xff
 8012d22:	d109      	bne.n	8012d38 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8012d24:	693b      	ldr	r3, [r7, #16]
 8012d26:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8012d28:	787a      	ldrb	r2, [r7, #1]
 8012d2a:	429a      	cmp	r2, r3
 8012d2c:	d002      	beq.n	8012d34 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8012d2e:	787b      	ldrb	r3, [r7, #1]
 8012d30:	2bff      	cmp	r3, #255	; 0xff
 8012d32:	d101      	bne.n	8012d38 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8012d34:	7dfb      	ldrb	r3, [r7, #23]
 8012d36:	e006      	b.n	8012d46 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8012d38:	7dfb      	ldrb	r3, [r7, #23]
 8012d3a:	3301      	adds	r3, #1
 8012d3c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8012d3e:	7dfb      	ldrb	r3, [r7, #23]
 8012d40:	2b01      	cmp	r3, #1
 8012d42:	d9d6      	bls.n	8012cf2 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8012d44:	23ff      	movs	r3, #255	; 0xff
}
 8012d46:	4618      	mov	r0, r3
 8012d48:	371c      	adds	r7, #28
 8012d4a:	46bd      	mov	sp, r7
 8012d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d50:	4770      	bx	lr

08012d52 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8012d52:	b580      	push	{r7, lr}
 8012d54:	b082      	sub	sp, #8
 8012d56:	af00      	add	r7, sp, #0
 8012d58:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8012d5a:	6878      	ldr	r0, [r7, #4]
 8012d5c:	f003 fe0c 	bl	8016978 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8012d60:	2101      	movs	r1, #1
 8012d62:	6878      	ldr	r0, [r7, #4]
 8012d64:	f003 ff25 	bl	8016bb2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8012d68:	2300      	movs	r3, #0
}
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	3708      	adds	r7, #8
 8012d6e:	46bd      	mov	sp, r7
 8012d70:	bd80      	pop	{r7, pc}
	...

08012d74 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8012d74:	b580      	push	{r7, lr}
 8012d76:	b088      	sub	sp, #32
 8012d78:	af04      	add	r7, sp, #16
 8012d7a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8012d7c:	2302      	movs	r3, #2
 8012d7e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8012d80:	2300      	movs	r3, #0
 8012d82:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8012d8a:	b2db      	uxtb	r3, r3
 8012d8c:	2b01      	cmp	r3, #1
 8012d8e:	d102      	bne.n	8012d96 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	2203      	movs	r2, #3
 8012d94:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	781b      	ldrb	r3, [r3, #0]
 8012d9a:	b2db      	uxtb	r3, r3
 8012d9c:	2b0b      	cmp	r3, #11
 8012d9e:	f200 81be 	bhi.w	801311e <USBH_Process+0x3aa>
 8012da2:	a201      	add	r2, pc, #4	; (adr r2, 8012da8 <USBH_Process+0x34>)
 8012da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012da8:	08012dd9 	.word	0x08012dd9
 8012dac:	08012e0b 	.word	0x08012e0b
 8012db0:	08012e73 	.word	0x08012e73
 8012db4:	080130b9 	.word	0x080130b9
 8012db8:	0801311f 	.word	0x0801311f
 8012dbc:	08012f17 	.word	0x08012f17
 8012dc0:	0801305f 	.word	0x0801305f
 8012dc4:	08012f4d 	.word	0x08012f4d
 8012dc8:	08012f6d 	.word	0x08012f6d
 8012dcc:	08012f8d 	.word	0x08012f8d
 8012dd0:	08012fd1 	.word	0x08012fd1
 8012dd4:	080130a1 	.word	0x080130a1
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8012dde:	b2db      	uxtb	r3, r3
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	f000 819e 	beq.w	8013122 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	2201      	movs	r2, #1
 8012dea:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8012dec:	20c8      	movs	r0, #200	; 0xc8
 8012dee:	f003 ff27 	bl	8016c40 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8012df2:	6878      	ldr	r0, [r7, #4]
 8012df4:	f003 fe1d 	bl	8016a32 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	2200      	movs	r2, #0
 8012dfc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	2200      	movs	r2, #0
 8012e04:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8012e08:	e18b      	b.n	8013122 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8012e10:	2b01      	cmp	r3, #1
 8012e12:	d107      	bne.n	8012e24 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	2200      	movs	r2, #0
 8012e18:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	2202      	movs	r2, #2
 8012e20:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8012e22:	e18d      	b.n	8013140 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8012e2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012e2e:	d914      	bls.n	8012e5a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8012e36:	3301      	adds	r3, #1
 8012e38:	b2da      	uxtb	r2, r3
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8012e46:	2b03      	cmp	r3, #3
 8012e48:	d903      	bls.n	8012e52 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	220d      	movs	r2, #13
 8012e4e:	701a      	strb	r2, [r3, #0]
      break;
 8012e50:	e176      	b.n	8013140 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	2200      	movs	r2, #0
 8012e56:	701a      	strb	r2, [r3, #0]
      break;
 8012e58:	e172      	b.n	8013140 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8012e60:	f103 020a 	add.w	r2, r3, #10
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8012e6a:	200a      	movs	r0, #10
 8012e6c:	f003 fee8 	bl	8016c40 <USBH_Delay>
      break;
 8012e70:	e166      	b.n	8013140 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d005      	beq.n	8012e88 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8012e82:	2104      	movs	r1, #4
 8012e84:	6878      	ldr	r0, [r7, #4]
 8012e86:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8012e88:	2064      	movs	r0, #100	; 0x64
 8012e8a:	f003 fed9 	bl	8016c40 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8012e8e:	6878      	ldr	r0, [r7, #4]
 8012e90:	f003 fda8 	bl	80169e4 <USBH_LL_GetSpeed>
 8012e94:	4603      	mov	r3, r0
 8012e96:	461a      	mov	r2, r3
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	2205      	movs	r2, #5
 8012ea2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8012ea4:	2100      	movs	r1, #0
 8012ea6:	6878      	ldr	r0, [r7, #4]
 8012ea8:	f001 fa03 	bl	80142b2 <USBH_AllocPipe>
 8012eac:	4603      	mov	r3, r0
 8012eae:	461a      	mov	r2, r3
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8012eb4:	2180      	movs	r1, #128	; 0x80
 8012eb6:	6878      	ldr	r0, [r7, #4]
 8012eb8:	f001 f9fb 	bl	80142b2 <USBH_AllocPipe>
 8012ebc:	4603      	mov	r3, r0
 8012ebe:	461a      	mov	r2, r3
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	7919      	ldrb	r1, [r3, #4]
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8012ed4:	687a      	ldr	r2, [r7, #4]
 8012ed6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8012ed8:	b292      	uxth	r2, r2
 8012eda:	9202      	str	r2, [sp, #8]
 8012edc:	2200      	movs	r2, #0
 8012ede:	9201      	str	r2, [sp, #4]
 8012ee0:	9300      	str	r3, [sp, #0]
 8012ee2:	4603      	mov	r3, r0
 8012ee4:	2280      	movs	r2, #128	; 0x80
 8012ee6:	6878      	ldr	r0, [r7, #4]
 8012ee8:	f001 f9b4 	bl	8014254 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	7959      	ldrb	r1, [r3, #5]
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8012efc:	687a      	ldr	r2, [r7, #4]
 8012efe:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8012f00:	b292      	uxth	r2, r2
 8012f02:	9202      	str	r2, [sp, #8]
 8012f04:	2200      	movs	r2, #0
 8012f06:	9201      	str	r2, [sp, #4]
 8012f08:	9300      	str	r3, [sp, #0]
 8012f0a:	4603      	mov	r3, r0
 8012f0c:	2200      	movs	r2, #0
 8012f0e:	6878      	ldr	r0, [r7, #4]
 8012f10:	f001 f9a0 	bl	8014254 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8012f14:	e114      	b.n	8013140 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8012f16:	6878      	ldr	r0, [r7, #4]
 8012f18:	f000 f918 	bl	801314c <USBH_HandleEnum>
 8012f1c:	4603      	mov	r3, r0
 8012f1e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8012f20:	7bbb      	ldrb	r3, [r7, #14]
 8012f22:	b2db      	uxtb	r3, r3
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	f040 80fe 	bne.w	8013126 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	2200      	movs	r2, #0
 8012f2e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8012f38:	2b01      	cmp	r3, #1
 8012f3a:	d103      	bne.n	8012f44 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	2208      	movs	r2, #8
 8012f40:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8012f42:	e0f0      	b.n	8013126 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	2207      	movs	r2, #7
 8012f48:	701a      	strb	r2, [r3, #0]
      break;
 8012f4a:	e0ec      	b.n	8013126 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	f000 80e9 	beq.w	801312a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8012f5e:	2101      	movs	r1, #1
 8012f60:	6878      	ldr	r0, [r7, #4]
 8012f62:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	2208      	movs	r2, #8
 8012f68:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8012f6a:	e0de      	b.n	801312a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8012f72:	b29b      	uxth	r3, r3
 8012f74:	4619      	mov	r1, r3
 8012f76:	6878      	ldr	r0, [r7, #4]
 8012f78:	f000 fc2c 	bl	80137d4 <USBH_SetCfg>
 8012f7c:	4603      	mov	r3, r0
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	f040 80d5 	bne.w	801312e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	2209      	movs	r2, #9
 8012f88:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8012f8a:	e0d0      	b.n	801312e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8012f92:	f003 0320 	and.w	r3, r3, #32
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d016      	beq.n	8012fc8 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8012f9a:	2101      	movs	r1, #1
 8012f9c:	6878      	ldr	r0, [r7, #4]
 8012f9e:	f000 fc3c 	bl	801381a <USBH_SetFeature>
 8012fa2:	4603      	mov	r3, r0
 8012fa4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8012fa6:	7bbb      	ldrb	r3, [r7, #14]
 8012fa8:	b2db      	uxtb	r3, r3
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d103      	bne.n	8012fb6 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	220a      	movs	r2, #10
 8012fb2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8012fb4:	e0bd      	b.n	8013132 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8012fb6:	7bbb      	ldrb	r3, [r7, #14]
 8012fb8:	b2db      	uxtb	r3, r3
 8012fba:	2b03      	cmp	r3, #3
 8012fbc:	f040 80b9 	bne.w	8013132 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	220a      	movs	r2, #10
 8012fc4:	701a      	strb	r2, [r3, #0]
      break;
 8012fc6:	e0b4      	b.n	8013132 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	220a      	movs	r2, #10
 8012fcc:	701a      	strb	r2, [r3, #0]
      break;
 8012fce:	e0b0      	b.n	8013132 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	f000 80ad 	beq.w	8013136 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	2200      	movs	r2, #0
 8012fe0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8012fe4:	2300      	movs	r3, #0
 8012fe6:	73fb      	strb	r3, [r7, #15]
 8012fe8:	e016      	b.n	8013018 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8012fea:	7bfa      	ldrb	r2, [r7, #15]
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	32de      	adds	r2, #222	; 0xde
 8012ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ff4:	791a      	ldrb	r2, [r3, #4]
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8012ffc:	429a      	cmp	r2, r3
 8012ffe:	d108      	bne.n	8013012 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8013000:	7bfa      	ldrb	r2, [r7, #15]
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	32de      	adds	r2, #222	; 0xde
 8013006:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8013010:	e005      	b.n	801301e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8013012:	7bfb      	ldrb	r3, [r7, #15]
 8013014:	3301      	adds	r3, #1
 8013016:	73fb      	strb	r3, [r7, #15]
 8013018:	7bfb      	ldrb	r3, [r7, #15]
 801301a:	2b00      	cmp	r3, #0
 801301c:	d0e5      	beq.n	8012fea <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013024:	2b00      	cmp	r3, #0
 8013026:	d016      	beq.n	8013056 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801302e:	689b      	ldr	r3, [r3, #8]
 8013030:	6878      	ldr	r0, [r7, #4]
 8013032:	4798      	blx	r3
 8013034:	4603      	mov	r3, r0
 8013036:	2b00      	cmp	r3, #0
 8013038:	d109      	bne.n	801304e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	2206      	movs	r2, #6
 801303e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8013046:	2103      	movs	r1, #3
 8013048:	6878      	ldr	r0, [r7, #4]
 801304a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 801304c:	e073      	b.n	8013136 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	220d      	movs	r2, #13
 8013052:	701a      	strb	r2, [r3, #0]
      break;
 8013054:	e06f      	b.n	8013136 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	220d      	movs	r2, #13
 801305a:	701a      	strb	r2, [r3, #0]
      break;
 801305c:	e06b      	b.n	8013136 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013064:	2b00      	cmp	r3, #0
 8013066:	d017      	beq.n	8013098 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801306e:	691b      	ldr	r3, [r3, #16]
 8013070:	6878      	ldr	r0, [r7, #4]
 8013072:	4798      	blx	r3
 8013074:	4603      	mov	r3, r0
 8013076:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8013078:	7bbb      	ldrb	r3, [r7, #14]
 801307a:	b2db      	uxtb	r3, r3
 801307c:	2b00      	cmp	r3, #0
 801307e:	d103      	bne.n	8013088 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	220b      	movs	r2, #11
 8013084:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8013086:	e058      	b.n	801313a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8013088:	7bbb      	ldrb	r3, [r7, #14]
 801308a:	b2db      	uxtb	r3, r3
 801308c:	2b02      	cmp	r3, #2
 801308e:	d154      	bne.n	801313a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	220d      	movs	r2, #13
 8013094:	701a      	strb	r2, [r3, #0]
      break;
 8013096:	e050      	b.n	801313a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	220d      	movs	r2, #13
 801309c:	701a      	strb	r2, [r3, #0]
      break;
 801309e:	e04c      	b.n	801313a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d049      	beq.n	801313e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80130b0:	695b      	ldr	r3, [r3, #20]
 80130b2:	6878      	ldr	r0, [r7, #4]
 80130b4:	4798      	blx	r3
      }
      break;
 80130b6:	e042      	b.n	801313e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	2200      	movs	r2, #0
 80130bc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80130c0:	6878      	ldr	r0, [r7, #4]
 80130c2:	f7ff fd47 	bl	8012b54 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d009      	beq.n	80130e4 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80130d6:	68db      	ldr	r3, [r3, #12]
 80130d8:	6878      	ldr	r0, [r7, #4]
 80130da:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	2200      	movs	r2, #0
 80130e0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d005      	beq.n	80130fa <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80130f4:	2105      	movs	r1, #5
 80130f6:	6878      	ldr	r0, [r7, #4]
 80130f8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8013100:	b2db      	uxtb	r3, r3
 8013102:	2b01      	cmp	r3, #1
 8013104:	d107      	bne.n	8013116 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	2200      	movs	r2, #0
 801310a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 801310e:	6878      	ldr	r0, [r7, #4]
 8013110:	f7ff fe1f 	bl	8012d52 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8013114:	e014      	b.n	8013140 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8013116:	6878      	ldr	r0, [r7, #4]
 8013118:	f003 fc2e 	bl	8016978 <USBH_LL_Start>
      break;
 801311c:	e010      	b.n	8013140 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 801311e:	bf00      	nop
 8013120:	e00e      	b.n	8013140 <USBH_Process+0x3cc>
      break;
 8013122:	bf00      	nop
 8013124:	e00c      	b.n	8013140 <USBH_Process+0x3cc>
      break;
 8013126:	bf00      	nop
 8013128:	e00a      	b.n	8013140 <USBH_Process+0x3cc>
    break;
 801312a:	bf00      	nop
 801312c:	e008      	b.n	8013140 <USBH_Process+0x3cc>
      break;
 801312e:	bf00      	nop
 8013130:	e006      	b.n	8013140 <USBH_Process+0x3cc>
      break;
 8013132:	bf00      	nop
 8013134:	e004      	b.n	8013140 <USBH_Process+0x3cc>
      break;
 8013136:	bf00      	nop
 8013138:	e002      	b.n	8013140 <USBH_Process+0x3cc>
      break;
 801313a:	bf00      	nop
 801313c:	e000      	b.n	8013140 <USBH_Process+0x3cc>
      break;
 801313e:	bf00      	nop
  }
  return USBH_OK;
 8013140:	2300      	movs	r3, #0
}
 8013142:	4618      	mov	r0, r3
 8013144:	3710      	adds	r7, #16
 8013146:	46bd      	mov	sp, r7
 8013148:	bd80      	pop	{r7, pc}
 801314a:	bf00      	nop

0801314c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 801314c:	b580      	push	{r7, lr}
 801314e:	b088      	sub	sp, #32
 8013150:	af04      	add	r7, sp, #16
 8013152:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8013154:	2301      	movs	r3, #1
 8013156:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8013158:	2301      	movs	r3, #1
 801315a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	785b      	ldrb	r3, [r3, #1]
 8013160:	2b07      	cmp	r3, #7
 8013162:	f200 81c1 	bhi.w	80134e8 <USBH_HandleEnum+0x39c>
 8013166:	a201      	add	r2, pc, #4	; (adr r2, 801316c <USBH_HandleEnum+0x20>)
 8013168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801316c:	0801318d 	.word	0x0801318d
 8013170:	0801324b 	.word	0x0801324b
 8013174:	080132b5 	.word	0x080132b5
 8013178:	08013343 	.word	0x08013343
 801317c:	080133ad 	.word	0x080133ad
 8013180:	0801341d 	.word	0x0801341d
 8013184:	08013463 	.word	0x08013463
 8013188:	080134a9 	.word	0x080134a9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 801318c:	2108      	movs	r1, #8
 801318e:	6878      	ldr	r0, [r7, #4]
 8013190:	f000 fa50 	bl	8013634 <USBH_Get_DevDesc>
 8013194:	4603      	mov	r3, r0
 8013196:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8013198:	7bbb      	ldrb	r3, [r7, #14]
 801319a:	2b00      	cmp	r3, #0
 801319c:	d130      	bne.n	8013200 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	2201      	movs	r2, #1
 80131ac:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	7919      	ldrb	r1, [r3, #4]
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80131be:	687a      	ldr	r2, [r7, #4]
 80131c0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80131c2:	b292      	uxth	r2, r2
 80131c4:	9202      	str	r2, [sp, #8]
 80131c6:	2200      	movs	r2, #0
 80131c8:	9201      	str	r2, [sp, #4]
 80131ca:	9300      	str	r3, [sp, #0]
 80131cc:	4603      	mov	r3, r0
 80131ce:	2280      	movs	r2, #128	; 0x80
 80131d0:	6878      	ldr	r0, [r7, #4]
 80131d2:	f001 f83f 	bl	8014254 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	7959      	ldrb	r1, [r3, #5]
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80131e6:	687a      	ldr	r2, [r7, #4]
 80131e8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80131ea:	b292      	uxth	r2, r2
 80131ec:	9202      	str	r2, [sp, #8]
 80131ee:	2200      	movs	r2, #0
 80131f0:	9201      	str	r2, [sp, #4]
 80131f2:	9300      	str	r3, [sp, #0]
 80131f4:	4603      	mov	r3, r0
 80131f6:	2200      	movs	r2, #0
 80131f8:	6878      	ldr	r0, [r7, #4]
 80131fa:	f001 f82b 	bl	8014254 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80131fe:	e175      	b.n	80134ec <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013200:	7bbb      	ldrb	r3, [r7, #14]
 8013202:	2b03      	cmp	r3, #3
 8013204:	f040 8172 	bne.w	80134ec <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801320e:	3301      	adds	r3, #1
 8013210:	b2da      	uxtb	r2, r3
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801321e:	2b03      	cmp	r3, #3
 8013220:	d903      	bls.n	801322a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	220d      	movs	r2, #13
 8013226:	701a      	strb	r2, [r3, #0]
      break;
 8013228:	e160      	b.n	80134ec <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	795b      	ldrb	r3, [r3, #5]
 801322e:	4619      	mov	r1, r3
 8013230:	6878      	ldr	r0, [r7, #4]
 8013232:	f001 f85f 	bl	80142f4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	791b      	ldrb	r3, [r3, #4]
 801323a:	4619      	mov	r1, r3
 801323c:	6878      	ldr	r0, [r7, #4]
 801323e:	f001 f859 	bl	80142f4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	2200      	movs	r2, #0
 8013246:	701a      	strb	r2, [r3, #0]
      break;
 8013248:	e150      	b.n	80134ec <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 801324a:	2112      	movs	r1, #18
 801324c:	6878      	ldr	r0, [r7, #4]
 801324e:	f000 f9f1 	bl	8013634 <USBH_Get_DevDesc>
 8013252:	4603      	mov	r3, r0
 8013254:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8013256:	7bbb      	ldrb	r3, [r7, #14]
 8013258:	2b00      	cmp	r3, #0
 801325a:	d103      	bne.n	8013264 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	2202      	movs	r2, #2
 8013260:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8013262:	e145      	b.n	80134f0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013264:	7bbb      	ldrb	r3, [r7, #14]
 8013266:	2b03      	cmp	r3, #3
 8013268:	f040 8142 	bne.w	80134f0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8013272:	3301      	adds	r3, #1
 8013274:	b2da      	uxtb	r2, r3
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8013282:	2b03      	cmp	r3, #3
 8013284:	d903      	bls.n	801328e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	220d      	movs	r2, #13
 801328a:	701a      	strb	r2, [r3, #0]
      break;
 801328c:	e130      	b.n	80134f0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	795b      	ldrb	r3, [r3, #5]
 8013292:	4619      	mov	r1, r3
 8013294:	6878      	ldr	r0, [r7, #4]
 8013296:	f001 f82d 	bl	80142f4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	791b      	ldrb	r3, [r3, #4]
 801329e:	4619      	mov	r1, r3
 80132a0:	6878      	ldr	r0, [r7, #4]
 80132a2:	f001 f827 	bl	80142f4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	2200      	movs	r2, #0
 80132aa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	2200      	movs	r2, #0
 80132b0:	701a      	strb	r2, [r3, #0]
      break;
 80132b2:	e11d      	b.n	80134f0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80132b4:	2101      	movs	r1, #1
 80132b6:	6878      	ldr	r0, [r7, #4]
 80132b8:	f000 fa68 	bl	801378c <USBH_SetAddress>
 80132bc:	4603      	mov	r3, r0
 80132be:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80132c0:	7bbb      	ldrb	r3, [r7, #14]
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d132      	bne.n	801332c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80132c6:	2002      	movs	r0, #2
 80132c8:	f003 fcba 	bl	8016c40 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	2201      	movs	r2, #1
 80132d0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	2203      	movs	r2, #3
 80132d8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	7919      	ldrb	r1, [r3, #4]
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80132ea:	687a      	ldr	r2, [r7, #4]
 80132ec:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80132ee:	b292      	uxth	r2, r2
 80132f0:	9202      	str	r2, [sp, #8]
 80132f2:	2200      	movs	r2, #0
 80132f4:	9201      	str	r2, [sp, #4]
 80132f6:	9300      	str	r3, [sp, #0]
 80132f8:	4603      	mov	r3, r0
 80132fa:	2280      	movs	r2, #128	; 0x80
 80132fc:	6878      	ldr	r0, [r7, #4]
 80132fe:	f000 ffa9 	bl	8014254 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	7959      	ldrb	r1, [r3, #5]
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8013312:	687a      	ldr	r2, [r7, #4]
 8013314:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8013316:	b292      	uxth	r2, r2
 8013318:	9202      	str	r2, [sp, #8]
 801331a:	2200      	movs	r2, #0
 801331c:	9201      	str	r2, [sp, #4]
 801331e:	9300      	str	r3, [sp, #0]
 8013320:	4603      	mov	r3, r0
 8013322:	2200      	movs	r2, #0
 8013324:	6878      	ldr	r0, [r7, #4]
 8013326:	f000 ff95 	bl	8014254 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 801332a:	e0e3      	b.n	80134f4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 801332c:	7bbb      	ldrb	r3, [r7, #14]
 801332e:	2b03      	cmp	r3, #3
 8013330:	f040 80e0 	bne.w	80134f4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	220d      	movs	r2, #13
 8013338:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	2200      	movs	r2, #0
 801333e:	705a      	strb	r2, [r3, #1]
      break;
 8013340:	e0d8      	b.n	80134f4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8013342:	2109      	movs	r1, #9
 8013344:	6878      	ldr	r0, [r7, #4]
 8013346:	f000 f99d 	bl	8013684 <USBH_Get_CfgDesc>
 801334a:	4603      	mov	r3, r0
 801334c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801334e:	7bbb      	ldrb	r3, [r7, #14]
 8013350:	2b00      	cmp	r3, #0
 8013352:	d103      	bne.n	801335c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	2204      	movs	r2, #4
 8013358:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 801335a:	e0cd      	b.n	80134f8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 801335c:	7bbb      	ldrb	r3, [r7, #14]
 801335e:	2b03      	cmp	r3, #3
 8013360:	f040 80ca 	bne.w	80134f8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801336a:	3301      	adds	r3, #1
 801336c:	b2da      	uxtb	r2, r3
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801337a:	2b03      	cmp	r3, #3
 801337c:	d903      	bls.n	8013386 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	220d      	movs	r2, #13
 8013382:	701a      	strb	r2, [r3, #0]
      break;
 8013384:	e0b8      	b.n	80134f8 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	795b      	ldrb	r3, [r3, #5]
 801338a:	4619      	mov	r1, r3
 801338c:	6878      	ldr	r0, [r7, #4]
 801338e:	f000 ffb1 	bl	80142f4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	791b      	ldrb	r3, [r3, #4]
 8013396:	4619      	mov	r1, r3
 8013398:	6878      	ldr	r0, [r7, #4]
 801339a:	f000 ffab 	bl	80142f4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	2200      	movs	r2, #0
 80133a2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	2200      	movs	r2, #0
 80133a8:	701a      	strb	r2, [r3, #0]
      break;
 80133aa:	e0a5      	b.n	80134f8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80133b2:	4619      	mov	r1, r3
 80133b4:	6878      	ldr	r0, [r7, #4]
 80133b6:	f000 f965 	bl	8013684 <USBH_Get_CfgDesc>
 80133ba:	4603      	mov	r3, r0
 80133bc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80133be:	7bbb      	ldrb	r3, [r7, #14]
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d103      	bne.n	80133cc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	2205      	movs	r2, #5
 80133c8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80133ca:	e097      	b.n	80134fc <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80133cc:	7bbb      	ldrb	r3, [r7, #14]
 80133ce:	2b03      	cmp	r3, #3
 80133d0:	f040 8094 	bne.w	80134fc <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80133da:	3301      	adds	r3, #1
 80133dc:	b2da      	uxtb	r2, r3
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80133ea:	2b03      	cmp	r3, #3
 80133ec:	d903      	bls.n	80133f6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	220d      	movs	r2, #13
 80133f2:	701a      	strb	r2, [r3, #0]
      break;
 80133f4:	e082      	b.n	80134fc <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	795b      	ldrb	r3, [r3, #5]
 80133fa:	4619      	mov	r1, r3
 80133fc:	6878      	ldr	r0, [r7, #4]
 80133fe:	f000 ff79 	bl	80142f4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	791b      	ldrb	r3, [r3, #4]
 8013406:	4619      	mov	r1, r3
 8013408:	6878      	ldr	r0, [r7, #4]
 801340a:	f000 ff73 	bl	80142f4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	2200      	movs	r2, #0
 8013412:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	2200      	movs	r2, #0
 8013418:	701a      	strb	r2, [r3, #0]
      break;
 801341a:	e06f      	b.n	80134fc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8013422:	2b00      	cmp	r3, #0
 8013424:	d019      	beq.n	801345a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8013432:	23ff      	movs	r3, #255	; 0xff
 8013434:	6878      	ldr	r0, [r7, #4]
 8013436:	f000 f949 	bl	80136cc <USBH_Get_StringDesc>
 801343a:	4603      	mov	r3, r0
 801343c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 801343e:	7bbb      	ldrb	r3, [r7, #14]
 8013440:	2b00      	cmp	r3, #0
 8013442:	d103      	bne.n	801344c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	2206      	movs	r2, #6
 8013448:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 801344a:	e059      	b.n	8013500 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 801344c:	7bbb      	ldrb	r3, [r7, #14]
 801344e:	2b03      	cmp	r3, #3
 8013450:	d156      	bne.n	8013500 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	2206      	movs	r2, #6
 8013456:	705a      	strb	r2, [r3, #1]
      break;
 8013458:	e052      	b.n	8013500 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	2206      	movs	r2, #6
 801345e:	705a      	strb	r2, [r3, #1]
      break;
 8013460:	e04e      	b.n	8013500 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8013468:	2b00      	cmp	r3, #0
 801346a:	d019      	beq.n	80134a0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8013478:	23ff      	movs	r3, #255	; 0xff
 801347a:	6878      	ldr	r0, [r7, #4]
 801347c:	f000 f926 	bl	80136cc <USBH_Get_StringDesc>
 8013480:	4603      	mov	r3, r0
 8013482:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8013484:	7bbb      	ldrb	r3, [r7, #14]
 8013486:	2b00      	cmp	r3, #0
 8013488:	d103      	bne.n	8013492 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	2207      	movs	r2, #7
 801348e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8013490:	e038      	b.n	8013504 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013492:	7bbb      	ldrb	r3, [r7, #14]
 8013494:	2b03      	cmp	r3, #3
 8013496:	d135      	bne.n	8013504 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	2207      	movs	r2, #7
 801349c:	705a      	strb	r2, [r3, #1]
      break;
 801349e:	e031      	b.n	8013504 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	2207      	movs	r2, #7
 80134a4:	705a      	strb	r2, [r3, #1]
      break;
 80134a6:	e02d      	b.n	8013504 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d017      	beq.n	80134e2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80134be:	23ff      	movs	r3, #255	; 0xff
 80134c0:	6878      	ldr	r0, [r7, #4]
 80134c2:	f000 f903 	bl	80136cc <USBH_Get_StringDesc>
 80134c6:	4603      	mov	r3, r0
 80134c8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80134ca:	7bbb      	ldrb	r3, [r7, #14]
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d102      	bne.n	80134d6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80134d0:	2300      	movs	r3, #0
 80134d2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80134d4:	e018      	b.n	8013508 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80134d6:	7bbb      	ldrb	r3, [r7, #14]
 80134d8:	2b03      	cmp	r3, #3
 80134da:	d115      	bne.n	8013508 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80134dc:	2300      	movs	r3, #0
 80134de:	73fb      	strb	r3, [r7, #15]
      break;
 80134e0:	e012      	b.n	8013508 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80134e2:	2300      	movs	r3, #0
 80134e4:	73fb      	strb	r3, [r7, #15]
      break;
 80134e6:	e00f      	b.n	8013508 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80134e8:	bf00      	nop
 80134ea:	e00e      	b.n	801350a <USBH_HandleEnum+0x3be>
      break;
 80134ec:	bf00      	nop
 80134ee:	e00c      	b.n	801350a <USBH_HandleEnum+0x3be>
      break;
 80134f0:	bf00      	nop
 80134f2:	e00a      	b.n	801350a <USBH_HandleEnum+0x3be>
      break;
 80134f4:	bf00      	nop
 80134f6:	e008      	b.n	801350a <USBH_HandleEnum+0x3be>
      break;
 80134f8:	bf00      	nop
 80134fa:	e006      	b.n	801350a <USBH_HandleEnum+0x3be>
      break;
 80134fc:	bf00      	nop
 80134fe:	e004      	b.n	801350a <USBH_HandleEnum+0x3be>
      break;
 8013500:	bf00      	nop
 8013502:	e002      	b.n	801350a <USBH_HandleEnum+0x3be>
      break;
 8013504:	bf00      	nop
 8013506:	e000      	b.n	801350a <USBH_HandleEnum+0x3be>
      break;
 8013508:	bf00      	nop
  }
  return Status;
 801350a:	7bfb      	ldrb	r3, [r7, #15]
}
 801350c:	4618      	mov	r0, r3
 801350e:	3710      	adds	r7, #16
 8013510:	46bd      	mov	sp, r7
 8013512:	bd80      	pop	{r7, pc}

08013514 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8013514:	b480      	push	{r7}
 8013516:	b083      	sub	sp, #12
 8013518:	af00      	add	r7, sp, #0
 801351a:	6078      	str	r0, [r7, #4]
 801351c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	683a      	ldr	r2, [r7, #0]
 8013522:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8013526:	bf00      	nop
 8013528:	370c      	adds	r7, #12
 801352a:	46bd      	mov	sp, r7
 801352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013530:	4770      	bx	lr

08013532 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8013532:	b580      	push	{r7, lr}
 8013534:	b082      	sub	sp, #8
 8013536:	af00      	add	r7, sp, #0
 8013538:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8013540:	1c5a      	adds	r2, r3, #1
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8013548:	6878      	ldr	r0, [r7, #4]
 801354a:	f000 f804 	bl	8013556 <USBH_HandleSof>
}
 801354e:	bf00      	nop
 8013550:	3708      	adds	r7, #8
 8013552:	46bd      	mov	sp, r7
 8013554:	bd80      	pop	{r7, pc}

08013556 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8013556:	b580      	push	{r7, lr}
 8013558:	b082      	sub	sp, #8
 801355a:	af00      	add	r7, sp, #0
 801355c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	781b      	ldrb	r3, [r3, #0]
 8013562:	b2db      	uxtb	r3, r3
 8013564:	2b0b      	cmp	r3, #11
 8013566:	d10a      	bne.n	801357e <USBH_HandleSof+0x28>
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801356e:	2b00      	cmp	r3, #0
 8013570:	d005      	beq.n	801357e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013578:	699b      	ldr	r3, [r3, #24]
 801357a:	6878      	ldr	r0, [r7, #4]
 801357c:	4798      	blx	r3
  }
}
 801357e:	bf00      	nop
 8013580:	3708      	adds	r7, #8
 8013582:	46bd      	mov	sp, r7
 8013584:	bd80      	pop	{r7, pc}

08013586 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8013586:	b480      	push	{r7}
 8013588:	b083      	sub	sp, #12
 801358a:	af00      	add	r7, sp, #0
 801358c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	2201      	movs	r2, #1
 8013592:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8013596:	bf00      	nop
}
 8013598:	370c      	adds	r7, #12
 801359a:	46bd      	mov	sp, r7
 801359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135a0:	4770      	bx	lr

080135a2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80135a2:	b480      	push	{r7}
 80135a4:	b083      	sub	sp, #12
 80135a6:	af00      	add	r7, sp, #0
 80135a8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	2200      	movs	r2, #0
 80135ae:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80135b2:	bf00      	nop
}
 80135b4:	370c      	adds	r7, #12
 80135b6:	46bd      	mov	sp, r7
 80135b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135bc:	4770      	bx	lr

080135be <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80135be:	b480      	push	{r7}
 80135c0:	b083      	sub	sp, #12
 80135c2:	af00      	add	r7, sp, #0
 80135c4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	2201      	movs	r2, #1
 80135ca:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	2200      	movs	r2, #0
 80135d2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	2200      	movs	r2, #0
 80135da:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80135de:	2300      	movs	r3, #0
}
 80135e0:	4618      	mov	r0, r3
 80135e2:	370c      	adds	r7, #12
 80135e4:	46bd      	mov	sp, r7
 80135e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ea:	4770      	bx	lr

080135ec <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80135ec:	b580      	push	{r7, lr}
 80135ee:	b082      	sub	sp, #8
 80135f0:	af00      	add	r7, sp, #0
 80135f2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	2201      	movs	r2, #1
 80135f8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	2200      	movs	r2, #0
 8013600:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	2200      	movs	r2, #0
 8013608:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 801360c:	6878      	ldr	r0, [r7, #4]
 801360e:	f003 f9ce 	bl	80169ae <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	791b      	ldrb	r3, [r3, #4]
 8013616:	4619      	mov	r1, r3
 8013618:	6878      	ldr	r0, [r7, #4]
 801361a:	f000 fe6b 	bl	80142f4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	795b      	ldrb	r3, [r3, #5]
 8013622:	4619      	mov	r1, r3
 8013624:	6878      	ldr	r0, [r7, #4]
 8013626:	f000 fe65 	bl	80142f4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 801362a:	2300      	movs	r3, #0
}
 801362c:	4618      	mov	r0, r3
 801362e:	3708      	adds	r7, #8
 8013630:	46bd      	mov	sp, r7
 8013632:	bd80      	pop	{r7, pc}

08013634 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8013634:	b580      	push	{r7, lr}
 8013636:	b086      	sub	sp, #24
 8013638:	af02      	add	r7, sp, #8
 801363a:	6078      	str	r0, [r7, #4]
 801363c:	460b      	mov	r3, r1
 801363e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8013646:	78fb      	ldrb	r3, [r7, #3]
 8013648:	b29b      	uxth	r3, r3
 801364a:	9300      	str	r3, [sp, #0]
 801364c:	4613      	mov	r3, r2
 801364e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013652:	2100      	movs	r1, #0
 8013654:	6878      	ldr	r0, [r7, #4]
 8013656:	f000 f864 	bl	8013722 <USBH_GetDescriptor>
 801365a:	4603      	mov	r3, r0
 801365c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 801365e:	7bfb      	ldrb	r3, [r7, #15]
 8013660:	2b00      	cmp	r3, #0
 8013662:	d10a      	bne.n	801367a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	f203 3026 	addw	r0, r3, #806	; 0x326
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8013670:	78fa      	ldrb	r2, [r7, #3]
 8013672:	b292      	uxth	r2, r2
 8013674:	4619      	mov	r1, r3
 8013676:	f000 f919 	bl	80138ac <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 801367a:	7bfb      	ldrb	r3, [r7, #15]
}
 801367c:	4618      	mov	r0, r3
 801367e:	3710      	adds	r7, #16
 8013680:	46bd      	mov	sp, r7
 8013682:	bd80      	pop	{r7, pc}

08013684 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8013684:	b580      	push	{r7, lr}
 8013686:	b086      	sub	sp, #24
 8013688:	af02      	add	r7, sp, #8
 801368a:	6078      	str	r0, [r7, #4]
 801368c:	460b      	mov	r3, r1
 801368e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	331c      	adds	r3, #28
 8013694:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8013696:	887b      	ldrh	r3, [r7, #2]
 8013698:	9300      	str	r3, [sp, #0]
 801369a:	68bb      	ldr	r3, [r7, #8]
 801369c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80136a0:	2100      	movs	r1, #0
 80136a2:	6878      	ldr	r0, [r7, #4]
 80136a4:	f000 f83d 	bl	8013722 <USBH_GetDescriptor>
 80136a8:	4603      	mov	r3, r0
 80136aa:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80136ac:	7bfb      	ldrb	r3, [r7, #15]
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d107      	bne.n	80136c2 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80136b2:	887b      	ldrh	r3, [r7, #2]
 80136b4:	461a      	mov	r2, r3
 80136b6:	68b9      	ldr	r1, [r7, #8]
 80136b8:	6878      	ldr	r0, [r7, #4]
 80136ba:	f000 f987 	bl	80139cc <USBH_ParseCfgDesc>
 80136be:	4603      	mov	r3, r0
 80136c0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80136c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80136c4:	4618      	mov	r0, r3
 80136c6:	3710      	adds	r7, #16
 80136c8:	46bd      	mov	sp, r7
 80136ca:	bd80      	pop	{r7, pc}

080136cc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80136cc:	b580      	push	{r7, lr}
 80136ce:	b088      	sub	sp, #32
 80136d0:	af02      	add	r7, sp, #8
 80136d2:	60f8      	str	r0, [r7, #12]
 80136d4:	607a      	str	r2, [r7, #4]
 80136d6:	461a      	mov	r2, r3
 80136d8:	460b      	mov	r3, r1
 80136da:	72fb      	strb	r3, [r7, #11]
 80136dc:	4613      	mov	r3, r2
 80136de:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80136e0:	7afb      	ldrb	r3, [r7, #11]
 80136e2:	b29b      	uxth	r3, r3
 80136e4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80136e8:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80136f0:	893b      	ldrh	r3, [r7, #8]
 80136f2:	9300      	str	r3, [sp, #0]
 80136f4:	460b      	mov	r3, r1
 80136f6:	2100      	movs	r1, #0
 80136f8:	68f8      	ldr	r0, [r7, #12]
 80136fa:	f000 f812 	bl	8013722 <USBH_GetDescriptor>
 80136fe:	4603      	mov	r3, r0
 8013700:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8013702:	7dfb      	ldrb	r3, [r7, #23]
 8013704:	2b00      	cmp	r3, #0
 8013706:	d107      	bne.n	8013718 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 801370e:	893a      	ldrh	r2, [r7, #8]
 8013710:	6879      	ldr	r1, [r7, #4]
 8013712:	4618      	mov	r0, r3
 8013714:	f000 fafe 	bl	8013d14 <USBH_ParseStringDesc>
  }

  return status;
 8013718:	7dfb      	ldrb	r3, [r7, #23]
}
 801371a:	4618      	mov	r0, r3
 801371c:	3718      	adds	r7, #24
 801371e:	46bd      	mov	sp, r7
 8013720:	bd80      	pop	{r7, pc}

08013722 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8013722:	b580      	push	{r7, lr}
 8013724:	b084      	sub	sp, #16
 8013726:	af00      	add	r7, sp, #0
 8013728:	60f8      	str	r0, [r7, #12]
 801372a:	607b      	str	r3, [r7, #4]
 801372c:	460b      	mov	r3, r1
 801372e:	72fb      	strb	r3, [r7, #11]
 8013730:	4613      	mov	r3, r2
 8013732:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	789b      	ldrb	r3, [r3, #2]
 8013738:	2b01      	cmp	r3, #1
 801373a:	d11c      	bne.n	8013776 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 801373c:	7afb      	ldrb	r3, [r7, #11]
 801373e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013742:	b2da      	uxtb	r2, r3
 8013744:	68fb      	ldr	r3, [r7, #12]
 8013746:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8013748:	68fb      	ldr	r3, [r7, #12]
 801374a:	2206      	movs	r2, #6
 801374c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	893a      	ldrh	r2, [r7, #8]
 8013752:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8013754:	893b      	ldrh	r3, [r7, #8]
 8013756:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801375a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801375e:	d104      	bne.n	801376a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	f240 4209 	movw	r2, #1033	; 0x409
 8013766:	829a      	strh	r2, [r3, #20]
 8013768:	e002      	b.n	8013770 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 801376a:	68fb      	ldr	r3, [r7, #12]
 801376c:	2200      	movs	r2, #0
 801376e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	8b3a      	ldrh	r2, [r7, #24]
 8013774:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8013776:	8b3b      	ldrh	r3, [r7, #24]
 8013778:	461a      	mov	r2, r3
 801377a:	6879      	ldr	r1, [r7, #4]
 801377c:	68f8      	ldr	r0, [r7, #12]
 801377e:	f000 fb17 	bl	8013db0 <USBH_CtlReq>
 8013782:	4603      	mov	r3, r0
}
 8013784:	4618      	mov	r0, r3
 8013786:	3710      	adds	r7, #16
 8013788:	46bd      	mov	sp, r7
 801378a:	bd80      	pop	{r7, pc}

0801378c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 801378c:	b580      	push	{r7, lr}
 801378e:	b082      	sub	sp, #8
 8013790:	af00      	add	r7, sp, #0
 8013792:	6078      	str	r0, [r7, #4]
 8013794:	460b      	mov	r3, r1
 8013796:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	789b      	ldrb	r3, [r3, #2]
 801379c:	2b01      	cmp	r3, #1
 801379e:	d10f      	bne.n	80137c0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	2200      	movs	r2, #0
 80137a4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	2205      	movs	r2, #5
 80137aa:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80137ac:	78fb      	ldrb	r3, [r7, #3]
 80137ae:	b29a      	uxth	r2, r3
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	2200      	movs	r2, #0
 80137b8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	2200      	movs	r2, #0
 80137be:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80137c0:	2200      	movs	r2, #0
 80137c2:	2100      	movs	r1, #0
 80137c4:	6878      	ldr	r0, [r7, #4]
 80137c6:	f000 faf3 	bl	8013db0 <USBH_CtlReq>
 80137ca:	4603      	mov	r3, r0
}
 80137cc:	4618      	mov	r0, r3
 80137ce:	3708      	adds	r7, #8
 80137d0:	46bd      	mov	sp, r7
 80137d2:	bd80      	pop	{r7, pc}

080137d4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80137d4:	b580      	push	{r7, lr}
 80137d6:	b082      	sub	sp, #8
 80137d8:	af00      	add	r7, sp, #0
 80137da:	6078      	str	r0, [r7, #4]
 80137dc:	460b      	mov	r3, r1
 80137de:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	789b      	ldrb	r3, [r3, #2]
 80137e4:	2b01      	cmp	r3, #1
 80137e6:	d10e      	bne.n	8013806 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	2200      	movs	r2, #0
 80137ec:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	2209      	movs	r2, #9
 80137f2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	887a      	ldrh	r2, [r7, #2]
 80137f8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	2200      	movs	r2, #0
 80137fe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	2200      	movs	r2, #0
 8013804:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8013806:	2200      	movs	r2, #0
 8013808:	2100      	movs	r1, #0
 801380a:	6878      	ldr	r0, [r7, #4]
 801380c:	f000 fad0 	bl	8013db0 <USBH_CtlReq>
 8013810:	4603      	mov	r3, r0
}
 8013812:	4618      	mov	r0, r3
 8013814:	3708      	adds	r7, #8
 8013816:	46bd      	mov	sp, r7
 8013818:	bd80      	pop	{r7, pc}

0801381a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 801381a:	b580      	push	{r7, lr}
 801381c:	b082      	sub	sp, #8
 801381e:	af00      	add	r7, sp, #0
 8013820:	6078      	str	r0, [r7, #4]
 8013822:	460b      	mov	r3, r1
 8013824:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	789b      	ldrb	r3, [r3, #2]
 801382a:	2b01      	cmp	r3, #1
 801382c:	d10f      	bne.n	801384e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	2200      	movs	r2, #0
 8013832:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	2203      	movs	r2, #3
 8013838:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 801383a:	78fb      	ldrb	r3, [r7, #3]
 801383c:	b29a      	uxth	r2, r3
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	2200      	movs	r2, #0
 8013846:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	2200      	movs	r2, #0
 801384c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 801384e:	2200      	movs	r2, #0
 8013850:	2100      	movs	r1, #0
 8013852:	6878      	ldr	r0, [r7, #4]
 8013854:	f000 faac 	bl	8013db0 <USBH_CtlReq>
 8013858:	4603      	mov	r3, r0
}
 801385a:	4618      	mov	r0, r3
 801385c:	3708      	adds	r7, #8
 801385e:	46bd      	mov	sp, r7
 8013860:	bd80      	pop	{r7, pc}

08013862 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8013862:	b580      	push	{r7, lr}
 8013864:	b082      	sub	sp, #8
 8013866:	af00      	add	r7, sp, #0
 8013868:	6078      	str	r0, [r7, #4]
 801386a:	460b      	mov	r3, r1
 801386c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	789b      	ldrb	r3, [r3, #2]
 8013872:	2b01      	cmp	r3, #1
 8013874:	d10f      	bne.n	8013896 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	2202      	movs	r2, #2
 801387a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	2201      	movs	r2, #1
 8013880:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	2200      	movs	r2, #0
 8013886:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8013888:	78fb      	ldrb	r3, [r7, #3]
 801388a:	b29a      	uxth	r2, r3
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	2200      	movs	r2, #0
 8013894:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8013896:	2200      	movs	r2, #0
 8013898:	2100      	movs	r1, #0
 801389a:	6878      	ldr	r0, [r7, #4]
 801389c:	f000 fa88 	bl	8013db0 <USBH_CtlReq>
 80138a0:	4603      	mov	r3, r0
}
 80138a2:	4618      	mov	r0, r3
 80138a4:	3708      	adds	r7, #8
 80138a6:	46bd      	mov	sp, r7
 80138a8:	bd80      	pop	{r7, pc}
	...

080138ac <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                              uint16_t length)
{
 80138ac:	b480      	push	{r7}
 80138ae:	b085      	sub	sp, #20
 80138b0:	af00      	add	r7, sp, #0
 80138b2:	60f8      	str	r0, [r7, #12]
 80138b4:	60b9      	str	r1, [r7, #8]
 80138b6:	4613      	mov	r3, r2
 80138b8:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80138ba:	68bb      	ldr	r3, [r7, #8]
 80138bc:	781a      	ldrb	r2, [r3, #0]
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80138c2:	68bb      	ldr	r3, [r7, #8]
 80138c4:	785a      	ldrb	r2, [r3, #1]
 80138c6:	68fb      	ldr	r3, [r7, #12]
 80138c8:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80138ca:	68bb      	ldr	r3, [r7, #8]
 80138cc:	3302      	adds	r3, #2
 80138ce:	781b      	ldrb	r3, [r3, #0]
 80138d0:	b29a      	uxth	r2, r3
 80138d2:	68bb      	ldr	r3, [r7, #8]
 80138d4:	3303      	adds	r3, #3
 80138d6:	781b      	ldrb	r3, [r3, #0]
 80138d8:	b29b      	uxth	r3, r3
 80138da:	021b      	lsls	r3, r3, #8
 80138dc:	b29b      	uxth	r3, r3
 80138de:	4313      	orrs	r3, r2
 80138e0:	b29a      	uxth	r2, r3
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80138e6:	68bb      	ldr	r3, [r7, #8]
 80138e8:	791a      	ldrb	r2, [r3, #4]
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80138ee:	68bb      	ldr	r3, [r7, #8]
 80138f0:	795a      	ldrb	r2, [r3, #5]
 80138f2:	68fb      	ldr	r3, [r7, #12]
 80138f4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80138f6:	68bb      	ldr	r3, [r7, #8]
 80138f8:	799a      	ldrb	r2, [r3, #6]
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80138fe:	68bb      	ldr	r3, [r7, #8]
 8013900:	79da      	ldrb	r2, [r3, #7]
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	79db      	ldrb	r3, [r3, #7]
 801390a:	2b20      	cmp	r3, #32
 801390c:	dc0e      	bgt.n	801392c <USBH_ParseDevDesc+0x80>
 801390e:	2b08      	cmp	r3, #8
 8013910:	db13      	blt.n	801393a <USBH_ParseDevDesc+0x8e>
 8013912:	3b08      	subs	r3, #8
 8013914:	2201      	movs	r2, #1
 8013916:	409a      	lsls	r2, r3
 8013918:	4b2b      	ldr	r3, [pc, #172]	; (80139c8 <USBH_ParseDevDesc+0x11c>)
 801391a:	4013      	ands	r3, r2
 801391c:	2b00      	cmp	r3, #0
 801391e:	bf14      	ite	ne
 8013920:	2301      	movne	r3, #1
 8013922:	2300      	moveq	r3, #0
 8013924:	b2db      	uxtb	r3, r3
 8013926:	2b00      	cmp	r3, #0
 8013928:	d102      	bne.n	8013930 <USBH_ParseDevDesc+0x84>
 801392a:	e006      	b.n	801393a <USBH_ParseDevDesc+0x8e>
 801392c:	2b40      	cmp	r3, #64	; 0x40
 801392e:	d104      	bne.n	801393a <USBH_ParseDevDesc+0x8e>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	79da      	ldrb	r2, [r3, #7]
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	71da      	strb	r2, [r3, #7]
      break;
 8013938:	e003      	b.n	8013942 <USBH_ParseDevDesc+0x96>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	2240      	movs	r2, #64	; 0x40
 801393e:	71da      	strb	r2, [r3, #7]
      break;
 8013940:	bf00      	nop
  }

  if (length > 8U)
 8013942:	88fb      	ldrh	r3, [r7, #6]
 8013944:	2b08      	cmp	r3, #8
 8013946:	d939      	bls.n	80139bc <USBH_ParseDevDesc+0x110>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8013948:	68bb      	ldr	r3, [r7, #8]
 801394a:	3308      	adds	r3, #8
 801394c:	781b      	ldrb	r3, [r3, #0]
 801394e:	b29a      	uxth	r2, r3
 8013950:	68bb      	ldr	r3, [r7, #8]
 8013952:	3309      	adds	r3, #9
 8013954:	781b      	ldrb	r3, [r3, #0]
 8013956:	b29b      	uxth	r3, r3
 8013958:	021b      	lsls	r3, r3, #8
 801395a:	b29b      	uxth	r3, r3
 801395c:	4313      	orrs	r3, r2
 801395e:	b29a      	uxth	r2, r3
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8013964:	68bb      	ldr	r3, [r7, #8]
 8013966:	330a      	adds	r3, #10
 8013968:	781b      	ldrb	r3, [r3, #0]
 801396a:	b29a      	uxth	r2, r3
 801396c:	68bb      	ldr	r3, [r7, #8]
 801396e:	330b      	adds	r3, #11
 8013970:	781b      	ldrb	r3, [r3, #0]
 8013972:	b29b      	uxth	r3, r3
 8013974:	021b      	lsls	r3, r3, #8
 8013976:	b29b      	uxth	r3, r3
 8013978:	4313      	orrs	r3, r2
 801397a:	b29a      	uxth	r2, r3
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8013980:	68bb      	ldr	r3, [r7, #8]
 8013982:	330c      	adds	r3, #12
 8013984:	781b      	ldrb	r3, [r3, #0]
 8013986:	b29a      	uxth	r2, r3
 8013988:	68bb      	ldr	r3, [r7, #8]
 801398a:	330d      	adds	r3, #13
 801398c:	781b      	ldrb	r3, [r3, #0]
 801398e:	b29b      	uxth	r3, r3
 8013990:	021b      	lsls	r3, r3, #8
 8013992:	b29b      	uxth	r3, r3
 8013994:	4313      	orrs	r3, r2
 8013996:	b29a      	uxth	r2, r3
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 801399c:	68bb      	ldr	r3, [r7, #8]
 801399e:	7b9a      	ldrb	r2, [r3, #14]
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80139a4:	68bb      	ldr	r3, [r7, #8]
 80139a6:	7bda      	ldrb	r2, [r3, #15]
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80139ac:	68bb      	ldr	r3, [r7, #8]
 80139ae:	7c1a      	ldrb	r2, [r3, #16]
 80139b0:	68fb      	ldr	r3, [r7, #12]
 80139b2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80139b4:	68bb      	ldr	r3, [r7, #8]
 80139b6:	7c5a      	ldrb	r2, [r3, #17]
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	745a      	strb	r2, [r3, #17]
  }
}
 80139bc:	bf00      	nop
 80139be:	3714      	adds	r7, #20
 80139c0:	46bd      	mov	sp, r7
 80139c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139c6:	4770      	bx	lr
 80139c8:	01000101 	.word	0x01000101

080139cc <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80139cc:	b580      	push	{r7, lr}
 80139ce:	b08c      	sub	sp, #48	; 0x30
 80139d0:	af00      	add	r7, sp, #0
 80139d2:	60f8      	str	r0, [r7, #12]
 80139d4:	60b9      	str	r1, [r7, #8]
 80139d6:	4613      	mov	r3, r2
 80139d8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80139da:	68fb      	ldr	r3, [r7, #12]
 80139dc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80139e0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80139e2:	2300      	movs	r3, #0
 80139e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80139e8:	68bb      	ldr	r3, [r7, #8]
 80139ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80139ec:	2300      	movs	r3, #0
 80139ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80139f2:	2300      	movs	r3, #0
 80139f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80139f8:	68bb      	ldr	r3, [r7, #8]
 80139fa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80139fc:	68bb      	ldr	r3, [r7, #8]
 80139fe:	781a      	ldrb	r2, [r3, #0]
 8013a00:	6a3b      	ldr	r3, [r7, #32]
 8013a02:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8013a04:	68bb      	ldr	r3, [r7, #8]
 8013a06:	785a      	ldrb	r2, [r3, #1]
 8013a08:	6a3b      	ldr	r3, [r7, #32]
 8013a0a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8013a0c:	68bb      	ldr	r3, [r7, #8]
 8013a0e:	3302      	adds	r3, #2
 8013a10:	781b      	ldrb	r3, [r3, #0]
 8013a12:	b29a      	uxth	r2, r3
 8013a14:	68bb      	ldr	r3, [r7, #8]
 8013a16:	3303      	adds	r3, #3
 8013a18:	781b      	ldrb	r3, [r3, #0]
 8013a1a:	b29b      	uxth	r3, r3
 8013a1c:	021b      	lsls	r3, r3, #8
 8013a1e:	b29b      	uxth	r3, r3
 8013a20:	4313      	orrs	r3, r2
 8013a22:	b29b      	uxth	r3, r3
 8013a24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013a28:	bf28      	it	cs
 8013a2a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8013a2e:	b29a      	uxth	r2, r3
 8013a30:	6a3b      	ldr	r3, [r7, #32]
 8013a32:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8013a34:	68bb      	ldr	r3, [r7, #8]
 8013a36:	791a      	ldrb	r2, [r3, #4]
 8013a38:	6a3b      	ldr	r3, [r7, #32]
 8013a3a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8013a3c:	68bb      	ldr	r3, [r7, #8]
 8013a3e:	795a      	ldrb	r2, [r3, #5]
 8013a40:	6a3b      	ldr	r3, [r7, #32]
 8013a42:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8013a44:	68bb      	ldr	r3, [r7, #8]
 8013a46:	799a      	ldrb	r2, [r3, #6]
 8013a48:	6a3b      	ldr	r3, [r7, #32]
 8013a4a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8013a4c:	68bb      	ldr	r3, [r7, #8]
 8013a4e:	79da      	ldrb	r2, [r3, #7]
 8013a50:	6a3b      	ldr	r3, [r7, #32]
 8013a52:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8013a54:	68bb      	ldr	r3, [r7, #8]
 8013a56:	7a1a      	ldrb	r2, [r3, #8]
 8013a58:	6a3b      	ldr	r3, [r7, #32]
 8013a5a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8013a5c:	6a3b      	ldr	r3, [r7, #32]
 8013a5e:	781b      	ldrb	r3, [r3, #0]
 8013a60:	2b09      	cmp	r3, #9
 8013a62:	d002      	beq.n	8013a6a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8013a64:	6a3b      	ldr	r3, [r7, #32]
 8013a66:	2209      	movs	r2, #9
 8013a68:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8013a6a:	88fb      	ldrh	r3, [r7, #6]
 8013a6c:	2b09      	cmp	r3, #9
 8013a6e:	f240 8099 	bls.w	8013ba4 <USBH_ParseCfgDesc+0x1d8>
  {
    ptr = USB_LEN_CFG_DESC;
 8013a72:	2309      	movs	r3, #9
 8013a74:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8013a76:	2300      	movs	r3, #0
 8013a78:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8013a7a:	e07d      	b.n	8013b78 <USBH_ParseCfgDesc+0x1ac>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8013a7c:	f107 0316 	add.w	r3, r7, #22
 8013a80:	4619      	mov	r1, r3
 8013a82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a84:	f000 f979 	bl	8013d7a <USBH_GetNextDesc>
 8013a88:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8013a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a8c:	785b      	ldrb	r3, [r3, #1]
 8013a8e:	2b04      	cmp	r3, #4
 8013a90:	d172      	bne.n	8013b78 <USBH_ParseCfgDesc+0x1ac>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8013a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a94:	781b      	ldrb	r3, [r3, #0]
 8013a96:	2b09      	cmp	r3, #9
 8013a98:	d002      	beq.n	8013aa0 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8013a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a9c:	2209      	movs	r2, #9
 8013a9e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8013aa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013aa4:	221a      	movs	r2, #26
 8013aa6:	fb02 f303 	mul.w	r3, r2, r3
 8013aaa:	3308      	adds	r3, #8
 8013aac:	6a3a      	ldr	r2, [r7, #32]
 8013aae:	4413      	add	r3, r2
 8013ab0:	3302      	adds	r3, #2
 8013ab2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8013ab4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013ab6:	69f8      	ldr	r0, [r7, #28]
 8013ab8:	f000 f87a 	bl	8013bb0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8013abc:	2300      	movs	r3, #0
 8013abe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8013ac2:	2300      	movs	r3, #0
 8013ac4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8013ac6:	e03f      	b.n	8013b48 <USBH_ParseCfgDesc+0x17c>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8013ac8:	f107 0316 	add.w	r3, r7, #22
 8013acc:	4619      	mov	r1, r3
 8013ace:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013ad0:	f000 f953 	bl	8013d7a <USBH_GetNextDesc>
 8013ad4:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8013ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ad8:	785b      	ldrb	r3, [r3, #1]
 8013ada:	2b05      	cmp	r3, #5
 8013adc:	d134      	bne.n	8013b48 <USBH_ParseCfgDesc+0x17c>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8013ade:	69fb      	ldr	r3, [r7, #28]
 8013ae0:	795b      	ldrb	r3, [r3, #5]
 8013ae2:	2b01      	cmp	r3, #1
 8013ae4:	d10f      	bne.n	8013b06 <USBH_ParseCfgDesc+0x13a>
 8013ae6:	69fb      	ldr	r3, [r7, #28]
 8013ae8:	799b      	ldrb	r3, [r3, #6]
 8013aea:	2b02      	cmp	r3, #2
 8013aec:	d10b      	bne.n	8013b06 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8013aee:	69fb      	ldr	r3, [r7, #28]
 8013af0:	79db      	ldrb	r3, [r3, #7]
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d10b      	bne.n	8013b0e <USBH_ParseCfgDesc+0x142>
 8013af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013af8:	781b      	ldrb	r3, [r3, #0]
 8013afa:	2b09      	cmp	r3, #9
 8013afc:	d007      	beq.n	8013b0e <USBH_ParseCfgDesc+0x142>
              {
                pdesc->bLength = 0x09U;
 8013afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b00:	2209      	movs	r2, #9
 8013b02:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8013b04:	e003      	b.n	8013b0e <USBH_ParseCfgDesc+0x142>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8013b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b08:	2207      	movs	r2, #7
 8013b0a:	701a      	strb	r2, [r3, #0]
 8013b0c:	e000      	b.n	8013b10 <USBH_ParseCfgDesc+0x144>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8013b0e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8013b10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013b14:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8013b18:	3201      	adds	r2, #1
 8013b1a:	00d2      	lsls	r2, r2, #3
 8013b1c:	211a      	movs	r1, #26
 8013b1e:	fb01 f303 	mul.w	r3, r1, r3
 8013b22:	4413      	add	r3, r2
 8013b24:	3308      	adds	r3, #8
 8013b26:	6a3a      	ldr	r2, [r7, #32]
 8013b28:	4413      	add	r3, r2
 8013b2a:	3304      	adds	r3, #4
 8013b2c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8013b2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013b30:	69b9      	ldr	r1, [r7, #24]
 8013b32:	68f8      	ldr	r0, [r7, #12]
 8013b34:	f000 f86c 	bl	8013c10 <USBH_ParseEPDesc>
 8013b38:	4603      	mov	r3, r0
 8013b3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8013b3e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013b42:	3301      	adds	r3, #1
 8013b44:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8013b48:	69fb      	ldr	r3, [r7, #28]
 8013b4a:	791b      	ldrb	r3, [r3, #4]
 8013b4c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8013b50:	429a      	cmp	r2, r3
 8013b52:	d204      	bcs.n	8013b5e <USBH_ParseCfgDesc+0x192>
 8013b54:	6a3b      	ldr	r3, [r7, #32]
 8013b56:	885a      	ldrh	r2, [r3, #2]
 8013b58:	8afb      	ldrh	r3, [r7, #22]
 8013b5a:	429a      	cmp	r2, r3
 8013b5c:	d8b4      	bhi.n	8013ac8 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8013b5e:	69fb      	ldr	r3, [r7, #28]
 8013b60:	791b      	ldrb	r3, [r3, #4]
 8013b62:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8013b66:	429a      	cmp	r2, r3
 8013b68:	d201      	bcs.n	8013b6e <USBH_ParseCfgDesc+0x1a2>
        {
          return USBH_NOT_SUPPORTED;
 8013b6a:	2303      	movs	r3, #3
 8013b6c:	e01c      	b.n	8013ba8 <USBH_ParseCfgDesc+0x1dc>
        }

        if_ix++;
 8013b6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013b72:	3301      	adds	r3, #1
 8013b74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8013b78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013b7c:	2b01      	cmp	r3, #1
 8013b7e:	d805      	bhi.n	8013b8c <USBH_ParseCfgDesc+0x1c0>
 8013b80:	6a3b      	ldr	r3, [r7, #32]
 8013b82:	885a      	ldrh	r2, [r3, #2]
 8013b84:	8afb      	ldrh	r3, [r7, #22]
 8013b86:	429a      	cmp	r2, r3
 8013b88:	f63f af78 	bhi.w	8013a7c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8013b8c:	6a3b      	ldr	r3, [r7, #32]
 8013b8e:	791b      	ldrb	r3, [r3, #4]
 8013b90:	2b02      	cmp	r3, #2
 8013b92:	bf28      	it	cs
 8013b94:	2302      	movcs	r3, #2
 8013b96:	b2db      	uxtb	r3, r3
 8013b98:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013b9c:	429a      	cmp	r2, r3
 8013b9e:	d201      	bcs.n	8013ba4 <USBH_ParseCfgDesc+0x1d8>
    {
      return USBH_NOT_SUPPORTED;
 8013ba0:	2303      	movs	r3, #3
 8013ba2:	e001      	b.n	8013ba8 <USBH_ParseCfgDesc+0x1dc>
    }
  }

  return status;
 8013ba4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8013ba8:	4618      	mov	r0, r3
 8013baa:	3730      	adds	r7, #48	; 0x30
 8013bac:	46bd      	mov	sp, r7
 8013bae:	bd80      	pop	{r7, pc}

08013bb0 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                    uint8_t *buf)
{
 8013bb0:	b480      	push	{r7}
 8013bb2:	b083      	sub	sp, #12
 8013bb4:	af00      	add	r7, sp, #0
 8013bb6:	6078      	str	r0, [r7, #4]
 8013bb8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8013bba:	683b      	ldr	r3, [r7, #0]
 8013bbc:	781a      	ldrb	r2, [r3, #0]
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8013bc2:	683b      	ldr	r3, [r7, #0]
 8013bc4:	785a      	ldrb	r2, [r3, #1]
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8013bca:	683b      	ldr	r3, [r7, #0]
 8013bcc:	789a      	ldrb	r2, [r3, #2]
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8013bd2:	683b      	ldr	r3, [r7, #0]
 8013bd4:	78da      	ldrb	r2, [r3, #3]
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8013bda:	683b      	ldr	r3, [r7, #0]
 8013bdc:	791a      	ldrb	r2, [r3, #4]
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8013be2:	683b      	ldr	r3, [r7, #0]
 8013be4:	795a      	ldrb	r2, [r3, #5]
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8013bea:	683b      	ldr	r3, [r7, #0]
 8013bec:	799a      	ldrb	r2, [r3, #6]
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8013bf2:	683b      	ldr	r3, [r7, #0]
 8013bf4:	79da      	ldrb	r2, [r3, #7]
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8013bfa:	683b      	ldr	r3, [r7, #0]
 8013bfc:	7a1a      	ldrb	r2, [r3, #8]
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	721a      	strb	r2, [r3, #8]
}
 8013c02:	bf00      	nop
 8013c04:	370c      	adds	r7, #12
 8013c06:	46bd      	mov	sp, r7
 8013c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c0c:	4770      	bx	lr
	...

08013c10 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                           uint8_t *buf)
{
 8013c10:	b480      	push	{r7}
 8013c12:	b087      	sub	sp, #28
 8013c14:	af00      	add	r7, sp, #0
 8013c16:	60f8      	str	r0, [r7, #12]
 8013c18:	60b9      	str	r1, [r7, #8]
 8013c1a:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8013c1c:	2300      	movs	r3, #0
 8013c1e:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	781a      	ldrb	r2, [r3, #0]
 8013c24:	68bb      	ldr	r3, [r7, #8]
 8013c26:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	785a      	ldrb	r2, [r3, #1]
 8013c2c:	68bb      	ldr	r3, [r7, #8]
 8013c2e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	789a      	ldrb	r2, [r3, #2]
 8013c34:	68bb      	ldr	r3, [r7, #8]
 8013c36:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	78da      	ldrb	r2, [r3, #3]
 8013c3c:	68bb      	ldr	r3, [r7, #8]
 8013c3e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	3304      	adds	r3, #4
 8013c44:	781b      	ldrb	r3, [r3, #0]
 8013c46:	b29a      	uxth	r2, r3
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	3305      	adds	r3, #5
 8013c4c:	781b      	ldrb	r3, [r3, #0]
 8013c4e:	b29b      	uxth	r3, r3
 8013c50:	021b      	lsls	r3, r3, #8
 8013c52:	b29b      	uxth	r3, r3
 8013c54:	4313      	orrs	r3, r2
 8013c56:	b29a      	uxth	r2, r3
 8013c58:	68bb      	ldr	r3, [r7, #8]
 8013c5a:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	799a      	ldrb	r2, [r3, #6]
 8013c60:	68bb      	ldr	r3, [r7, #8]
 8013c62:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8013c64:	68bb      	ldr	r3, [r7, #8]
 8013c66:	889b      	ldrh	r3, [r3, #4]
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d102      	bne.n	8013c72 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8013c6c:	2303      	movs	r3, #3
 8013c6e:	75fb      	strb	r3, [r7, #23]
 8013c70:	e00d      	b.n	8013c8e <USBH_ParseEPDesc+0x7e>
      ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_EP_PACKET_SIZE);
    }
    else
    {
      /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
      ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8013c72:	68bb      	ldr	r3, [r7, #8]
 8013c74:	889a      	ldrh	r2, [r3, #4]
 8013c76:	4b26      	ldr	r3, [pc, #152]	; (8013d10 <USBH_ParseEPDesc+0x100>)
 8013c78:	4013      	ands	r3, r2
 8013c7a:	b29a      	uxth	r2, r3
 8013c7c:	68bb      	ldr	r3, [r7, #8]
 8013c7e:	809a      	strh	r2, [r3, #4]
      ep_descriptor->wMaxPacketSize |= USBH_MAX_EP_PACKET_SIZE;
 8013c80:	68bb      	ldr	r3, [r7, #8]
 8013c82:	889b      	ldrh	r3, [r3, #4]
 8013c84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8013c88:	b29a      	uxth	r2, r3
 8013c8a:	68bb      	ldr	r3, [r7, #8]
 8013c8c:	809a      	strh	r2, [r3, #4]
    }
  }
  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d116      	bne.n	8013cc6 <USBH_ParseEPDesc+0xb6>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8013c98:	68bb      	ldr	r3, [r7, #8]
 8013c9a:	78db      	ldrb	r3, [r3, #3]
 8013c9c:	f003 0303 	and.w	r3, r3, #3
 8013ca0:	2b01      	cmp	r3, #1
 8013ca2:	d005      	beq.n	8013cb0 <USBH_ParseEPDesc+0xa0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8013ca4:	68bb      	ldr	r3, [r7, #8]
 8013ca6:	78db      	ldrb	r3, [r3, #3]
 8013ca8:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8013cac:	2b03      	cmp	r3, #3
 8013cae:	d127      	bne.n	8013d00 <USBH_ParseEPDesc+0xf0>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8013cb0:	68bb      	ldr	r3, [r7, #8]
 8013cb2:	799b      	ldrb	r3, [r3, #6]
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d003      	beq.n	8013cc0 <USBH_ParseEPDesc+0xb0>
 8013cb8:	68bb      	ldr	r3, [r7, #8]
 8013cba:	799b      	ldrb	r3, [r3, #6]
 8013cbc:	2b10      	cmp	r3, #16
 8013cbe:	d91f      	bls.n	8013d00 <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 8013cc0:	2303      	movs	r3, #3
 8013cc2:	75fb      	strb	r3, [r7, #23]
 8013cc4:	e01c      	b.n	8013d00 <USBH_ParseEPDesc+0xf0>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8013cc6:	68bb      	ldr	r3, [r7, #8]
 8013cc8:	78db      	ldrb	r3, [r3, #3]
 8013cca:	f003 0303 	and.w	r3, r3, #3
 8013cce:	2b01      	cmp	r3, #1
 8013cd0:	d10a      	bne.n	8013ce8 <USBH_ParseEPDesc+0xd8>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8013cd2:	68bb      	ldr	r3, [r7, #8]
 8013cd4:	799b      	ldrb	r3, [r3, #6]
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d003      	beq.n	8013ce2 <USBH_ParseEPDesc+0xd2>
 8013cda:	68bb      	ldr	r3, [r7, #8]
 8013cdc:	799b      	ldrb	r3, [r3, #6]
 8013cde:	2b10      	cmp	r3, #16
 8013ce0:	d90e      	bls.n	8013d00 <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 8013ce2:	2303      	movs	r3, #3
 8013ce4:	75fb      	strb	r3, [r7, #23]
 8013ce6:	e00b      	b.n	8013d00 <USBH_ParseEPDesc+0xf0>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8013ce8:	68bb      	ldr	r3, [r7, #8]
 8013cea:	78db      	ldrb	r3, [r3, #3]
 8013cec:	f003 0303 	and.w	r3, r3, #3
 8013cf0:	2b03      	cmp	r3, #3
 8013cf2:	d105      	bne.n	8013d00 <USBH_ParseEPDesc+0xf0>
    {
      if (ep_descriptor->bInterval == 0U)
 8013cf4:	68bb      	ldr	r3, [r7, #8]
 8013cf6:	799b      	ldrb	r3, [r3, #6]
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d101      	bne.n	8013d00 <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 8013cfc:	2303      	movs	r3, #3
 8013cfe:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8013d00:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d02:	4618      	mov	r0, r3
 8013d04:	371c      	adds	r7, #28
 8013d06:	46bd      	mov	sp, r7
 8013d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d0c:	4770      	bx	lr
 8013d0e:	bf00      	nop
 8013d10:	fffff800 	.word	0xfffff800

08013d14 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8013d14:	b480      	push	{r7}
 8013d16:	b087      	sub	sp, #28
 8013d18:	af00      	add	r7, sp, #0
 8013d1a:	60f8      	str	r0, [r7, #12]
 8013d1c:	60b9      	str	r1, [r7, #8]
 8013d1e:	4613      	mov	r3, r2
 8013d20:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	3301      	adds	r3, #1
 8013d26:	781b      	ldrb	r3, [r3, #0]
 8013d28:	2b03      	cmp	r3, #3
 8013d2a:	d120      	bne.n	8013d6e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8013d2c:	68fb      	ldr	r3, [r7, #12]
 8013d2e:	781b      	ldrb	r3, [r3, #0]
 8013d30:	1e9a      	subs	r2, r3, #2
 8013d32:	88fb      	ldrh	r3, [r7, #6]
 8013d34:	4293      	cmp	r3, r2
 8013d36:	bf28      	it	cs
 8013d38:	4613      	movcs	r3, r2
 8013d3a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	3302      	adds	r3, #2
 8013d40:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8013d42:	2300      	movs	r3, #0
 8013d44:	82fb      	strh	r3, [r7, #22]
 8013d46:	e00b      	b.n	8013d60 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8013d48:	8afb      	ldrh	r3, [r7, #22]
 8013d4a:	68fa      	ldr	r2, [r7, #12]
 8013d4c:	4413      	add	r3, r2
 8013d4e:	781a      	ldrb	r2, [r3, #0]
 8013d50:	68bb      	ldr	r3, [r7, #8]
 8013d52:	701a      	strb	r2, [r3, #0]
      pdest++;
 8013d54:	68bb      	ldr	r3, [r7, #8]
 8013d56:	3301      	adds	r3, #1
 8013d58:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8013d5a:	8afb      	ldrh	r3, [r7, #22]
 8013d5c:	3302      	adds	r3, #2
 8013d5e:	82fb      	strh	r3, [r7, #22]
 8013d60:	8afa      	ldrh	r2, [r7, #22]
 8013d62:	8abb      	ldrh	r3, [r7, #20]
 8013d64:	429a      	cmp	r2, r3
 8013d66:	d3ef      	bcc.n	8013d48 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8013d68:	68bb      	ldr	r3, [r7, #8]
 8013d6a:	2200      	movs	r2, #0
 8013d6c:	701a      	strb	r2, [r3, #0]
  }
}
 8013d6e:	bf00      	nop
 8013d70:	371c      	adds	r7, #28
 8013d72:	46bd      	mov	sp, r7
 8013d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d78:	4770      	bx	lr

08013d7a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8013d7a:	b480      	push	{r7}
 8013d7c:	b085      	sub	sp, #20
 8013d7e:	af00      	add	r7, sp, #0
 8013d80:	6078      	str	r0, [r7, #4]
 8013d82:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8013d84:	683b      	ldr	r3, [r7, #0]
 8013d86:	881a      	ldrh	r2, [r3, #0]
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	781b      	ldrb	r3, [r3, #0]
 8013d8c:	b29b      	uxth	r3, r3
 8013d8e:	4413      	add	r3, r2
 8013d90:	b29a      	uxth	r2, r3
 8013d92:	683b      	ldr	r3, [r7, #0]
 8013d94:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	781b      	ldrb	r3, [r3, #0]
 8013d9a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	4413      	add	r3, r2
 8013da0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8013da2:	68fb      	ldr	r3, [r7, #12]
}
 8013da4:	4618      	mov	r0, r3
 8013da6:	3714      	adds	r7, #20
 8013da8:	46bd      	mov	sp, r7
 8013daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dae:	4770      	bx	lr

08013db0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8013db0:	b580      	push	{r7, lr}
 8013db2:	b086      	sub	sp, #24
 8013db4:	af00      	add	r7, sp, #0
 8013db6:	60f8      	str	r0, [r7, #12]
 8013db8:	60b9      	str	r1, [r7, #8]
 8013dba:	4613      	mov	r3, r2
 8013dbc:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8013dbe:	2301      	movs	r3, #1
 8013dc0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8013dc2:	68fb      	ldr	r3, [r7, #12]
 8013dc4:	789b      	ldrb	r3, [r3, #2]
 8013dc6:	2b01      	cmp	r3, #1
 8013dc8:	d002      	beq.n	8013dd0 <USBH_CtlReq+0x20>
 8013dca:	2b02      	cmp	r3, #2
 8013dcc:	d00f      	beq.n	8013dee <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8013dce:	e027      	b.n	8013e20 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	68ba      	ldr	r2, [r7, #8]
 8013dd4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	88fa      	ldrh	r2, [r7, #6]
 8013dda:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8013ddc:	68fb      	ldr	r3, [r7, #12]
 8013dde:	2201      	movs	r2, #1
 8013de0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	2202      	movs	r2, #2
 8013de6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8013de8:	2301      	movs	r3, #1
 8013dea:	75fb      	strb	r3, [r7, #23]
      break;
 8013dec:	e018      	b.n	8013e20 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8013dee:	68f8      	ldr	r0, [r7, #12]
 8013df0:	f000 f81c 	bl	8013e2c <USBH_HandleControl>
 8013df4:	4603      	mov	r3, r0
 8013df6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8013df8:	7dfb      	ldrb	r3, [r7, #23]
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d002      	beq.n	8013e04 <USBH_CtlReq+0x54>
 8013dfe:	7dfb      	ldrb	r3, [r7, #23]
 8013e00:	2b03      	cmp	r3, #3
 8013e02:	d106      	bne.n	8013e12 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8013e04:	68fb      	ldr	r3, [r7, #12]
 8013e06:	2201      	movs	r2, #1
 8013e08:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8013e0a:	68fb      	ldr	r3, [r7, #12]
 8013e0c:	2200      	movs	r2, #0
 8013e0e:	761a      	strb	r2, [r3, #24]
      break;
 8013e10:	e005      	b.n	8013e1e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8013e12:	7dfb      	ldrb	r3, [r7, #23]
 8013e14:	2b02      	cmp	r3, #2
 8013e16:	d102      	bne.n	8013e1e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	2201      	movs	r2, #1
 8013e1c:	709a      	strb	r2, [r3, #2]
      break;
 8013e1e:	bf00      	nop
  }
  return status;
 8013e20:	7dfb      	ldrb	r3, [r7, #23]
}
 8013e22:	4618      	mov	r0, r3
 8013e24:	3718      	adds	r7, #24
 8013e26:	46bd      	mov	sp, r7
 8013e28:	bd80      	pop	{r7, pc}
	...

08013e2c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8013e2c:	b580      	push	{r7, lr}
 8013e2e:	b086      	sub	sp, #24
 8013e30:	af02      	add	r7, sp, #8
 8013e32:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8013e34:	2301      	movs	r3, #1
 8013e36:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8013e38:	2300      	movs	r3, #0
 8013e3a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	7e1b      	ldrb	r3, [r3, #24]
 8013e40:	3b01      	subs	r3, #1
 8013e42:	2b0a      	cmp	r3, #10
 8013e44:	f200 8156 	bhi.w	80140f4 <USBH_HandleControl+0x2c8>
 8013e48:	a201      	add	r2, pc, #4	; (adr r2, 8013e50 <USBH_HandleControl+0x24>)
 8013e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e4e:	bf00      	nop
 8013e50:	08013e7d 	.word	0x08013e7d
 8013e54:	08013e97 	.word	0x08013e97
 8013e58:	08013f01 	.word	0x08013f01
 8013e5c:	08013f27 	.word	0x08013f27
 8013e60:	08013f5f 	.word	0x08013f5f
 8013e64:	08013f89 	.word	0x08013f89
 8013e68:	08013fdb 	.word	0x08013fdb
 8013e6c:	08013ffd 	.word	0x08013ffd
 8013e70:	08014039 	.word	0x08014039
 8013e74:	0801405f 	.word	0x0801405f
 8013e78:	0801409d 	.word	0x0801409d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	f103 0110 	add.w	r1, r3, #16
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	795b      	ldrb	r3, [r3, #5]
 8013e86:	461a      	mov	r2, r3
 8013e88:	6878      	ldr	r0, [r7, #4]
 8013e8a:	f000 f943 	bl	8014114 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	2202      	movs	r2, #2
 8013e92:	761a      	strb	r2, [r3, #24]
      break;
 8013e94:	e139      	b.n	801410a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	795b      	ldrb	r3, [r3, #5]
 8013e9a:	4619      	mov	r1, r3
 8013e9c:	6878      	ldr	r0, [r7, #4]
 8013e9e:	f002 fe75 	bl	8016b8c <USBH_LL_GetURBState>
 8013ea2:	4603      	mov	r3, r0
 8013ea4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8013ea6:	7bbb      	ldrb	r3, [r7, #14]
 8013ea8:	2b01      	cmp	r3, #1
 8013eaa:	d11e      	bne.n	8013eea <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	7c1b      	ldrb	r3, [r3, #16]
 8013eb0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013eb4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	8adb      	ldrh	r3, [r3, #22]
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d00a      	beq.n	8013ed4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8013ebe:	7b7b      	ldrb	r3, [r7, #13]
 8013ec0:	2b80      	cmp	r3, #128	; 0x80
 8013ec2:	d103      	bne.n	8013ecc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	2203      	movs	r2, #3
 8013ec8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8013eca:	e115      	b.n	80140f8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	2205      	movs	r2, #5
 8013ed0:	761a      	strb	r2, [r3, #24]
      break;
 8013ed2:	e111      	b.n	80140f8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8013ed4:	7b7b      	ldrb	r3, [r7, #13]
 8013ed6:	2b80      	cmp	r3, #128	; 0x80
 8013ed8:	d103      	bne.n	8013ee2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	2209      	movs	r2, #9
 8013ede:	761a      	strb	r2, [r3, #24]
      break;
 8013ee0:	e10a      	b.n	80140f8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	2207      	movs	r2, #7
 8013ee6:	761a      	strb	r2, [r3, #24]
      break;
 8013ee8:	e106      	b.n	80140f8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8013eea:	7bbb      	ldrb	r3, [r7, #14]
 8013eec:	2b04      	cmp	r3, #4
 8013eee:	d003      	beq.n	8013ef8 <USBH_HandleControl+0xcc>
 8013ef0:	7bbb      	ldrb	r3, [r7, #14]
 8013ef2:	2b02      	cmp	r3, #2
 8013ef4:	f040 8100 	bne.w	80140f8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	220b      	movs	r2, #11
 8013efc:	761a      	strb	r2, [r3, #24]
      break;
 8013efe:	e0fb      	b.n	80140f8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8013f06:	b29a      	uxth	r2, r3
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	6899      	ldr	r1, [r3, #8]
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	899a      	ldrh	r2, [r3, #12]
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	791b      	ldrb	r3, [r3, #4]
 8013f18:	6878      	ldr	r0, [r7, #4]
 8013f1a:	f000 f93a 	bl	8014192 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	2204      	movs	r2, #4
 8013f22:	761a      	strb	r2, [r3, #24]
      break;
 8013f24:	e0f1      	b.n	801410a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	791b      	ldrb	r3, [r3, #4]
 8013f2a:	4619      	mov	r1, r3
 8013f2c:	6878      	ldr	r0, [r7, #4]
 8013f2e:	f002 fe2d 	bl	8016b8c <USBH_LL_GetURBState>
 8013f32:	4603      	mov	r3, r0
 8013f34:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8013f36:	7bbb      	ldrb	r3, [r7, #14]
 8013f38:	2b01      	cmp	r3, #1
 8013f3a:	d102      	bne.n	8013f42 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	2209      	movs	r2, #9
 8013f40:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8013f42:	7bbb      	ldrb	r3, [r7, #14]
 8013f44:	2b05      	cmp	r3, #5
 8013f46:	d102      	bne.n	8013f4e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8013f48:	2303      	movs	r3, #3
 8013f4a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8013f4c:	e0d6      	b.n	80140fc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8013f4e:	7bbb      	ldrb	r3, [r7, #14]
 8013f50:	2b04      	cmp	r3, #4
 8013f52:	f040 80d3 	bne.w	80140fc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	220b      	movs	r2, #11
 8013f5a:	761a      	strb	r2, [r3, #24]
      break;
 8013f5c:	e0ce      	b.n	80140fc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	6899      	ldr	r1, [r3, #8]
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	899a      	ldrh	r2, [r3, #12]
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	795b      	ldrb	r3, [r3, #5]
 8013f6a:	2001      	movs	r0, #1
 8013f6c:	9000      	str	r0, [sp, #0]
 8013f6e:	6878      	ldr	r0, [r7, #4]
 8013f70:	f000 f8ea 	bl	8014148 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8013f7a:	b29a      	uxth	r2, r3
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	2206      	movs	r2, #6
 8013f84:	761a      	strb	r2, [r3, #24]
      break;
 8013f86:	e0c0      	b.n	801410a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	795b      	ldrb	r3, [r3, #5]
 8013f8c:	4619      	mov	r1, r3
 8013f8e:	6878      	ldr	r0, [r7, #4]
 8013f90:	f002 fdfc 	bl	8016b8c <USBH_LL_GetURBState>
 8013f94:	4603      	mov	r3, r0
 8013f96:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8013f98:	7bbb      	ldrb	r3, [r7, #14]
 8013f9a:	2b01      	cmp	r3, #1
 8013f9c:	d103      	bne.n	8013fa6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	2207      	movs	r2, #7
 8013fa2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8013fa4:	e0ac      	b.n	8014100 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8013fa6:	7bbb      	ldrb	r3, [r7, #14]
 8013fa8:	2b05      	cmp	r3, #5
 8013faa:	d105      	bne.n	8013fb8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	220c      	movs	r2, #12
 8013fb0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8013fb2:	2303      	movs	r3, #3
 8013fb4:	73fb      	strb	r3, [r7, #15]
      break;
 8013fb6:	e0a3      	b.n	8014100 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8013fb8:	7bbb      	ldrb	r3, [r7, #14]
 8013fba:	2b02      	cmp	r3, #2
 8013fbc:	d103      	bne.n	8013fc6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	2205      	movs	r2, #5
 8013fc2:	761a      	strb	r2, [r3, #24]
      break;
 8013fc4:	e09c      	b.n	8014100 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8013fc6:	7bbb      	ldrb	r3, [r7, #14]
 8013fc8:	2b04      	cmp	r3, #4
 8013fca:	f040 8099 	bne.w	8014100 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	220b      	movs	r2, #11
 8013fd2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8013fd4:	2302      	movs	r3, #2
 8013fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8013fd8:	e092      	b.n	8014100 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	791b      	ldrb	r3, [r3, #4]
 8013fde:	2200      	movs	r2, #0
 8013fe0:	2100      	movs	r1, #0
 8013fe2:	6878      	ldr	r0, [r7, #4]
 8013fe4:	f000 f8d5 	bl	8014192 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8013fee:	b29a      	uxth	r2, r3
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	2208      	movs	r2, #8
 8013ff8:	761a      	strb	r2, [r3, #24]

      break;
 8013ffa:	e086      	b.n	801410a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	791b      	ldrb	r3, [r3, #4]
 8014000:	4619      	mov	r1, r3
 8014002:	6878      	ldr	r0, [r7, #4]
 8014004:	f002 fdc2 	bl	8016b8c <USBH_LL_GetURBState>
 8014008:	4603      	mov	r3, r0
 801400a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 801400c:	7bbb      	ldrb	r3, [r7, #14]
 801400e:	2b01      	cmp	r3, #1
 8014010:	d105      	bne.n	801401e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	220d      	movs	r2, #13
 8014016:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8014018:	2300      	movs	r3, #0
 801401a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 801401c:	e072      	b.n	8014104 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 801401e:	7bbb      	ldrb	r3, [r7, #14]
 8014020:	2b04      	cmp	r3, #4
 8014022:	d103      	bne.n	801402c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	220b      	movs	r2, #11
 8014028:	761a      	strb	r2, [r3, #24]
      break;
 801402a:	e06b      	b.n	8014104 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 801402c:	7bbb      	ldrb	r3, [r7, #14]
 801402e:	2b05      	cmp	r3, #5
 8014030:	d168      	bne.n	8014104 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8014032:	2303      	movs	r3, #3
 8014034:	73fb      	strb	r3, [r7, #15]
      break;
 8014036:	e065      	b.n	8014104 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	795b      	ldrb	r3, [r3, #5]
 801403c:	2201      	movs	r2, #1
 801403e:	9200      	str	r2, [sp, #0]
 8014040:	2200      	movs	r2, #0
 8014042:	2100      	movs	r1, #0
 8014044:	6878      	ldr	r0, [r7, #4]
 8014046:	f000 f87f 	bl	8014148 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8014050:	b29a      	uxth	r2, r3
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	220a      	movs	r2, #10
 801405a:	761a      	strb	r2, [r3, #24]
      break;
 801405c:	e055      	b.n	801410a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	795b      	ldrb	r3, [r3, #5]
 8014062:	4619      	mov	r1, r3
 8014064:	6878      	ldr	r0, [r7, #4]
 8014066:	f002 fd91 	bl	8016b8c <USBH_LL_GetURBState>
 801406a:	4603      	mov	r3, r0
 801406c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 801406e:	7bbb      	ldrb	r3, [r7, #14]
 8014070:	2b01      	cmp	r3, #1
 8014072:	d105      	bne.n	8014080 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8014074:	2300      	movs	r3, #0
 8014076:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	220d      	movs	r2, #13
 801407c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 801407e:	e043      	b.n	8014108 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8014080:	7bbb      	ldrb	r3, [r7, #14]
 8014082:	2b02      	cmp	r3, #2
 8014084:	d103      	bne.n	801408e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	2209      	movs	r2, #9
 801408a:	761a      	strb	r2, [r3, #24]
      break;
 801408c:	e03c      	b.n	8014108 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 801408e:	7bbb      	ldrb	r3, [r7, #14]
 8014090:	2b04      	cmp	r3, #4
 8014092:	d139      	bne.n	8014108 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	220b      	movs	r2, #11
 8014098:	761a      	strb	r2, [r3, #24]
      break;
 801409a:	e035      	b.n	8014108 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	7e5b      	ldrb	r3, [r3, #25]
 80140a0:	3301      	adds	r3, #1
 80140a2:	b2da      	uxtb	r2, r3
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	765a      	strb	r2, [r3, #25]
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	7e5b      	ldrb	r3, [r3, #25]
 80140ac:	2b02      	cmp	r3, #2
 80140ae:	d806      	bhi.n	80140be <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	2201      	movs	r2, #1
 80140b4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	2201      	movs	r2, #1
 80140ba:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80140bc:	e025      	b.n	801410a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80140c4:	2106      	movs	r1, #6
 80140c6:	6878      	ldr	r0, [r7, #4]
 80140c8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	2200      	movs	r2, #0
 80140ce:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	795b      	ldrb	r3, [r3, #5]
 80140d4:	4619      	mov	r1, r3
 80140d6:	6878      	ldr	r0, [r7, #4]
 80140d8:	f000 f90c 	bl	80142f4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	791b      	ldrb	r3, [r3, #4]
 80140e0:	4619      	mov	r1, r3
 80140e2:	6878      	ldr	r0, [r7, #4]
 80140e4:	f000 f906 	bl	80142f4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	2200      	movs	r2, #0
 80140ec:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80140ee:	2302      	movs	r3, #2
 80140f0:	73fb      	strb	r3, [r7, #15]
      break;
 80140f2:	e00a      	b.n	801410a <USBH_HandleControl+0x2de>

    default:
      break;
 80140f4:	bf00      	nop
 80140f6:	e008      	b.n	801410a <USBH_HandleControl+0x2de>
      break;
 80140f8:	bf00      	nop
 80140fa:	e006      	b.n	801410a <USBH_HandleControl+0x2de>
      break;
 80140fc:	bf00      	nop
 80140fe:	e004      	b.n	801410a <USBH_HandleControl+0x2de>
      break;
 8014100:	bf00      	nop
 8014102:	e002      	b.n	801410a <USBH_HandleControl+0x2de>
      break;
 8014104:	bf00      	nop
 8014106:	e000      	b.n	801410a <USBH_HandleControl+0x2de>
      break;
 8014108:	bf00      	nop
  }

  return status;
 801410a:	7bfb      	ldrb	r3, [r7, #15]
}
 801410c:	4618      	mov	r0, r3
 801410e:	3710      	adds	r7, #16
 8014110:	46bd      	mov	sp, r7
 8014112:	bd80      	pop	{r7, pc}

08014114 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8014114:	b580      	push	{r7, lr}
 8014116:	b088      	sub	sp, #32
 8014118:	af04      	add	r7, sp, #16
 801411a:	60f8      	str	r0, [r7, #12]
 801411c:	60b9      	str	r1, [r7, #8]
 801411e:	4613      	mov	r3, r2
 8014120:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8014122:	79f9      	ldrb	r1, [r7, #7]
 8014124:	2300      	movs	r3, #0
 8014126:	9303      	str	r3, [sp, #12]
 8014128:	2308      	movs	r3, #8
 801412a:	9302      	str	r3, [sp, #8]
 801412c:	68bb      	ldr	r3, [r7, #8]
 801412e:	9301      	str	r3, [sp, #4]
 8014130:	2300      	movs	r3, #0
 8014132:	9300      	str	r3, [sp, #0]
 8014134:	2300      	movs	r3, #0
 8014136:	2200      	movs	r2, #0
 8014138:	68f8      	ldr	r0, [r7, #12]
 801413a:	f002 fcf6 	bl	8016b2a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 801413e:	2300      	movs	r3, #0
}
 8014140:	4618      	mov	r0, r3
 8014142:	3710      	adds	r7, #16
 8014144:	46bd      	mov	sp, r7
 8014146:	bd80      	pop	{r7, pc}

08014148 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8014148:	b580      	push	{r7, lr}
 801414a:	b088      	sub	sp, #32
 801414c:	af04      	add	r7, sp, #16
 801414e:	60f8      	str	r0, [r7, #12]
 8014150:	60b9      	str	r1, [r7, #8]
 8014152:	4611      	mov	r1, r2
 8014154:	461a      	mov	r2, r3
 8014156:	460b      	mov	r3, r1
 8014158:	80fb      	strh	r3, [r7, #6]
 801415a:	4613      	mov	r3, r2
 801415c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 801415e:	68fb      	ldr	r3, [r7, #12]
 8014160:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8014164:	2b00      	cmp	r3, #0
 8014166:	d001      	beq.n	801416c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8014168:	2300      	movs	r3, #0
 801416a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801416c:	7979      	ldrb	r1, [r7, #5]
 801416e:	7e3b      	ldrb	r3, [r7, #24]
 8014170:	9303      	str	r3, [sp, #12]
 8014172:	88fb      	ldrh	r3, [r7, #6]
 8014174:	9302      	str	r3, [sp, #8]
 8014176:	68bb      	ldr	r3, [r7, #8]
 8014178:	9301      	str	r3, [sp, #4]
 801417a:	2301      	movs	r3, #1
 801417c:	9300      	str	r3, [sp, #0]
 801417e:	2300      	movs	r3, #0
 8014180:	2200      	movs	r2, #0
 8014182:	68f8      	ldr	r0, [r7, #12]
 8014184:	f002 fcd1 	bl	8016b2a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8014188:	2300      	movs	r3, #0
}
 801418a:	4618      	mov	r0, r3
 801418c:	3710      	adds	r7, #16
 801418e:	46bd      	mov	sp, r7
 8014190:	bd80      	pop	{r7, pc}

08014192 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8014192:	b580      	push	{r7, lr}
 8014194:	b088      	sub	sp, #32
 8014196:	af04      	add	r7, sp, #16
 8014198:	60f8      	str	r0, [r7, #12]
 801419a:	60b9      	str	r1, [r7, #8]
 801419c:	4611      	mov	r1, r2
 801419e:	461a      	mov	r2, r3
 80141a0:	460b      	mov	r3, r1
 80141a2:	80fb      	strh	r3, [r7, #6]
 80141a4:	4613      	mov	r3, r2
 80141a6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80141a8:	7979      	ldrb	r1, [r7, #5]
 80141aa:	2300      	movs	r3, #0
 80141ac:	9303      	str	r3, [sp, #12]
 80141ae:	88fb      	ldrh	r3, [r7, #6]
 80141b0:	9302      	str	r3, [sp, #8]
 80141b2:	68bb      	ldr	r3, [r7, #8]
 80141b4:	9301      	str	r3, [sp, #4]
 80141b6:	2301      	movs	r3, #1
 80141b8:	9300      	str	r3, [sp, #0]
 80141ba:	2300      	movs	r3, #0
 80141bc:	2201      	movs	r2, #1
 80141be:	68f8      	ldr	r0, [r7, #12]
 80141c0:	f002 fcb3 	bl	8016b2a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80141c4:	2300      	movs	r3, #0

}
 80141c6:	4618      	mov	r0, r3
 80141c8:	3710      	adds	r7, #16
 80141ca:	46bd      	mov	sp, r7
 80141cc:	bd80      	pop	{r7, pc}

080141ce <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80141ce:	b580      	push	{r7, lr}
 80141d0:	b088      	sub	sp, #32
 80141d2:	af04      	add	r7, sp, #16
 80141d4:	60f8      	str	r0, [r7, #12]
 80141d6:	60b9      	str	r1, [r7, #8]
 80141d8:	4611      	mov	r1, r2
 80141da:	461a      	mov	r2, r3
 80141dc:	460b      	mov	r3, r1
 80141de:	80fb      	strh	r3, [r7, #6]
 80141e0:	4613      	mov	r3, r2
 80141e2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80141e4:	68fb      	ldr	r3, [r7, #12]
 80141e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d001      	beq.n	80141f2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80141ee:	2300      	movs	r3, #0
 80141f0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80141f2:	7979      	ldrb	r1, [r7, #5]
 80141f4:	7e3b      	ldrb	r3, [r7, #24]
 80141f6:	9303      	str	r3, [sp, #12]
 80141f8:	88fb      	ldrh	r3, [r7, #6]
 80141fa:	9302      	str	r3, [sp, #8]
 80141fc:	68bb      	ldr	r3, [r7, #8]
 80141fe:	9301      	str	r3, [sp, #4]
 8014200:	2301      	movs	r3, #1
 8014202:	9300      	str	r3, [sp, #0]
 8014204:	2302      	movs	r3, #2
 8014206:	2200      	movs	r2, #0
 8014208:	68f8      	ldr	r0, [r7, #12]
 801420a:	f002 fc8e 	bl	8016b2a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 801420e:	2300      	movs	r3, #0
}
 8014210:	4618      	mov	r0, r3
 8014212:	3710      	adds	r7, #16
 8014214:	46bd      	mov	sp, r7
 8014216:	bd80      	pop	{r7, pc}

08014218 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8014218:	b580      	push	{r7, lr}
 801421a:	b088      	sub	sp, #32
 801421c:	af04      	add	r7, sp, #16
 801421e:	60f8      	str	r0, [r7, #12]
 8014220:	60b9      	str	r1, [r7, #8]
 8014222:	4611      	mov	r1, r2
 8014224:	461a      	mov	r2, r3
 8014226:	460b      	mov	r3, r1
 8014228:	80fb      	strh	r3, [r7, #6]
 801422a:	4613      	mov	r3, r2
 801422c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801422e:	7979      	ldrb	r1, [r7, #5]
 8014230:	2300      	movs	r3, #0
 8014232:	9303      	str	r3, [sp, #12]
 8014234:	88fb      	ldrh	r3, [r7, #6]
 8014236:	9302      	str	r3, [sp, #8]
 8014238:	68bb      	ldr	r3, [r7, #8]
 801423a:	9301      	str	r3, [sp, #4]
 801423c:	2301      	movs	r3, #1
 801423e:	9300      	str	r3, [sp, #0]
 8014240:	2302      	movs	r3, #2
 8014242:	2201      	movs	r2, #1
 8014244:	68f8      	ldr	r0, [r7, #12]
 8014246:	f002 fc70 	bl	8016b2a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 801424a:	2300      	movs	r3, #0
}
 801424c:	4618      	mov	r0, r3
 801424e:	3710      	adds	r7, #16
 8014250:	46bd      	mov	sp, r7
 8014252:	bd80      	pop	{r7, pc}

08014254 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8014254:	b580      	push	{r7, lr}
 8014256:	b086      	sub	sp, #24
 8014258:	af04      	add	r7, sp, #16
 801425a:	6078      	str	r0, [r7, #4]
 801425c:	4608      	mov	r0, r1
 801425e:	4611      	mov	r1, r2
 8014260:	461a      	mov	r2, r3
 8014262:	4603      	mov	r3, r0
 8014264:	70fb      	strb	r3, [r7, #3]
 8014266:	460b      	mov	r3, r1
 8014268:	70bb      	strb	r3, [r7, #2]
 801426a:	4613      	mov	r3, r2
 801426c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 801426e:	7878      	ldrb	r0, [r7, #1]
 8014270:	78ba      	ldrb	r2, [r7, #2]
 8014272:	78f9      	ldrb	r1, [r7, #3]
 8014274:	8b3b      	ldrh	r3, [r7, #24]
 8014276:	9302      	str	r3, [sp, #8]
 8014278:	7d3b      	ldrb	r3, [r7, #20]
 801427a:	9301      	str	r3, [sp, #4]
 801427c:	7c3b      	ldrb	r3, [r7, #16]
 801427e:	9300      	str	r3, [sp, #0]
 8014280:	4603      	mov	r3, r0
 8014282:	6878      	ldr	r0, [r7, #4]
 8014284:	f002 fc03 	bl	8016a8e <USBH_LL_OpenPipe>

  return USBH_OK;
 8014288:	2300      	movs	r3, #0
}
 801428a:	4618      	mov	r0, r3
 801428c:	3708      	adds	r7, #8
 801428e:	46bd      	mov	sp, r7
 8014290:	bd80      	pop	{r7, pc}

08014292 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8014292:	b580      	push	{r7, lr}
 8014294:	b082      	sub	sp, #8
 8014296:	af00      	add	r7, sp, #0
 8014298:	6078      	str	r0, [r7, #4]
 801429a:	460b      	mov	r3, r1
 801429c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 801429e:	78fb      	ldrb	r3, [r7, #3]
 80142a0:	4619      	mov	r1, r3
 80142a2:	6878      	ldr	r0, [r7, #4]
 80142a4:	f002 fc22 	bl	8016aec <USBH_LL_ClosePipe>

  return USBH_OK;
 80142a8:	2300      	movs	r3, #0
}
 80142aa:	4618      	mov	r0, r3
 80142ac:	3708      	adds	r7, #8
 80142ae:	46bd      	mov	sp, r7
 80142b0:	bd80      	pop	{r7, pc}

080142b2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80142b2:	b580      	push	{r7, lr}
 80142b4:	b084      	sub	sp, #16
 80142b6:	af00      	add	r7, sp, #0
 80142b8:	6078      	str	r0, [r7, #4]
 80142ba:	460b      	mov	r3, r1
 80142bc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80142be:	6878      	ldr	r0, [r7, #4]
 80142c0:	f000 f836 	bl	8014330 <USBH_GetFreePipe>
 80142c4:	4603      	mov	r3, r0
 80142c6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80142c8:	89fb      	ldrh	r3, [r7, #14]
 80142ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80142ce:	4293      	cmp	r3, r2
 80142d0:	d00a      	beq.n	80142e8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80142d2:	78fa      	ldrb	r2, [r7, #3]
 80142d4:	89fb      	ldrh	r3, [r7, #14]
 80142d6:	f003 030f 	and.w	r3, r3, #15
 80142da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80142de:	6879      	ldr	r1, [r7, #4]
 80142e0:	33e0      	adds	r3, #224	; 0xe0
 80142e2:	009b      	lsls	r3, r3, #2
 80142e4:	440b      	add	r3, r1
 80142e6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80142e8:	89fb      	ldrh	r3, [r7, #14]
 80142ea:	b2db      	uxtb	r3, r3
}
 80142ec:	4618      	mov	r0, r3
 80142ee:	3710      	adds	r7, #16
 80142f0:	46bd      	mov	sp, r7
 80142f2:	bd80      	pop	{r7, pc}

080142f4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80142f4:	b480      	push	{r7}
 80142f6:	b083      	sub	sp, #12
 80142f8:	af00      	add	r7, sp, #0
 80142fa:	6078      	str	r0, [r7, #4]
 80142fc:	460b      	mov	r3, r1
 80142fe:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8014300:	78fb      	ldrb	r3, [r7, #3]
 8014302:	2b0f      	cmp	r3, #15
 8014304:	d80d      	bhi.n	8014322 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8014306:	78fb      	ldrb	r3, [r7, #3]
 8014308:	687a      	ldr	r2, [r7, #4]
 801430a:	33e0      	adds	r3, #224	; 0xe0
 801430c:	009b      	lsls	r3, r3, #2
 801430e:	4413      	add	r3, r2
 8014310:	685a      	ldr	r2, [r3, #4]
 8014312:	78fb      	ldrb	r3, [r7, #3]
 8014314:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8014318:	6879      	ldr	r1, [r7, #4]
 801431a:	33e0      	adds	r3, #224	; 0xe0
 801431c:	009b      	lsls	r3, r3, #2
 801431e:	440b      	add	r3, r1
 8014320:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8014322:	2300      	movs	r3, #0
}
 8014324:	4618      	mov	r0, r3
 8014326:	370c      	adds	r7, #12
 8014328:	46bd      	mov	sp, r7
 801432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801432e:	4770      	bx	lr

08014330 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8014330:	b480      	push	{r7}
 8014332:	b085      	sub	sp, #20
 8014334:	af00      	add	r7, sp, #0
 8014336:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8014338:	2300      	movs	r3, #0
 801433a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 801433c:	2300      	movs	r3, #0
 801433e:	73fb      	strb	r3, [r7, #15]
 8014340:	e00f      	b.n	8014362 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8014342:	7bfb      	ldrb	r3, [r7, #15]
 8014344:	687a      	ldr	r2, [r7, #4]
 8014346:	33e0      	adds	r3, #224	; 0xe0
 8014348:	009b      	lsls	r3, r3, #2
 801434a:	4413      	add	r3, r2
 801434c:	685b      	ldr	r3, [r3, #4]
 801434e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014352:	2b00      	cmp	r3, #0
 8014354:	d102      	bne.n	801435c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8014356:	7bfb      	ldrb	r3, [r7, #15]
 8014358:	b29b      	uxth	r3, r3
 801435a:	e007      	b.n	801436c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 801435c:	7bfb      	ldrb	r3, [r7, #15]
 801435e:	3301      	adds	r3, #1
 8014360:	73fb      	strb	r3, [r7, #15]
 8014362:	7bfb      	ldrb	r3, [r7, #15]
 8014364:	2b0f      	cmp	r3, #15
 8014366:	d9ec      	bls.n	8014342 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8014368:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 801436c:	4618      	mov	r0, r3
 801436e:	3714      	adds	r7, #20
 8014370:	46bd      	mov	sp, r7
 8014372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014376:	4770      	bx	lr

08014378 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8014378:	b580      	push	{r7, lr}
 801437a:	b084      	sub	sp, #16
 801437c:	af00      	add	r7, sp, #0
 801437e:	4603      	mov	r3, r0
 8014380:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8014382:	79fb      	ldrb	r3, [r7, #7]
 8014384:	4a08      	ldr	r2, [pc, #32]	; (80143a8 <disk_status+0x30>)
 8014386:	009b      	lsls	r3, r3, #2
 8014388:	4413      	add	r3, r2
 801438a:	685b      	ldr	r3, [r3, #4]
 801438c:	685b      	ldr	r3, [r3, #4]
 801438e:	79fa      	ldrb	r2, [r7, #7]
 8014390:	4905      	ldr	r1, [pc, #20]	; (80143a8 <disk_status+0x30>)
 8014392:	440a      	add	r2, r1
 8014394:	7a12      	ldrb	r2, [r2, #8]
 8014396:	4610      	mov	r0, r2
 8014398:	4798      	blx	r3
 801439a:	4603      	mov	r3, r0
 801439c:	73fb      	strb	r3, [r7, #15]
  return stat;
 801439e:	7bfb      	ldrb	r3, [r7, #15]
}
 80143a0:	4618      	mov	r0, r3
 80143a2:	3710      	adds	r7, #16
 80143a4:	46bd      	mov	sp, r7
 80143a6:	bd80      	pop	{r7, pc}
 80143a8:	20000ea8 	.word	0x20000ea8

080143ac <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80143ac:	b580      	push	{r7, lr}
 80143ae:	b084      	sub	sp, #16
 80143b0:	af00      	add	r7, sp, #0
 80143b2:	4603      	mov	r3, r0
 80143b4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80143b6:	2300      	movs	r3, #0
 80143b8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80143ba:	79fb      	ldrb	r3, [r7, #7]
 80143bc:	4a0d      	ldr	r2, [pc, #52]	; (80143f4 <disk_initialize+0x48>)
 80143be:	5cd3      	ldrb	r3, [r2, r3]
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d111      	bne.n	80143e8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80143c4:	79fb      	ldrb	r3, [r7, #7]
 80143c6:	4a0b      	ldr	r2, [pc, #44]	; (80143f4 <disk_initialize+0x48>)
 80143c8:	2101      	movs	r1, #1
 80143ca:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80143cc:	79fb      	ldrb	r3, [r7, #7]
 80143ce:	4a09      	ldr	r2, [pc, #36]	; (80143f4 <disk_initialize+0x48>)
 80143d0:	009b      	lsls	r3, r3, #2
 80143d2:	4413      	add	r3, r2
 80143d4:	685b      	ldr	r3, [r3, #4]
 80143d6:	681b      	ldr	r3, [r3, #0]
 80143d8:	79fa      	ldrb	r2, [r7, #7]
 80143da:	4906      	ldr	r1, [pc, #24]	; (80143f4 <disk_initialize+0x48>)
 80143dc:	440a      	add	r2, r1
 80143de:	7a12      	ldrb	r2, [r2, #8]
 80143e0:	4610      	mov	r0, r2
 80143e2:	4798      	blx	r3
 80143e4:	4603      	mov	r3, r0
 80143e6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80143e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80143ea:	4618      	mov	r0, r3
 80143ec:	3710      	adds	r7, #16
 80143ee:	46bd      	mov	sp, r7
 80143f0:	bd80      	pop	{r7, pc}
 80143f2:	bf00      	nop
 80143f4:	20000ea8 	.word	0x20000ea8

080143f8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80143f8:	b590      	push	{r4, r7, lr}
 80143fa:	b087      	sub	sp, #28
 80143fc:	af00      	add	r7, sp, #0
 80143fe:	60b9      	str	r1, [r7, #8]
 8014400:	607a      	str	r2, [r7, #4]
 8014402:	603b      	str	r3, [r7, #0]
 8014404:	4603      	mov	r3, r0
 8014406:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8014408:	7bfb      	ldrb	r3, [r7, #15]
 801440a:	4a0a      	ldr	r2, [pc, #40]	; (8014434 <disk_read+0x3c>)
 801440c:	009b      	lsls	r3, r3, #2
 801440e:	4413      	add	r3, r2
 8014410:	685b      	ldr	r3, [r3, #4]
 8014412:	689c      	ldr	r4, [r3, #8]
 8014414:	7bfb      	ldrb	r3, [r7, #15]
 8014416:	4a07      	ldr	r2, [pc, #28]	; (8014434 <disk_read+0x3c>)
 8014418:	4413      	add	r3, r2
 801441a:	7a18      	ldrb	r0, [r3, #8]
 801441c:	683b      	ldr	r3, [r7, #0]
 801441e:	687a      	ldr	r2, [r7, #4]
 8014420:	68b9      	ldr	r1, [r7, #8]
 8014422:	47a0      	blx	r4
 8014424:	4603      	mov	r3, r0
 8014426:	75fb      	strb	r3, [r7, #23]
  return res;
 8014428:	7dfb      	ldrb	r3, [r7, #23]
}
 801442a:	4618      	mov	r0, r3
 801442c:	371c      	adds	r7, #28
 801442e:	46bd      	mov	sp, r7
 8014430:	bd90      	pop	{r4, r7, pc}
 8014432:	bf00      	nop
 8014434:	20000ea8 	.word	0x20000ea8

08014438 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8014438:	b590      	push	{r4, r7, lr}
 801443a:	b087      	sub	sp, #28
 801443c:	af00      	add	r7, sp, #0
 801443e:	60b9      	str	r1, [r7, #8]
 8014440:	607a      	str	r2, [r7, #4]
 8014442:	603b      	str	r3, [r7, #0]
 8014444:	4603      	mov	r3, r0
 8014446:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8014448:	7bfb      	ldrb	r3, [r7, #15]
 801444a:	4a0a      	ldr	r2, [pc, #40]	; (8014474 <disk_write+0x3c>)
 801444c:	009b      	lsls	r3, r3, #2
 801444e:	4413      	add	r3, r2
 8014450:	685b      	ldr	r3, [r3, #4]
 8014452:	68dc      	ldr	r4, [r3, #12]
 8014454:	7bfb      	ldrb	r3, [r7, #15]
 8014456:	4a07      	ldr	r2, [pc, #28]	; (8014474 <disk_write+0x3c>)
 8014458:	4413      	add	r3, r2
 801445a:	7a18      	ldrb	r0, [r3, #8]
 801445c:	683b      	ldr	r3, [r7, #0]
 801445e:	687a      	ldr	r2, [r7, #4]
 8014460:	68b9      	ldr	r1, [r7, #8]
 8014462:	47a0      	blx	r4
 8014464:	4603      	mov	r3, r0
 8014466:	75fb      	strb	r3, [r7, #23]
  return res;
 8014468:	7dfb      	ldrb	r3, [r7, #23]
}
 801446a:	4618      	mov	r0, r3
 801446c:	371c      	adds	r7, #28
 801446e:	46bd      	mov	sp, r7
 8014470:	bd90      	pop	{r4, r7, pc}
 8014472:	bf00      	nop
 8014474:	20000ea8 	.word	0x20000ea8

08014478 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8014478:	b580      	push	{r7, lr}
 801447a:	b084      	sub	sp, #16
 801447c:	af00      	add	r7, sp, #0
 801447e:	4603      	mov	r3, r0
 8014480:	603a      	str	r2, [r7, #0]
 8014482:	71fb      	strb	r3, [r7, #7]
 8014484:	460b      	mov	r3, r1
 8014486:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8014488:	79fb      	ldrb	r3, [r7, #7]
 801448a:	4a09      	ldr	r2, [pc, #36]	; (80144b0 <disk_ioctl+0x38>)
 801448c:	009b      	lsls	r3, r3, #2
 801448e:	4413      	add	r3, r2
 8014490:	685b      	ldr	r3, [r3, #4]
 8014492:	691b      	ldr	r3, [r3, #16]
 8014494:	79fa      	ldrb	r2, [r7, #7]
 8014496:	4906      	ldr	r1, [pc, #24]	; (80144b0 <disk_ioctl+0x38>)
 8014498:	440a      	add	r2, r1
 801449a:	7a10      	ldrb	r0, [r2, #8]
 801449c:	79b9      	ldrb	r1, [r7, #6]
 801449e:	683a      	ldr	r2, [r7, #0]
 80144a0:	4798      	blx	r3
 80144a2:	4603      	mov	r3, r0
 80144a4:	73fb      	strb	r3, [r7, #15]
  return res;
 80144a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80144a8:	4618      	mov	r0, r3
 80144aa:	3710      	adds	r7, #16
 80144ac:	46bd      	mov	sp, r7
 80144ae:	bd80      	pop	{r7, pc}
 80144b0:	20000ea8 	.word	0x20000ea8

080144b4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80144b4:	b480      	push	{r7}
 80144b6:	b085      	sub	sp, #20
 80144b8:	af00      	add	r7, sp, #0
 80144ba:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	3301      	adds	r3, #1
 80144c0:	781b      	ldrb	r3, [r3, #0]
 80144c2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80144c4:	89fb      	ldrh	r3, [r7, #14]
 80144c6:	021b      	lsls	r3, r3, #8
 80144c8:	b21a      	sxth	r2, r3
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	781b      	ldrb	r3, [r3, #0]
 80144ce:	b21b      	sxth	r3, r3
 80144d0:	4313      	orrs	r3, r2
 80144d2:	b21b      	sxth	r3, r3
 80144d4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80144d6:	89fb      	ldrh	r3, [r7, #14]
}
 80144d8:	4618      	mov	r0, r3
 80144da:	3714      	adds	r7, #20
 80144dc:	46bd      	mov	sp, r7
 80144de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144e2:	4770      	bx	lr

080144e4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80144e4:	b480      	push	{r7}
 80144e6:	b085      	sub	sp, #20
 80144e8:	af00      	add	r7, sp, #0
 80144ea:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	3303      	adds	r3, #3
 80144f0:	781b      	ldrb	r3, [r3, #0]
 80144f2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	021b      	lsls	r3, r3, #8
 80144f8:	687a      	ldr	r2, [r7, #4]
 80144fa:	3202      	adds	r2, #2
 80144fc:	7812      	ldrb	r2, [r2, #0]
 80144fe:	4313      	orrs	r3, r2
 8014500:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	021b      	lsls	r3, r3, #8
 8014506:	687a      	ldr	r2, [r7, #4]
 8014508:	3201      	adds	r2, #1
 801450a:	7812      	ldrb	r2, [r2, #0]
 801450c:	4313      	orrs	r3, r2
 801450e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8014510:	68fb      	ldr	r3, [r7, #12]
 8014512:	021b      	lsls	r3, r3, #8
 8014514:	687a      	ldr	r2, [r7, #4]
 8014516:	7812      	ldrb	r2, [r2, #0]
 8014518:	4313      	orrs	r3, r2
 801451a:	60fb      	str	r3, [r7, #12]
	return rv;
 801451c:	68fb      	ldr	r3, [r7, #12]
}
 801451e:	4618      	mov	r0, r3
 8014520:	3714      	adds	r7, #20
 8014522:	46bd      	mov	sp, r7
 8014524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014528:	4770      	bx	lr

0801452a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801452a:	b480      	push	{r7}
 801452c:	b083      	sub	sp, #12
 801452e:	af00      	add	r7, sp, #0
 8014530:	6078      	str	r0, [r7, #4]
 8014532:	460b      	mov	r3, r1
 8014534:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	1c5a      	adds	r2, r3, #1
 801453a:	607a      	str	r2, [r7, #4]
 801453c:	887a      	ldrh	r2, [r7, #2]
 801453e:	b2d2      	uxtb	r2, r2
 8014540:	701a      	strb	r2, [r3, #0]
 8014542:	887b      	ldrh	r3, [r7, #2]
 8014544:	0a1b      	lsrs	r3, r3, #8
 8014546:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	1c5a      	adds	r2, r3, #1
 801454c:	607a      	str	r2, [r7, #4]
 801454e:	887a      	ldrh	r2, [r7, #2]
 8014550:	b2d2      	uxtb	r2, r2
 8014552:	701a      	strb	r2, [r3, #0]
}
 8014554:	bf00      	nop
 8014556:	370c      	adds	r7, #12
 8014558:	46bd      	mov	sp, r7
 801455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801455e:	4770      	bx	lr

08014560 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8014560:	b480      	push	{r7}
 8014562:	b083      	sub	sp, #12
 8014564:	af00      	add	r7, sp, #0
 8014566:	6078      	str	r0, [r7, #4]
 8014568:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	1c5a      	adds	r2, r3, #1
 801456e:	607a      	str	r2, [r7, #4]
 8014570:	683a      	ldr	r2, [r7, #0]
 8014572:	b2d2      	uxtb	r2, r2
 8014574:	701a      	strb	r2, [r3, #0]
 8014576:	683b      	ldr	r3, [r7, #0]
 8014578:	0a1b      	lsrs	r3, r3, #8
 801457a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	1c5a      	adds	r2, r3, #1
 8014580:	607a      	str	r2, [r7, #4]
 8014582:	683a      	ldr	r2, [r7, #0]
 8014584:	b2d2      	uxtb	r2, r2
 8014586:	701a      	strb	r2, [r3, #0]
 8014588:	683b      	ldr	r3, [r7, #0]
 801458a:	0a1b      	lsrs	r3, r3, #8
 801458c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	1c5a      	adds	r2, r3, #1
 8014592:	607a      	str	r2, [r7, #4]
 8014594:	683a      	ldr	r2, [r7, #0]
 8014596:	b2d2      	uxtb	r2, r2
 8014598:	701a      	strb	r2, [r3, #0]
 801459a:	683b      	ldr	r3, [r7, #0]
 801459c:	0a1b      	lsrs	r3, r3, #8
 801459e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	1c5a      	adds	r2, r3, #1
 80145a4:	607a      	str	r2, [r7, #4]
 80145a6:	683a      	ldr	r2, [r7, #0]
 80145a8:	b2d2      	uxtb	r2, r2
 80145aa:	701a      	strb	r2, [r3, #0]
}
 80145ac:	bf00      	nop
 80145ae:	370c      	adds	r7, #12
 80145b0:	46bd      	mov	sp, r7
 80145b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145b6:	4770      	bx	lr

080145b8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80145b8:	b480      	push	{r7}
 80145ba:	b087      	sub	sp, #28
 80145bc:	af00      	add	r7, sp, #0
 80145be:	60f8      	str	r0, [r7, #12]
 80145c0:	60b9      	str	r1, [r7, #8]
 80145c2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80145c8:	68bb      	ldr	r3, [r7, #8]
 80145ca:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d00d      	beq.n	80145ee <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80145d2:	693a      	ldr	r2, [r7, #16]
 80145d4:	1c53      	adds	r3, r2, #1
 80145d6:	613b      	str	r3, [r7, #16]
 80145d8:	697b      	ldr	r3, [r7, #20]
 80145da:	1c59      	adds	r1, r3, #1
 80145dc:	6179      	str	r1, [r7, #20]
 80145de:	7812      	ldrb	r2, [r2, #0]
 80145e0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	3b01      	subs	r3, #1
 80145e6:	607b      	str	r3, [r7, #4]
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d1f1      	bne.n	80145d2 <mem_cpy+0x1a>
	}
}
 80145ee:	bf00      	nop
 80145f0:	371c      	adds	r7, #28
 80145f2:	46bd      	mov	sp, r7
 80145f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145f8:	4770      	bx	lr

080145fa <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80145fa:	b480      	push	{r7}
 80145fc:	b087      	sub	sp, #28
 80145fe:	af00      	add	r7, sp, #0
 8014600:	60f8      	str	r0, [r7, #12]
 8014602:	60b9      	str	r1, [r7, #8]
 8014604:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8014606:	68fb      	ldr	r3, [r7, #12]
 8014608:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801460a:	697b      	ldr	r3, [r7, #20]
 801460c:	1c5a      	adds	r2, r3, #1
 801460e:	617a      	str	r2, [r7, #20]
 8014610:	68ba      	ldr	r2, [r7, #8]
 8014612:	b2d2      	uxtb	r2, r2
 8014614:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	3b01      	subs	r3, #1
 801461a:	607b      	str	r3, [r7, #4]
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	2b00      	cmp	r3, #0
 8014620:	d1f3      	bne.n	801460a <mem_set+0x10>
}
 8014622:	bf00      	nop
 8014624:	bf00      	nop
 8014626:	371c      	adds	r7, #28
 8014628:	46bd      	mov	sp, r7
 801462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801462e:	4770      	bx	lr

08014630 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8014630:	b480      	push	{r7}
 8014632:	b089      	sub	sp, #36	; 0x24
 8014634:	af00      	add	r7, sp, #0
 8014636:	60f8      	str	r0, [r7, #12]
 8014638:	60b9      	str	r1, [r7, #8]
 801463a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801463c:	68fb      	ldr	r3, [r7, #12]
 801463e:	61fb      	str	r3, [r7, #28]
 8014640:	68bb      	ldr	r3, [r7, #8]
 8014642:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8014644:	2300      	movs	r3, #0
 8014646:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8014648:	69fb      	ldr	r3, [r7, #28]
 801464a:	1c5a      	adds	r2, r3, #1
 801464c:	61fa      	str	r2, [r7, #28]
 801464e:	781b      	ldrb	r3, [r3, #0]
 8014650:	4619      	mov	r1, r3
 8014652:	69bb      	ldr	r3, [r7, #24]
 8014654:	1c5a      	adds	r2, r3, #1
 8014656:	61ba      	str	r2, [r7, #24]
 8014658:	781b      	ldrb	r3, [r3, #0]
 801465a:	1acb      	subs	r3, r1, r3
 801465c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	3b01      	subs	r3, #1
 8014662:	607b      	str	r3, [r7, #4]
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	2b00      	cmp	r3, #0
 8014668:	d002      	beq.n	8014670 <mem_cmp+0x40>
 801466a:	697b      	ldr	r3, [r7, #20]
 801466c:	2b00      	cmp	r3, #0
 801466e:	d0eb      	beq.n	8014648 <mem_cmp+0x18>

	return r;
 8014670:	697b      	ldr	r3, [r7, #20]
}
 8014672:	4618      	mov	r0, r3
 8014674:	3724      	adds	r7, #36	; 0x24
 8014676:	46bd      	mov	sp, r7
 8014678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801467c:	4770      	bx	lr

0801467e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801467e:	b480      	push	{r7}
 8014680:	b083      	sub	sp, #12
 8014682:	af00      	add	r7, sp, #0
 8014684:	6078      	str	r0, [r7, #4]
 8014686:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8014688:	e002      	b.n	8014690 <chk_chr+0x12>
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	3301      	adds	r3, #1
 801468e:	607b      	str	r3, [r7, #4]
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	781b      	ldrb	r3, [r3, #0]
 8014694:	2b00      	cmp	r3, #0
 8014696:	d005      	beq.n	80146a4 <chk_chr+0x26>
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	781b      	ldrb	r3, [r3, #0]
 801469c:	461a      	mov	r2, r3
 801469e:	683b      	ldr	r3, [r7, #0]
 80146a0:	4293      	cmp	r3, r2
 80146a2:	d1f2      	bne.n	801468a <chk_chr+0xc>
	return *str;
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	781b      	ldrb	r3, [r3, #0]
}
 80146a8:	4618      	mov	r0, r3
 80146aa:	370c      	adds	r7, #12
 80146ac:	46bd      	mov	sp, r7
 80146ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146b2:	4770      	bx	lr

080146b4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80146b4:	b480      	push	{r7}
 80146b6:	b085      	sub	sp, #20
 80146b8:	af00      	add	r7, sp, #0
 80146ba:	6078      	str	r0, [r7, #4]
 80146bc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80146be:	2300      	movs	r3, #0
 80146c0:	60bb      	str	r3, [r7, #8]
 80146c2:	68bb      	ldr	r3, [r7, #8]
 80146c4:	60fb      	str	r3, [r7, #12]
 80146c6:	e029      	b.n	801471c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80146c8:	4a27      	ldr	r2, [pc, #156]	; (8014768 <chk_lock+0xb4>)
 80146ca:	68fb      	ldr	r3, [r7, #12]
 80146cc:	011b      	lsls	r3, r3, #4
 80146ce:	4413      	add	r3, r2
 80146d0:	681b      	ldr	r3, [r3, #0]
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d01d      	beq.n	8014712 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80146d6:	4a24      	ldr	r2, [pc, #144]	; (8014768 <chk_lock+0xb4>)
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	011b      	lsls	r3, r3, #4
 80146dc:	4413      	add	r3, r2
 80146de:	681a      	ldr	r2, [r3, #0]
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	681b      	ldr	r3, [r3, #0]
 80146e4:	429a      	cmp	r2, r3
 80146e6:	d116      	bne.n	8014716 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80146e8:	4a1f      	ldr	r2, [pc, #124]	; (8014768 <chk_lock+0xb4>)
 80146ea:	68fb      	ldr	r3, [r7, #12]
 80146ec:	011b      	lsls	r3, r3, #4
 80146ee:	4413      	add	r3, r2
 80146f0:	3304      	adds	r3, #4
 80146f2:	681a      	ldr	r2, [r3, #0]
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80146f8:	429a      	cmp	r2, r3
 80146fa:	d10c      	bne.n	8014716 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80146fc:	4a1a      	ldr	r2, [pc, #104]	; (8014768 <chk_lock+0xb4>)
 80146fe:	68fb      	ldr	r3, [r7, #12]
 8014700:	011b      	lsls	r3, r3, #4
 8014702:	4413      	add	r3, r2
 8014704:	3308      	adds	r3, #8
 8014706:	681a      	ldr	r2, [r3, #0]
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801470c:	429a      	cmp	r2, r3
 801470e:	d102      	bne.n	8014716 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8014710:	e007      	b.n	8014722 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8014712:	2301      	movs	r3, #1
 8014714:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8014716:	68fb      	ldr	r3, [r7, #12]
 8014718:	3301      	adds	r3, #1
 801471a:	60fb      	str	r3, [r7, #12]
 801471c:	68fb      	ldr	r3, [r7, #12]
 801471e:	2b01      	cmp	r3, #1
 8014720:	d9d2      	bls.n	80146c8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	2b02      	cmp	r3, #2
 8014726:	d109      	bne.n	801473c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8014728:	68bb      	ldr	r3, [r7, #8]
 801472a:	2b00      	cmp	r3, #0
 801472c:	d102      	bne.n	8014734 <chk_lock+0x80>
 801472e:	683b      	ldr	r3, [r7, #0]
 8014730:	2b02      	cmp	r3, #2
 8014732:	d101      	bne.n	8014738 <chk_lock+0x84>
 8014734:	2300      	movs	r3, #0
 8014736:	e010      	b.n	801475a <chk_lock+0xa6>
 8014738:	2312      	movs	r3, #18
 801473a:	e00e      	b.n	801475a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801473c:	683b      	ldr	r3, [r7, #0]
 801473e:	2b00      	cmp	r3, #0
 8014740:	d108      	bne.n	8014754 <chk_lock+0xa0>
 8014742:	4a09      	ldr	r2, [pc, #36]	; (8014768 <chk_lock+0xb4>)
 8014744:	68fb      	ldr	r3, [r7, #12]
 8014746:	011b      	lsls	r3, r3, #4
 8014748:	4413      	add	r3, r2
 801474a:	330c      	adds	r3, #12
 801474c:	881b      	ldrh	r3, [r3, #0]
 801474e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014752:	d101      	bne.n	8014758 <chk_lock+0xa4>
 8014754:	2310      	movs	r3, #16
 8014756:	e000      	b.n	801475a <chk_lock+0xa6>
 8014758:	2300      	movs	r3, #0
}
 801475a:	4618      	mov	r0, r3
 801475c:	3714      	adds	r7, #20
 801475e:	46bd      	mov	sp, r7
 8014760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014764:	4770      	bx	lr
 8014766:	bf00      	nop
 8014768:	20000e88 	.word	0x20000e88

0801476c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801476c:	b480      	push	{r7}
 801476e:	b083      	sub	sp, #12
 8014770:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8014772:	2300      	movs	r3, #0
 8014774:	607b      	str	r3, [r7, #4]
 8014776:	e002      	b.n	801477e <enq_lock+0x12>
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	3301      	adds	r3, #1
 801477c:	607b      	str	r3, [r7, #4]
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	2b01      	cmp	r3, #1
 8014782:	d806      	bhi.n	8014792 <enq_lock+0x26>
 8014784:	4a09      	ldr	r2, [pc, #36]	; (80147ac <enq_lock+0x40>)
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	011b      	lsls	r3, r3, #4
 801478a:	4413      	add	r3, r2
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	2b00      	cmp	r3, #0
 8014790:	d1f2      	bne.n	8014778 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	2b02      	cmp	r3, #2
 8014796:	bf14      	ite	ne
 8014798:	2301      	movne	r3, #1
 801479a:	2300      	moveq	r3, #0
 801479c:	b2db      	uxtb	r3, r3
}
 801479e:	4618      	mov	r0, r3
 80147a0:	370c      	adds	r7, #12
 80147a2:	46bd      	mov	sp, r7
 80147a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147a8:	4770      	bx	lr
 80147aa:	bf00      	nop
 80147ac:	20000e88 	.word	0x20000e88

080147b0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80147b0:	b480      	push	{r7}
 80147b2:	b085      	sub	sp, #20
 80147b4:	af00      	add	r7, sp, #0
 80147b6:	6078      	str	r0, [r7, #4]
 80147b8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80147ba:	2300      	movs	r3, #0
 80147bc:	60fb      	str	r3, [r7, #12]
 80147be:	e01f      	b.n	8014800 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80147c0:	4a41      	ldr	r2, [pc, #260]	; (80148c8 <inc_lock+0x118>)
 80147c2:	68fb      	ldr	r3, [r7, #12]
 80147c4:	011b      	lsls	r3, r3, #4
 80147c6:	4413      	add	r3, r2
 80147c8:	681a      	ldr	r2, [r3, #0]
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	681b      	ldr	r3, [r3, #0]
 80147ce:	429a      	cmp	r2, r3
 80147d0:	d113      	bne.n	80147fa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80147d2:	4a3d      	ldr	r2, [pc, #244]	; (80148c8 <inc_lock+0x118>)
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	011b      	lsls	r3, r3, #4
 80147d8:	4413      	add	r3, r2
 80147da:	3304      	adds	r3, #4
 80147dc:	681a      	ldr	r2, [r3, #0]
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80147e2:	429a      	cmp	r2, r3
 80147e4:	d109      	bne.n	80147fa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80147e6:	4a38      	ldr	r2, [pc, #224]	; (80148c8 <inc_lock+0x118>)
 80147e8:	68fb      	ldr	r3, [r7, #12]
 80147ea:	011b      	lsls	r3, r3, #4
 80147ec:	4413      	add	r3, r2
 80147ee:	3308      	adds	r3, #8
 80147f0:	681a      	ldr	r2, [r3, #0]
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80147f6:	429a      	cmp	r2, r3
 80147f8:	d006      	beq.n	8014808 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80147fa:	68fb      	ldr	r3, [r7, #12]
 80147fc:	3301      	adds	r3, #1
 80147fe:	60fb      	str	r3, [r7, #12]
 8014800:	68fb      	ldr	r3, [r7, #12]
 8014802:	2b01      	cmp	r3, #1
 8014804:	d9dc      	bls.n	80147c0 <inc_lock+0x10>
 8014806:	e000      	b.n	801480a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8014808:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	2b02      	cmp	r3, #2
 801480e:	d132      	bne.n	8014876 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8014810:	2300      	movs	r3, #0
 8014812:	60fb      	str	r3, [r7, #12]
 8014814:	e002      	b.n	801481c <inc_lock+0x6c>
 8014816:	68fb      	ldr	r3, [r7, #12]
 8014818:	3301      	adds	r3, #1
 801481a:	60fb      	str	r3, [r7, #12]
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	2b01      	cmp	r3, #1
 8014820:	d806      	bhi.n	8014830 <inc_lock+0x80>
 8014822:	4a29      	ldr	r2, [pc, #164]	; (80148c8 <inc_lock+0x118>)
 8014824:	68fb      	ldr	r3, [r7, #12]
 8014826:	011b      	lsls	r3, r3, #4
 8014828:	4413      	add	r3, r2
 801482a:	681b      	ldr	r3, [r3, #0]
 801482c:	2b00      	cmp	r3, #0
 801482e:	d1f2      	bne.n	8014816 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8014830:	68fb      	ldr	r3, [r7, #12]
 8014832:	2b02      	cmp	r3, #2
 8014834:	d101      	bne.n	801483a <inc_lock+0x8a>
 8014836:	2300      	movs	r3, #0
 8014838:	e040      	b.n	80148bc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	681a      	ldr	r2, [r3, #0]
 801483e:	4922      	ldr	r1, [pc, #136]	; (80148c8 <inc_lock+0x118>)
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	011b      	lsls	r3, r3, #4
 8014844:	440b      	add	r3, r1
 8014846:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	689a      	ldr	r2, [r3, #8]
 801484c:	491e      	ldr	r1, [pc, #120]	; (80148c8 <inc_lock+0x118>)
 801484e:	68fb      	ldr	r3, [r7, #12]
 8014850:	011b      	lsls	r3, r3, #4
 8014852:	440b      	add	r3, r1
 8014854:	3304      	adds	r3, #4
 8014856:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	695a      	ldr	r2, [r3, #20]
 801485c:	491a      	ldr	r1, [pc, #104]	; (80148c8 <inc_lock+0x118>)
 801485e:	68fb      	ldr	r3, [r7, #12]
 8014860:	011b      	lsls	r3, r3, #4
 8014862:	440b      	add	r3, r1
 8014864:	3308      	adds	r3, #8
 8014866:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8014868:	4a17      	ldr	r2, [pc, #92]	; (80148c8 <inc_lock+0x118>)
 801486a:	68fb      	ldr	r3, [r7, #12]
 801486c:	011b      	lsls	r3, r3, #4
 801486e:	4413      	add	r3, r2
 8014870:	330c      	adds	r3, #12
 8014872:	2200      	movs	r2, #0
 8014874:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8014876:	683b      	ldr	r3, [r7, #0]
 8014878:	2b00      	cmp	r3, #0
 801487a:	d009      	beq.n	8014890 <inc_lock+0xe0>
 801487c:	4a12      	ldr	r2, [pc, #72]	; (80148c8 <inc_lock+0x118>)
 801487e:	68fb      	ldr	r3, [r7, #12]
 8014880:	011b      	lsls	r3, r3, #4
 8014882:	4413      	add	r3, r2
 8014884:	330c      	adds	r3, #12
 8014886:	881b      	ldrh	r3, [r3, #0]
 8014888:	2b00      	cmp	r3, #0
 801488a:	d001      	beq.n	8014890 <inc_lock+0xe0>
 801488c:	2300      	movs	r3, #0
 801488e:	e015      	b.n	80148bc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8014890:	683b      	ldr	r3, [r7, #0]
 8014892:	2b00      	cmp	r3, #0
 8014894:	d108      	bne.n	80148a8 <inc_lock+0xf8>
 8014896:	4a0c      	ldr	r2, [pc, #48]	; (80148c8 <inc_lock+0x118>)
 8014898:	68fb      	ldr	r3, [r7, #12]
 801489a:	011b      	lsls	r3, r3, #4
 801489c:	4413      	add	r3, r2
 801489e:	330c      	adds	r3, #12
 80148a0:	881b      	ldrh	r3, [r3, #0]
 80148a2:	3301      	adds	r3, #1
 80148a4:	b29a      	uxth	r2, r3
 80148a6:	e001      	b.n	80148ac <inc_lock+0xfc>
 80148a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80148ac:	4906      	ldr	r1, [pc, #24]	; (80148c8 <inc_lock+0x118>)
 80148ae:	68fb      	ldr	r3, [r7, #12]
 80148b0:	011b      	lsls	r3, r3, #4
 80148b2:	440b      	add	r3, r1
 80148b4:	330c      	adds	r3, #12
 80148b6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80148b8:	68fb      	ldr	r3, [r7, #12]
 80148ba:	3301      	adds	r3, #1
}
 80148bc:	4618      	mov	r0, r3
 80148be:	3714      	adds	r7, #20
 80148c0:	46bd      	mov	sp, r7
 80148c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148c6:	4770      	bx	lr
 80148c8:	20000e88 	.word	0x20000e88

080148cc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80148cc:	b480      	push	{r7}
 80148ce:	b085      	sub	sp, #20
 80148d0:	af00      	add	r7, sp, #0
 80148d2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	3b01      	subs	r3, #1
 80148d8:	607b      	str	r3, [r7, #4]
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	2b01      	cmp	r3, #1
 80148de:	d825      	bhi.n	801492c <dec_lock+0x60>
		n = Files[i].ctr;
 80148e0:	4a17      	ldr	r2, [pc, #92]	; (8014940 <dec_lock+0x74>)
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	011b      	lsls	r3, r3, #4
 80148e6:	4413      	add	r3, r2
 80148e8:	330c      	adds	r3, #12
 80148ea:	881b      	ldrh	r3, [r3, #0]
 80148ec:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80148ee:	89fb      	ldrh	r3, [r7, #14]
 80148f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80148f4:	d101      	bne.n	80148fa <dec_lock+0x2e>
 80148f6:	2300      	movs	r3, #0
 80148f8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80148fa:	89fb      	ldrh	r3, [r7, #14]
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d002      	beq.n	8014906 <dec_lock+0x3a>
 8014900:	89fb      	ldrh	r3, [r7, #14]
 8014902:	3b01      	subs	r3, #1
 8014904:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8014906:	4a0e      	ldr	r2, [pc, #56]	; (8014940 <dec_lock+0x74>)
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	011b      	lsls	r3, r3, #4
 801490c:	4413      	add	r3, r2
 801490e:	330c      	adds	r3, #12
 8014910:	89fa      	ldrh	r2, [r7, #14]
 8014912:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8014914:	89fb      	ldrh	r3, [r7, #14]
 8014916:	2b00      	cmp	r3, #0
 8014918:	d105      	bne.n	8014926 <dec_lock+0x5a>
 801491a:	4a09      	ldr	r2, [pc, #36]	; (8014940 <dec_lock+0x74>)
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	011b      	lsls	r3, r3, #4
 8014920:	4413      	add	r3, r2
 8014922:	2200      	movs	r2, #0
 8014924:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8014926:	2300      	movs	r3, #0
 8014928:	737b      	strb	r3, [r7, #13]
 801492a:	e001      	b.n	8014930 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801492c:	2302      	movs	r3, #2
 801492e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8014930:	7b7b      	ldrb	r3, [r7, #13]
}
 8014932:	4618      	mov	r0, r3
 8014934:	3714      	adds	r7, #20
 8014936:	46bd      	mov	sp, r7
 8014938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801493c:	4770      	bx	lr
 801493e:	bf00      	nop
 8014940:	20000e88 	.word	0x20000e88

08014944 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8014944:	b480      	push	{r7}
 8014946:	b085      	sub	sp, #20
 8014948:	af00      	add	r7, sp, #0
 801494a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801494c:	2300      	movs	r3, #0
 801494e:	60fb      	str	r3, [r7, #12]
 8014950:	e010      	b.n	8014974 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8014952:	4a0d      	ldr	r2, [pc, #52]	; (8014988 <clear_lock+0x44>)
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	011b      	lsls	r3, r3, #4
 8014958:	4413      	add	r3, r2
 801495a:	681b      	ldr	r3, [r3, #0]
 801495c:	687a      	ldr	r2, [r7, #4]
 801495e:	429a      	cmp	r2, r3
 8014960:	d105      	bne.n	801496e <clear_lock+0x2a>
 8014962:	4a09      	ldr	r2, [pc, #36]	; (8014988 <clear_lock+0x44>)
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	011b      	lsls	r3, r3, #4
 8014968:	4413      	add	r3, r2
 801496a:	2200      	movs	r2, #0
 801496c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801496e:	68fb      	ldr	r3, [r7, #12]
 8014970:	3301      	adds	r3, #1
 8014972:	60fb      	str	r3, [r7, #12]
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	2b01      	cmp	r3, #1
 8014978:	d9eb      	bls.n	8014952 <clear_lock+0xe>
	}
}
 801497a:	bf00      	nop
 801497c:	bf00      	nop
 801497e:	3714      	adds	r7, #20
 8014980:	46bd      	mov	sp, r7
 8014982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014986:	4770      	bx	lr
 8014988:	20000e88 	.word	0x20000e88

0801498c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801498c:	b580      	push	{r7, lr}
 801498e:	b086      	sub	sp, #24
 8014990:	af00      	add	r7, sp, #0
 8014992:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8014994:	2300      	movs	r3, #0
 8014996:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	78db      	ldrb	r3, [r3, #3]
 801499c:	2b00      	cmp	r3, #0
 801499e:	d034      	beq.n	8014a0a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80149a4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	7858      	ldrb	r0, [r3, #1]
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80149b0:	2301      	movs	r3, #1
 80149b2:	697a      	ldr	r2, [r7, #20]
 80149b4:	f7ff fd40 	bl	8014438 <disk_write>
 80149b8:	4603      	mov	r3, r0
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d002      	beq.n	80149c4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80149be:	2301      	movs	r3, #1
 80149c0:	73fb      	strb	r3, [r7, #15]
 80149c2:	e022      	b.n	8014a0a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	2200      	movs	r2, #0
 80149c8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	6a1b      	ldr	r3, [r3, #32]
 80149ce:	697a      	ldr	r2, [r7, #20]
 80149d0:	1ad2      	subs	r2, r2, r3
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	699b      	ldr	r3, [r3, #24]
 80149d6:	429a      	cmp	r2, r3
 80149d8:	d217      	bcs.n	8014a0a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	789b      	ldrb	r3, [r3, #2]
 80149de:	613b      	str	r3, [r7, #16]
 80149e0:	e010      	b.n	8014a04 <sync_window+0x78>
					wsect += fs->fsize;
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	699b      	ldr	r3, [r3, #24]
 80149e6:	697a      	ldr	r2, [r7, #20]
 80149e8:	4413      	add	r3, r2
 80149ea:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	7858      	ldrb	r0, [r3, #1]
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80149f6:	2301      	movs	r3, #1
 80149f8:	697a      	ldr	r2, [r7, #20]
 80149fa:	f7ff fd1d 	bl	8014438 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80149fe:	693b      	ldr	r3, [r7, #16]
 8014a00:	3b01      	subs	r3, #1
 8014a02:	613b      	str	r3, [r7, #16]
 8014a04:	693b      	ldr	r3, [r7, #16]
 8014a06:	2b01      	cmp	r3, #1
 8014a08:	d8eb      	bhi.n	80149e2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8014a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a0c:	4618      	mov	r0, r3
 8014a0e:	3718      	adds	r7, #24
 8014a10:	46bd      	mov	sp, r7
 8014a12:	bd80      	pop	{r7, pc}

08014a14 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8014a14:	b580      	push	{r7, lr}
 8014a16:	b084      	sub	sp, #16
 8014a18:	af00      	add	r7, sp, #0
 8014a1a:	6078      	str	r0, [r7, #4]
 8014a1c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8014a1e:	2300      	movs	r3, #0
 8014a20:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a26:	683a      	ldr	r2, [r7, #0]
 8014a28:	429a      	cmp	r2, r3
 8014a2a:	d01b      	beq.n	8014a64 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8014a2c:	6878      	ldr	r0, [r7, #4]
 8014a2e:	f7ff ffad 	bl	801498c <sync_window>
 8014a32:	4603      	mov	r3, r0
 8014a34:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8014a36:	7bfb      	ldrb	r3, [r7, #15]
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d113      	bne.n	8014a64 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	7858      	ldrb	r0, [r3, #1]
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014a46:	2301      	movs	r3, #1
 8014a48:	683a      	ldr	r2, [r7, #0]
 8014a4a:	f7ff fcd5 	bl	80143f8 <disk_read>
 8014a4e:	4603      	mov	r3, r0
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d004      	beq.n	8014a5e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8014a54:	f04f 33ff 	mov.w	r3, #4294967295
 8014a58:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8014a5a:	2301      	movs	r3, #1
 8014a5c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	683a      	ldr	r2, [r7, #0]
 8014a62:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8014a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a66:	4618      	mov	r0, r3
 8014a68:	3710      	adds	r7, #16
 8014a6a:	46bd      	mov	sp, r7
 8014a6c:	bd80      	pop	{r7, pc}
	...

08014a70 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8014a70:	b580      	push	{r7, lr}
 8014a72:	b084      	sub	sp, #16
 8014a74:	af00      	add	r7, sp, #0
 8014a76:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8014a78:	6878      	ldr	r0, [r7, #4]
 8014a7a:	f7ff ff87 	bl	801498c <sync_window>
 8014a7e:	4603      	mov	r3, r0
 8014a80:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8014a82:	7bfb      	ldrb	r3, [r7, #15]
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	d158      	bne.n	8014b3a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	781b      	ldrb	r3, [r3, #0]
 8014a8c:	2b03      	cmp	r3, #3
 8014a8e:	d148      	bne.n	8014b22 <sync_fs+0xb2>
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	791b      	ldrb	r3, [r3, #4]
 8014a94:	2b01      	cmp	r3, #1
 8014a96:	d144      	bne.n	8014b22 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	3330      	adds	r3, #48	; 0x30
 8014a9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014aa0:	2100      	movs	r1, #0
 8014aa2:	4618      	mov	r0, r3
 8014aa4:	f7ff fda9 	bl	80145fa <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	3330      	adds	r3, #48	; 0x30
 8014aac:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014ab0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8014ab4:	4618      	mov	r0, r3
 8014ab6:	f7ff fd38 	bl	801452a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	3330      	adds	r3, #48	; 0x30
 8014abe:	4921      	ldr	r1, [pc, #132]	; (8014b44 <sync_fs+0xd4>)
 8014ac0:	4618      	mov	r0, r3
 8014ac2:	f7ff fd4d 	bl	8014560 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	3330      	adds	r3, #48	; 0x30
 8014aca:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8014ace:	491e      	ldr	r1, [pc, #120]	; (8014b48 <sync_fs+0xd8>)
 8014ad0:	4618      	mov	r0, r3
 8014ad2:	f7ff fd45 	bl	8014560 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	3330      	adds	r3, #48	; 0x30
 8014ada:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	691b      	ldr	r3, [r3, #16]
 8014ae2:	4619      	mov	r1, r3
 8014ae4:	4610      	mov	r0, r2
 8014ae6:	f7ff fd3b 	bl	8014560 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	3330      	adds	r3, #48	; 0x30
 8014aee:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	68db      	ldr	r3, [r3, #12]
 8014af6:	4619      	mov	r1, r3
 8014af8:	4610      	mov	r0, r2
 8014afa:	f7ff fd31 	bl	8014560 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	69db      	ldr	r3, [r3, #28]
 8014b02:	1c5a      	adds	r2, r3, #1
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	7858      	ldrb	r0, [r3, #1]
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b16:	2301      	movs	r3, #1
 8014b18:	f7ff fc8e 	bl	8014438 <disk_write>
			fs->fsi_flag = 0;
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	2200      	movs	r2, #0
 8014b20:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	785b      	ldrb	r3, [r3, #1]
 8014b26:	2200      	movs	r2, #0
 8014b28:	2100      	movs	r1, #0
 8014b2a:	4618      	mov	r0, r3
 8014b2c:	f7ff fca4 	bl	8014478 <disk_ioctl>
 8014b30:	4603      	mov	r3, r0
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d001      	beq.n	8014b3a <sync_fs+0xca>
 8014b36:	2301      	movs	r3, #1
 8014b38:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8014b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b3c:	4618      	mov	r0, r3
 8014b3e:	3710      	adds	r7, #16
 8014b40:	46bd      	mov	sp, r7
 8014b42:	bd80      	pop	{r7, pc}
 8014b44:	41615252 	.word	0x41615252
 8014b48:	61417272 	.word	0x61417272

08014b4c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8014b4c:	b480      	push	{r7}
 8014b4e:	b083      	sub	sp, #12
 8014b50:	af00      	add	r7, sp, #0
 8014b52:	6078      	str	r0, [r7, #4]
 8014b54:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8014b56:	683b      	ldr	r3, [r7, #0]
 8014b58:	3b02      	subs	r3, #2
 8014b5a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	695b      	ldr	r3, [r3, #20]
 8014b60:	3b02      	subs	r3, #2
 8014b62:	683a      	ldr	r2, [r7, #0]
 8014b64:	429a      	cmp	r2, r3
 8014b66:	d301      	bcc.n	8014b6c <clust2sect+0x20>
 8014b68:	2300      	movs	r3, #0
 8014b6a:	e008      	b.n	8014b7e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	895b      	ldrh	r3, [r3, #10]
 8014b70:	461a      	mov	r2, r3
 8014b72:	683b      	ldr	r3, [r7, #0]
 8014b74:	fb03 f202 	mul.w	r2, r3, r2
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b7c:	4413      	add	r3, r2
}
 8014b7e:	4618      	mov	r0, r3
 8014b80:	370c      	adds	r7, #12
 8014b82:	46bd      	mov	sp, r7
 8014b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b88:	4770      	bx	lr

08014b8a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8014b8a:	b580      	push	{r7, lr}
 8014b8c:	b086      	sub	sp, #24
 8014b8e:	af00      	add	r7, sp, #0
 8014b90:	6078      	str	r0, [r7, #4]
 8014b92:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	681b      	ldr	r3, [r3, #0]
 8014b98:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8014b9a:	683b      	ldr	r3, [r7, #0]
 8014b9c:	2b01      	cmp	r3, #1
 8014b9e:	d904      	bls.n	8014baa <get_fat+0x20>
 8014ba0:	693b      	ldr	r3, [r7, #16]
 8014ba2:	695b      	ldr	r3, [r3, #20]
 8014ba4:	683a      	ldr	r2, [r7, #0]
 8014ba6:	429a      	cmp	r2, r3
 8014ba8:	d302      	bcc.n	8014bb0 <get_fat+0x26>
		val = 1;	/* Internal error */
 8014baa:	2301      	movs	r3, #1
 8014bac:	617b      	str	r3, [r7, #20]
 8014bae:	e08f      	b.n	8014cd0 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8014bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8014bb4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8014bb6:	693b      	ldr	r3, [r7, #16]
 8014bb8:	781b      	ldrb	r3, [r3, #0]
 8014bba:	2b03      	cmp	r3, #3
 8014bbc:	d062      	beq.n	8014c84 <get_fat+0xfa>
 8014bbe:	2b03      	cmp	r3, #3
 8014bc0:	dc7c      	bgt.n	8014cbc <get_fat+0x132>
 8014bc2:	2b01      	cmp	r3, #1
 8014bc4:	d002      	beq.n	8014bcc <get_fat+0x42>
 8014bc6:	2b02      	cmp	r3, #2
 8014bc8:	d042      	beq.n	8014c50 <get_fat+0xc6>
 8014bca:	e077      	b.n	8014cbc <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8014bcc:	683b      	ldr	r3, [r7, #0]
 8014bce:	60fb      	str	r3, [r7, #12]
 8014bd0:	68fb      	ldr	r3, [r7, #12]
 8014bd2:	085b      	lsrs	r3, r3, #1
 8014bd4:	68fa      	ldr	r2, [r7, #12]
 8014bd6:	4413      	add	r3, r2
 8014bd8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014bda:	693b      	ldr	r3, [r7, #16]
 8014bdc:	6a1a      	ldr	r2, [r3, #32]
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	0a5b      	lsrs	r3, r3, #9
 8014be2:	4413      	add	r3, r2
 8014be4:	4619      	mov	r1, r3
 8014be6:	6938      	ldr	r0, [r7, #16]
 8014be8:	f7ff ff14 	bl	8014a14 <move_window>
 8014bec:	4603      	mov	r3, r0
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d167      	bne.n	8014cc2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8014bf2:	68fb      	ldr	r3, [r7, #12]
 8014bf4:	1c5a      	adds	r2, r3, #1
 8014bf6:	60fa      	str	r2, [r7, #12]
 8014bf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014bfc:	693a      	ldr	r2, [r7, #16]
 8014bfe:	4413      	add	r3, r2
 8014c00:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014c04:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014c06:	693b      	ldr	r3, [r7, #16]
 8014c08:	6a1a      	ldr	r2, [r3, #32]
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	0a5b      	lsrs	r3, r3, #9
 8014c0e:	4413      	add	r3, r2
 8014c10:	4619      	mov	r1, r3
 8014c12:	6938      	ldr	r0, [r7, #16]
 8014c14:	f7ff fefe 	bl	8014a14 <move_window>
 8014c18:	4603      	mov	r3, r0
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d153      	bne.n	8014cc6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8014c1e:	68fb      	ldr	r3, [r7, #12]
 8014c20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014c24:	693a      	ldr	r2, [r7, #16]
 8014c26:	4413      	add	r3, r2
 8014c28:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014c2c:	021b      	lsls	r3, r3, #8
 8014c2e:	461a      	mov	r2, r3
 8014c30:	68bb      	ldr	r3, [r7, #8]
 8014c32:	4313      	orrs	r3, r2
 8014c34:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8014c36:	683b      	ldr	r3, [r7, #0]
 8014c38:	f003 0301 	and.w	r3, r3, #1
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d002      	beq.n	8014c46 <get_fat+0xbc>
 8014c40:	68bb      	ldr	r3, [r7, #8]
 8014c42:	091b      	lsrs	r3, r3, #4
 8014c44:	e002      	b.n	8014c4c <get_fat+0xc2>
 8014c46:	68bb      	ldr	r3, [r7, #8]
 8014c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014c4c:	617b      	str	r3, [r7, #20]
			break;
 8014c4e:	e03f      	b.n	8014cd0 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014c50:	693b      	ldr	r3, [r7, #16]
 8014c52:	6a1a      	ldr	r2, [r3, #32]
 8014c54:	683b      	ldr	r3, [r7, #0]
 8014c56:	0a1b      	lsrs	r3, r3, #8
 8014c58:	4413      	add	r3, r2
 8014c5a:	4619      	mov	r1, r3
 8014c5c:	6938      	ldr	r0, [r7, #16]
 8014c5e:	f7ff fed9 	bl	8014a14 <move_window>
 8014c62:	4603      	mov	r3, r0
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d130      	bne.n	8014cca <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8014c68:	693b      	ldr	r3, [r7, #16]
 8014c6a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8014c6e:	683b      	ldr	r3, [r7, #0]
 8014c70:	005b      	lsls	r3, r3, #1
 8014c72:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8014c76:	4413      	add	r3, r2
 8014c78:	4618      	mov	r0, r3
 8014c7a:	f7ff fc1b 	bl	80144b4 <ld_word>
 8014c7e:	4603      	mov	r3, r0
 8014c80:	617b      	str	r3, [r7, #20]
			break;
 8014c82:	e025      	b.n	8014cd0 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8014c84:	693b      	ldr	r3, [r7, #16]
 8014c86:	6a1a      	ldr	r2, [r3, #32]
 8014c88:	683b      	ldr	r3, [r7, #0]
 8014c8a:	09db      	lsrs	r3, r3, #7
 8014c8c:	4413      	add	r3, r2
 8014c8e:	4619      	mov	r1, r3
 8014c90:	6938      	ldr	r0, [r7, #16]
 8014c92:	f7ff febf 	bl	8014a14 <move_window>
 8014c96:	4603      	mov	r3, r0
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d118      	bne.n	8014cce <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8014c9c:	693b      	ldr	r3, [r7, #16]
 8014c9e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8014ca2:	683b      	ldr	r3, [r7, #0]
 8014ca4:	009b      	lsls	r3, r3, #2
 8014ca6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8014caa:	4413      	add	r3, r2
 8014cac:	4618      	mov	r0, r3
 8014cae:	f7ff fc19 	bl	80144e4 <ld_dword>
 8014cb2:	4603      	mov	r3, r0
 8014cb4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8014cb8:	617b      	str	r3, [r7, #20]
			break;
 8014cba:	e009      	b.n	8014cd0 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8014cbc:	2301      	movs	r3, #1
 8014cbe:	617b      	str	r3, [r7, #20]
 8014cc0:	e006      	b.n	8014cd0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014cc2:	bf00      	nop
 8014cc4:	e004      	b.n	8014cd0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014cc6:	bf00      	nop
 8014cc8:	e002      	b.n	8014cd0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014cca:	bf00      	nop
 8014ccc:	e000      	b.n	8014cd0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8014cce:	bf00      	nop
		}
	}

	return val;
 8014cd0:	697b      	ldr	r3, [r7, #20]
}
 8014cd2:	4618      	mov	r0, r3
 8014cd4:	3718      	adds	r7, #24
 8014cd6:	46bd      	mov	sp, r7
 8014cd8:	bd80      	pop	{r7, pc}

08014cda <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8014cda:	b590      	push	{r4, r7, lr}
 8014cdc:	b089      	sub	sp, #36	; 0x24
 8014cde:	af00      	add	r7, sp, #0
 8014ce0:	60f8      	str	r0, [r7, #12]
 8014ce2:	60b9      	str	r1, [r7, #8]
 8014ce4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8014ce6:	2302      	movs	r3, #2
 8014ce8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8014cea:	68bb      	ldr	r3, [r7, #8]
 8014cec:	2b01      	cmp	r3, #1
 8014cee:	f240 80d2 	bls.w	8014e96 <put_fat+0x1bc>
 8014cf2:	68fb      	ldr	r3, [r7, #12]
 8014cf4:	695b      	ldr	r3, [r3, #20]
 8014cf6:	68ba      	ldr	r2, [r7, #8]
 8014cf8:	429a      	cmp	r2, r3
 8014cfa:	f080 80cc 	bcs.w	8014e96 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8014cfe:	68fb      	ldr	r3, [r7, #12]
 8014d00:	781b      	ldrb	r3, [r3, #0]
 8014d02:	2b03      	cmp	r3, #3
 8014d04:	f000 8096 	beq.w	8014e34 <put_fat+0x15a>
 8014d08:	2b03      	cmp	r3, #3
 8014d0a:	f300 80cd 	bgt.w	8014ea8 <put_fat+0x1ce>
 8014d0e:	2b01      	cmp	r3, #1
 8014d10:	d002      	beq.n	8014d18 <put_fat+0x3e>
 8014d12:	2b02      	cmp	r3, #2
 8014d14:	d06e      	beq.n	8014df4 <put_fat+0x11a>
 8014d16:	e0c7      	b.n	8014ea8 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8014d18:	68bb      	ldr	r3, [r7, #8]
 8014d1a:	61bb      	str	r3, [r7, #24]
 8014d1c:	69bb      	ldr	r3, [r7, #24]
 8014d1e:	085b      	lsrs	r3, r3, #1
 8014d20:	69ba      	ldr	r2, [r7, #24]
 8014d22:	4413      	add	r3, r2
 8014d24:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8014d26:	68fb      	ldr	r3, [r7, #12]
 8014d28:	6a1a      	ldr	r2, [r3, #32]
 8014d2a:	69bb      	ldr	r3, [r7, #24]
 8014d2c:	0a5b      	lsrs	r3, r3, #9
 8014d2e:	4413      	add	r3, r2
 8014d30:	4619      	mov	r1, r3
 8014d32:	68f8      	ldr	r0, [r7, #12]
 8014d34:	f7ff fe6e 	bl	8014a14 <move_window>
 8014d38:	4603      	mov	r3, r0
 8014d3a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014d3c:	7ffb      	ldrb	r3, [r7, #31]
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	f040 80ab 	bne.w	8014e9a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8014d4a:	69bb      	ldr	r3, [r7, #24]
 8014d4c:	1c59      	adds	r1, r3, #1
 8014d4e:	61b9      	str	r1, [r7, #24]
 8014d50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014d54:	4413      	add	r3, r2
 8014d56:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8014d58:	68bb      	ldr	r3, [r7, #8]
 8014d5a:	f003 0301 	and.w	r3, r3, #1
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	d00d      	beq.n	8014d7e <put_fat+0xa4>
 8014d62:	697b      	ldr	r3, [r7, #20]
 8014d64:	781b      	ldrb	r3, [r3, #0]
 8014d66:	b25b      	sxtb	r3, r3
 8014d68:	f003 030f 	and.w	r3, r3, #15
 8014d6c:	b25a      	sxtb	r2, r3
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	b2db      	uxtb	r3, r3
 8014d72:	011b      	lsls	r3, r3, #4
 8014d74:	b25b      	sxtb	r3, r3
 8014d76:	4313      	orrs	r3, r2
 8014d78:	b25b      	sxtb	r3, r3
 8014d7a:	b2db      	uxtb	r3, r3
 8014d7c:	e001      	b.n	8014d82 <put_fat+0xa8>
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	b2db      	uxtb	r3, r3
 8014d82:	697a      	ldr	r2, [r7, #20]
 8014d84:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8014d86:	68fb      	ldr	r3, [r7, #12]
 8014d88:	2201      	movs	r2, #1
 8014d8a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8014d8c:	68fb      	ldr	r3, [r7, #12]
 8014d8e:	6a1a      	ldr	r2, [r3, #32]
 8014d90:	69bb      	ldr	r3, [r7, #24]
 8014d92:	0a5b      	lsrs	r3, r3, #9
 8014d94:	4413      	add	r3, r2
 8014d96:	4619      	mov	r1, r3
 8014d98:	68f8      	ldr	r0, [r7, #12]
 8014d9a:	f7ff fe3b 	bl	8014a14 <move_window>
 8014d9e:	4603      	mov	r3, r0
 8014da0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014da2:	7ffb      	ldrb	r3, [r7, #31]
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	d17a      	bne.n	8014e9e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8014dae:	69bb      	ldr	r3, [r7, #24]
 8014db0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014db4:	4413      	add	r3, r2
 8014db6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8014db8:	68bb      	ldr	r3, [r7, #8]
 8014dba:	f003 0301 	and.w	r3, r3, #1
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	d003      	beq.n	8014dca <put_fat+0xf0>
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	091b      	lsrs	r3, r3, #4
 8014dc6:	b2db      	uxtb	r3, r3
 8014dc8:	e00e      	b.n	8014de8 <put_fat+0x10e>
 8014dca:	697b      	ldr	r3, [r7, #20]
 8014dcc:	781b      	ldrb	r3, [r3, #0]
 8014dce:	b25b      	sxtb	r3, r3
 8014dd0:	f023 030f 	bic.w	r3, r3, #15
 8014dd4:	b25a      	sxtb	r2, r3
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	0a1b      	lsrs	r3, r3, #8
 8014dda:	b25b      	sxtb	r3, r3
 8014ddc:	f003 030f 	and.w	r3, r3, #15
 8014de0:	b25b      	sxtb	r3, r3
 8014de2:	4313      	orrs	r3, r2
 8014de4:	b25b      	sxtb	r3, r3
 8014de6:	b2db      	uxtb	r3, r3
 8014de8:	697a      	ldr	r2, [r7, #20]
 8014dea:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8014dec:	68fb      	ldr	r3, [r7, #12]
 8014dee:	2201      	movs	r2, #1
 8014df0:	70da      	strb	r2, [r3, #3]
			break;
 8014df2:	e059      	b.n	8014ea8 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8014df4:	68fb      	ldr	r3, [r7, #12]
 8014df6:	6a1a      	ldr	r2, [r3, #32]
 8014df8:	68bb      	ldr	r3, [r7, #8]
 8014dfa:	0a1b      	lsrs	r3, r3, #8
 8014dfc:	4413      	add	r3, r2
 8014dfe:	4619      	mov	r1, r3
 8014e00:	68f8      	ldr	r0, [r7, #12]
 8014e02:	f7ff fe07 	bl	8014a14 <move_window>
 8014e06:	4603      	mov	r3, r0
 8014e08:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014e0a:	7ffb      	ldrb	r3, [r7, #31]
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d148      	bne.n	8014ea2 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8014e16:	68bb      	ldr	r3, [r7, #8]
 8014e18:	005b      	lsls	r3, r3, #1
 8014e1a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8014e1e:	4413      	add	r3, r2
 8014e20:	687a      	ldr	r2, [r7, #4]
 8014e22:	b292      	uxth	r2, r2
 8014e24:	4611      	mov	r1, r2
 8014e26:	4618      	mov	r0, r3
 8014e28:	f7ff fb7f 	bl	801452a <st_word>
			fs->wflag = 1;
 8014e2c:	68fb      	ldr	r3, [r7, #12]
 8014e2e:	2201      	movs	r2, #1
 8014e30:	70da      	strb	r2, [r3, #3]
			break;
 8014e32:	e039      	b.n	8014ea8 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8014e34:	68fb      	ldr	r3, [r7, #12]
 8014e36:	6a1a      	ldr	r2, [r3, #32]
 8014e38:	68bb      	ldr	r3, [r7, #8]
 8014e3a:	09db      	lsrs	r3, r3, #7
 8014e3c:	4413      	add	r3, r2
 8014e3e:	4619      	mov	r1, r3
 8014e40:	68f8      	ldr	r0, [r7, #12]
 8014e42:	f7ff fde7 	bl	8014a14 <move_window>
 8014e46:	4603      	mov	r3, r0
 8014e48:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014e4a:	7ffb      	ldrb	r3, [r7, #31]
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d12a      	bne.n	8014ea6 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8014e56:	68fb      	ldr	r3, [r7, #12]
 8014e58:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8014e5c:	68bb      	ldr	r3, [r7, #8]
 8014e5e:	009b      	lsls	r3, r3, #2
 8014e60:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8014e64:	4413      	add	r3, r2
 8014e66:	4618      	mov	r0, r3
 8014e68:	f7ff fb3c 	bl	80144e4 <ld_dword>
 8014e6c:	4603      	mov	r3, r0
 8014e6e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8014e72:	4323      	orrs	r3, r4
 8014e74:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8014e76:	68fb      	ldr	r3, [r7, #12]
 8014e78:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8014e7c:	68bb      	ldr	r3, [r7, #8]
 8014e7e:	009b      	lsls	r3, r3, #2
 8014e80:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8014e84:	4413      	add	r3, r2
 8014e86:	6879      	ldr	r1, [r7, #4]
 8014e88:	4618      	mov	r0, r3
 8014e8a:	f7ff fb69 	bl	8014560 <st_dword>
			fs->wflag = 1;
 8014e8e:	68fb      	ldr	r3, [r7, #12]
 8014e90:	2201      	movs	r2, #1
 8014e92:	70da      	strb	r2, [r3, #3]
			break;
 8014e94:	e008      	b.n	8014ea8 <put_fat+0x1ce>
		}
	}
 8014e96:	bf00      	nop
 8014e98:	e006      	b.n	8014ea8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8014e9a:	bf00      	nop
 8014e9c:	e004      	b.n	8014ea8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8014e9e:	bf00      	nop
 8014ea0:	e002      	b.n	8014ea8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8014ea2:	bf00      	nop
 8014ea4:	e000      	b.n	8014ea8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8014ea6:	bf00      	nop
	return res;
 8014ea8:	7ffb      	ldrb	r3, [r7, #31]
}
 8014eaa:	4618      	mov	r0, r3
 8014eac:	3724      	adds	r7, #36	; 0x24
 8014eae:	46bd      	mov	sp, r7
 8014eb0:	bd90      	pop	{r4, r7, pc}

08014eb2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8014eb2:	b580      	push	{r7, lr}
 8014eb4:	b088      	sub	sp, #32
 8014eb6:	af00      	add	r7, sp, #0
 8014eb8:	60f8      	str	r0, [r7, #12]
 8014eba:	60b9      	str	r1, [r7, #8]
 8014ebc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8014ebe:	2300      	movs	r3, #0
 8014ec0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8014ec2:	68fb      	ldr	r3, [r7, #12]
 8014ec4:	681b      	ldr	r3, [r3, #0]
 8014ec6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8014ec8:	68bb      	ldr	r3, [r7, #8]
 8014eca:	2b01      	cmp	r3, #1
 8014ecc:	d904      	bls.n	8014ed8 <remove_chain+0x26>
 8014ece:	69bb      	ldr	r3, [r7, #24]
 8014ed0:	695b      	ldr	r3, [r3, #20]
 8014ed2:	68ba      	ldr	r2, [r7, #8]
 8014ed4:	429a      	cmp	r2, r3
 8014ed6:	d301      	bcc.n	8014edc <remove_chain+0x2a>
 8014ed8:	2302      	movs	r3, #2
 8014eda:	e04b      	b.n	8014f74 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d00c      	beq.n	8014efc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8014ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8014ee6:	6879      	ldr	r1, [r7, #4]
 8014ee8:	69b8      	ldr	r0, [r7, #24]
 8014eea:	f7ff fef6 	bl	8014cda <put_fat>
 8014eee:	4603      	mov	r3, r0
 8014ef0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8014ef2:	7ffb      	ldrb	r3, [r7, #31]
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d001      	beq.n	8014efc <remove_chain+0x4a>
 8014ef8:	7ffb      	ldrb	r3, [r7, #31]
 8014efa:	e03b      	b.n	8014f74 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8014efc:	68b9      	ldr	r1, [r7, #8]
 8014efe:	68f8      	ldr	r0, [r7, #12]
 8014f00:	f7ff fe43 	bl	8014b8a <get_fat>
 8014f04:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8014f06:	697b      	ldr	r3, [r7, #20]
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	d031      	beq.n	8014f70 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8014f0c:	697b      	ldr	r3, [r7, #20]
 8014f0e:	2b01      	cmp	r3, #1
 8014f10:	d101      	bne.n	8014f16 <remove_chain+0x64>
 8014f12:	2302      	movs	r3, #2
 8014f14:	e02e      	b.n	8014f74 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8014f16:	697b      	ldr	r3, [r7, #20]
 8014f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f1c:	d101      	bne.n	8014f22 <remove_chain+0x70>
 8014f1e:	2301      	movs	r3, #1
 8014f20:	e028      	b.n	8014f74 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8014f22:	2200      	movs	r2, #0
 8014f24:	68b9      	ldr	r1, [r7, #8]
 8014f26:	69b8      	ldr	r0, [r7, #24]
 8014f28:	f7ff fed7 	bl	8014cda <put_fat>
 8014f2c:	4603      	mov	r3, r0
 8014f2e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8014f30:	7ffb      	ldrb	r3, [r7, #31]
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d001      	beq.n	8014f3a <remove_chain+0x88>
 8014f36:	7ffb      	ldrb	r3, [r7, #31]
 8014f38:	e01c      	b.n	8014f74 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8014f3a:	69bb      	ldr	r3, [r7, #24]
 8014f3c:	691a      	ldr	r2, [r3, #16]
 8014f3e:	69bb      	ldr	r3, [r7, #24]
 8014f40:	695b      	ldr	r3, [r3, #20]
 8014f42:	3b02      	subs	r3, #2
 8014f44:	429a      	cmp	r2, r3
 8014f46:	d20b      	bcs.n	8014f60 <remove_chain+0xae>
			fs->free_clst++;
 8014f48:	69bb      	ldr	r3, [r7, #24]
 8014f4a:	691b      	ldr	r3, [r3, #16]
 8014f4c:	1c5a      	adds	r2, r3, #1
 8014f4e:	69bb      	ldr	r3, [r7, #24]
 8014f50:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8014f52:	69bb      	ldr	r3, [r7, #24]
 8014f54:	791b      	ldrb	r3, [r3, #4]
 8014f56:	f043 0301 	orr.w	r3, r3, #1
 8014f5a:	b2da      	uxtb	r2, r3
 8014f5c:	69bb      	ldr	r3, [r7, #24]
 8014f5e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8014f60:	697b      	ldr	r3, [r7, #20]
 8014f62:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8014f64:	69bb      	ldr	r3, [r7, #24]
 8014f66:	695b      	ldr	r3, [r3, #20]
 8014f68:	68ba      	ldr	r2, [r7, #8]
 8014f6a:	429a      	cmp	r2, r3
 8014f6c:	d3c6      	bcc.n	8014efc <remove_chain+0x4a>
 8014f6e:	e000      	b.n	8014f72 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8014f70:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8014f72:	2300      	movs	r3, #0
}
 8014f74:	4618      	mov	r0, r3
 8014f76:	3720      	adds	r7, #32
 8014f78:	46bd      	mov	sp, r7
 8014f7a:	bd80      	pop	{r7, pc}

08014f7c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8014f7c:	b580      	push	{r7, lr}
 8014f7e:	b088      	sub	sp, #32
 8014f80:	af00      	add	r7, sp, #0
 8014f82:	6078      	str	r0, [r7, #4]
 8014f84:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	681b      	ldr	r3, [r3, #0]
 8014f8a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8014f8c:	683b      	ldr	r3, [r7, #0]
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	d10d      	bne.n	8014fae <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8014f92:	693b      	ldr	r3, [r7, #16]
 8014f94:	68db      	ldr	r3, [r3, #12]
 8014f96:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8014f98:	69bb      	ldr	r3, [r7, #24]
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d004      	beq.n	8014fa8 <create_chain+0x2c>
 8014f9e:	693b      	ldr	r3, [r7, #16]
 8014fa0:	695b      	ldr	r3, [r3, #20]
 8014fa2:	69ba      	ldr	r2, [r7, #24]
 8014fa4:	429a      	cmp	r2, r3
 8014fa6:	d31b      	bcc.n	8014fe0 <create_chain+0x64>
 8014fa8:	2301      	movs	r3, #1
 8014faa:	61bb      	str	r3, [r7, #24]
 8014fac:	e018      	b.n	8014fe0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8014fae:	6839      	ldr	r1, [r7, #0]
 8014fb0:	6878      	ldr	r0, [r7, #4]
 8014fb2:	f7ff fdea 	bl	8014b8a <get_fat>
 8014fb6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	2b01      	cmp	r3, #1
 8014fbc:	d801      	bhi.n	8014fc2 <create_chain+0x46>
 8014fbe:	2301      	movs	r3, #1
 8014fc0:	e070      	b.n	80150a4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8014fc2:	68fb      	ldr	r3, [r7, #12]
 8014fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014fc8:	d101      	bne.n	8014fce <create_chain+0x52>
 8014fca:	68fb      	ldr	r3, [r7, #12]
 8014fcc:	e06a      	b.n	80150a4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8014fce:	693b      	ldr	r3, [r7, #16]
 8014fd0:	695b      	ldr	r3, [r3, #20]
 8014fd2:	68fa      	ldr	r2, [r7, #12]
 8014fd4:	429a      	cmp	r2, r3
 8014fd6:	d201      	bcs.n	8014fdc <create_chain+0x60>
 8014fd8:	68fb      	ldr	r3, [r7, #12]
 8014fda:	e063      	b.n	80150a4 <create_chain+0x128>
		scl = clst;
 8014fdc:	683b      	ldr	r3, [r7, #0]
 8014fde:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8014fe0:	69bb      	ldr	r3, [r7, #24]
 8014fe2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8014fe4:	69fb      	ldr	r3, [r7, #28]
 8014fe6:	3301      	adds	r3, #1
 8014fe8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8014fea:	693b      	ldr	r3, [r7, #16]
 8014fec:	695b      	ldr	r3, [r3, #20]
 8014fee:	69fa      	ldr	r2, [r7, #28]
 8014ff0:	429a      	cmp	r2, r3
 8014ff2:	d307      	bcc.n	8015004 <create_chain+0x88>
				ncl = 2;
 8014ff4:	2302      	movs	r3, #2
 8014ff6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8014ff8:	69fa      	ldr	r2, [r7, #28]
 8014ffa:	69bb      	ldr	r3, [r7, #24]
 8014ffc:	429a      	cmp	r2, r3
 8014ffe:	d901      	bls.n	8015004 <create_chain+0x88>
 8015000:	2300      	movs	r3, #0
 8015002:	e04f      	b.n	80150a4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8015004:	69f9      	ldr	r1, [r7, #28]
 8015006:	6878      	ldr	r0, [r7, #4]
 8015008:	f7ff fdbf 	bl	8014b8a <get_fat>
 801500c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	2b00      	cmp	r3, #0
 8015012:	d00e      	beq.n	8015032 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	2b01      	cmp	r3, #1
 8015018:	d003      	beq.n	8015022 <create_chain+0xa6>
 801501a:	68fb      	ldr	r3, [r7, #12]
 801501c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015020:	d101      	bne.n	8015026 <create_chain+0xaa>
 8015022:	68fb      	ldr	r3, [r7, #12]
 8015024:	e03e      	b.n	80150a4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8015026:	69fa      	ldr	r2, [r7, #28]
 8015028:	69bb      	ldr	r3, [r7, #24]
 801502a:	429a      	cmp	r2, r3
 801502c:	d1da      	bne.n	8014fe4 <create_chain+0x68>
 801502e:	2300      	movs	r3, #0
 8015030:	e038      	b.n	80150a4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8015032:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8015034:	f04f 32ff 	mov.w	r2, #4294967295
 8015038:	69f9      	ldr	r1, [r7, #28]
 801503a:	6938      	ldr	r0, [r7, #16]
 801503c:	f7ff fe4d 	bl	8014cda <put_fat>
 8015040:	4603      	mov	r3, r0
 8015042:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8015044:	7dfb      	ldrb	r3, [r7, #23]
 8015046:	2b00      	cmp	r3, #0
 8015048:	d109      	bne.n	801505e <create_chain+0xe2>
 801504a:	683b      	ldr	r3, [r7, #0]
 801504c:	2b00      	cmp	r3, #0
 801504e:	d006      	beq.n	801505e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8015050:	69fa      	ldr	r2, [r7, #28]
 8015052:	6839      	ldr	r1, [r7, #0]
 8015054:	6938      	ldr	r0, [r7, #16]
 8015056:	f7ff fe40 	bl	8014cda <put_fat>
 801505a:	4603      	mov	r3, r0
 801505c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801505e:	7dfb      	ldrb	r3, [r7, #23]
 8015060:	2b00      	cmp	r3, #0
 8015062:	d116      	bne.n	8015092 <create_chain+0x116>
		fs->last_clst = ncl;
 8015064:	693b      	ldr	r3, [r7, #16]
 8015066:	69fa      	ldr	r2, [r7, #28]
 8015068:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801506a:	693b      	ldr	r3, [r7, #16]
 801506c:	691a      	ldr	r2, [r3, #16]
 801506e:	693b      	ldr	r3, [r7, #16]
 8015070:	695b      	ldr	r3, [r3, #20]
 8015072:	3b02      	subs	r3, #2
 8015074:	429a      	cmp	r2, r3
 8015076:	d804      	bhi.n	8015082 <create_chain+0x106>
 8015078:	693b      	ldr	r3, [r7, #16]
 801507a:	691b      	ldr	r3, [r3, #16]
 801507c:	1e5a      	subs	r2, r3, #1
 801507e:	693b      	ldr	r3, [r7, #16]
 8015080:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8015082:	693b      	ldr	r3, [r7, #16]
 8015084:	791b      	ldrb	r3, [r3, #4]
 8015086:	f043 0301 	orr.w	r3, r3, #1
 801508a:	b2da      	uxtb	r2, r3
 801508c:	693b      	ldr	r3, [r7, #16]
 801508e:	711a      	strb	r2, [r3, #4]
 8015090:	e007      	b.n	80150a2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8015092:	7dfb      	ldrb	r3, [r7, #23]
 8015094:	2b01      	cmp	r3, #1
 8015096:	d102      	bne.n	801509e <create_chain+0x122>
 8015098:	f04f 33ff 	mov.w	r3, #4294967295
 801509c:	e000      	b.n	80150a0 <create_chain+0x124>
 801509e:	2301      	movs	r3, #1
 80150a0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80150a2:	69fb      	ldr	r3, [r7, #28]
}
 80150a4:	4618      	mov	r0, r3
 80150a6:	3720      	adds	r7, #32
 80150a8:	46bd      	mov	sp, r7
 80150aa:	bd80      	pop	{r7, pc}

080150ac <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80150ac:	b480      	push	{r7}
 80150ae:	b087      	sub	sp, #28
 80150b0:	af00      	add	r7, sp, #0
 80150b2:	6078      	str	r0, [r7, #4]
 80150b4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	681b      	ldr	r3, [r3, #0]
 80150ba:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150c0:	3304      	adds	r3, #4
 80150c2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80150c4:	683b      	ldr	r3, [r7, #0]
 80150c6:	0a5b      	lsrs	r3, r3, #9
 80150c8:	68fa      	ldr	r2, [r7, #12]
 80150ca:	8952      	ldrh	r2, [r2, #10]
 80150cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80150d0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80150d2:	693b      	ldr	r3, [r7, #16]
 80150d4:	1d1a      	adds	r2, r3, #4
 80150d6:	613a      	str	r2, [r7, #16]
 80150d8:	681b      	ldr	r3, [r3, #0]
 80150da:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80150dc:	68bb      	ldr	r3, [r7, #8]
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d101      	bne.n	80150e6 <clmt_clust+0x3a>
 80150e2:	2300      	movs	r3, #0
 80150e4:	e010      	b.n	8015108 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80150e6:	697a      	ldr	r2, [r7, #20]
 80150e8:	68bb      	ldr	r3, [r7, #8]
 80150ea:	429a      	cmp	r2, r3
 80150ec:	d307      	bcc.n	80150fe <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80150ee:	697a      	ldr	r2, [r7, #20]
 80150f0:	68bb      	ldr	r3, [r7, #8]
 80150f2:	1ad3      	subs	r3, r2, r3
 80150f4:	617b      	str	r3, [r7, #20]
 80150f6:	693b      	ldr	r3, [r7, #16]
 80150f8:	3304      	adds	r3, #4
 80150fa:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80150fc:	e7e9      	b.n	80150d2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80150fe:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8015100:	693b      	ldr	r3, [r7, #16]
 8015102:	681a      	ldr	r2, [r3, #0]
 8015104:	697b      	ldr	r3, [r7, #20]
 8015106:	4413      	add	r3, r2
}
 8015108:	4618      	mov	r0, r3
 801510a:	371c      	adds	r7, #28
 801510c:	46bd      	mov	sp, r7
 801510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015112:	4770      	bx	lr

08015114 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8015114:	b580      	push	{r7, lr}
 8015116:	b086      	sub	sp, #24
 8015118:	af00      	add	r7, sp, #0
 801511a:	6078      	str	r0, [r7, #4]
 801511c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	681b      	ldr	r3, [r3, #0]
 8015122:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8015124:	683b      	ldr	r3, [r7, #0]
 8015126:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801512a:	d204      	bcs.n	8015136 <dir_sdi+0x22>
 801512c:	683b      	ldr	r3, [r7, #0]
 801512e:	f003 031f 	and.w	r3, r3, #31
 8015132:	2b00      	cmp	r3, #0
 8015134:	d001      	beq.n	801513a <dir_sdi+0x26>
		return FR_INT_ERR;
 8015136:	2302      	movs	r3, #2
 8015138:	e063      	b.n	8015202 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	683a      	ldr	r2, [r7, #0]
 801513e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	689b      	ldr	r3, [r3, #8]
 8015144:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8015146:	697b      	ldr	r3, [r7, #20]
 8015148:	2b00      	cmp	r3, #0
 801514a:	d106      	bne.n	801515a <dir_sdi+0x46>
 801514c:	693b      	ldr	r3, [r7, #16]
 801514e:	781b      	ldrb	r3, [r3, #0]
 8015150:	2b02      	cmp	r3, #2
 8015152:	d902      	bls.n	801515a <dir_sdi+0x46>
		clst = fs->dirbase;
 8015154:	693b      	ldr	r3, [r7, #16]
 8015156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015158:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801515a:	697b      	ldr	r3, [r7, #20]
 801515c:	2b00      	cmp	r3, #0
 801515e:	d10c      	bne.n	801517a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8015160:	683b      	ldr	r3, [r7, #0]
 8015162:	095b      	lsrs	r3, r3, #5
 8015164:	693a      	ldr	r2, [r7, #16]
 8015166:	8912      	ldrh	r2, [r2, #8]
 8015168:	4293      	cmp	r3, r2
 801516a:	d301      	bcc.n	8015170 <dir_sdi+0x5c>
 801516c:	2302      	movs	r3, #2
 801516e:	e048      	b.n	8015202 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8015170:	693b      	ldr	r3, [r7, #16]
 8015172:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	61da      	str	r2, [r3, #28]
 8015178:	e029      	b.n	80151ce <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801517a:	693b      	ldr	r3, [r7, #16]
 801517c:	895b      	ldrh	r3, [r3, #10]
 801517e:	025b      	lsls	r3, r3, #9
 8015180:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8015182:	e019      	b.n	80151b8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	6979      	ldr	r1, [r7, #20]
 8015188:	4618      	mov	r0, r3
 801518a:	f7ff fcfe 	bl	8014b8a <get_fat>
 801518e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8015190:	697b      	ldr	r3, [r7, #20]
 8015192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015196:	d101      	bne.n	801519c <dir_sdi+0x88>
 8015198:	2301      	movs	r3, #1
 801519a:	e032      	b.n	8015202 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801519c:	697b      	ldr	r3, [r7, #20]
 801519e:	2b01      	cmp	r3, #1
 80151a0:	d904      	bls.n	80151ac <dir_sdi+0x98>
 80151a2:	693b      	ldr	r3, [r7, #16]
 80151a4:	695b      	ldr	r3, [r3, #20]
 80151a6:	697a      	ldr	r2, [r7, #20]
 80151a8:	429a      	cmp	r2, r3
 80151aa:	d301      	bcc.n	80151b0 <dir_sdi+0x9c>
 80151ac:	2302      	movs	r3, #2
 80151ae:	e028      	b.n	8015202 <dir_sdi+0xee>
			ofs -= csz;
 80151b0:	683a      	ldr	r2, [r7, #0]
 80151b2:	68fb      	ldr	r3, [r7, #12]
 80151b4:	1ad3      	subs	r3, r2, r3
 80151b6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80151b8:	683a      	ldr	r2, [r7, #0]
 80151ba:	68fb      	ldr	r3, [r7, #12]
 80151bc:	429a      	cmp	r2, r3
 80151be:	d2e1      	bcs.n	8015184 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80151c0:	6979      	ldr	r1, [r7, #20]
 80151c2:	6938      	ldr	r0, [r7, #16]
 80151c4:	f7ff fcc2 	bl	8014b4c <clust2sect>
 80151c8:	4602      	mov	r2, r0
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	697a      	ldr	r2, [r7, #20]
 80151d2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	69db      	ldr	r3, [r3, #28]
 80151d8:	2b00      	cmp	r3, #0
 80151da:	d101      	bne.n	80151e0 <dir_sdi+0xcc>
 80151dc:	2302      	movs	r3, #2
 80151de:	e010      	b.n	8015202 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	69da      	ldr	r2, [r3, #28]
 80151e4:	683b      	ldr	r3, [r7, #0]
 80151e6:	0a5b      	lsrs	r3, r3, #9
 80151e8:	441a      	add	r2, r3
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80151ee:	693b      	ldr	r3, [r7, #16]
 80151f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80151f4:	683b      	ldr	r3, [r7, #0]
 80151f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80151fa:	441a      	add	r2, r3
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8015200:	2300      	movs	r3, #0
}
 8015202:	4618      	mov	r0, r3
 8015204:	3718      	adds	r7, #24
 8015206:	46bd      	mov	sp, r7
 8015208:	bd80      	pop	{r7, pc}

0801520a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801520a:	b580      	push	{r7, lr}
 801520c:	b086      	sub	sp, #24
 801520e:	af00      	add	r7, sp, #0
 8015210:	6078      	str	r0, [r7, #4]
 8015212:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	681b      	ldr	r3, [r3, #0]
 8015218:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	695b      	ldr	r3, [r3, #20]
 801521e:	3320      	adds	r3, #32
 8015220:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	69db      	ldr	r3, [r3, #28]
 8015226:	2b00      	cmp	r3, #0
 8015228:	d003      	beq.n	8015232 <dir_next+0x28>
 801522a:	68bb      	ldr	r3, [r7, #8]
 801522c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8015230:	d301      	bcc.n	8015236 <dir_next+0x2c>
 8015232:	2304      	movs	r3, #4
 8015234:	e0aa      	b.n	801538c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8015236:	68bb      	ldr	r3, [r7, #8]
 8015238:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801523c:	2b00      	cmp	r3, #0
 801523e:	f040 8098 	bne.w	8015372 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	69db      	ldr	r3, [r3, #28]
 8015246:	1c5a      	adds	r2, r3, #1
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	699b      	ldr	r3, [r3, #24]
 8015250:	2b00      	cmp	r3, #0
 8015252:	d10b      	bne.n	801526c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8015254:	68bb      	ldr	r3, [r7, #8]
 8015256:	095b      	lsrs	r3, r3, #5
 8015258:	68fa      	ldr	r2, [r7, #12]
 801525a:	8912      	ldrh	r2, [r2, #8]
 801525c:	4293      	cmp	r3, r2
 801525e:	f0c0 8088 	bcc.w	8015372 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	2200      	movs	r2, #0
 8015266:	61da      	str	r2, [r3, #28]
 8015268:	2304      	movs	r3, #4
 801526a:	e08f      	b.n	801538c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801526c:	68bb      	ldr	r3, [r7, #8]
 801526e:	0a5b      	lsrs	r3, r3, #9
 8015270:	68fa      	ldr	r2, [r7, #12]
 8015272:	8952      	ldrh	r2, [r2, #10]
 8015274:	3a01      	subs	r2, #1
 8015276:	4013      	ands	r3, r2
 8015278:	2b00      	cmp	r3, #0
 801527a:	d17a      	bne.n	8015372 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801527c:	687a      	ldr	r2, [r7, #4]
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	699b      	ldr	r3, [r3, #24]
 8015282:	4619      	mov	r1, r3
 8015284:	4610      	mov	r0, r2
 8015286:	f7ff fc80 	bl	8014b8a <get_fat>
 801528a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801528c:	697b      	ldr	r3, [r7, #20]
 801528e:	2b01      	cmp	r3, #1
 8015290:	d801      	bhi.n	8015296 <dir_next+0x8c>
 8015292:	2302      	movs	r3, #2
 8015294:	e07a      	b.n	801538c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8015296:	697b      	ldr	r3, [r7, #20]
 8015298:	f1b3 3fff 	cmp.w	r3, #4294967295
 801529c:	d101      	bne.n	80152a2 <dir_next+0x98>
 801529e:	2301      	movs	r3, #1
 80152a0:	e074      	b.n	801538c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80152a2:	68fb      	ldr	r3, [r7, #12]
 80152a4:	695b      	ldr	r3, [r3, #20]
 80152a6:	697a      	ldr	r2, [r7, #20]
 80152a8:	429a      	cmp	r2, r3
 80152aa:	d358      	bcc.n	801535e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80152ac:	683b      	ldr	r3, [r7, #0]
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d104      	bne.n	80152bc <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	2200      	movs	r2, #0
 80152b6:	61da      	str	r2, [r3, #28]
 80152b8:	2304      	movs	r3, #4
 80152ba:	e067      	b.n	801538c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80152bc:	687a      	ldr	r2, [r7, #4]
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	699b      	ldr	r3, [r3, #24]
 80152c2:	4619      	mov	r1, r3
 80152c4:	4610      	mov	r0, r2
 80152c6:	f7ff fe59 	bl	8014f7c <create_chain>
 80152ca:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80152cc:	697b      	ldr	r3, [r7, #20]
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d101      	bne.n	80152d6 <dir_next+0xcc>
 80152d2:	2307      	movs	r3, #7
 80152d4:	e05a      	b.n	801538c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80152d6:	697b      	ldr	r3, [r7, #20]
 80152d8:	2b01      	cmp	r3, #1
 80152da:	d101      	bne.n	80152e0 <dir_next+0xd6>
 80152dc:	2302      	movs	r3, #2
 80152de:	e055      	b.n	801538c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80152e0:	697b      	ldr	r3, [r7, #20]
 80152e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80152e6:	d101      	bne.n	80152ec <dir_next+0xe2>
 80152e8:	2301      	movs	r3, #1
 80152ea:	e04f      	b.n	801538c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80152ec:	68f8      	ldr	r0, [r7, #12]
 80152ee:	f7ff fb4d 	bl	801498c <sync_window>
 80152f2:	4603      	mov	r3, r0
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	d001      	beq.n	80152fc <dir_next+0xf2>
 80152f8:	2301      	movs	r3, #1
 80152fa:	e047      	b.n	801538c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80152fc:	68fb      	ldr	r3, [r7, #12]
 80152fe:	3330      	adds	r3, #48	; 0x30
 8015300:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015304:	2100      	movs	r1, #0
 8015306:	4618      	mov	r0, r3
 8015308:	f7ff f977 	bl	80145fa <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801530c:	2300      	movs	r3, #0
 801530e:	613b      	str	r3, [r7, #16]
 8015310:	6979      	ldr	r1, [r7, #20]
 8015312:	68f8      	ldr	r0, [r7, #12]
 8015314:	f7ff fc1a 	bl	8014b4c <clust2sect>
 8015318:	4602      	mov	r2, r0
 801531a:	68fb      	ldr	r3, [r7, #12]
 801531c:	62da      	str	r2, [r3, #44]	; 0x2c
 801531e:	e012      	b.n	8015346 <dir_next+0x13c>
						fs->wflag = 1;
 8015320:	68fb      	ldr	r3, [r7, #12]
 8015322:	2201      	movs	r2, #1
 8015324:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8015326:	68f8      	ldr	r0, [r7, #12]
 8015328:	f7ff fb30 	bl	801498c <sync_window>
 801532c:	4603      	mov	r3, r0
 801532e:	2b00      	cmp	r3, #0
 8015330:	d001      	beq.n	8015336 <dir_next+0x12c>
 8015332:	2301      	movs	r3, #1
 8015334:	e02a      	b.n	801538c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8015336:	693b      	ldr	r3, [r7, #16]
 8015338:	3301      	adds	r3, #1
 801533a:	613b      	str	r3, [r7, #16]
 801533c:	68fb      	ldr	r3, [r7, #12]
 801533e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015340:	1c5a      	adds	r2, r3, #1
 8015342:	68fb      	ldr	r3, [r7, #12]
 8015344:	62da      	str	r2, [r3, #44]	; 0x2c
 8015346:	68fb      	ldr	r3, [r7, #12]
 8015348:	895b      	ldrh	r3, [r3, #10]
 801534a:	461a      	mov	r2, r3
 801534c:	693b      	ldr	r3, [r7, #16]
 801534e:	4293      	cmp	r3, r2
 8015350:	d3e6      	bcc.n	8015320 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8015352:	68fb      	ldr	r3, [r7, #12]
 8015354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015356:	693b      	ldr	r3, [r7, #16]
 8015358:	1ad2      	subs	r2, r2, r3
 801535a:	68fb      	ldr	r3, [r7, #12]
 801535c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	697a      	ldr	r2, [r7, #20]
 8015362:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8015364:	6979      	ldr	r1, [r7, #20]
 8015366:	68f8      	ldr	r0, [r7, #12]
 8015368:	f7ff fbf0 	bl	8014b4c <clust2sect>
 801536c:	4602      	mov	r2, r0
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	68ba      	ldr	r2, [r7, #8]
 8015376:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8015378:	68fb      	ldr	r3, [r7, #12]
 801537a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801537e:	68bb      	ldr	r3, [r7, #8]
 8015380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015384:	441a      	add	r2, r3
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801538a:	2300      	movs	r3, #0
}
 801538c:	4618      	mov	r0, r3
 801538e:	3718      	adds	r7, #24
 8015390:	46bd      	mov	sp, r7
 8015392:	bd80      	pop	{r7, pc}

08015394 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8015394:	b580      	push	{r7, lr}
 8015396:	b086      	sub	sp, #24
 8015398:	af00      	add	r7, sp, #0
 801539a:	6078      	str	r0, [r7, #4]
 801539c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	681b      	ldr	r3, [r3, #0]
 80153a2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80153a4:	2100      	movs	r1, #0
 80153a6:	6878      	ldr	r0, [r7, #4]
 80153a8:	f7ff feb4 	bl	8015114 <dir_sdi>
 80153ac:	4603      	mov	r3, r0
 80153ae:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80153b0:	7dfb      	ldrb	r3, [r7, #23]
 80153b2:	2b00      	cmp	r3, #0
 80153b4:	d12b      	bne.n	801540e <dir_alloc+0x7a>
		n = 0;
 80153b6:	2300      	movs	r3, #0
 80153b8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	69db      	ldr	r3, [r3, #28]
 80153be:	4619      	mov	r1, r3
 80153c0:	68f8      	ldr	r0, [r7, #12]
 80153c2:	f7ff fb27 	bl	8014a14 <move_window>
 80153c6:	4603      	mov	r3, r0
 80153c8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80153ca:	7dfb      	ldrb	r3, [r7, #23]
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	d11d      	bne.n	801540c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	6a1b      	ldr	r3, [r3, #32]
 80153d4:	781b      	ldrb	r3, [r3, #0]
 80153d6:	2be5      	cmp	r3, #229	; 0xe5
 80153d8:	d004      	beq.n	80153e4 <dir_alloc+0x50>
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	6a1b      	ldr	r3, [r3, #32]
 80153de:	781b      	ldrb	r3, [r3, #0]
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	d107      	bne.n	80153f4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80153e4:	693b      	ldr	r3, [r7, #16]
 80153e6:	3301      	adds	r3, #1
 80153e8:	613b      	str	r3, [r7, #16]
 80153ea:	693a      	ldr	r2, [r7, #16]
 80153ec:	683b      	ldr	r3, [r7, #0]
 80153ee:	429a      	cmp	r2, r3
 80153f0:	d102      	bne.n	80153f8 <dir_alloc+0x64>
 80153f2:	e00c      	b.n	801540e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80153f4:	2300      	movs	r3, #0
 80153f6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80153f8:	2101      	movs	r1, #1
 80153fa:	6878      	ldr	r0, [r7, #4]
 80153fc:	f7ff ff05 	bl	801520a <dir_next>
 8015400:	4603      	mov	r3, r0
 8015402:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8015404:	7dfb      	ldrb	r3, [r7, #23]
 8015406:	2b00      	cmp	r3, #0
 8015408:	d0d7      	beq.n	80153ba <dir_alloc+0x26>
 801540a:	e000      	b.n	801540e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801540c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801540e:	7dfb      	ldrb	r3, [r7, #23]
 8015410:	2b04      	cmp	r3, #4
 8015412:	d101      	bne.n	8015418 <dir_alloc+0x84>
 8015414:	2307      	movs	r3, #7
 8015416:	75fb      	strb	r3, [r7, #23]
	return res;
 8015418:	7dfb      	ldrb	r3, [r7, #23]
}
 801541a:	4618      	mov	r0, r3
 801541c:	3718      	adds	r7, #24
 801541e:	46bd      	mov	sp, r7
 8015420:	bd80      	pop	{r7, pc}

08015422 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8015422:	b580      	push	{r7, lr}
 8015424:	b084      	sub	sp, #16
 8015426:	af00      	add	r7, sp, #0
 8015428:	6078      	str	r0, [r7, #4]
 801542a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801542c:	683b      	ldr	r3, [r7, #0]
 801542e:	331a      	adds	r3, #26
 8015430:	4618      	mov	r0, r3
 8015432:	f7ff f83f 	bl	80144b4 <ld_word>
 8015436:	4603      	mov	r3, r0
 8015438:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	781b      	ldrb	r3, [r3, #0]
 801543e:	2b03      	cmp	r3, #3
 8015440:	d109      	bne.n	8015456 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8015442:	683b      	ldr	r3, [r7, #0]
 8015444:	3314      	adds	r3, #20
 8015446:	4618      	mov	r0, r3
 8015448:	f7ff f834 	bl	80144b4 <ld_word>
 801544c:	4603      	mov	r3, r0
 801544e:	041b      	lsls	r3, r3, #16
 8015450:	68fa      	ldr	r2, [r7, #12]
 8015452:	4313      	orrs	r3, r2
 8015454:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8015456:	68fb      	ldr	r3, [r7, #12]
}
 8015458:	4618      	mov	r0, r3
 801545a:	3710      	adds	r7, #16
 801545c:	46bd      	mov	sp, r7
 801545e:	bd80      	pop	{r7, pc}

08015460 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8015460:	b580      	push	{r7, lr}
 8015462:	b084      	sub	sp, #16
 8015464:	af00      	add	r7, sp, #0
 8015466:	60f8      	str	r0, [r7, #12]
 8015468:	60b9      	str	r1, [r7, #8]
 801546a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801546c:	68bb      	ldr	r3, [r7, #8]
 801546e:	331a      	adds	r3, #26
 8015470:	687a      	ldr	r2, [r7, #4]
 8015472:	b292      	uxth	r2, r2
 8015474:	4611      	mov	r1, r2
 8015476:	4618      	mov	r0, r3
 8015478:	f7ff f857 	bl	801452a <st_word>
	if (fs->fs_type == FS_FAT32) {
 801547c:	68fb      	ldr	r3, [r7, #12]
 801547e:	781b      	ldrb	r3, [r3, #0]
 8015480:	2b03      	cmp	r3, #3
 8015482:	d109      	bne.n	8015498 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8015484:	68bb      	ldr	r3, [r7, #8]
 8015486:	f103 0214 	add.w	r2, r3, #20
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	0c1b      	lsrs	r3, r3, #16
 801548e:	b29b      	uxth	r3, r3
 8015490:	4619      	mov	r1, r3
 8015492:	4610      	mov	r0, r2
 8015494:	f7ff f849 	bl	801452a <st_word>
	}
}
 8015498:	bf00      	nop
 801549a:	3710      	adds	r7, #16
 801549c:	46bd      	mov	sp, r7
 801549e:	bd80      	pop	{r7, pc}

080154a0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80154a0:	b580      	push	{r7, lr}
 80154a2:	b086      	sub	sp, #24
 80154a4:	af00      	add	r7, sp, #0
 80154a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	681b      	ldr	r3, [r3, #0]
 80154ac:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80154ae:	2100      	movs	r1, #0
 80154b0:	6878      	ldr	r0, [r7, #4]
 80154b2:	f7ff fe2f 	bl	8015114 <dir_sdi>
 80154b6:	4603      	mov	r3, r0
 80154b8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80154ba:	7dfb      	ldrb	r3, [r7, #23]
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d001      	beq.n	80154c4 <dir_find+0x24>
 80154c0:	7dfb      	ldrb	r3, [r7, #23]
 80154c2:	e03e      	b.n	8015542 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	69db      	ldr	r3, [r3, #28]
 80154c8:	4619      	mov	r1, r3
 80154ca:	6938      	ldr	r0, [r7, #16]
 80154cc:	f7ff faa2 	bl	8014a14 <move_window>
 80154d0:	4603      	mov	r3, r0
 80154d2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80154d4:	7dfb      	ldrb	r3, [r7, #23]
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	d12f      	bne.n	801553a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	6a1b      	ldr	r3, [r3, #32]
 80154de:	781b      	ldrb	r3, [r3, #0]
 80154e0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80154e2:	7bfb      	ldrb	r3, [r7, #15]
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	d102      	bne.n	80154ee <dir_find+0x4e>
 80154e8:	2304      	movs	r3, #4
 80154ea:	75fb      	strb	r3, [r7, #23]
 80154ec:	e028      	b.n	8015540 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	6a1b      	ldr	r3, [r3, #32]
 80154f2:	330b      	adds	r3, #11
 80154f4:	781b      	ldrb	r3, [r3, #0]
 80154f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80154fa:	b2da      	uxtb	r2, r3
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	6a1b      	ldr	r3, [r3, #32]
 8015504:	330b      	adds	r3, #11
 8015506:	781b      	ldrb	r3, [r3, #0]
 8015508:	f003 0308 	and.w	r3, r3, #8
 801550c:	2b00      	cmp	r3, #0
 801550e:	d10a      	bne.n	8015526 <dir_find+0x86>
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	6a18      	ldr	r0, [r3, #32]
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	3324      	adds	r3, #36	; 0x24
 8015518:	220b      	movs	r2, #11
 801551a:	4619      	mov	r1, r3
 801551c:	f7ff f888 	bl	8014630 <mem_cmp>
 8015520:	4603      	mov	r3, r0
 8015522:	2b00      	cmp	r3, #0
 8015524:	d00b      	beq.n	801553e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8015526:	2100      	movs	r1, #0
 8015528:	6878      	ldr	r0, [r7, #4]
 801552a:	f7ff fe6e 	bl	801520a <dir_next>
 801552e:	4603      	mov	r3, r0
 8015530:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8015532:	7dfb      	ldrb	r3, [r7, #23]
 8015534:	2b00      	cmp	r3, #0
 8015536:	d0c5      	beq.n	80154c4 <dir_find+0x24>
 8015538:	e002      	b.n	8015540 <dir_find+0xa0>
		if (res != FR_OK) break;
 801553a:	bf00      	nop
 801553c:	e000      	b.n	8015540 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801553e:	bf00      	nop

	return res;
 8015540:	7dfb      	ldrb	r3, [r7, #23]
}
 8015542:	4618      	mov	r0, r3
 8015544:	3718      	adds	r7, #24
 8015546:	46bd      	mov	sp, r7
 8015548:	bd80      	pop	{r7, pc}

0801554a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801554a:	b580      	push	{r7, lr}
 801554c:	b084      	sub	sp, #16
 801554e:	af00      	add	r7, sp, #0
 8015550:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	681b      	ldr	r3, [r3, #0]
 8015556:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8015558:	2101      	movs	r1, #1
 801555a:	6878      	ldr	r0, [r7, #4]
 801555c:	f7ff ff1a 	bl	8015394 <dir_alloc>
 8015560:	4603      	mov	r3, r0
 8015562:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8015564:	7bfb      	ldrb	r3, [r7, #15]
 8015566:	2b00      	cmp	r3, #0
 8015568:	d11c      	bne.n	80155a4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	69db      	ldr	r3, [r3, #28]
 801556e:	4619      	mov	r1, r3
 8015570:	68b8      	ldr	r0, [r7, #8]
 8015572:	f7ff fa4f 	bl	8014a14 <move_window>
 8015576:	4603      	mov	r3, r0
 8015578:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801557a:	7bfb      	ldrb	r3, [r7, #15]
 801557c:	2b00      	cmp	r3, #0
 801557e:	d111      	bne.n	80155a4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	6a1b      	ldr	r3, [r3, #32]
 8015584:	2220      	movs	r2, #32
 8015586:	2100      	movs	r1, #0
 8015588:	4618      	mov	r0, r3
 801558a:	f7ff f836 	bl	80145fa <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	6a18      	ldr	r0, [r3, #32]
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	3324      	adds	r3, #36	; 0x24
 8015596:	220b      	movs	r2, #11
 8015598:	4619      	mov	r1, r3
 801559a:	f7ff f80d 	bl	80145b8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 801559e:	68bb      	ldr	r3, [r7, #8]
 80155a0:	2201      	movs	r2, #1
 80155a2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80155a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80155a6:	4618      	mov	r0, r3
 80155a8:	3710      	adds	r7, #16
 80155aa:	46bd      	mov	sp, r7
 80155ac:	bd80      	pop	{r7, pc}
	...

080155b0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80155b0:	b580      	push	{r7, lr}
 80155b2:	b088      	sub	sp, #32
 80155b4:	af00      	add	r7, sp, #0
 80155b6:	6078      	str	r0, [r7, #4]
 80155b8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80155ba:	683b      	ldr	r3, [r7, #0]
 80155bc:	681b      	ldr	r3, [r3, #0]
 80155be:	60fb      	str	r3, [r7, #12]
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	3324      	adds	r3, #36	; 0x24
 80155c4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80155c6:	220b      	movs	r2, #11
 80155c8:	2120      	movs	r1, #32
 80155ca:	68b8      	ldr	r0, [r7, #8]
 80155cc:	f7ff f815 	bl	80145fa <mem_set>
	si = i = 0; ni = 8;
 80155d0:	2300      	movs	r3, #0
 80155d2:	613b      	str	r3, [r7, #16]
 80155d4:	693b      	ldr	r3, [r7, #16]
 80155d6:	61fb      	str	r3, [r7, #28]
 80155d8:	2308      	movs	r3, #8
 80155da:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80155dc:	69fb      	ldr	r3, [r7, #28]
 80155de:	1c5a      	adds	r2, r3, #1
 80155e0:	61fa      	str	r2, [r7, #28]
 80155e2:	68fa      	ldr	r2, [r7, #12]
 80155e4:	4413      	add	r3, r2
 80155e6:	781b      	ldrb	r3, [r3, #0]
 80155e8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80155ea:	7efb      	ldrb	r3, [r7, #27]
 80155ec:	2b20      	cmp	r3, #32
 80155ee:	d94e      	bls.n	801568e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80155f0:	7efb      	ldrb	r3, [r7, #27]
 80155f2:	2b2f      	cmp	r3, #47	; 0x2f
 80155f4:	d006      	beq.n	8015604 <create_name+0x54>
 80155f6:	7efb      	ldrb	r3, [r7, #27]
 80155f8:	2b5c      	cmp	r3, #92	; 0x5c
 80155fa:	d110      	bne.n	801561e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80155fc:	e002      	b.n	8015604 <create_name+0x54>
 80155fe:	69fb      	ldr	r3, [r7, #28]
 8015600:	3301      	adds	r3, #1
 8015602:	61fb      	str	r3, [r7, #28]
 8015604:	68fa      	ldr	r2, [r7, #12]
 8015606:	69fb      	ldr	r3, [r7, #28]
 8015608:	4413      	add	r3, r2
 801560a:	781b      	ldrb	r3, [r3, #0]
 801560c:	2b2f      	cmp	r3, #47	; 0x2f
 801560e:	d0f6      	beq.n	80155fe <create_name+0x4e>
 8015610:	68fa      	ldr	r2, [r7, #12]
 8015612:	69fb      	ldr	r3, [r7, #28]
 8015614:	4413      	add	r3, r2
 8015616:	781b      	ldrb	r3, [r3, #0]
 8015618:	2b5c      	cmp	r3, #92	; 0x5c
 801561a:	d0f0      	beq.n	80155fe <create_name+0x4e>
			break;
 801561c:	e038      	b.n	8015690 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801561e:	7efb      	ldrb	r3, [r7, #27]
 8015620:	2b2e      	cmp	r3, #46	; 0x2e
 8015622:	d003      	beq.n	801562c <create_name+0x7c>
 8015624:	693a      	ldr	r2, [r7, #16]
 8015626:	697b      	ldr	r3, [r7, #20]
 8015628:	429a      	cmp	r2, r3
 801562a:	d30c      	bcc.n	8015646 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 801562c:	697b      	ldr	r3, [r7, #20]
 801562e:	2b0b      	cmp	r3, #11
 8015630:	d002      	beq.n	8015638 <create_name+0x88>
 8015632:	7efb      	ldrb	r3, [r7, #27]
 8015634:	2b2e      	cmp	r3, #46	; 0x2e
 8015636:	d001      	beq.n	801563c <create_name+0x8c>
 8015638:	2306      	movs	r3, #6
 801563a:	e044      	b.n	80156c6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 801563c:	2308      	movs	r3, #8
 801563e:	613b      	str	r3, [r7, #16]
 8015640:	230b      	movs	r3, #11
 8015642:	617b      	str	r3, [r7, #20]
			continue;
 8015644:	e022      	b.n	801568c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8015646:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801564a:	2b00      	cmp	r3, #0
 801564c:	da04      	bge.n	8015658 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801564e:	7efb      	ldrb	r3, [r7, #27]
 8015650:	3b80      	subs	r3, #128	; 0x80
 8015652:	4a1f      	ldr	r2, [pc, #124]	; (80156d0 <create_name+0x120>)
 8015654:	5cd3      	ldrb	r3, [r2, r3]
 8015656:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8015658:	7efb      	ldrb	r3, [r7, #27]
 801565a:	4619      	mov	r1, r3
 801565c:	481d      	ldr	r0, [pc, #116]	; (80156d4 <create_name+0x124>)
 801565e:	f7ff f80e 	bl	801467e <chk_chr>
 8015662:	4603      	mov	r3, r0
 8015664:	2b00      	cmp	r3, #0
 8015666:	d001      	beq.n	801566c <create_name+0xbc>
 8015668:	2306      	movs	r3, #6
 801566a:	e02c      	b.n	80156c6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 801566c:	7efb      	ldrb	r3, [r7, #27]
 801566e:	2b60      	cmp	r3, #96	; 0x60
 8015670:	d905      	bls.n	801567e <create_name+0xce>
 8015672:	7efb      	ldrb	r3, [r7, #27]
 8015674:	2b7a      	cmp	r3, #122	; 0x7a
 8015676:	d802      	bhi.n	801567e <create_name+0xce>
 8015678:	7efb      	ldrb	r3, [r7, #27]
 801567a:	3b20      	subs	r3, #32
 801567c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 801567e:	693b      	ldr	r3, [r7, #16]
 8015680:	1c5a      	adds	r2, r3, #1
 8015682:	613a      	str	r2, [r7, #16]
 8015684:	68ba      	ldr	r2, [r7, #8]
 8015686:	4413      	add	r3, r2
 8015688:	7efa      	ldrb	r2, [r7, #27]
 801568a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801568c:	e7a6      	b.n	80155dc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801568e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8015690:	68fa      	ldr	r2, [r7, #12]
 8015692:	69fb      	ldr	r3, [r7, #28]
 8015694:	441a      	add	r2, r3
 8015696:	683b      	ldr	r3, [r7, #0]
 8015698:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801569a:	693b      	ldr	r3, [r7, #16]
 801569c:	2b00      	cmp	r3, #0
 801569e:	d101      	bne.n	80156a4 <create_name+0xf4>
 80156a0:	2306      	movs	r3, #6
 80156a2:	e010      	b.n	80156c6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80156a4:	68bb      	ldr	r3, [r7, #8]
 80156a6:	781b      	ldrb	r3, [r3, #0]
 80156a8:	2be5      	cmp	r3, #229	; 0xe5
 80156aa:	d102      	bne.n	80156b2 <create_name+0x102>
 80156ac:	68bb      	ldr	r3, [r7, #8]
 80156ae:	2205      	movs	r2, #5
 80156b0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80156b2:	7efb      	ldrb	r3, [r7, #27]
 80156b4:	2b20      	cmp	r3, #32
 80156b6:	d801      	bhi.n	80156bc <create_name+0x10c>
 80156b8:	2204      	movs	r2, #4
 80156ba:	e000      	b.n	80156be <create_name+0x10e>
 80156bc:	2200      	movs	r2, #0
 80156be:	68bb      	ldr	r3, [r7, #8]
 80156c0:	330b      	adds	r3, #11
 80156c2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80156c4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80156c6:	4618      	mov	r0, r3
 80156c8:	3720      	adds	r7, #32
 80156ca:	46bd      	mov	sp, r7
 80156cc:	bd80      	pop	{r7, pc}
 80156ce:	bf00      	nop
 80156d0:	08018f50 	.word	0x08018f50
 80156d4:	08016fb8 	.word	0x08016fb8

080156d8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80156d8:	b580      	push	{r7, lr}
 80156da:	b086      	sub	sp, #24
 80156dc:	af00      	add	r7, sp, #0
 80156de:	6078      	str	r0, [r7, #4]
 80156e0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80156e6:	693b      	ldr	r3, [r7, #16]
 80156e8:	681b      	ldr	r3, [r3, #0]
 80156ea:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80156ec:	e002      	b.n	80156f4 <follow_path+0x1c>
 80156ee:	683b      	ldr	r3, [r7, #0]
 80156f0:	3301      	adds	r3, #1
 80156f2:	603b      	str	r3, [r7, #0]
 80156f4:	683b      	ldr	r3, [r7, #0]
 80156f6:	781b      	ldrb	r3, [r3, #0]
 80156f8:	2b2f      	cmp	r3, #47	; 0x2f
 80156fa:	d0f8      	beq.n	80156ee <follow_path+0x16>
 80156fc:	683b      	ldr	r3, [r7, #0]
 80156fe:	781b      	ldrb	r3, [r3, #0]
 8015700:	2b5c      	cmp	r3, #92	; 0x5c
 8015702:	d0f4      	beq.n	80156ee <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8015704:	693b      	ldr	r3, [r7, #16]
 8015706:	2200      	movs	r2, #0
 8015708:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801570a:	683b      	ldr	r3, [r7, #0]
 801570c:	781b      	ldrb	r3, [r3, #0]
 801570e:	2b1f      	cmp	r3, #31
 8015710:	d80a      	bhi.n	8015728 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	2280      	movs	r2, #128	; 0x80
 8015716:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801571a:	2100      	movs	r1, #0
 801571c:	6878      	ldr	r0, [r7, #4]
 801571e:	f7ff fcf9 	bl	8015114 <dir_sdi>
 8015722:	4603      	mov	r3, r0
 8015724:	75fb      	strb	r3, [r7, #23]
 8015726:	e043      	b.n	80157b0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8015728:	463b      	mov	r3, r7
 801572a:	4619      	mov	r1, r3
 801572c:	6878      	ldr	r0, [r7, #4]
 801572e:	f7ff ff3f 	bl	80155b0 <create_name>
 8015732:	4603      	mov	r3, r0
 8015734:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8015736:	7dfb      	ldrb	r3, [r7, #23]
 8015738:	2b00      	cmp	r3, #0
 801573a:	d134      	bne.n	80157a6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801573c:	6878      	ldr	r0, [r7, #4]
 801573e:	f7ff feaf 	bl	80154a0 <dir_find>
 8015742:	4603      	mov	r3, r0
 8015744:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801574c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801574e:	7dfb      	ldrb	r3, [r7, #23]
 8015750:	2b00      	cmp	r3, #0
 8015752:	d00a      	beq.n	801576a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8015754:	7dfb      	ldrb	r3, [r7, #23]
 8015756:	2b04      	cmp	r3, #4
 8015758:	d127      	bne.n	80157aa <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801575a:	7afb      	ldrb	r3, [r7, #11]
 801575c:	f003 0304 	and.w	r3, r3, #4
 8015760:	2b00      	cmp	r3, #0
 8015762:	d122      	bne.n	80157aa <follow_path+0xd2>
 8015764:	2305      	movs	r3, #5
 8015766:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8015768:	e01f      	b.n	80157aa <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801576a:	7afb      	ldrb	r3, [r7, #11]
 801576c:	f003 0304 	and.w	r3, r3, #4
 8015770:	2b00      	cmp	r3, #0
 8015772:	d11c      	bne.n	80157ae <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8015774:	693b      	ldr	r3, [r7, #16]
 8015776:	799b      	ldrb	r3, [r3, #6]
 8015778:	f003 0310 	and.w	r3, r3, #16
 801577c:	2b00      	cmp	r3, #0
 801577e:	d102      	bne.n	8015786 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8015780:	2305      	movs	r3, #5
 8015782:	75fb      	strb	r3, [r7, #23]
 8015784:	e014      	b.n	80157b0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8015786:	68fb      	ldr	r3, [r7, #12]
 8015788:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	695b      	ldr	r3, [r3, #20]
 8015790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015794:	4413      	add	r3, r2
 8015796:	4619      	mov	r1, r3
 8015798:	68f8      	ldr	r0, [r7, #12]
 801579a:	f7ff fe42 	bl	8015422 <ld_clust>
 801579e:	4602      	mov	r2, r0
 80157a0:	693b      	ldr	r3, [r7, #16]
 80157a2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80157a4:	e7c0      	b.n	8015728 <follow_path+0x50>
			if (res != FR_OK) break;
 80157a6:	bf00      	nop
 80157a8:	e002      	b.n	80157b0 <follow_path+0xd8>
				break;
 80157aa:	bf00      	nop
 80157ac:	e000      	b.n	80157b0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80157ae:	bf00      	nop
			}
		}
	}

	return res;
 80157b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80157b2:	4618      	mov	r0, r3
 80157b4:	3718      	adds	r7, #24
 80157b6:	46bd      	mov	sp, r7
 80157b8:	bd80      	pop	{r7, pc}

080157ba <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80157ba:	b480      	push	{r7}
 80157bc:	b087      	sub	sp, #28
 80157be:	af00      	add	r7, sp, #0
 80157c0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80157c2:	f04f 33ff 	mov.w	r3, #4294967295
 80157c6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	681b      	ldr	r3, [r3, #0]
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	d031      	beq.n	8015834 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	681b      	ldr	r3, [r3, #0]
 80157d4:	617b      	str	r3, [r7, #20]
 80157d6:	e002      	b.n	80157de <get_ldnumber+0x24>
 80157d8:	697b      	ldr	r3, [r7, #20]
 80157da:	3301      	adds	r3, #1
 80157dc:	617b      	str	r3, [r7, #20]
 80157de:	697b      	ldr	r3, [r7, #20]
 80157e0:	781b      	ldrb	r3, [r3, #0]
 80157e2:	2b20      	cmp	r3, #32
 80157e4:	d903      	bls.n	80157ee <get_ldnumber+0x34>
 80157e6:	697b      	ldr	r3, [r7, #20]
 80157e8:	781b      	ldrb	r3, [r3, #0]
 80157ea:	2b3a      	cmp	r3, #58	; 0x3a
 80157ec:	d1f4      	bne.n	80157d8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80157ee:	697b      	ldr	r3, [r7, #20]
 80157f0:	781b      	ldrb	r3, [r3, #0]
 80157f2:	2b3a      	cmp	r3, #58	; 0x3a
 80157f4:	d11c      	bne.n	8015830 <get_ldnumber+0x76>
			tp = *path;
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	681b      	ldr	r3, [r3, #0]
 80157fa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80157fc:	68fb      	ldr	r3, [r7, #12]
 80157fe:	1c5a      	adds	r2, r3, #1
 8015800:	60fa      	str	r2, [r7, #12]
 8015802:	781b      	ldrb	r3, [r3, #0]
 8015804:	3b30      	subs	r3, #48	; 0x30
 8015806:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8015808:	68bb      	ldr	r3, [r7, #8]
 801580a:	2b09      	cmp	r3, #9
 801580c:	d80e      	bhi.n	801582c <get_ldnumber+0x72>
 801580e:	68fa      	ldr	r2, [r7, #12]
 8015810:	697b      	ldr	r3, [r7, #20]
 8015812:	429a      	cmp	r2, r3
 8015814:	d10a      	bne.n	801582c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8015816:	68bb      	ldr	r3, [r7, #8]
 8015818:	2b00      	cmp	r3, #0
 801581a:	d107      	bne.n	801582c <get_ldnumber+0x72>
					vol = (int)i;
 801581c:	68bb      	ldr	r3, [r7, #8]
 801581e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8015820:	697b      	ldr	r3, [r7, #20]
 8015822:	3301      	adds	r3, #1
 8015824:	617b      	str	r3, [r7, #20]
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	697a      	ldr	r2, [r7, #20]
 801582a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801582c:	693b      	ldr	r3, [r7, #16]
 801582e:	e002      	b.n	8015836 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8015830:	2300      	movs	r3, #0
 8015832:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8015834:	693b      	ldr	r3, [r7, #16]
}
 8015836:	4618      	mov	r0, r3
 8015838:	371c      	adds	r7, #28
 801583a:	46bd      	mov	sp, r7
 801583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015840:	4770      	bx	lr
	...

08015844 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8015844:	b580      	push	{r7, lr}
 8015846:	b082      	sub	sp, #8
 8015848:	af00      	add	r7, sp, #0
 801584a:	6078      	str	r0, [r7, #4]
 801584c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	2200      	movs	r2, #0
 8015852:	70da      	strb	r2, [r3, #3]
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	f04f 32ff 	mov.w	r2, #4294967295
 801585a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801585c:	6839      	ldr	r1, [r7, #0]
 801585e:	6878      	ldr	r0, [r7, #4]
 8015860:	f7ff f8d8 	bl	8014a14 <move_window>
 8015864:	4603      	mov	r3, r0
 8015866:	2b00      	cmp	r3, #0
 8015868:	d001      	beq.n	801586e <check_fs+0x2a>
 801586a:	2304      	movs	r3, #4
 801586c:	e038      	b.n	80158e0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	3330      	adds	r3, #48	; 0x30
 8015872:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015876:	4618      	mov	r0, r3
 8015878:	f7fe fe1c 	bl	80144b4 <ld_word>
 801587c:	4603      	mov	r3, r0
 801587e:	461a      	mov	r2, r3
 8015880:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8015884:	429a      	cmp	r2, r3
 8015886:	d001      	beq.n	801588c <check_fs+0x48>
 8015888:	2303      	movs	r3, #3
 801588a:	e029      	b.n	80158e0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015892:	2be9      	cmp	r3, #233	; 0xe9
 8015894:	d009      	beq.n	80158aa <check_fs+0x66>
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801589c:	2beb      	cmp	r3, #235	; 0xeb
 801589e:	d11e      	bne.n	80158de <check_fs+0x9a>
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80158a6:	2b90      	cmp	r3, #144	; 0x90
 80158a8:	d119      	bne.n	80158de <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	3330      	adds	r3, #48	; 0x30
 80158ae:	3336      	adds	r3, #54	; 0x36
 80158b0:	4618      	mov	r0, r3
 80158b2:	f7fe fe17 	bl	80144e4 <ld_dword>
 80158b6:	4603      	mov	r3, r0
 80158b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80158bc:	4a0a      	ldr	r2, [pc, #40]	; (80158e8 <check_fs+0xa4>)
 80158be:	4293      	cmp	r3, r2
 80158c0:	d101      	bne.n	80158c6 <check_fs+0x82>
 80158c2:	2300      	movs	r3, #0
 80158c4:	e00c      	b.n	80158e0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	3330      	adds	r3, #48	; 0x30
 80158ca:	3352      	adds	r3, #82	; 0x52
 80158cc:	4618      	mov	r0, r3
 80158ce:	f7fe fe09 	bl	80144e4 <ld_dword>
 80158d2:	4603      	mov	r3, r0
 80158d4:	4a05      	ldr	r2, [pc, #20]	; (80158ec <check_fs+0xa8>)
 80158d6:	4293      	cmp	r3, r2
 80158d8:	d101      	bne.n	80158de <check_fs+0x9a>
 80158da:	2300      	movs	r3, #0
 80158dc:	e000      	b.n	80158e0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80158de:	2302      	movs	r3, #2
}
 80158e0:	4618      	mov	r0, r3
 80158e2:	3708      	adds	r7, #8
 80158e4:	46bd      	mov	sp, r7
 80158e6:	bd80      	pop	{r7, pc}
 80158e8:	00544146 	.word	0x00544146
 80158ec:	33544146 	.word	0x33544146

080158f0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80158f0:	b580      	push	{r7, lr}
 80158f2:	b096      	sub	sp, #88	; 0x58
 80158f4:	af00      	add	r7, sp, #0
 80158f6:	60f8      	str	r0, [r7, #12]
 80158f8:	60b9      	str	r1, [r7, #8]
 80158fa:	4613      	mov	r3, r2
 80158fc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80158fe:	68bb      	ldr	r3, [r7, #8]
 8015900:	2200      	movs	r2, #0
 8015902:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8015904:	68f8      	ldr	r0, [r7, #12]
 8015906:	f7ff ff58 	bl	80157ba <get_ldnumber>
 801590a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801590c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801590e:	2b00      	cmp	r3, #0
 8015910:	da01      	bge.n	8015916 <find_volume+0x26>
 8015912:	230b      	movs	r3, #11
 8015914:	e22d      	b.n	8015d72 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8015916:	4aa1      	ldr	r2, [pc, #644]	; (8015b9c <find_volume+0x2ac>)
 8015918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801591a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801591e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8015920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015922:	2b00      	cmp	r3, #0
 8015924:	d101      	bne.n	801592a <find_volume+0x3a>
 8015926:	230c      	movs	r3, #12
 8015928:	e223      	b.n	8015d72 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801592a:	68bb      	ldr	r3, [r7, #8]
 801592c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801592e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8015930:	79fb      	ldrb	r3, [r7, #7]
 8015932:	f023 0301 	bic.w	r3, r3, #1
 8015936:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8015938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801593a:	781b      	ldrb	r3, [r3, #0]
 801593c:	2b00      	cmp	r3, #0
 801593e:	d01a      	beq.n	8015976 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8015940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015942:	785b      	ldrb	r3, [r3, #1]
 8015944:	4618      	mov	r0, r3
 8015946:	f7fe fd17 	bl	8014378 <disk_status>
 801594a:	4603      	mov	r3, r0
 801594c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8015950:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015954:	f003 0301 	and.w	r3, r3, #1
 8015958:	2b00      	cmp	r3, #0
 801595a:	d10c      	bne.n	8015976 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801595c:	79fb      	ldrb	r3, [r7, #7]
 801595e:	2b00      	cmp	r3, #0
 8015960:	d007      	beq.n	8015972 <find_volume+0x82>
 8015962:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015966:	f003 0304 	and.w	r3, r3, #4
 801596a:	2b00      	cmp	r3, #0
 801596c:	d001      	beq.n	8015972 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801596e:	230a      	movs	r3, #10
 8015970:	e1ff      	b.n	8015d72 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8015972:	2300      	movs	r3, #0
 8015974:	e1fd      	b.n	8015d72 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8015976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015978:	2200      	movs	r2, #0
 801597a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801597c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801597e:	b2da      	uxtb	r2, r3
 8015980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015982:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8015984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015986:	785b      	ldrb	r3, [r3, #1]
 8015988:	4618      	mov	r0, r3
 801598a:	f7fe fd0f 	bl	80143ac <disk_initialize>
 801598e:	4603      	mov	r3, r0
 8015990:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8015994:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015998:	f003 0301 	and.w	r3, r3, #1
 801599c:	2b00      	cmp	r3, #0
 801599e:	d001      	beq.n	80159a4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80159a0:	2303      	movs	r3, #3
 80159a2:	e1e6      	b.n	8015d72 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80159a4:	79fb      	ldrb	r3, [r7, #7]
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d007      	beq.n	80159ba <find_volume+0xca>
 80159aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80159ae:	f003 0304 	and.w	r3, r3, #4
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	d001      	beq.n	80159ba <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80159b6:	230a      	movs	r3, #10
 80159b8:	e1db      	b.n	8015d72 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80159ba:	2300      	movs	r3, #0
 80159bc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80159be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80159c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80159c2:	f7ff ff3f 	bl	8015844 <check_fs>
 80159c6:	4603      	mov	r3, r0
 80159c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80159cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80159d0:	2b02      	cmp	r3, #2
 80159d2:	d149      	bne.n	8015a68 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80159d4:	2300      	movs	r3, #0
 80159d6:	643b      	str	r3, [r7, #64]	; 0x40
 80159d8:	e01e      	b.n	8015a18 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80159da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159dc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80159e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80159e2:	011b      	lsls	r3, r3, #4
 80159e4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80159e8:	4413      	add	r3, r2
 80159ea:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80159ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159ee:	3304      	adds	r3, #4
 80159f0:	781b      	ldrb	r3, [r3, #0]
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d006      	beq.n	8015a04 <find_volume+0x114>
 80159f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159f8:	3308      	adds	r3, #8
 80159fa:	4618      	mov	r0, r3
 80159fc:	f7fe fd72 	bl	80144e4 <ld_dword>
 8015a00:	4602      	mov	r2, r0
 8015a02:	e000      	b.n	8015a06 <find_volume+0x116>
 8015a04:	2200      	movs	r2, #0
 8015a06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015a08:	009b      	lsls	r3, r3, #2
 8015a0a:	3358      	adds	r3, #88	; 0x58
 8015a0c:	443b      	add	r3, r7
 8015a0e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8015a12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015a14:	3301      	adds	r3, #1
 8015a16:	643b      	str	r3, [r7, #64]	; 0x40
 8015a18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015a1a:	2b03      	cmp	r3, #3
 8015a1c:	d9dd      	bls.n	80159da <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8015a1e:	2300      	movs	r3, #0
 8015a20:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8015a22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d002      	beq.n	8015a2e <find_volume+0x13e>
 8015a28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015a2a:	3b01      	subs	r3, #1
 8015a2c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8015a2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015a30:	009b      	lsls	r3, r3, #2
 8015a32:	3358      	adds	r3, #88	; 0x58
 8015a34:	443b      	add	r3, r7
 8015a36:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8015a3a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8015a3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d005      	beq.n	8015a4e <find_volume+0x15e>
 8015a42:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8015a44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015a46:	f7ff fefd 	bl	8015844 <check_fs>
 8015a4a:	4603      	mov	r3, r0
 8015a4c:	e000      	b.n	8015a50 <find_volume+0x160>
 8015a4e:	2303      	movs	r3, #3
 8015a50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8015a54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015a58:	2b01      	cmp	r3, #1
 8015a5a:	d905      	bls.n	8015a68 <find_volume+0x178>
 8015a5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015a5e:	3301      	adds	r3, #1
 8015a60:	643b      	str	r3, [r7, #64]	; 0x40
 8015a62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015a64:	2b03      	cmp	r3, #3
 8015a66:	d9e2      	bls.n	8015a2e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8015a68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015a6c:	2b04      	cmp	r3, #4
 8015a6e:	d101      	bne.n	8015a74 <find_volume+0x184>
 8015a70:	2301      	movs	r3, #1
 8015a72:	e17e      	b.n	8015d72 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8015a74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015a78:	2b01      	cmp	r3, #1
 8015a7a:	d901      	bls.n	8015a80 <find_volume+0x190>
 8015a7c:	230d      	movs	r3, #13
 8015a7e:	e178      	b.n	8015d72 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8015a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a82:	3330      	adds	r3, #48	; 0x30
 8015a84:	330b      	adds	r3, #11
 8015a86:	4618      	mov	r0, r3
 8015a88:	f7fe fd14 	bl	80144b4 <ld_word>
 8015a8c:	4603      	mov	r3, r0
 8015a8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015a92:	d001      	beq.n	8015a98 <find_volume+0x1a8>
 8015a94:	230d      	movs	r3, #13
 8015a96:	e16c      	b.n	8015d72 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8015a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a9a:	3330      	adds	r3, #48	; 0x30
 8015a9c:	3316      	adds	r3, #22
 8015a9e:	4618      	mov	r0, r3
 8015aa0:	f7fe fd08 	bl	80144b4 <ld_word>
 8015aa4:	4603      	mov	r3, r0
 8015aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8015aa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d106      	bne.n	8015abc <find_volume+0x1cc>
 8015aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ab0:	3330      	adds	r3, #48	; 0x30
 8015ab2:	3324      	adds	r3, #36	; 0x24
 8015ab4:	4618      	mov	r0, r3
 8015ab6:	f7fe fd15 	bl	80144e4 <ld_dword>
 8015aba:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8015abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015abe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015ac0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8015ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ac4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8015ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015aca:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8015acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ace:	789b      	ldrb	r3, [r3, #2]
 8015ad0:	2b01      	cmp	r3, #1
 8015ad2:	d005      	beq.n	8015ae0 <find_volume+0x1f0>
 8015ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ad6:	789b      	ldrb	r3, [r3, #2]
 8015ad8:	2b02      	cmp	r3, #2
 8015ada:	d001      	beq.n	8015ae0 <find_volume+0x1f0>
 8015adc:	230d      	movs	r3, #13
 8015ade:	e148      	b.n	8015d72 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8015ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ae2:	789b      	ldrb	r3, [r3, #2]
 8015ae4:	461a      	mov	r2, r3
 8015ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015ae8:	fb02 f303 	mul.w	r3, r2, r3
 8015aec:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8015aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015af4:	b29a      	uxth	r2, r3
 8015af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015af8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8015afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015afc:	895b      	ldrh	r3, [r3, #10]
 8015afe:	2b00      	cmp	r3, #0
 8015b00:	d008      	beq.n	8015b14 <find_volume+0x224>
 8015b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b04:	895b      	ldrh	r3, [r3, #10]
 8015b06:	461a      	mov	r2, r3
 8015b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b0a:	895b      	ldrh	r3, [r3, #10]
 8015b0c:	3b01      	subs	r3, #1
 8015b0e:	4013      	ands	r3, r2
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	d001      	beq.n	8015b18 <find_volume+0x228>
 8015b14:	230d      	movs	r3, #13
 8015b16:	e12c      	b.n	8015d72 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8015b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b1a:	3330      	adds	r3, #48	; 0x30
 8015b1c:	3311      	adds	r3, #17
 8015b1e:	4618      	mov	r0, r3
 8015b20:	f7fe fcc8 	bl	80144b4 <ld_word>
 8015b24:	4603      	mov	r3, r0
 8015b26:	461a      	mov	r2, r3
 8015b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b2a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8015b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b2e:	891b      	ldrh	r3, [r3, #8]
 8015b30:	f003 030f 	and.w	r3, r3, #15
 8015b34:	b29b      	uxth	r3, r3
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d001      	beq.n	8015b3e <find_volume+0x24e>
 8015b3a:	230d      	movs	r3, #13
 8015b3c:	e119      	b.n	8015d72 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8015b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b40:	3330      	adds	r3, #48	; 0x30
 8015b42:	3313      	adds	r3, #19
 8015b44:	4618      	mov	r0, r3
 8015b46:	f7fe fcb5 	bl	80144b4 <ld_word>
 8015b4a:	4603      	mov	r3, r0
 8015b4c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8015b4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	d106      	bne.n	8015b62 <find_volume+0x272>
 8015b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b56:	3330      	adds	r3, #48	; 0x30
 8015b58:	3320      	adds	r3, #32
 8015b5a:	4618      	mov	r0, r3
 8015b5c:	f7fe fcc2 	bl	80144e4 <ld_dword>
 8015b60:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8015b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b64:	3330      	adds	r3, #48	; 0x30
 8015b66:	330e      	adds	r3, #14
 8015b68:	4618      	mov	r0, r3
 8015b6a:	f7fe fca3 	bl	80144b4 <ld_word>
 8015b6e:	4603      	mov	r3, r0
 8015b70:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8015b72:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015b74:	2b00      	cmp	r3, #0
 8015b76:	d101      	bne.n	8015b7c <find_volume+0x28c>
 8015b78:	230d      	movs	r3, #13
 8015b7a:	e0fa      	b.n	8015d72 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8015b7c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8015b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b80:	4413      	add	r3, r2
 8015b82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015b84:	8912      	ldrh	r2, [r2, #8]
 8015b86:	0912      	lsrs	r2, r2, #4
 8015b88:	b292      	uxth	r2, r2
 8015b8a:	4413      	add	r3, r2
 8015b8c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8015b8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b92:	429a      	cmp	r2, r3
 8015b94:	d204      	bcs.n	8015ba0 <find_volume+0x2b0>
 8015b96:	230d      	movs	r3, #13
 8015b98:	e0eb      	b.n	8015d72 <find_volume+0x482>
 8015b9a:	bf00      	nop
 8015b9c:	20000e80 	.word	0x20000e80
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8015ba0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ba4:	1ad3      	subs	r3, r2, r3
 8015ba6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015ba8:	8952      	ldrh	r2, [r2, #10]
 8015baa:	fbb3 f3f2 	udiv	r3, r3, r2
 8015bae:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8015bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d101      	bne.n	8015bba <find_volume+0x2ca>
 8015bb6:	230d      	movs	r3, #13
 8015bb8:	e0db      	b.n	8015d72 <find_volume+0x482>
		fmt = FS_FAT32;
 8015bba:	2303      	movs	r3, #3
 8015bbc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8015bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bc2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8015bc6:	4293      	cmp	r3, r2
 8015bc8:	d802      	bhi.n	8015bd0 <find_volume+0x2e0>
 8015bca:	2302      	movs	r3, #2
 8015bcc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8015bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bd2:	f640 72f5 	movw	r2, #4085	; 0xff5
 8015bd6:	4293      	cmp	r3, r2
 8015bd8:	d802      	bhi.n	8015be0 <find_volume+0x2f0>
 8015bda:	2301      	movs	r3, #1
 8015bdc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8015be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015be2:	1c9a      	adds	r2, r3, #2
 8015be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015be6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8015be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015bec:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8015bee:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8015bf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015bf2:	441a      	add	r2, r3
 8015bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bf6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8015bf8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bfc:	441a      	add	r2, r3
 8015bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c00:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8015c02:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015c06:	2b03      	cmp	r3, #3
 8015c08:	d11e      	bne.n	8015c48 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8015c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c0c:	3330      	adds	r3, #48	; 0x30
 8015c0e:	332a      	adds	r3, #42	; 0x2a
 8015c10:	4618      	mov	r0, r3
 8015c12:	f7fe fc4f 	bl	80144b4 <ld_word>
 8015c16:	4603      	mov	r3, r0
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	d001      	beq.n	8015c20 <find_volume+0x330>
 8015c1c:	230d      	movs	r3, #13
 8015c1e:	e0a8      	b.n	8015d72 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8015c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c22:	891b      	ldrh	r3, [r3, #8]
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	d001      	beq.n	8015c2c <find_volume+0x33c>
 8015c28:	230d      	movs	r3, #13
 8015c2a:	e0a2      	b.n	8015d72 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8015c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c2e:	3330      	adds	r3, #48	; 0x30
 8015c30:	332c      	adds	r3, #44	; 0x2c
 8015c32:	4618      	mov	r0, r3
 8015c34:	f7fe fc56 	bl	80144e4 <ld_dword>
 8015c38:	4602      	mov	r2, r0
 8015c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c3c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8015c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c40:	695b      	ldr	r3, [r3, #20]
 8015c42:	009b      	lsls	r3, r3, #2
 8015c44:	647b      	str	r3, [r7, #68]	; 0x44
 8015c46:	e01f      	b.n	8015c88 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8015c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c4a:	891b      	ldrh	r3, [r3, #8]
 8015c4c:	2b00      	cmp	r3, #0
 8015c4e:	d101      	bne.n	8015c54 <find_volume+0x364>
 8015c50:	230d      	movs	r3, #13
 8015c52:	e08e      	b.n	8015d72 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8015c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c56:	6a1a      	ldr	r2, [r3, #32]
 8015c58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c5a:	441a      	add	r2, r3
 8015c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c5e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8015c60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015c64:	2b02      	cmp	r3, #2
 8015c66:	d103      	bne.n	8015c70 <find_volume+0x380>
 8015c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c6a:	695b      	ldr	r3, [r3, #20]
 8015c6c:	005b      	lsls	r3, r3, #1
 8015c6e:	e00a      	b.n	8015c86 <find_volume+0x396>
 8015c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c72:	695a      	ldr	r2, [r3, #20]
 8015c74:	4613      	mov	r3, r2
 8015c76:	005b      	lsls	r3, r3, #1
 8015c78:	4413      	add	r3, r2
 8015c7a:	085a      	lsrs	r2, r3, #1
 8015c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c7e:	695b      	ldr	r3, [r3, #20]
 8015c80:	f003 0301 	and.w	r3, r3, #1
 8015c84:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8015c86:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8015c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c8a:	699a      	ldr	r2, [r3, #24]
 8015c8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015c8e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8015c92:	0a5b      	lsrs	r3, r3, #9
 8015c94:	429a      	cmp	r2, r3
 8015c96:	d201      	bcs.n	8015c9c <find_volume+0x3ac>
 8015c98:	230d      	movs	r3, #13
 8015c9a:	e06a      	b.n	8015d72 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8015c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8015ca2:	611a      	str	r2, [r3, #16]
 8015ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ca6:	691a      	ldr	r2, [r3, #16]
 8015ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015caa:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8015cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015cae:	2280      	movs	r2, #128	; 0x80
 8015cb0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8015cb2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015cb6:	2b03      	cmp	r3, #3
 8015cb8:	d149      	bne.n	8015d4e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8015cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015cbc:	3330      	adds	r3, #48	; 0x30
 8015cbe:	3330      	adds	r3, #48	; 0x30
 8015cc0:	4618      	mov	r0, r3
 8015cc2:	f7fe fbf7 	bl	80144b4 <ld_word>
 8015cc6:	4603      	mov	r3, r0
 8015cc8:	2b01      	cmp	r3, #1
 8015cca:	d140      	bne.n	8015d4e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8015ccc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015cce:	3301      	adds	r3, #1
 8015cd0:	4619      	mov	r1, r3
 8015cd2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015cd4:	f7fe fe9e 	bl	8014a14 <move_window>
 8015cd8:	4603      	mov	r3, r0
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d137      	bne.n	8015d4e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8015cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ce0:	2200      	movs	r2, #0
 8015ce2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8015ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ce6:	3330      	adds	r3, #48	; 0x30
 8015ce8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015cec:	4618      	mov	r0, r3
 8015cee:	f7fe fbe1 	bl	80144b4 <ld_word>
 8015cf2:	4603      	mov	r3, r0
 8015cf4:	461a      	mov	r2, r3
 8015cf6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8015cfa:	429a      	cmp	r2, r3
 8015cfc:	d127      	bne.n	8015d4e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8015cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d00:	3330      	adds	r3, #48	; 0x30
 8015d02:	4618      	mov	r0, r3
 8015d04:	f7fe fbee 	bl	80144e4 <ld_dword>
 8015d08:	4603      	mov	r3, r0
 8015d0a:	4a1c      	ldr	r2, [pc, #112]	; (8015d7c <find_volume+0x48c>)
 8015d0c:	4293      	cmp	r3, r2
 8015d0e:	d11e      	bne.n	8015d4e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8015d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d12:	3330      	adds	r3, #48	; 0x30
 8015d14:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8015d18:	4618      	mov	r0, r3
 8015d1a:	f7fe fbe3 	bl	80144e4 <ld_dword>
 8015d1e:	4603      	mov	r3, r0
 8015d20:	4a17      	ldr	r2, [pc, #92]	; (8015d80 <find_volume+0x490>)
 8015d22:	4293      	cmp	r3, r2
 8015d24:	d113      	bne.n	8015d4e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8015d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d28:	3330      	adds	r3, #48	; 0x30
 8015d2a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8015d2e:	4618      	mov	r0, r3
 8015d30:	f7fe fbd8 	bl	80144e4 <ld_dword>
 8015d34:	4602      	mov	r2, r0
 8015d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d38:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8015d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d3c:	3330      	adds	r3, #48	; 0x30
 8015d3e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8015d42:	4618      	mov	r0, r3
 8015d44:	f7fe fbce 	bl	80144e4 <ld_dword>
 8015d48:	4602      	mov	r2, r0
 8015d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d4c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8015d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d50:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8015d54:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8015d56:	4b0b      	ldr	r3, [pc, #44]	; (8015d84 <find_volume+0x494>)
 8015d58:	881b      	ldrh	r3, [r3, #0]
 8015d5a:	3301      	adds	r3, #1
 8015d5c:	b29a      	uxth	r2, r3
 8015d5e:	4b09      	ldr	r3, [pc, #36]	; (8015d84 <find_volume+0x494>)
 8015d60:	801a      	strh	r2, [r3, #0]
 8015d62:	4b08      	ldr	r3, [pc, #32]	; (8015d84 <find_volume+0x494>)
 8015d64:	881a      	ldrh	r2, [r3, #0]
 8015d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d68:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8015d6a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015d6c:	f7fe fdea 	bl	8014944 <clear_lock>
#endif
	return FR_OK;
 8015d70:	2300      	movs	r3, #0
}
 8015d72:	4618      	mov	r0, r3
 8015d74:	3758      	adds	r7, #88	; 0x58
 8015d76:	46bd      	mov	sp, r7
 8015d78:	bd80      	pop	{r7, pc}
 8015d7a:	bf00      	nop
 8015d7c:	41615252 	.word	0x41615252
 8015d80:	61417272 	.word	0x61417272
 8015d84:	20000e84 	.word	0x20000e84

08015d88 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8015d88:	b580      	push	{r7, lr}
 8015d8a:	b084      	sub	sp, #16
 8015d8c:	af00      	add	r7, sp, #0
 8015d8e:	6078      	str	r0, [r7, #4]
 8015d90:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8015d92:	2309      	movs	r3, #9
 8015d94:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	d01c      	beq.n	8015dd6 <validate+0x4e>
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	681b      	ldr	r3, [r3, #0]
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d018      	beq.n	8015dd6 <validate+0x4e>
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	681b      	ldr	r3, [r3, #0]
 8015da8:	781b      	ldrb	r3, [r3, #0]
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	d013      	beq.n	8015dd6 <validate+0x4e>
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	889a      	ldrh	r2, [r3, #4]
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	681b      	ldr	r3, [r3, #0]
 8015db6:	88db      	ldrh	r3, [r3, #6]
 8015db8:	429a      	cmp	r2, r3
 8015dba:	d10c      	bne.n	8015dd6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	681b      	ldr	r3, [r3, #0]
 8015dc0:	785b      	ldrb	r3, [r3, #1]
 8015dc2:	4618      	mov	r0, r3
 8015dc4:	f7fe fad8 	bl	8014378 <disk_status>
 8015dc8:	4603      	mov	r3, r0
 8015dca:	f003 0301 	and.w	r3, r3, #1
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	d101      	bne.n	8015dd6 <validate+0x4e>
			res = FR_OK;
 8015dd2:	2300      	movs	r3, #0
 8015dd4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8015dd6:	7bfb      	ldrb	r3, [r7, #15]
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d102      	bne.n	8015de2 <validate+0x5a>
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	681b      	ldr	r3, [r3, #0]
 8015de0:	e000      	b.n	8015de4 <validate+0x5c>
 8015de2:	2300      	movs	r3, #0
 8015de4:	683a      	ldr	r2, [r7, #0]
 8015de6:	6013      	str	r3, [r2, #0]
	return res;
 8015de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8015dea:	4618      	mov	r0, r3
 8015dec:	3710      	adds	r7, #16
 8015dee:	46bd      	mov	sp, r7
 8015df0:	bd80      	pop	{r7, pc}
	...

08015df4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8015df4:	b580      	push	{r7, lr}
 8015df6:	b088      	sub	sp, #32
 8015df8:	af00      	add	r7, sp, #0
 8015dfa:	60f8      	str	r0, [r7, #12]
 8015dfc:	60b9      	str	r1, [r7, #8]
 8015dfe:	4613      	mov	r3, r2
 8015e00:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8015e02:	68bb      	ldr	r3, [r7, #8]
 8015e04:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8015e06:	f107 0310 	add.w	r3, r7, #16
 8015e0a:	4618      	mov	r0, r3
 8015e0c:	f7ff fcd5 	bl	80157ba <get_ldnumber>
 8015e10:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8015e12:	69fb      	ldr	r3, [r7, #28]
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	da01      	bge.n	8015e1c <f_mount+0x28>
 8015e18:	230b      	movs	r3, #11
 8015e1a:	e02b      	b.n	8015e74 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8015e1c:	4a17      	ldr	r2, [pc, #92]	; (8015e7c <f_mount+0x88>)
 8015e1e:	69fb      	ldr	r3, [r7, #28]
 8015e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015e24:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8015e26:	69bb      	ldr	r3, [r7, #24]
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d005      	beq.n	8015e38 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8015e2c:	69b8      	ldr	r0, [r7, #24]
 8015e2e:	f7fe fd89 	bl	8014944 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8015e32:	69bb      	ldr	r3, [r7, #24]
 8015e34:	2200      	movs	r2, #0
 8015e36:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8015e38:	68fb      	ldr	r3, [r7, #12]
 8015e3a:	2b00      	cmp	r3, #0
 8015e3c:	d002      	beq.n	8015e44 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8015e3e:	68fb      	ldr	r3, [r7, #12]
 8015e40:	2200      	movs	r2, #0
 8015e42:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8015e44:	68fa      	ldr	r2, [r7, #12]
 8015e46:	490d      	ldr	r1, [pc, #52]	; (8015e7c <f_mount+0x88>)
 8015e48:	69fb      	ldr	r3, [r7, #28]
 8015e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8015e4e:	68fb      	ldr	r3, [r7, #12]
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d002      	beq.n	8015e5a <f_mount+0x66>
 8015e54:	79fb      	ldrb	r3, [r7, #7]
 8015e56:	2b01      	cmp	r3, #1
 8015e58:	d001      	beq.n	8015e5e <f_mount+0x6a>
 8015e5a:	2300      	movs	r3, #0
 8015e5c:	e00a      	b.n	8015e74 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8015e5e:	f107 010c 	add.w	r1, r7, #12
 8015e62:	f107 0308 	add.w	r3, r7, #8
 8015e66:	2200      	movs	r2, #0
 8015e68:	4618      	mov	r0, r3
 8015e6a:	f7ff fd41 	bl	80158f0 <find_volume>
 8015e6e:	4603      	mov	r3, r0
 8015e70:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8015e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8015e74:	4618      	mov	r0, r3
 8015e76:	3720      	adds	r7, #32
 8015e78:	46bd      	mov	sp, r7
 8015e7a:	bd80      	pop	{r7, pc}
 8015e7c:	20000e80 	.word	0x20000e80

08015e80 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8015e80:	b580      	push	{r7, lr}
 8015e82:	b098      	sub	sp, #96	; 0x60
 8015e84:	af00      	add	r7, sp, #0
 8015e86:	60f8      	str	r0, [r7, #12]
 8015e88:	60b9      	str	r1, [r7, #8]
 8015e8a:	4613      	mov	r3, r2
 8015e8c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8015e8e:	68fb      	ldr	r3, [r7, #12]
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	d101      	bne.n	8015e98 <f_open+0x18>
 8015e94:	2309      	movs	r3, #9
 8015e96:	e1ad      	b.n	80161f4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8015e98:	79fb      	ldrb	r3, [r7, #7]
 8015e9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015e9e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8015ea0:	79fa      	ldrb	r2, [r7, #7]
 8015ea2:	f107 0110 	add.w	r1, r7, #16
 8015ea6:	f107 0308 	add.w	r3, r7, #8
 8015eaa:	4618      	mov	r0, r3
 8015eac:	f7ff fd20 	bl	80158f0 <find_volume>
 8015eb0:	4603      	mov	r3, r0
 8015eb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8015eb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	f040 8191 	bne.w	80161e2 <f_open+0x362>
		dj.obj.fs = fs;
 8015ec0:	693b      	ldr	r3, [r7, #16]
 8015ec2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8015ec4:	68ba      	ldr	r2, [r7, #8]
 8015ec6:	f107 0314 	add.w	r3, r7, #20
 8015eca:	4611      	mov	r1, r2
 8015ecc:	4618      	mov	r0, r3
 8015ece:	f7ff fc03 	bl	80156d8 <follow_path>
 8015ed2:	4603      	mov	r3, r0
 8015ed4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8015ed8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d11a      	bne.n	8015f16 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8015ee0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8015ee4:	b25b      	sxtb	r3, r3
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	da03      	bge.n	8015ef2 <f_open+0x72>
				res = FR_INVALID_NAME;
 8015eea:	2306      	movs	r3, #6
 8015eec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8015ef0:	e011      	b.n	8015f16 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8015ef2:	79fb      	ldrb	r3, [r7, #7]
 8015ef4:	f023 0301 	bic.w	r3, r3, #1
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	bf14      	ite	ne
 8015efc:	2301      	movne	r3, #1
 8015efe:	2300      	moveq	r3, #0
 8015f00:	b2db      	uxtb	r3, r3
 8015f02:	461a      	mov	r2, r3
 8015f04:	f107 0314 	add.w	r3, r7, #20
 8015f08:	4611      	mov	r1, r2
 8015f0a:	4618      	mov	r0, r3
 8015f0c:	f7fe fbd2 	bl	80146b4 <chk_lock>
 8015f10:	4603      	mov	r3, r0
 8015f12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8015f16:	79fb      	ldrb	r3, [r7, #7]
 8015f18:	f003 031c 	and.w	r3, r3, #28
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d07f      	beq.n	8016020 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8015f20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	d017      	beq.n	8015f58 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8015f28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015f2c:	2b04      	cmp	r3, #4
 8015f2e:	d10e      	bne.n	8015f4e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8015f30:	f7fe fc1c 	bl	801476c <enq_lock>
 8015f34:	4603      	mov	r3, r0
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d006      	beq.n	8015f48 <f_open+0xc8>
 8015f3a:	f107 0314 	add.w	r3, r7, #20
 8015f3e:	4618      	mov	r0, r3
 8015f40:	f7ff fb03 	bl	801554a <dir_register>
 8015f44:	4603      	mov	r3, r0
 8015f46:	e000      	b.n	8015f4a <f_open+0xca>
 8015f48:	2312      	movs	r3, #18
 8015f4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8015f4e:	79fb      	ldrb	r3, [r7, #7]
 8015f50:	f043 0308 	orr.w	r3, r3, #8
 8015f54:	71fb      	strb	r3, [r7, #7]
 8015f56:	e010      	b.n	8015f7a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8015f58:	7ebb      	ldrb	r3, [r7, #26]
 8015f5a:	f003 0311 	and.w	r3, r3, #17
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d003      	beq.n	8015f6a <f_open+0xea>
					res = FR_DENIED;
 8015f62:	2307      	movs	r3, #7
 8015f64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8015f68:	e007      	b.n	8015f7a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8015f6a:	79fb      	ldrb	r3, [r7, #7]
 8015f6c:	f003 0304 	and.w	r3, r3, #4
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	d002      	beq.n	8015f7a <f_open+0xfa>
 8015f74:	2308      	movs	r3, #8
 8015f76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8015f7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	d168      	bne.n	8016054 <f_open+0x1d4>
 8015f82:	79fb      	ldrb	r3, [r7, #7]
 8015f84:	f003 0308 	and.w	r3, r3, #8
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d063      	beq.n	8016054 <f_open+0x1d4>
				dw = GET_FATTIME();
 8015f8c:	f7fb ffbc 	bl	8011f08 <get_fattime>
 8015f90:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8015f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f94:	330e      	adds	r3, #14
 8015f96:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8015f98:	4618      	mov	r0, r3
 8015f9a:	f7fe fae1 	bl	8014560 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8015f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015fa0:	3316      	adds	r3, #22
 8015fa2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8015fa4:	4618      	mov	r0, r3
 8015fa6:	f7fe fadb 	bl	8014560 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8015faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015fac:	330b      	adds	r3, #11
 8015fae:	2220      	movs	r2, #32
 8015fb0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8015fb2:	693b      	ldr	r3, [r7, #16]
 8015fb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015fb6:	4611      	mov	r1, r2
 8015fb8:	4618      	mov	r0, r3
 8015fba:	f7ff fa32 	bl	8015422 <ld_clust>
 8015fbe:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8015fc0:	693b      	ldr	r3, [r7, #16]
 8015fc2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015fc4:	2200      	movs	r2, #0
 8015fc6:	4618      	mov	r0, r3
 8015fc8:	f7ff fa4a 	bl	8015460 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8015fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015fce:	331c      	adds	r3, #28
 8015fd0:	2100      	movs	r1, #0
 8015fd2:	4618      	mov	r0, r3
 8015fd4:	f7fe fac4 	bl	8014560 <st_dword>
					fs->wflag = 1;
 8015fd8:	693b      	ldr	r3, [r7, #16]
 8015fda:	2201      	movs	r2, #1
 8015fdc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8015fde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	d037      	beq.n	8016054 <f_open+0x1d4>
						dw = fs->winsect;
 8015fe4:	693b      	ldr	r3, [r7, #16]
 8015fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015fe8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8015fea:	f107 0314 	add.w	r3, r7, #20
 8015fee:	2200      	movs	r2, #0
 8015ff0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8015ff2:	4618      	mov	r0, r3
 8015ff4:	f7fe ff5d 	bl	8014eb2 <remove_chain>
 8015ff8:	4603      	mov	r3, r0
 8015ffa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8015ffe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016002:	2b00      	cmp	r3, #0
 8016004:	d126      	bne.n	8016054 <f_open+0x1d4>
							res = move_window(fs, dw);
 8016006:	693b      	ldr	r3, [r7, #16]
 8016008:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801600a:	4618      	mov	r0, r3
 801600c:	f7fe fd02 	bl	8014a14 <move_window>
 8016010:	4603      	mov	r3, r0
 8016012:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8016016:	693b      	ldr	r3, [r7, #16]
 8016018:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801601a:	3a01      	subs	r2, #1
 801601c:	60da      	str	r2, [r3, #12]
 801601e:	e019      	b.n	8016054 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8016020:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016024:	2b00      	cmp	r3, #0
 8016026:	d115      	bne.n	8016054 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8016028:	7ebb      	ldrb	r3, [r7, #26]
 801602a:	f003 0310 	and.w	r3, r3, #16
 801602e:	2b00      	cmp	r3, #0
 8016030:	d003      	beq.n	801603a <f_open+0x1ba>
					res = FR_NO_FILE;
 8016032:	2304      	movs	r3, #4
 8016034:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016038:	e00c      	b.n	8016054 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801603a:	79fb      	ldrb	r3, [r7, #7]
 801603c:	f003 0302 	and.w	r3, r3, #2
 8016040:	2b00      	cmp	r3, #0
 8016042:	d007      	beq.n	8016054 <f_open+0x1d4>
 8016044:	7ebb      	ldrb	r3, [r7, #26]
 8016046:	f003 0301 	and.w	r3, r3, #1
 801604a:	2b00      	cmp	r3, #0
 801604c:	d002      	beq.n	8016054 <f_open+0x1d4>
						res = FR_DENIED;
 801604e:	2307      	movs	r3, #7
 8016050:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8016054:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016058:	2b00      	cmp	r3, #0
 801605a:	d128      	bne.n	80160ae <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801605c:	79fb      	ldrb	r3, [r7, #7]
 801605e:	f003 0308 	and.w	r3, r3, #8
 8016062:	2b00      	cmp	r3, #0
 8016064:	d003      	beq.n	801606e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8016066:	79fb      	ldrb	r3, [r7, #7]
 8016068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801606c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801606e:	693b      	ldr	r3, [r7, #16]
 8016070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016072:	68fb      	ldr	r3, [r7, #12]
 8016074:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8016076:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016078:	68fb      	ldr	r3, [r7, #12]
 801607a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801607c:	79fb      	ldrb	r3, [r7, #7]
 801607e:	f023 0301 	bic.w	r3, r3, #1
 8016082:	2b00      	cmp	r3, #0
 8016084:	bf14      	ite	ne
 8016086:	2301      	movne	r3, #1
 8016088:	2300      	moveq	r3, #0
 801608a:	b2db      	uxtb	r3, r3
 801608c:	461a      	mov	r2, r3
 801608e:	f107 0314 	add.w	r3, r7, #20
 8016092:	4611      	mov	r1, r2
 8016094:	4618      	mov	r0, r3
 8016096:	f7fe fb8b 	bl	80147b0 <inc_lock>
 801609a:	4602      	mov	r2, r0
 801609c:	68fb      	ldr	r3, [r7, #12]
 801609e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80160a0:	68fb      	ldr	r3, [r7, #12]
 80160a2:	691b      	ldr	r3, [r3, #16]
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	d102      	bne.n	80160ae <f_open+0x22e>
 80160a8:	2302      	movs	r3, #2
 80160aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80160ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	f040 8095 	bne.w	80161e2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80160b8:	693b      	ldr	r3, [r7, #16]
 80160ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80160bc:	4611      	mov	r1, r2
 80160be:	4618      	mov	r0, r3
 80160c0:	f7ff f9af 	bl	8015422 <ld_clust>
 80160c4:	4602      	mov	r2, r0
 80160c6:	68fb      	ldr	r3, [r7, #12]
 80160c8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80160ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160cc:	331c      	adds	r3, #28
 80160ce:	4618      	mov	r0, r3
 80160d0:	f7fe fa08 	bl	80144e4 <ld_dword>
 80160d4:	4602      	mov	r2, r0
 80160d6:	68fb      	ldr	r3, [r7, #12]
 80160d8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80160da:	68fb      	ldr	r3, [r7, #12]
 80160dc:	2200      	movs	r2, #0
 80160de:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80160e0:	693a      	ldr	r2, [r7, #16]
 80160e2:	68fb      	ldr	r3, [r7, #12]
 80160e4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80160e6:	693b      	ldr	r3, [r7, #16]
 80160e8:	88da      	ldrh	r2, [r3, #6]
 80160ea:	68fb      	ldr	r3, [r7, #12]
 80160ec:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80160ee:	68fb      	ldr	r3, [r7, #12]
 80160f0:	79fa      	ldrb	r2, [r7, #7]
 80160f2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80160f4:	68fb      	ldr	r3, [r7, #12]
 80160f6:	2200      	movs	r2, #0
 80160f8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80160fa:	68fb      	ldr	r3, [r7, #12]
 80160fc:	2200      	movs	r2, #0
 80160fe:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8016100:	68fb      	ldr	r3, [r7, #12]
 8016102:	2200      	movs	r2, #0
 8016104:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8016106:	68fb      	ldr	r3, [r7, #12]
 8016108:	3330      	adds	r3, #48	; 0x30
 801610a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801610e:	2100      	movs	r1, #0
 8016110:	4618      	mov	r0, r3
 8016112:	f7fe fa72 	bl	80145fa <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8016116:	79fb      	ldrb	r3, [r7, #7]
 8016118:	f003 0320 	and.w	r3, r3, #32
 801611c:	2b00      	cmp	r3, #0
 801611e:	d060      	beq.n	80161e2 <f_open+0x362>
 8016120:	68fb      	ldr	r3, [r7, #12]
 8016122:	68db      	ldr	r3, [r3, #12]
 8016124:	2b00      	cmp	r3, #0
 8016126:	d05c      	beq.n	80161e2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8016128:	68fb      	ldr	r3, [r7, #12]
 801612a:	68da      	ldr	r2, [r3, #12]
 801612c:	68fb      	ldr	r3, [r7, #12]
 801612e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8016130:	693b      	ldr	r3, [r7, #16]
 8016132:	895b      	ldrh	r3, [r3, #10]
 8016134:	025b      	lsls	r3, r3, #9
 8016136:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8016138:	68fb      	ldr	r3, [r7, #12]
 801613a:	689b      	ldr	r3, [r3, #8]
 801613c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	68db      	ldr	r3, [r3, #12]
 8016142:	657b      	str	r3, [r7, #84]	; 0x54
 8016144:	e016      	b.n	8016174 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8016146:	68fb      	ldr	r3, [r7, #12]
 8016148:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801614a:	4618      	mov	r0, r3
 801614c:	f7fe fd1d 	bl	8014b8a <get_fat>
 8016150:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8016152:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016154:	2b01      	cmp	r3, #1
 8016156:	d802      	bhi.n	801615e <f_open+0x2de>
 8016158:	2302      	movs	r3, #2
 801615a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801615e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016164:	d102      	bne.n	801616c <f_open+0x2ec>
 8016166:	2301      	movs	r3, #1
 8016168:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801616c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801616e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016170:	1ad3      	subs	r3, r2, r3
 8016172:	657b      	str	r3, [r7, #84]	; 0x54
 8016174:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016178:	2b00      	cmp	r3, #0
 801617a:	d103      	bne.n	8016184 <f_open+0x304>
 801617c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801617e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016180:	429a      	cmp	r2, r3
 8016182:	d8e0      	bhi.n	8016146 <f_open+0x2c6>
				}
				fp->clust = clst;
 8016184:	68fb      	ldr	r3, [r7, #12]
 8016186:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016188:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801618a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801618e:	2b00      	cmp	r3, #0
 8016190:	d127      	bne.n	80161e2 <f_open+0x362>
 8016192:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016198:	2b00      	cmp	r3, #0
 801619a:	d022      	beq.n	80161e2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801619c:	693b      	ldr	r3, [r7, #16]
 801619e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80161a0:	4618      	mov	r0, r3
 80161a2:	f7fe fcd3 	bl	8014b4c <clust2sect>
 80161a6:	6478      	str	r0, [r7, #68]	; 0x44
 80161a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d103      	bne.n	80161b6 <f_open+0x336>
						res = FR_INT_ERR;
 80161ae:	2302      	movs	r3, #2
 80161b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80161b4:	e015      	b.n	80161e2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80161b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80161b8:	0a5a      	lsrs	r2, r3, #9
 80161ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80161bc:	441a      	add	r2, r3
 80161be:	68fb      	ldr	r3, [r7, #12]
 80161c0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80161c2:	693b      	ldr	r3, [r7, #16]
 80161c4:	7858      	ldrb	r0, [r3, #1]
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80161cc:	68fb      	ldr	r3, [r7, #12]
 80161ce:	6a1a      	ldr	r2, [r3, #32]
 80161d0:	2301      	movs	r3, #1
 80161d2:	f7fe f911 	bl	80143f8 <disk_read>
 80161d6:	4603      	mov	r3, r0
 80161d8:	2b00      	cmp	r3, #0
 80161da:	d002      	beq.n	80161e2 <f_open+0x362>
 80161dc:	2301      	movs	r3, #1
 80161de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80161e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	d002      	beq.n	80161f0 <f_open+0x370>
 80161ea:	68fb      	ldr	r3, [r7, #12]
 80161ec:	2200      	movs	r2, #0
 80161ee:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80161f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80161f4:	4618      	mov	r0, r3
 80161f6:	3760      	adds	r7, #96	; 0x60
 80161f8:	46bd      	mov	sp, r7
 80161fa:	bd80      	pop	{r7, pc}

080161fc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80161fc:	b580      	push	{r7, lr}
 80161fe:	b08c      	sub	sp, #48	; 0x30
 8016200:	af00      	add	r7, sp, #0
 8016202:	60f8      	str	r0, [r7, #12]
 8016204:	60b9      	str	r1, [r7, #8]
 8016206:	607a      	str	r2, [r7, #4]
 8016208:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801620a:	68bb      	ldr	r3, [r7, #8]
 801620c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801620e:	683b      	ldr	r3, [r7, #0]
 8016210:	2200      	movs	r2, #0
 8016212:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8016214:	68fb      	ldr	r3, [r7, #12]
 8016216:	f107 0210 	add.w	r2, r7, #16
 801621a:	4611      	mov	r1, r2
 801621c:	4618      	mov	r0, r3
 801621e:	f7ff fdb3 	bl	8015d88 <validate>
 8016222:	4603      	mov	r3, r0
 8016224:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8016228:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801622c:	2b00      	cmp	r3, #0
 801622e:	d107      	bne.n	8016240 <f_write+0x44>
 8016230:	68fb      	ldr	r3, [r7, #12]
 8016232:	7d5b      	ldrb	r3, [r3, #21]
 8016234:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8016238:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801623c:	2b00      	cmp	r3, #0
 801623e:	d002      	beq.n	8016246 <f_write+0x4a>
 8016240:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016244:	e14b      	b.n	80164de <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8016246:	68fb      	ldr	r3, [r7, #12]
 8016248:	7d1b      	ldrb	r3, [r3, #20]
 801624a:	f003 0302 	and.w	r3, r3, #2
 801624e:	2b00      	cmp	r3, #0
 8016250:	d101      	bne.n	8016256 <f_write+0x5a>
 8016252:	2307      	movs	r3, #7
 8016254:	e143      	b.n	80164de <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8016256:	68fb      	ldr	r3, [r7, #12]
 8016258:	699a      	ldr	r2, [r3, #24]
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	441a      	add	r2, r3
 801625e:	68fb      	ldr	r3, [r7, #12]
 8016260:	699b      	ldr	r3, [r3, #24]
 8016262:	429a      	cmp	r2, r3
 8016264:	f080 812d 	bcs.w	80164c2 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8016268:	68fb      	ldr	r3, [r7, #12]
 801626a:	699b      	ldr	r3, [r3, #24]
 801626c:	43db      	mvns	r3, r3
 801626e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8016270:	e127      	b.n	80164c2 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8016272:	68fb      	ldr	r3, [r7, #12]
 8016274:	699b      	ldr	r3, [r3, #24]
 8016276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801627a:	2b00      	cmp	r3, #0
 801627c:	f040 80e3 	bne.w	8016446 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8016280:	68fb      	ldr	r3, [r7, #12]
 8016282:	699b      	ldr	r3, [r3, #24]
 8016284:	0a5b      	lsrs	r3, r3, #9
 8016286:	693a      	ldr	r2, [r7, #16]
 8016288:	8952      	ldrh	r2, [r2, #10]
 801628a:	3a01      	subs	r2, #1
 801628c:	4013      	ands	r3, r2
 801628e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8016290:	69bb      	ldr	r3, [r7, #24]
 8016292:	2b00      	cmp	r3, #0
 8016294:	d143      	bne.n	801631e <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8016296:	68fb      	ldr	r3, [r7, #12]
 8016298:	699b      	ldr	r3, [r3, #24]
 801629a:	2b00      	cmp	r3, #0
 801629c:	d10c      	bne.n	80162b8 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801629e:	68fb      	ldr	r3, [r7, #12]
 80162a0:	689b      	ldr	r3, [r3, #8]
 80162a2:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80162a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	d11a      	bne.n	80162e0 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80162aa:	68fb      	ldr	r3, [r7, #12]
 80162ac:	2100      	movs	r1, #0
 80162ae:	4618      	mov	r0, r3
 80162b0:	f7fe fe64 	bl	8014f7c <create_chain>
 80162b4:	62b8      	str	r0, [r7, #40]	; 0x28
 80162b6:	e013      	b.n	80162e0 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80162b8:	68fb      	ldr	r3, [r7, #12]
 80162ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80162bc:	2b00      	cmp	r3, #0
 80162be:	d007      	beq.n	80162d0 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80162c0:	68fb      	ldr	r3, [r7, #12]
 80162c2:	699b      	ldr	r3, [r3, #24]
 80162c4:	4619      	mov	r1, r3
 80162c6:	68f8      	ldr	r0, [r7, #12]
 80162c8:	f7fe fef0 	bl	80150ac <clmt_clust>
 80162cc:	62b8      	str	r0, [r7, #40]	; 0x28
 80162ce:	e007      	b.n	80162e0 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80162d0:	68fa      	ldr	r2, [r7, #12]
 80162d2:	68fb      	ldr	r3, [r7, #12]
 80162d4:	69db      	ldr	r3, [r3, #28]
 80162d6:	4619      	mov	r1, r3
 80162d8:	4610      	mov	r0, r2
 80162da:	f7fe fe4f 	bl	8014f7c <create_chain>
 80162de:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80162e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	f000 80f2 	beq.w	80164cc <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80162e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162ea:	2b01      	cmp	r3, #1
 80162ec:	d104      	bne.n	80162f8 <f_write+0xfc>
 80162ee:	68fb      	ldr	r3, [r7, #12]
 80162f0:	2202      	movs	r2, #2
 80162f2:	755a      	strb	r2, [r3, #21]
 80162f4:	2302      	movs	r3, #2
 80162f6:	e0f2      	b.n	80164de <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80162f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80162fe:	d104      	bne.n	801630a <f_write+0x10e>
 8016300:	68fb      	ldr	r3, [r7, #12]
 8016302:	2201      	movs	r2, #1
 8016304:	755a      	strb	r2, [r3, #21]
 8016306:	2301      	movs	r3, #1
 8016308:	e0e9      	b.n	80164de <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 801630a:	68fb      	ldr	r3, [r7, #12]
 801630c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801630e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8016310:	68fb      	ldr	r3, [r7, #12]
 8016312:	689b      	ldr	r3, [r3, #8]
 8016314:	2b00      	cmp	r3, #0
 8016316:	d102      	bne.n	801631e <f_write+0x122>
 8016318:	68fb      	ldr	r3, [r7, #12]
 801631a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801631c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801631e:	68fb      	ldr	r3, [r7, #12]
 8016320:	7d1b      	ldrb	r3, [r3, #20]
 8016322:	b25b      	sxtb	r3, r3
 8016324:	2b00      	cmp	r3, #0
 8016326:	da18      	bge.n	801635a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8016328:	693b      	ldr	r3, [r7, #16]
 801632a:	7858      	ldrb	r0, [r3, #1]
 801632c:	68fb      	ldr	r3, [r7, #12]
 801632e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016332:	68fb      	ldr	r3, [r7, #12]
 8016334:	6a1a      	ldr	r2, [r3, #32]
 8016336:	2301      	movs	r3, #1
 8016338:	f7fe f87e 	bl	8014438 <disk_write>
 801633c:	4603      	mov	r3, r0
 801633e:	2b00      	cmp	r3, #0
 8016340:	d004      	beq.n	801634c <f_write+0x150>
 8016342:	68fb      	ldr	r3, [r7, #12]
 8016344:	2201      	movs	r2, #1
 8016346:	755a      	strb	r2, [r3, #21]
 8016348:	2301      	movs	r3, #1
 801634a:	e0c8      	b.n	80164de <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 801634c:	68fb      	ldr	r3, [r7, #12]
 801634e:	7d1b      	ldrb	r3, [r3, #20]
 8016350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016354:	b2da      	uxtb	r2, r3
 8016356:	68fb      	ldr	r3, [r7, #12]
 8016358:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801635a:	693a      	ldr	r2, [r7, #16]
 801635c:	68fb      	ldr	r3, [r7, #12]
 801635e:	69db      	ldr	r3, [r3, #28]
 8016360:	4619      	mov	r1, r3
 8016362:	4610      	mov	r0, r2
 8016364:	f7fe fbf2 	bl	8014b4c <clust2sect>
 8016368:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801636a:	697b      	ldr	r3, [r7, #20]
 801636c:	2b00      	cmp	r3, #0
 801636e:	d104      	bne.n	801637a <f_write+0x17e>
 8016370:	68fb      	ldr	r3, [r7, #12]
 8016372:	2202      	movs	r2, #2
 8016374:	755a      	strb	r2, [r3, #21]
 8016376:	2302      	movs	r3, #2
 8016378:	e0b1      	b.n	80164de <f_write+0x2e2>
			sect += csect;
 801637a:	697a      	ldr	r2, [r7, #20]
 801637c:	69bb      	ldr	r3, [r7, #24]
 801637e:	4413      	add	r3, r2
 8016380:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	0a5b      	lsrs	r3, r3, #9
 8016386:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8016388:	6a3b      	ldr	r3, [r7, #32]
 801638a:	2b00      	cmp	r3, #0
 801638c:	d03c      	beq.n	8016408 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801638e:	69ba      	ldr	r2, [r7, #24]
 8016390:	6a3b      	ldr	r3, [r7, #32]
 8016392:	4413      	add	r3, r2
 8016394:	693a      	ldr	r2, [r7, #16]
 8016396:	8952      	ldrh	r2, [r2, #10]
 8016398:	4293      	cmp	r3, r2
 801639a:	d905      	bls.n	80163a8 <f_write+0x1ac>
					cc = fs->csize - csect;
 801639c:	693b      	ldr	r3, [r7, #16]
 801639e:	895b      	ldrh	r3, [r3, #10]
 80163a0:	461a      	mov	r2, r3
 80163a2:	69bb      	ldr	r3, [r7, #24]
 80163a4:	1ad3      	subs	r3, r2, r3
 80163a6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80163a8:	693b      	ldr	r3, [r7, #16]
 80163aa:	7858      	ldrb	r0, [r3, #1]
 80163ac:	6a3b      	ldr	r3, [r7, #32]
 80163ae:	697a      	ldr	r2, [r7, #20]
 80163b0:	69f9      	ldr	r1, [r7, #28]
 80163b2:	f7fe f841 	bl	8014438 <disk_write>
 80163b6:	4603      	mov	r3, r0
 80163b8:	2b00      	cmp	r3, #0
 80163ba:	d004      	beq.n	80163c6 <f_write+0x1ca>
 80163bc:	68fb      	ldr	r3, [r7, #12]
 80163be:	2201      	movs	r2, #1
 80163c0:	755a      	strb	r2, [r3, #21]
 80163c2:	2301      	movs	r3, #1
 80163c4:	e08b      	b.n	80164de <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80163c6:	68fb      	ldr	r3, [r7, #12]
 80163c8:	6a1a      	ldr	r2, [r3, #32]
 80163ca:	697b      	ldr	r3, [r7, #20]
 80163cc:	1ad3      	subs	r3, r2, r3
 80163ce:	6a3a      	ldr	r2, [r7, #32]
 80163d0:	429a      	cmp	r2, r3
 80163d2:	d915      	bls.n	8016400 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80163d4:	68fb      	ldr	r3, [r7, #12]
 80163d6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80163da:	68fb      	ldr	r3, [r7, #12]
 80163dc:	6a1a      	ldr	r2, [r3, #32]
 80163de:	697b      	ldr	r3, [r7, #20]
 80163e0:	1ad3      	subs	r3, r2, r3
 80163e2:	025b      	lsls	r3, r3, #9
 80163e4:	69fa      	ldr	r2, [r7, #28]
 80163e6:	4413      	add	r3, r2
 80163e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80163ec:	4619      	mov	r1, r3
 80163ee:	f7fe f8e3 	bl	80145b8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80163f2:	68fb      	ldr	r3, [r7, #12]
 80163f4:	7d1b      	ldrb	r3, [r3, #20]
 80163f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80163fa:	b2da      	uxtb	r2, r3
 80163fc:	68fb      	ldr	r3, [r7, #12]
 80163fe:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8016400:	6a3b      	ldr	r3, [r7, #32]
 8016402:	025b      	lsls	r3, r3, #9
 8016404:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8016406:	e03f      	b.n	8016488 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8016408:	68fb      	ldr	r3, [r7, #12]
 801640a:	6a1b      	ldr	r3, [r3, #32]
 801640c:	697a      	ldr	r2, [r7, #20]
 801640e:	429a      	cmp	r2, r3
 8016410:	d016      	beq.n	8016440 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8016412:	68fb      	ldr	r3, [r7, #12]
 8016414:	699a      	ldr	r2, [r3, #24]
 8016416:	68fb      	ldr	r3, [r7, #12]
 8016418:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801641a:	429a      	cmp	r2, r3
 801641c:	d210      	bcs.n	8016440 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801641e:	693b      	ldr	r3, [r7, #16]
 8016420:	7858      	ldrb	r0, [r3, #1]
 8016422:	68fb      	ldr	r3, [r7, #12]
 8016424:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016428:	2301      	movs	r3, #1
 801642a:	697a      	ldr	r2, [r7, #20]
 801642c:	f7fd ffe4 	bl	80143f8 <disk_read>
 8016430:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8016432:	2b00      	cmp	r3, #0
 8016434:	d004      	beq.n	8016440 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8016436:	68fb      	ldr	r3, [r7, #12]
 8016438:	2201      	movs	r2, #1
 801643a:	755a      	strb	r2, [r3, #21]
 801643c:	2301      	movs	r3, #1
 801643e:	e04e      	b.n	80164de <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8016440:	68fb      	ldr	r3, [r7, #12]
 8016442:	697a      	ldr	r2, [r7, #20]
 8016444:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8016446:	68fb      	ldr	r3, [r7, #12]
 8016448:	699b      	ldr	r3, [r3, #24]
 801644a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801644e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8016452:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8016454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	429a      	cmp	r2, r3
 801645a:	d901      	bls.n	8016460 <f_write+0x264>
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8016460:	68fb      	ldr	r3, [r7, #12]
 8016462:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016466:	68fb      	ldr	r3, [r7, #12]
 8016468:	699b      	ldr	r3, [r3, #24]
 801646a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801646e:	4413      	add	r3, r2
 8016470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016472:	69f9      	ldr	r1, [r7, #28]
 8016474:	4618      	mov	r0, r3
 8016476:	f7fe f89f 	bl	80145b8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801647a:	68fb      	ldr	r3, [r7, #12]
 801647c:	7d1b      	ldrb	r3, [r3, #20]
 801647e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8016482:	b2da      	uxtb	r2, r3
 8016484:	68fb      	ldr	r3, [r7, #12]
 8016486:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8016488:	69fa      	ldr	r2, [r7, #28]
 801648a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801648c:	4413      	add	r3, r2
 801648e:	61fb      	str	r3, [r7, #28]
 8016490:	68fb      	ldr	r3, [r7, #12]
 8016492:	699a      	ldr	r2, [r3, #24]
 8016494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016496:	441a      	add	r2, r3
 8016498:	68fb      	ldr	r3, [r7, #12]
 801649a:	619a      	str	r2, [r3, #24]
 801649c:	68fb      	ldr	r3, [r7, #12]
 801649e:	68da      	ldr	r2, [r3, #12]
 80164a0:	68fb      	ldr	r3, [r7, #12]
 80164a2:	699b      	ldr	r3, [r3, #24]
 80164a4:	429a      	cmp	r2, r3
 80164a6:	bf38      	it	cc
 80164a8:	461a      	movcc	r2, r3
 80164aa:	68fb      	ldr	r3, [r7, #12]
 80164ac:	60da      	str	r2, [r3, #12]
 80164ae:	683b      	ldr	r3, [r7, #0]
 80164b0:	681a      	ldr	r2, [r3, #0]
 80164b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164b4:	441a      	add	r2, r3
 80164b6:	683b      	ldr	r3, [r7, #0]
 80164b8:	601a      	str	r2, [r3, #0]
 80164ba:	687a      	ldr	r2, [r7, #4]
 80164bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164be:	1ad3      	subs	r3, r2, r3
 80164c0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	2b00      	cmp	r3, #0
 80164c6:	f47f aed4 	bne.w	8016272 <f_write+0x76>
 80164ca:	e000      	b.n	80164ce <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80164cc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80164ce:	68fb      	ldr	r3, [r7, #12]
 80164d0:	7d1b      	ldrb	r3, [r3, #20]
 80164d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80164d6:	b2da      	uxtb	r2, r3
 80164d8:	68fb      	ldr	r3, [r7, #12]
 80164da:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80164dc:	2300      	movs	r3, #0
}
 80164de:	4618      	mov	r0, r3
 80164e0:	3730      	adds	r7, #48	; 0x30
 80164e2:	46bd      	mov	sp, r7
 80164e4:	bd80      	pop	{r7, pc}

080164e6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80164e6:	b580      	push	{r7, lr}
 80164e8:	b086      	sub	sp, #24
 80164ea:	af00      	add	r7, sp, #0
 80164ec:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	f107 0208 	add.w	r2, r7, #8
 80164f4:	4611      	mov	r1, r2
 80164f6:	4618      	mov	r0, r3
 80164f8:	f7ff fc46 	bl	8015d88 <validate>
 80164fc:	4603      	mov	r3, r0
 80164fe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8016500:	7dfb      	ldrb	r3, [r7, #23]
 8016502:	2b00      	cmp	r3, #0
 8016504:	d168      	bne.n	80165d8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	7d1b      	ldrb	r3, [r3, #20]
 801650a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801650e:	2b00      	cmp	r3, #0
 8016510:	d062      	beq.n	80165d8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	7d1b      	ldrb	r3, [r3, #20]
 8016516:	b25b      	sxtb	r3, r3
 8016518:	2b00      	cmp	r3, #0
 801651a:	da15      	bge.n	8016548 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801651c:	68bb      	ldr	r3, [r7, #8]
 801651e:	7858      	ldrb	r0, [r3, #1]
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	6a1a      	ldr	r2, [r3, #32]
 801652a:	2301      	movs	r3, #1
 801652c:	f7fd ff84 	bl	8014438 <disk_write>
 8016530:	4603      	mov	r3, r0
 8016532:	2b00      	cmp	r3, #0
 8016534:	d001      	beq.n	801653a <f_sync+0x54>
 8016536:	2301      	movs	r3, #1
 8016538:	e04f      	b.n	80165da <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	7d1b      	ldrb	r3, [r3, #20]
 801653e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016542:	b2da      	uxtb	r2, r3
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8016548:	f7fb fcde 	bl	8011f08 <get_fattime>
 801654c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801654e:	68ba      	ldr	r2, [r7, #8]
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016554:	4619      	mov	r1, r3
 8016556:	4610      	mov	r0, r2
 8016558:	f7fe fa5c 	bl	8014a14 <move_window>
 801655c:	4603      	mov	r3, r0
 801655e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8016560:	7dfb      	ldrb	r3, [r7, #23]
 8016562:	2b00      	cmp	r3, #0
 8016564:	d138      	bne.n	80165d8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801656a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801656c:	68fb      	ldr	r3, [r7, #12]
 801656e:	330b      	adds	r3, #11
 8016570:	781a      	ldrb	r2, [r3, #0]
 8016572:	68fb      	ldr	r3, [r7, #12]
 8016574:	330b      	adds	r3, #11
 8016576:	f042 0220 	orr.w	r2, r2, #32
 801657a:	b2d2      	uxtb	r2, r2
 801657c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	6818      	ldr	r0, [r3, #0]
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	689b      	ldr	r3, [r3, #8]
 8016586:	461a      	mov	r2, r3
 8016588:	68f9      	ldr	r1, [r7, #12]
 801658a:	f7fe ff69 	bl	8015460 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801658e:	68fb      	ldr	r3, [r7, #12]
 8016590:	f103 021c 	add.w	r2, r3, #28
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	68db      	ldr	r3, [r3, #12]
 8016598:	4619      	mov	r1, r3
 801659a:	4610      	mov	r0, r2
 801659c:	f7fd ffe0 	bl	8014560 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80165a0:	68fb      	ldr	r3, [r7, #12]
 80165a2:	3316      	adds	r3, #22
 80165a4:	6939      	ldr	r1, [r7, #16]
 80165a6:	4618      	mov	r0, r3
 80165a8:	f7fd ffda 	bl	8014560 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80165ac:	68fb      	ldr	r3, [r7, #12]
 80165ae:	3312      	adds	r3, #18
 80165b0:	2100      	movs	r1, #0
 80165b2:	4618      	mov	r0, r3
 80165b4:	f7fd ffb9 	bl	801452a <st_word>
					fs->wflag = 1;
 80165b8:	68bb      	ldr	r3, [r7, #8]
 80165ba:	2201      	movs	r2, #1
 80165bc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80165be:	68bb      	ldr	r3, [r7, #8]
 80165c0:	4618      	mov	r0, r3
 80165c2:	f7fe fa55 	bl	8014a70 <sync_fs>
 80165c6:	4603      	mov	r3, r0
 80165c8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	7d1b      	ldrb	r3, [r3, #20]
 80165ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80165d2:	b2da      	uxtb	r2, r3
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80165d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80165da:	4618      	mov	r0, r3
 80165dc:	3718      	adds	r7, #24
 80165de:	46bd      	mov	sp, r7
 80165e0:	bd80      	pop	{r7, pc}

080165e2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80165e2:	b580      	push	{r7, lr}
 80165e4:	b084      	sub	sp, #16
 80165e6:	af00      	add	r7, sp, #0
 80165e8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80165ea:	6878      	ldr	r0, [r7, #4]
 80165ec:	f7ff ff7b 	bl	80164e6 <f_sync>
 80165f0:	4603      	mov	r3, r0
 80165f2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80165f4:	7bfb      	ldrb	r3, [r7, #15]
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d118      	bne.n	801662c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	f107 0208 	add.w	r2, r7, #8
 8016600:	4611      	mov	r1, r2
 8016602:	4618      	mov	r0, r3
 8016604:	f7ff fbc0 	bl	8015d88 <validate>
 8016608:	4603      	mov	r3, r0
 801660a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801660c:	7bfb      	ldrb	r3, [r7, #15]
 801660e:	2b00      	cmp	r3, #0
 8016610:	d10c      	bne.n	801662c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	691b      	ldr	r3, [r3, #16]
 8016616:	4618      	mov	r0, r3
 8016618:	f7fe f958 	bl	80148cc <dec_lock>
 801661c:	4603      	mov	r3, r0
 801661e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8016620:	7bfb      	ldrb	r3, [r7, #15]
 8016622:	2b00      	cmp	r3, #0
 8016624:	d102      	bne.n	801662c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	2200      	movs	r2, #0
 801662a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801662c:	7bfb      	ldrb	r3, [r7, #15]
}
 801662e:	4618      	mov	r0, r3
 8016630:	3710      	adds	r7, #16
 8016632:	46bd      	mov	sp, r7
 8016634:	bd80      	pop	{r7, pc}
	...

08016638 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8016638:	b480      	push	{r7}
 801663a:	b087      	sub	sp, #28
 801663c:	af00      	add	r7, sp, #0
 801663e:	60f8      	str	r0, [r7, #12]
 8016640:	60b9      	str	r1, [r7, #8]
 8016642:	4613      	mov	r3, r2
 8016644:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8016646:	2301      	movs	r3, #1
 8016648:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801664a:	2300      	movs	r3, #0
 801664c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801664e:	4b1f      	ldr	r3, [pc, #124]	; (80166cc <FATFS_LinkDriverEx+0x94>)
 8016650:	7a5b      	ldrb	r3, [r3, #9]
 8016652:	b2db      	uxtb	r3, r3
 8016654:	2b00      	cmp	r3, #0
 8016656:	d131      	bne.n	80166bc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8016658:	4b1c      	ldr	r3, [pc, #112]	; (80166cc <FATFS_LinkDriverEx+0x94>)
 801665a:	7a5b      	ldrb	r3, [r3, #9]
 801665c:	b2db      	uxtb	r3, r3
 801665e:	461a      	mov	r2, r3
 8016660:	4b1a      	ldr	r3, [pc, #104]	; (80166cc <FATFS_LinkDriverEx+0x94>)
 8016662:	2100      	movs	r1, #0
 8016664:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8016666:	4b19      	ldr	r3, [pc, #100]	; (80166cc <FATFS_LinkDriverEx+0x94>)
 8016668:	7a5b      	ldrb	r3, [r3, #9]
 801666a:	b2db      	uxtb	r3, r3
 801666c:	4a17      	ldr	r2, [pc, #92]	; (80166cc <FATFS_LinkDriverEx+0x94>)
 801666e:	009b      	lsls	r3, r3, #2
 8016670:	4413      	add	r3, r2
 8016672:	68fa      	ldr	r2, [r7, #12]
 8016674:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8016676:	4b15      	ldr	r3, [pc, #84]	; (80166cc <FATFS_LinkDriverEx+0x94>)
 8016678:	7a5b      	ldrb	r3, [r3, #9]
 801667a:	b2db      	uxtb	r3, r3
 801667c:	461a      	mov	r2, r3
 801667e:	4b13      	ldr	r3, [pc, #76]	; (80166cc <FATFS_LinkDriverEx+0x94>)
 8016680:	4413      	add	r3, r2
 8016682:	79fa      	ldrb	r2, [r7, #7]
 8016684:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8016686:	4b11      	ldr	r3, [pc, #68]	; (80166cc <FATFS_LinkDriverEx+0x94>)
 8016688:	7a5b      	ldrb	r3, [r3, #9]
 801668a:	b2db      	uxtb	r3, r3
 801668c:	1c5a      	adds	r2, r3, #1
 801668e:	b2d1      	uxtb	r1, r2
 8016690:	4a0e      	ldr	r2, [pc, #56]	; (80166cc <FATFS_LinkDriverEx+0x94>)
 8016692:	7251      	strb	r1, [r2, #9]
 8016694:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8016696:	7dbb      	ldrb	r3, [r7, #22]
 8016698:	3330      	adds	r3, #48	; 0x30
 801669a:	b2da      	uxtb	r2, r3
 801669c:	68bb      	ldr	r3, [r7, #8]
 801669e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80166a0:	68bb      	ldr	r3, [r7, #8]
 80166a2:	3301      	adds	r3, #1
 80166a4:	223a      	movs	r2, #58	; 0x3a
 80166a6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80166a8:	68bb      	ldr	r3, [r7, #8]
 80166aa:	3302      	adds	r3, #2
 80166ac:	222f      	movs	r2, #47	; 0x2f
 80166ae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80166b0:	68bb      	ldr	r3, [r7, #8]
 80166b2:	3303      	adds	r3, #3
 80166b4:	2200      	movs	r2, #0
 80166b6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80166b8:	2300      	movs	r3, #0
 80166ba:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80166bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80166be:	4618      	mov	r0, r3
 80166c0:	371c      	adds	r7, #28
 80166c2:	46bd      	mov	sp, r7
 80166c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166c8:	4770      	bx	lr
 80166ca:	bf00      	nop
 80166cc:	20000ea8 	.word	0x20000ea8

080166d0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80166d0:	b580      	push	{r7, lr}
 80166d2:	b082      	sub	sp, #8
 80166d4:	af00      	add	r7, sp, #0
 80166d6:	6078      	str	r0, [r7, #4]
 80166d8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80166da:	2200      	movs	r2, #0
 80166dc:	6839      	ldr	r1, [r7, #0]
 80166de:	6878      	ldr	r0, [r7, #4]
 80166e0:	f7ff ffaa 	bl	8016638 <FATFS_LinkDriverEx>
 80166e4:	4603      	mov	r3, r0
}
 80166e6:	4618      	mov	r0, r3
 80166e8:	3708      	adds	r7, #8
 80166ea:	46bd      	mov	sp, r7
 80166ec:	bd80      	pop	{r7, pc}
	...

080166f0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80166f0:	b580      	push	{r7, lr}
 80166f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80166f4:	2201      	movs	r2, #1
 80166f6:	490e      	ldr	r1, [pc, #56]	; (8016730 <MX_USB_HOST_Init+0x40>)
 80166f8:	480e      	ldr	r0, [pc, #56]	; (8016734 <MX_USB_HOST_Init+0x44>)
 80166fa:	f7fc f9f1 	bl	8012ae0 <USBH_Init>
 80166fe:	4603      	mov	r3, r0
 8016700:	2b00      	cmp	r3, #0
 8016702:	d001      	beq.n	8016708 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8016704:	f7eb fd0b 	bl	800211e <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8016708:	490b      	ldr	r1, [pc, #44]	; (8016738 <MX_USB_HOST_Init+0x48>)
 801670a:	480a      	ldr	r0, [pc, #40]	; (8016734 <MX_USB_HOST_Init+0x44>)
 801670c:	f7fc fa95 	bl	8012c3a <USBH_RegisterClass>
 8016710:	4603      	mov	r3, r0
 8016712:	2b00      	cmp	r3, #0
 8016714:	d001      	beq.n	801671a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8016716:	f7eb fd02 	bl	800211e <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801671a:	4806      	ldr	r0, [pc, #24]	; (8016734 <MX_USB_HOST_Init+0x44>)
 801671c:	f7fc fb19 	bl	8012d52 <USBH_Start>
 8016720:	4603      	mov	r3, r0
 8016722:	2b00      	cmp	r3, #0
 8016724:	d001      	beq.n	801672a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8016726:	f7eb fcfa 	bl	800211e <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801672a:	bf00      	nop
 801672c:	bd80      	pop	{r7, pc}
 801672e:	bf00      	nop
 8016730:	08016751 	.word	0x08016751
 8016734:	20000eb4 	.word	0x20000eb4
 8016738:	20000024 	.word	0x20000024

0801673c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 801673c:	b580      	push	{r7, lr}
 801673e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8016740:	4802      	ldr	r0, [pc, #8]	; (801674c <MX_USB_HOST_Process+0x10>)
 8016742:	f7fc fb17 	bl	8012d74 <USBH_Process>
}
 8016746:	bf00      	nop
 8016748:	bd80      	pop	{r7, pc}
 801674a:	bf00      	nop
 801674c:	20000eb4 	.word	0x20000eb4

08016750 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8016750:	b480      	push	{r7}
 8016752:	b083      	sub	sp, #12
 8016754:	af00      	add	r7, sp, #0
 8016756:	6078      	str	r0, [r7, #4]
 8016758:	460b      	mov	r3, r1
 801675a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801675c:	78fb      	ldrb	r3, [r7, #3]
 801675e:	3b01      	subs	r3, #1
 8016760:	2b04      	cmp	r3, #4
 8016762:	d819      	bhi.n	8016798 <USBH_UserProcess+0x48>
 8016764:	a201      	add	r2, pc, #4	; (adr r2, 801676c <USBH_UserProcess+0x1c>)
 8016766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801676a:	bf00      	nop
 801676c:	08016799 	.word	0x08016799
 8016770:	08016789 	.word	0x08016789
 8016774:	08016799 	.word	0x08016799
 8016778:	08016791 	.word	0x08016791
 801677c:	08016781 	.word	0x08016781
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8016780:	4b09      	ldr	r3, [pc, #36]	; (80167a8 <USBH_UserProcess+0x58>)
 8016782:	2203      	movs	r2, #3
 8016784:	701a      	strb	r2, [r3, #0]
  break;
 8016786:	e008      	b.n	801679a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8016788:	4b07      	ldr	r3, [pc, #28]	; (80167a8 <USBH_UserProcess+0x58>)
 801678a:	2202      	movs	r2, #2
 801678c:	701a      	strb	r2, [r3, #0]
  break;
 801678e:	e004      	b.n	801679a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8016790:	4b05      	ldr	r3, [pc, #20]	; (80167a8 <USBH_UserProcess+0x58>)
 8016792:	2201      	movs	r2, #1
 8016794:	701a      	strb	r2, [r3, #0]
  break;
 8016796:	e000      	b.n	801679a <USBH_UserProcess+0x4a>

  default:
  break;
 8016798:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801679a:	bf00      	nop
 801679c:	370c      	adds	r7, #12
 801679e:	46bd      	mov	sp, r7
 80167a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167a4:	4770      	bx	lr
 80167a6:	bf00      	nop
 80167a8:	2000128c 	.word	0x2000128c

080167ac <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80167ac:	b580      	push	{r7, lr}
 80167ae:	b08a      	sub	sp, #40	; 0x28
 80167b0:	af00      	add	r7, sp, #0
 80167b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80167b4:	f107 0314 	add.w	r3, r7, #20
 80167b8:	2200      	movs	r2, #0
 80167ba:	601a      	str	r2, [r3, #0]
 80167bc:	605a      	str	r2, [r3, #4]
 80167be:	609a      	str	r2, [r3, #8]
 80167c0:	60da      	str	r2, [r3, #12]
 80167c2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	681b      	ldr	r3, [r3, #0]
 80167c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80167cc:	d13c      	bne.n	8016848 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80167ce:	4b20      	ldr	r3, [pc, #128]	; (8016850 <HAL_HCD_MspInit+0xa4>)
 80167d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80167d2:	4a1f      	ldr	r2, [pc, #124]	; (8016850 <HAL_HCD_MspInit+0xa4>)
 80167d4:	f043 0301 	orr.w	r3, r3, #1
 80167d8:	6313      	str	r3, [r2, #48]	; 0x30
 80167da:	4b1d      	ldr	r3, [pc, #116]	; (8016850 <HAL_HCD_MspInit+0xa4>)
 80167dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80167de:	f003 0301 	and.w	r3, r3, #1
 80167e2:	613b      	str	r3, [r7, #16]
 80167e4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80167e6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80167ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80167ec:	2302      	movs	r3, #2
 80167ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80167f0:	2300      	movs	r3, #0
 80167f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80167f4:	2303      	movs	r3, #3
 80167f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80167f8:	230a      	movs	r3, #10
 80167fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80167fc:	f107 0314 	add.w	r3, r7, #20
 8016800:	4619      	mov	r1, r3
 8016802:	4814      	ldr	r0, [pc, #80]	; (8016854 <HAL_HCD_MspInit+0xa8>)
 8016804:	f7f1 fa40 	bl	8007c88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8016808:	4b11      	ldr	r3, [pc, #68]	; (8016850 <HAL_HCD_MspInit+0xa4>)
 801680a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801680c:	4a10      	ldr	r2, [pc, #64]	; (8016850 <HAL_HCD_MspInit+0xa4>)
 801680e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016812:	6353      	str	r3, [r2, #52]	; 0x34
 8016814:	4b0e      	ldr	r3, [pc, #56]	; (8016850 <HAL_HCD_MspInit+0xa4>)
 8016816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801681c:	60fb      	str	r3, [r7, #12]
 801681e:	68fb      	ldr	r3, [r7, #12]
 8016820:	4b0b      	ldr	r3, [pc, #44]	; (8016850 <HAL_HCD_MspInit+0xa4>)
 8016822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016824:	4a0a      	ldr	r2, [pc, #40]	; (8016850 <HAL_HCD_MspInit+0xa4>)
 8016826:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801682a:	6453      	str	r3, [r2, #68]	; 0x44
 801682c:	4b08      	ldr	r3, [pc, #32]	; (8016850 <HAL_HCD_MspInit+0xa4>)
 801682e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016830:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016834:	60bb      	str	r3, [r7, #8]
 8016836:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8016838:	2200      	movs	r2, #0
 801683a:	2100      	movs	r1, #0
 801683c:	2043      	movs	r0, #67	; 0x43
 801683e:	f7ee fbca 	bl	8004fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8016842:	2043      	movs	r0, #67	; 0x43
 8016844:	f7ee fbe3 	bl	800500e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8016848:	bf00      	nop
 801684a:	3728      	adds	r7, #40	; 0x28
 801684c:	46bd      	mov	sp, r7
 801684e:	bd80      	pop	{r7, pc}
 8016850:	40023800 	.word	0x40023800
 8016854:	40020000 	.word	0x40020000

08016858 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8016858:	b580      	push	{r7, lr}
 801685a:	b082      	sub	sp, #8
 801685c:	af00      	add	r7, sp, #0
 801685e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8016866:	4618      	mov	r0, r3
 8016868:	f7fc fe63 	bl	8013532 <USBH_LL_IncTimer>
}
 801686c:	bf00      	nop
 801686e:	3708      	adds	r7, #8
 8016870:	46bd      	mov	sp, r7
 8016872:	bd80      	pop	{r7, pc}

08016874 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8016874:	b580      	push	{r7, lr}
 8016876:	b082      	sub	sp, #8
 8016878:	af00      	add	r7, sp, #0
 801687a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8016882:	4618      	mov	r0, r3
 8016884:	f7fc fe9b 	bl	80135be <USBH_LL_Connect>
}
 8016888:	bf00      	nop
 801688a:	3708      	adds	r7, #8
 801688c:	46bd      	mov	sp, r7
 801688e:	bd80      	pop	{r7, pc}

08016890 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8016890:	b580      	push	{r7, lr}
 8016892:	b082      	sub	sp, #8
 8016894:	af00      	add	r7, sp, #0
 8016896:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801689e:	4618      	mov	r0, r3
 80168a0:	f7fc fea4 	bl	80135ec <USBH_LL_Disconnect>
}
 80168a4:	bf00      	nop
 80168a6:	3708      	adds	r7, #8
 80168a8:	46bd      	mov	sp, r7
 80168aa:	bd80      	pop	{r7, pc}

080168ac <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80168ac:	b480      	push	{r7}
 80168ae:	b083      	sub	sp, #12
 80168b0:	af00      	add	r7, sp, #0
 80168b2:	6078      	str	r0, [r7, #4]
 80168b4:	460b      	mov	r3, r1
 80168b6:	70fb      	strb	r3, [r7, #3]
 80168b8:	4613      	mov	r3, r2
 80168ba:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80168bc:	bf00      	nop
 80168be:	370c      	adds	r7, #12
 80168c0:	46bd      	mov	sp, r7
 80168c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168c6:	4770      	bx	lr

080168c8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80168c8:	b580      	push	{r7, lr}
 80168ca:	b082      	sub	sp, #8
 80168cc:	af00      	add	r7, sp, #0
 80168ce:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80168d6:	4618      	mov	r0, r3
 80168d8:	f7fc fe55 	bl	8013586 <USBH_LL_PortEnabled>
}
 80168dc:	bf00      	nop
 80168de:	3708      	adds	r7, #8
 80168e0:	46bd      	mov	sp, r7
 80168e2:	bd80      	pop	{r7, pc}

080168e4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80168e4:	b580      	push	{r7, lr}
 80168e6:	b082      	sub	sp, #8
 80168e8:	af00      	add	r7, sp, #0
 80168ea:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80168f2:	4618      	mov	r0, r3
 80168f4:	f7fc fe55 	bl	80135a2 <USBH_LL_PortDisabled>
}
 80168f8:	bf00      	nop
 80168fa:	3708      	adds	r7, #8
 80168fc:	46bd      	mov	sp, r7
 80168fe:	bd80      	pop	{r7, pc}

08016900 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8016900:	b580      	push	{r7, lr}
 8016902:	b082      	sub	sp, #8
 8016904:	af00      	add	r7, sp, #0
 8016906:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801690e:	2b01      	cmp	r3, #1
 8016910:	d12a      	bne.n	8016968 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8016912:	4a18      	ldr	r2, [pc, #96]	; (8016974 <USBH_LL_Init+0x74>)
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	4a15      	ldr	r2, [pc, #84]	; (8016974 <USBH_LL_Init+0x74>)
 801691e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8016922:	4b14      	ldr	r3, [pc, #80]	; (8016974 <USBH_LL_Init+0x74>)
 8016924:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8016928:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 801692a:	4b12      	ldr	r3, [pc, #72]	; (8016974 <USBH_LL_Init+0x74>)
 801692c:	2208      	movs	r2, #8
 801692e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8016930:	4b10      	ldr	r3, [pc, #64]	; (8016974 <USBH_LL_Init+0x74>)
 8016932:	2201      	movs	r2, #1
 8016934:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8016936:	4b0f      	ldr	r3, [pc, #60]	; (8016974 <USBH_LL_Init+0x74>)
 8016938:	2200      	movs	r2, #0
 801693a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 801693c:	4b0d      	ldr	r3, [pc, #52]	; (8016974 <USBH_LL_Init+0x74>)
 801693e:	2202      	movs	r2, #2
 8016940:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8016942:	4b0c      	ldr	r3, [pc, #48]	; (8016974 <USBH_LL_Init+0x74>)
 8016944:	2200      	movs	r2, #0
 8016946:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8016948:	480a      	ldr	r0, [pc, #40]	; (8016974 <USBH_LL_Init+0x74>)
 801694a:	f7f1 fc9f 	bl	800828c <HAL_HCD_Init>
 801694e:	4603      	mov	r3, r0
 8016950:	2b00      	cmp	r3, #0
 8016952:	d001      	beq.n	8016958 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8016954:	f7eb fbe3 	bl	800211e <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8016958:	4806      	ldr	r0, [pc, #24]	; (8016974 <USBH_LL_Init+0x74>)
 801695a:	f7f2 f882 	bl	8008a62 <HAL_HCD_GetCurrentFrame>
 801695e:	4603      	mov	r3, r0
 8016960:	4619      	mov	r1, r3
 8016962:	6878      	ldr	r0, [r7, #4]
 8016964:	f7fc fdd6 	bl	8013514 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8016968:	2300      	movs	r3, #0
}
 801696a:	4618      	mov	r0, r3
 801696c:	3708      	adds	r7, #8
 801696e:	46bd      	mov	sp, r7
 8016970:	bd80      	pop	{r7, pc}
 8016972:	bf00      	nop
 8016974:	20001290 	.word	0x20001290

08016978 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8016978:	b580      	push	{r7, lr}
 801697a:	b084      	sub	sp, #16
 801697c:	af00      	add	r7, sp, #0
 801697e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016980:	2300      	movs	r3, #0
 8016982:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8016984:	2300      	movs	r3, #0
 8016986:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801698e:	4618      	mov	r0, r3
 8016990:	f7f1 fff1 	bl	8008976 <HAL_HCD_Start>
 8016994:	4603      	mov	r3, r0
 8016996:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8016998:	7bfb      	ldrb	r3, [r7, #15]
 801699a:	4618      	mov	r0, r3
 801699c:	f000 f95c 	bl	8016c58 <USBH_Get_USB_Status>
 80169a0:	4603      	mov	r3, r0
 80169a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80169a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80169a6:	4618      	mov	r0, r3
 80169a8:	3710      	adds	r7, #16
 80169aa:	46bd      	mov	sp, r7
 80169ac:	bd80      	pop	{r7, pc}

080169ae <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80169ae:	b580      	push	{r7, lr}
 80169b0:	b084      	sub	sp, #16
 80169b2:	af00      	add	r7, sp, #0
 80169b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80169b6:	2300      	movs	r3, #0
 80169b8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80169ba:	2300      	movs	r3, #0
 80169bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80169c4:	4618      	mov	r0, r3
 80169c6:	f7f1 fff9 	bl	80089bc <HAL_HCD_Stop>
 80169ca:	4603      	mov	r3, r0
 80169cc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80169ce:	7bfb      	ldrb	r3, [r7, #15]
 80169d0:	4618      	mov	r0, r3
 80169d2:	f000 f941 	bl	8016c58 <USBH_Get_USB_Status>
 80169d6:	4603      	mov	r3, r0
 80169d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80169da:	7bbb      	ldrb	r3, [r7, #14]
}
 80169dc:	4618      	mov	r0, r3
 80169de:	3710      	adds	r7, #16
 80169e0:	46bd      	mov	sp, r7
 80169e2:	bd80      	pop	{r7, pc}

080169e4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80169e4:	b580      	push	{r7, lr}
 80169e6:	b084      	sub	sp, #16
 80169e8:	af00      	add	r7, sp, #0
 80169ea:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80169ec:	2301      	movs	r3, #1
 80169ee:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80169f6:	4618      	mov	r0, r3
 80169f8:	f7f2 f841 	bl	8008a7e <HAL_HCD_GetCurrentSpeed>
 80169fc:	4603      	mov	r3, r0
 80169fe:	2b02      	cmp	r3, #2
 8016a00:	d00c      	beq.n	8016a1c <USBH_LL_GetSpeed+0x38>
 8016a02:	2b02      	cmp	r3, #2
 8016a04:	d80d      	bhi.n	8016a22 <USBH_LL_GetSpeed+0x3e>
 8016a06:	2b00      	cmp	r3, #0
 8016a08:	d002      	beq.n	8016a10 <USBH_LL_GetSpeed+0x2c>
 8016a0a:	2b01      	cmp	r3, #1
 8016a0c:	d003      	beq.n	8016a16 <USBH_LL_GetSpeed+0x32>
 8016a0e:	e008      	b.n	8016a22 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8016a10:	2300      	movs	r3, #0
 8016a12:	73fb      	strb	r3, [r7, #15]
    break;
 8016a14:	e008      	b.n	8016a28 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8016a16:	2301      	movs	r3, #1
 8016a18:	73fb      	strb	r3, [r7, #15]
    break;
 8016a1a:	e005      	b.n	8016a28 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8016a1c:	2302      	movs	r3, #2
 8016a1e:	73fb      	strb	r3, [r7, #15]
    break;
 8016a20:	e002      	b.n	8016a28 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8016a22:	2301      	movs	r3, #1
 8016a24:	73fb      	strb	r3, [r7, #15]
    break;
 8016a26:	bf00      	nop
  }
  return  speed;
 8016a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8016a2a:	4618      	mov	r0, r3
 8016a2c:	3710      	adds	r7, #16
 8016a2e:	46bd      	mov	sp, r7
 8016a30:	bd80      	pop	{r7, pc}

08016a32 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8016a32:	b580      	push	{r7, lr}
 8016a34:	b084      	sub	sp, #16
 8016a36:	af00      	add	r7, sp, #0
 8016a38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a3a:	2300      	movs	r3, #0
 8016a3c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8016a3e:	2300      	movs	r3, #0
 8016a40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8016a48:	4618      	mov	r0, r3
 8016a4a:	f7f1 ffd4 	bl	80089f6 <HAL_HCD_ResetPort>
 8016a4e:	4603      	mov	r3, r0
 8016a50:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8016a52:	7bfb      	ldrb	r3, [r7, #15]
 8016a54:	4618      	mov	r0, r3
 8016a56:	f000 f8ff 	bl	8016c58 <USBH_Get_USB_Status>
 8016a5a:	4603      	mov	r3, r0
 8016a5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016a5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8016a60:	4618      	mov	r0, r3
 8016a62:	3710      	adds	r7, #16
 8016a64:	46bd      	mov	sp, r7
 8016a66:	bd80      	pop	{r7, pc}

08016a68 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8016a68:	b580      	push	{r7, lr}
 8016a6a:	b082      	sub	sp, #8
 8016a6c:	af00      	add	r7, sp, #0
 8016a6e:	6078      	str	r0, [r7, #4]
 8016a70:	460b      	mov	r3, r1
 8016a72:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8016a7a:	78fa      	ldrb	r2, [r7, #3]
 8016a7c:	4611      	mov	r1, r2
 8016a7e:	4618      	mov	r0, r3
 8016a80:	f7f1 ffdb 	bl	8008a3a <HAL_HCD_HC_GetXferCount>
 8016a84:	4603      	mov	r3, r0
}
 8016a86:	4618      	mov	r0, r3
 8016a88:	3708      	adds	r7, #8
 8016a8a:	46bd      	mov	sp, r7
 8016a8c:	bd80      	pop	{r7, pc}

08016a8e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8016a8e:	b590      	push	{r4, r7, lr}
 8016a90:	b089      	sub	sp, #36	; 0x24
 8016a92:	af04      	add	r7, sp, #16
 8016a94:	6078      	str	r0, [r7, #4]
 8016a96:	4608      	mov	r0, r1
 8016a98:	4611      	mov	r1, r2
 8016a9a:	461a      	mov	r2, r3
 8016a9c:	4603      	mov	r3, r0
 8016a9e:	70fb      	strb	r3, [r7, #3]
 8016aa0:	460b      	mov	r3, r1
 8016aa2:	70bb      	strb	r3, [r7, #2]
 8016aa4:	4613      	mov	r3, r2
 8016aa6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016aa8:	2300      	movs	r3, #0
 8016aaa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8016aac:	2300      	movs	r3, #0
 8016aae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8016ab6:	787c      	ldrb	r4, [r7, #1]
 8016ab8:	78ba      	ldrb	r2, [r7, #2]
 8016aba:	78f9      	ldrb	r1, [r7, #3]
 8016abc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016abe:	9302      	str	r3, [sp, #8]
 8016ac0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016ac4:	9301      	str	r3, [sp, #4]
 8016ac6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016aca:	9300      	str	r3, [sp, #0]
 8016acc:	4623      	mov	r3, r4
 8016ace:	f7f1 fc3f 	bl	8008350 <HAL_HCD_HC_Init>
 8016ad2:	4603      	mov	r3, r0
 8016ad4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8016ad6:	7bfb      	ldrb	r3, [r7, #15]
 8016ad8:	4618      	mov	r0, r3
 8016ada:	f000 f8bd 	bl	8016c58 <USBH_Get_USB_Status>
 8016ade:	4603      	mov	r3, r0
 8016ae0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016ae2:	7bbb      	ldrb	r3, [r7, #14]
}
 8016ae4:	4618      	mov	r0, r3
 8016ae6:	3714      	adds	r7, #20
 8016ae8:	46bd      	mov	sp, r7
 8016aea:	bd90      	pop	{r4, r7, pc}

08016aec <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8016aec:	b580      	push	{r7, lr}
 8016aee:	b084      	sub	sp, #16
 8016af0:	af00      	add	r7, sp, #0
 8016af2:	6078      	str	r0, [r7, #4]
 8016af4:	460b      	mov	r3, r1
 8016af6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016af8:	2300      	movs	r3, #0
 8016afa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8016afc:	2300      	movs	r3, #0
 8016afe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8016b06:	78fa      	ldrb	r2, [r7, #3]
 8016b08:	4611      	mov	r1, r2
 8016b0a:	4618      	mov	r0, r3
 8016b0c:	f7f1 fcaf 	bl	800846e <HAL_HCD_HC_Halt>
 8016b10:	4603      	mov	r3, r0
 8016b12:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8016b14:	7bfb      	ldrb	r3, [r7, #15]
 8016b16:	4618      	mov	r0, r3
 8016b18:	f000 f89e 	bl	8016c58 <USBH_Get_USB_Status>
 8016b1c:	4603      	mov	r3, r0
 8016b1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016b20:	7bbb      	ldrb	r3, [r7, #14]
}
 8016b22:	4618      	mov	r0, r3
 8016b24:	3710      	adds	r7, #16
 8016b26:	46bd      	mov	sp, r7
 8016b28:	bd80      	pop	{r7, pc}

08016b2a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8016b2a:	b590      	push	{r4, r7, lr}
 8016b2c:	b089      	sub	sp, #36	; 0x24
 8016b2e:	af04      	add	r7, sp, #16
 8016b30:	6078      	str	r0, [r7, #4]
 8016b32:	4608      	mov	r0, r1
 8016b34:	4611      	mov	r1, r2
 8016b36:	461a      	mov	r2, r3
 8016b38:	4603      	mov	r3, r0
 8016b3a:	70fb      	strb	r3, [r7, #3]
 8016b3c:	460b      	mov	r3, r1
 8016b3e:	70bb      	strb	r3, [r7, #2]
 8016b40:	4613      	mov	r3, r2
 8016b42:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016b44:	2300      	movs	r3, #0
 8016b46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8016b48:	2300      	movs	r3, #0
 8016b4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8016b52:	787c      	ldrb	r4, [r7, #1]
 8016b54:	78ba      	ldrb	r2, [r7, #2]
 8016b56:	78f9      	ldrb	r1, [r7, #3]
 8016b58:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8016b5c:	9303      	str	r3, [sp, #12]
 8016b5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016b60:	9302      	str	r3, [sp, #8]
 8016b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b64:	9301      	str	r3, [sp, #4]
 8016b66:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016b6a:	9300      	str	r3, [sp, #0]
 8016b6c:	4623      	mov	r3, r4
 8016b6e:	f7f1 fca1 	bl	80084b4 <HAL_HCD_HC_SubmitRequest>
 8016b72:	4603      	mov	r3, r0
 8016b74:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8016b76:	7bfb      	ldrb	r3, [r7, #15]
 8016b78:	4618      	mov	r0, r3
 8016b7a:	f000 f86d 	bl	8016c58 <USBH_Get_USB_Status>
 8016b7e:	4603      	mov	r3, r0
 8016b80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016b82:	7bbb      	ldrb	r3, [r7, #14]
}
 8016b84:	4618      	mov	r0, r3
 8016b86:	3714      	adds	r7, #20
 8016b88:	46bd      	mov	sp, r7
 8016b8a:	bd90      	pop	{r4, r7, pc}

08016b8c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8016b8c:	b580      	push	{r7, lr}
 8016b8e:	b082      	sub	sp, #8
 8016b90:	af00      	add	r7, sp, #0
 8016b92:	6078      	str	r0, [r7, #4]
 8016b94:	460b      	mov	r3, r1
 8016b96:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8016b9e:	78fa      	ldrb	r2, [r7, #3]
 8016ba0:	4611      	mov	r1, r2
 8016ba2:	4618      	mov	r0, r3
 8016ba4:	f7f1 ff35 	bl	8008a12 <HAL_HCD_HC_GetURBState>
 8016ba8:	4603      	mov	r3, r0
}
 8016baa:	4618      	mov	r0, r3
 8016bac:	3708      	adds	r7, #8
 8016bae:	46bd      	mov	sp, r7
 8016bb0:	bd80      	pop	{r7, pc}

08016bb2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8016bb2:	b580      	push	{r7, lr}
 8016bb4:	b082      	sub	sp, #8
 8016bb6:	af00      	add	r7, sp, #0
 8016bb8:	6078      	str	r0, [r7, #4]
 8016bba:	460b      	mov	r3, r1
 8016bbc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8016bc4:	2b01      	cmp	r3, #1
 8016bc6:	d103      	bne.n	8016bd0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8016bc8:	78fb      	ldrb	r3, [r7, #3]
 8016bca:	4618      	mov	r0, r3
 8016bcc:	f000 f870 	bl	8016cb0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8016bd0:	20c8      	movs	r0, #200	; 0xc8
 8016bd2:	f7ed fe4d 	bl	8004870 <HAL_Delay>
  return USBH_OK;
 8016bd6:	2300      	movs	r3, #0
}
 8016bd8:	4618      	mov	r0, r3
 8016bda:	3708      	adds	r7, #8
 8016bdc:	46bd      	mov	sp, r7
 8016bde:	bd80      	pop	{r7, pc}

08016be0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8016be0:	b480      	push	{r7}
 8016be2:	b085      	sub	sp, #20
 8016be4:	af00      	add	r7, sp, #0
 8016be6:	6078      	str	r0, [r7, #4]
 8016be8:	460b      	mov	r3, r1
 8016bea:	70fb      	strb	r3, [r7, #3]
 8016bec:	4613      	mov	r3, r2
 8016bee:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8016bf6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8016bf8:	78fb      	ldrb	r3, [r7, #3]
 8016bfa:	68fa      	ldr	r2, [r7, #12]
 8016bfc:	212c      	movs	r1, #44	; 0x2c
 8016bfe:	fb01 f303 	mul.w	r3, r1, r3
 8016c02:	4413      	add	r3, r2
 8016c04:	333b      	adds	r3, #59	; 0x3b
 8016c06:	781b      	ldrb	r3, [r3, #0]
 8016c08:	2b00      	cmp	r3, #0
 8016c0a:	d009      	beq.n	8016c20 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8016c0c:	78fb      	ldrb	r3, [r7, #3]
 8016c0e:	68fa      	ldr	r2, [r7, #12]
 8016c10:	212c      	movs	r1, #44	; 0x2c
 8016c12:	fb01 f303 	mul.w	r3, r1, r3
 8016c16:	4413      	add	r3, r2
 8016c18:	3354      	adds	r3, #84	; 0x54
 8016c1a:	78ba      	ldrb	r2, [r7, #2]
 8016c1c:	701a      	strb	r2, [r3, #0]
 8016c1e:	e008      	b.n	8016c32 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8016c20:	78fb      	ldrb	r3, [r7, #3]
 8016c22:	68fa      	ldr	r2, [r7, #12]
 8016c24:	212c      	movs	r1, #44	; 0x2c
 8016c26:	fb01 f303 	mul.w	r3, r1, r3
 8016c2a:	4413      	add	r3, r2
 8016c2c:	3355      	adds	r3, #85	; 0x55
 8016c2e:	78ba      	ldrb	r2, [r7, #2]
 8016c30:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8016c32:	2300      	movs	r3, #0
}
 8016c34:	4618      	mov	r0, r3
 8016c36:	3714      	adds	r7, #20
 8016c38:	46bd      	mov	sp, r7
 8016c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c3e:	4770      	bx	lr

08016c40 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8016c40:	b580      	push	{r7, lr}
 8016c42:	b082      	sub	sp, #8
 8016c44:	af00      	add	r7, sp, #0
 8016c46:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8016c48:	6878      	ldr	r0, [r7, #4]
 8016c4a:	f7ed fe11 	bl	8004870 <HAL_Delay>
}
 8016c4e:	bf00      	nop
 8016c50:	3708      	adds	r7, #8
 8016c52:	46bd      	mov	sp, r7
 8016c54:	bd80      	pop	{r7, pc}
	...

08016c58 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016c58:	b480      	push	{r7}
 8016c5a:	b085      	sub	sp, #20
 8016c5c:	af00      	add	r7, sp, #0
 8016c5e:	4603      	mov	r3, r0
 8016c60:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8016c62:	2300      	movs	r3, #0
 8016c64:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016c66:	79fb      	ldrb	r3, [r7, #7]
 8016c68:	2b03      	cmp	r3, #3
 8016c6a:	d817      	bhi.n	8016c9c <USBH_Get_USB_Status+0x44>
 8016c6c:	a201      	add	r2, pc, #4	; (adr r2, 8016c74 <USBH_Get_USB_Status+0x1c>)
 8016c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c72:	bf00      	nop
 8016c74:	08016c85 	.word	0x08016c85
 8016c78:	08016c8b 	.word	0x08016c8b
 8016c7c:	08016c91 	.word	0x08016c91
 8016c80:	08016c97 	.word	0x08016c97
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8016c84:	2300      	movs	r3, #0
 8016c86:	73fb      	strb	r3, [r7, #15]
    break;
 8016c88:	e00b      	b.n	8016ca2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8016c8a:	2302      	movs	r3, #2
 8016c8c:	73fb      	strb	r3, [r7, #15]
    break;
 8016c8e:	e008      	b.n	8016ca2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8016c90:	2301      	movs	r3, #1
 8016c92:	73fb      	strb	r3, [r7, #15]
    break;
 8016c94:	e005      	b.n	8016ca2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8016c96:	2302      	movs	r3, #2
 8016c98:	73fb      	strb	r3, [r7, #15]
    break;
 8016c9a:	e002      	b.n	8016ca2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8016c9c:	2302      	movs	r3, #2
 8016c9e:	73fb      	strb	r3, [r7, #15]
    break;
 8016ca0:	bf00      	nop
  }
  return usb_status;
 8016ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8016ca4:	4618      	mov	r0, r3
 8016ca6:	3714      	adds	r7, #20
 8016ca8:	46bd      	mov	sp, r7
 8016caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cae:	4770      	bx	lr

08016cb0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8016cb0:	b580      	push	{r7, lr}
 8016cb2:	b084      	sub	sp, #16
 8016cb4:	af00      	add	r7, sp, #0
 8016cb6:	4603      	mov	r3, r0
 8016cb8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8016cba:	79fb      	ldrb	r3, [r7, #7]
 8016cbc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8016cbe:	79fb      	ldrb	r3, [r7, #7]
 8016cc0:	2b00      	cmp	r3, #0
 8016cc2:	d102      	bne.n	8016cca <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8016cc4:	2300      	movs	r3, #0
 8016cc6:	73fb      	strb	r3, [r7, #15]
 8016cc8:	e001      	b.n	8016cce <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8016cca:	2301      	movs	r3, #1
 8016ccc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 8016cce:	7bfb      	ldrb	r3, [r7, #15]
 8016cd0:	461a      	mov	r2, r3
 8016cd2:	2120      	movs	r1, #32
 8016cd4:	4803      	ldr	r0, [pc, #12]	; (8016ce4 <MX_DriverVbusFS+0x34>)
 8016cd6:	f7f1 faa7 	bl	8008228 <HAL_GPIO_WritePin>
}
 8016cda:	bf00      	nop
 8016cdc:	3710      	adds	r7, #16
 8016cde:	46bd      	mov	sp, r7
 8016ce0:	bd80      	pop	{r7, pc}
 8016ce2:	bf00      	nop
 8016ce4:	40020c00 	.word	0x40020c00

08016ce8 <__errno>:
 8016ce8:	4b01      	ldr	r3, [pc, #4]	; (8016cf0 <__errno+0x8>)
 8016cea:	6818      	ldr	r0, [r3, #0]
 8016cec:	4770      	bx	lr
 8016cee:	bf00      	nop
 8016cf0:	20000044 	.word	0x20000044

08016cf4 <__libc_init_array>:
 8016cf4:	b570      	push	{r4, r5, r6, lr}
 8016cf6:	4d0d      	ldr	r5, [pc, #52]	; (8016d2c <__libc_init_array+0x38>)
 8016cf8:	4c0d      	ldr	r4, [pc, #52]	; (8016d30 <__libc_init_array+0x3c>)
 8016cfa:	1b64      	subs	r4, r4, r5
 8016cfc:	10a4      	asrs	r4, r4, #2
 8016cfe:	2600      	movs	r6, #0
 8016d00:	42a6      	cmp	r6, r4
 8016d02:	d109      	bne.n	8016d18 <__libc_init_array+0x24>
 8016d04:	4d0b      	ldr	r5, [pc, #44]	; (8016d34 <__libc_init_array+0x40>)
 8016d06:	4c0c      	ldr	r4, [pc, #48]	; (8016d38 <__libc_init_array+0x44>)
 8016d08:	f000 f93c 	bl	8016f84 <_init>
 8016d0c:	1b64      	subs	r4, r4, r5
 8016d0e:	10a4      	asrs	r4, r4, #2
 8016d10:	2600      	movs	r6, #0
 8016d12:	42a6      	cmp	r6, r4
 8016d14:	d105      	bne.n	8016d22 <__libc_init_array+0x2e>
 8016d16:	bd70      	pop	{r4, r5, r6, pc}
 8016d18:	f855 3b04 	ldr.w	r3, [r5], #4
 8016d1c:	4798      	blx	r3
 8016d1e:	3601      	adds	r6, #1
 8016d20:	e7ee      	b.n	8016d00 <__libc_init_array+0xc>
 8016d22:	f855 3b04 	ldr.w	r3, [r5], #4
 8016d26:	4798      	blx	r3
 8016d28:	3601      	adds	r6, #1
 8016d2a:	e7f2      	b.n	8016d12 <__libc_init_array+0x1e>
 8016d2c:	08018fd8 	.word	0x08018fd8
 8016d30:	08018fd8 	.word	0x08018fd8
 8016d34:	08018fd8 	.word	0x08018fd8
 8016d38:	08018fdc 	.word	0x08018fdc

08016d3c <malloc>:
 8016d3c:	4b02      	ldr	r3, [pc, #8]	; (8016d48 <malloc+0xc>)
 8016d3e:	4601      	mov	r1, r0
 8016d40:	6818      	ldr	r0, [r3, #0]
 8016d42:	f000 b88d 	b.w	8016e60 <_malloc_r>
 8016d46:	bf00      	nop
 8016d48:	20000044 	.word	0x20000044

08016d4c <free>:
 8016d4c:	4b02      	ldr	r3, [pc, #8]	; (8016d58 <free+0xc>)
 8016d4e:	4601      	mov	r1, r0
 8016d50:	6818      	ldr	r0, [r3, #0]
 8016d52:	f000 b819 	b.w	8016d88 <_free_r>
 8016d56:	bf00      	nop
 8016d58:	20000044 	.word	0x20000044

08016d5c <memcpy>:
 8016d5c:	440a      	add	r2, r1
 8016d5e:	4291      	cmp	r1, r2
 8016d60:	f100 33ff 	add.w	r3, r0, #4294967295
 8016d64:	d100      	bne.n	8016d68 <memcpy+0xc>
 8016d66:	4770      	bx	lr
 8016d68:	b510      	push	{r4, lr}
 8016d6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016d6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016d72:	4291      	cmp	r1, r2
 8016d74:	d1f9      	bne.n	8016d6a <memcpy+0xe>
 8016d76:	bd10      	pop	{r4, pc}

08016d78 <memset>:
 8016d78:	4402      	add	r2, r0
 8016d7a:	4603      	mov	r3, r0
 8016d7c:	4293      	cmp	r3, r2
 8016d7e:	d100      	bne.n	8016d82 <memset+0xa>
 8016d80:	4770      	bx	lr
 8016d82:	f803 1b01 	strb.w	r1, [r3], #1
 8016d86:	e7f9      	b.n	8016d7c <memset+0x4>

08016d88 <_free_r>:
 8016d88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016d8a:	2900      	cmp	r1, #0
 8016d8c:	d044      	beq.n	8016e18 <_free_r+0x90>
 8016d8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016d92:	9001      	str	r0, [sp, #4]
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	f1a1 0404 	sub.w	r4, r1, #4
 8016d9a:	bfb8      	it	lt
 8016d9c:	18e4      	addlt	r4, r4, r3
 8016d9e:	f000 f8e3 	bl	8016f68 <__malloc_lock>
 8016da2:	4a1e      	ldr	r2, [pc, #120]	; (8016e1c <_free_r+0x94>)
 8016da4:	9801      	ldr	r0, [sp, #4]
 8016da6:	6813      	ldr	r3, [r2, #0]
 8016da8:	b933      	cbnz	r3, 8016db8 <_free_r+0x30>
 8016daa:	6063      	str	r3, [r4, #4]
 8016dac:	6014      	str	r4, [r2, #0]
 8016dae:	b003      	add	sp, #12
 8016db0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016db4:	f000 b8de 	b.w	8016f74 <__malloc_unlock>
 8016db8:	42a3      	cmp	r3, r4
 8016dba:	d908      	bls.n	8016dce <_free_r+0x46>
 8016dbc:	6825      	ldr	r5, [r4, #0]
 8016dbe:	1961      	adds	r1, r4, r5
 8016dc0:	428b      	cmp	r3, r1
 8016dc2:	bf01      	itttt	eq
 8016dc4:	6819      	ldreq	r1, [r3, #0]
 8016dc6:	685b      	ldreq	r3, [r3, #4]
 8016dc8:	1949      	addeq	r1, r1, r5
 8016dca:	6021      	streq	r1, [r4, #0]
 8016dcc:	e7ed      	b.n	8016daa <_free_r+0x22>
 8016dce:	461a      	mov	r2, r3
 8016dd0:	685b      	ldr	r3, [r3, #4]
 8016dd2:	b10b      	cbz	r3, 8016dd8 <_free_r+0x50>
 8016dd4:	42a3      	cmp	r3, r4
 8016dd6:	d9fa      	bls.n	8016dce <_free_r+0x46>
 8016dd8:	6811      	ldr	r1, [r2, #0]
 8016dda:	1855      	adds	r5, r2, r1
 8016ddc:	42a5      	cmp	r5, r4
 8016dde:	d10b      	bne.n	8016df8 <_free_r+0x70>
 8016de0:	6824      	ldr	r4, [r4, #0]
 8016de2:	4421      	add	r1, r4
 8016de4:	1854      	adds	r4, r2, r1
 8016de6:	42a3      	cmp	r3, r4
 8016de8:	6011      	str	r1, [r2, #0]
 8016dea:	d1e0      	bne.n	8016dae <_free_r+0x26>
 8016dec:	681c      	ldr	r4, [r3, #0]
 8016dee:	685b      	ldr	r3, [r3, #4]
 8016df0:	6053      	str	r3, [r2, #4]
 8016df2:	4421      	add	r1, r4
 8016df4:	6011      	str	r1, [r2, #0]
 8016df6:	e7da      	b.n	8016dae <_free_r+0x26>
 8016df8:	d902      	bls.n	8016e00 <_free_r+0x78>
 8016dfa:	230c      	movs	r3, #12
 8016dfc:	6003      	str	r3, [r0, #0]
 8016dfe:	e7d6      	b.n	8016dae <_free_r+0x26>
 8016e00:	6825      	ldr	r5, [r4, #0]
 8016e02:	1961      	adds	r1, r4, r5
 8016e04:	428b      	cmp	r3, r1
 8016e06:	bf04      	itt	eq
 8016e08:	6819      	ldreq	r1, [r3, #0]
 8016e0a:	685b      	ldreq	r3, [r3, #4]
 8016e0c:	6063      	str	r3, [r4, #4]
 8016e0e:	bf04      	itt	eq
 8016e10:	1949      	addeq	r1, r1, r5
 8016e12:	6021      	streq	r1, [r4, #0]
 8016e14:	6054      	str	r4, [r2, #4]
 8016e16:	e7ca      	b.n	8016dae <_free_r+0x26>
 8016e18:	b003      	add	sp, #12
 8016e1a:	bd30      	pop	{r4, r5, pc}
 8016e1c:	20001594 	.word	0x20001594

08016e20 <sbrk_aligned>:
 8016e20:	b570      	push	{r4, r5, r6, lr}
 8016e22:	4e0e      	ldr	r6, [pc, #56]	; (8016e5c <sbrk_aligned+0x3c>)
 8016e24:	460c      	mov	r4, r1
 8016e26:	6831      	ldr	r1, [r6, #0]
 8016e28:	4605      	mov	r5, r0
 8016e2a:	b911      	cbnz	r1, 8016e32 <sbrk_aligned+0x12>
 8016e2c:	f000 f88c 	bl	8016f48 <_sbrk_r>
 8016e30:	6030      	str	r0, [r6, #0]
 8016e32:	4621      	mov	r1, r4
 8016e34:	4628      	mov	r0, r5
 8016e36:	f000 f887 	bl	8016f48 <_sbrk_r>
 8016e3a:	1c43      	adds	r3, r0, #1
 8016e3c:	d00a      	beq.n	8016e54 <sbrk_aligned+0x34>
 8016e3e:	1cc4      	adds	r4, r0, #3
 8016e40:	f024 0403 	bic.w	r4, r4, #3
 8016e44:	42a0      	cmp	r0, r4
 8016e46:	d007      	beq.n	8016e58 <sbrk_aligned+0x38>
 8016e48:	1a21      	subs	r1, r4, r0
 8016e4a:	4628      	mov	r0, r5
 8016e4c:	f000 f87c 	bl	8016f48 <_sbrk_r>
 8016e50:	3001      	adds	r0, #1
 8016e52:	d101      	bne.n	8016e58 <sbrk_aligned+0x38>
 8016e54:	f04f 34ff 	mov.w	r4, #4294967295
 8016e58:	4620      	mov	r0, r4
 8016e5a:	bd70      	pop	{r4, r5, r6, pc}
 8016e5c:	20001598 	.word	0x20001598

08016e60 <_malloc_r>:
 8016e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e64:	1ccd      	adds	r5, r1, #3
 8016e66:	f025 0503 	bic.w	r5, r5, #3
 8016e6a:	3508      	adds	r5, #8
 8016e6c:	2d0c      	cmp	r5, #12
 8016e6e:	bf38      	it	cc
 8016e70:	250c      	movcc	r5, #12
 8016e72:	2d00      	cmp	r5, #0
 8016e74:	4607      	mov	r7, r0
 8016e76:	db01      	blt.n	8016e7c <_malloc_r+0x1c>
 8016e78:	42a9      	cmp	r1, r5
 8016e7a:	d905      	bls.n	8016e88 <_malloc_r+0x28>
 8016e7c:	230c      	movs	r3, #12
 8016e7e:	603b      	str	r3, [r7, #0]
 8016e80:	2600      	movs	r6, #0
 8016e82:	4630      	mov	r0, r6
 8016e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e88:	4e2e      	ldr	r6, [pc, #184]	; (8016f44 <_malloc_r+0xe4>)
 8016e8a:	f000 f86d 	bl	8016f68 <__malloc_lock>
 8016e8e:	6833      	ldr	r3, [r6, #0]
 8016e90:	461c      	mov	r4, r3
 8016e92:	bb34      	cbnz	r4, 8016ee2 <_malloc_r+0x82>
 8016e94:	4629      	mov	r1, r5
 8016e96:	4638      	mov	r0, r7
 8016e98:	f7ff ffc2 	bl	8016e20 <sbrk_aligned>
 8016e9c:	1c43      	adds	r3, r0, #1
 8016e9e:	4604      	mov	r4, r0
 8016ea0:	d14d      	bne.n	8016f3e <_malloc_r+0xde>
 8016ea2:	6834      	ldr	r4, [r6, #0]
 8016ea4:	4626      	mov	r6, r4
 8016ea6:	2e00      	cmp	r6, #0
 8016ea8:	d140      	bne.n	8016f2c <_malloc_r+0xcc>
 8016eaa:	6823      	ldr	r3, [r4, #0]
 8016eac:	4631      	mov	r1, r6
 8016eae:	4638      	mov	r0, r7
 8016eb0:	eb04 0803 	add.w	r8, r4, r3
 8016eb4:	f000 f848 	bl	8016f48 <_sbrk_r>
 8016eb8:	4580      	cmp	r8, r0
 8016eba:	d13a      	bne.n	8016f32 <_malloc_r+0xd2>
 8016ebc:	6821      	ldr	r1, [r4, #0]
 8016ebe:	3503      	adds	r5, #3
 8016ec0:	1a6d      	subs	r5, r5, r1
 8016ec2:	f025 0503 	bic.w	r5, r5, #3
 8016ec6:	3508      	adds	r5, #8
 8016ec8:	2d0c      	cmp	r5, #12
 8016eca:	bf38      	it	cc
 8016ecc:	250c      	movcc	r5, #12
 8016ece:	4629      	mov	r1, r5
 8016ed0:	4638      	mov	r0, r7
 8016ed2:	f7ff ffa5 	bl	8016e20 <sbrk_aligned>
 8016ed6:	3001      	adds	r0, #1
 8016ed8:	d02b      	beq.n	8016f32 <_malloc_r+0xd2>
 8016eda:	6823      	ldr	r3, [r4, #0]
 8016edc:	442b      	add	r3, r5
 8016ede:	6023      	str	r3, [r4, #0]
 8016ee0:	e00e      	b.n	8016f00 <_malloc_r+0xa0>
 8016ee2:	6822      	ldr	r2, [r4, #0]
 8016ee4:	1b52      	subs	r2, r2, r5
 8016ee6:	d41e      	bmi.n	8016f26 <_malloc_r+0xc6>
 8016ee8:	2a0b      	cmp	r2, #11
 8016eea:	d916      	bls.n	8016f1a <_malloc_r+0xba>
 8016eec:	1961      	adds	r1, r4, r5
 8016eee:	42a3      	cmp	r3, r4
 8016ef0:	6025      	str	r5, [r4, #0]
 8016ef2:	bf18      	it	ne
 8016ef4:	6059      	strne	r1, [r3, #4]
 8016ef6:	6863      	ldr	r3, [r4, #4]
 8016ef8:	bf08      	it	eq
 8016efa:	6031      	streq	r1, [r6, #0]
 8016efc:	5162      	str	r2, [r4, r5]
 8016efe:	604b      	str	r3, [r1, #4]
 8016f00:	4638      	mov	r0, r7
 8016f02:	f104 060b 	add.w	r6, r4, #11
 8016f06:	f000 f835 	bl	8016f74 <__malloc_unlock>
 8016f0a:	f026 0607 	bic.w	r6, r6, #7
 8016f0e:	1d23      	adds	r3, r4, #4
 8016f10:	1af2      	subs	r2, r6, r3
 8016f12:	d0b6      	beq.n	8016e82 <_malloc_r+0x22>
 8016f14:	1b9b      	subs	r3, r3, r6
 8016f16:	50a3      	str	r3, [r4, r2]
 8016f18:	e7b3      	b.n	8016e82 <_malloc_r+0x22>
 8016f1a:	6862      	ldr	r2, [r4, #4]
 8016f1c:	42a3      	cmp	r3, r4
 8016f1e:	bf0c      	ite	eq
 8016f20:	6032      	streq	r2, [r6, #0]
 8016f22:	605a      	strne	r2, [r3, #4]
 8016f24:	e7ec      	b.n	8016f00 <_malloc_r+0xa0>
 8016f26:	4623      	mov	r3, r4
 8016f28:	6864      	ldr	r4, [r4, #4]
 8016f2a:	e7b2      	b.n	8016e92 <_malloc_r+0x32>
 8016f2c:	4634      	mov	r4, r6
 8016f2e:	6876      	ldr	r6, [r6, #4]
 8016f30:	e7b9      	b.n	8016ea6 <_malloc_r+0x46>
 8016f32:	230c      	movs	r3, #12
 8016f34:	603b      	str	r3, [r7, #0]
 8016f36:	4638      	mov	r0, r7
 8016f38:	f000 f81c 	bl	8016f74 <__malloc_unlock>
 8016f3c:	e7a1      	b.n	8016e82 <_malloc_r+0x22>
 8016f3e:	6025      	str	r5, [r4, #0]
 8016f40:	e7de      	b.n	8016f00 <_malloc_r+0xa0>
 8016f42:	bf00      	nop
 8016f44:	20001594 	.word	0x20001594

08016f48 <_sbrk_r>:
 8016f48:	b538      	push	{r3, r4, r5, lr}
 8016f4a:	4d06      	ldr	r5, [pc, #24]	; (8016f64 <_sbrk_r+0x1c>)
 8016f4c:	2300      	movs	r3, #0
 8016f4e:	4604      	mov	r4, r0
 8016f50:	4608      	mov	r0, r1
 8016f52:	602b      	str	r3, [r5, #0]
 8016f54:	f7ed fbbe 	bl	80046d4 <_sbrk>
 8016f58:	1c43      	adds	r3, r0, #1
 8016f5a:	d102      	bne.n	8016f62 <_sbrk_r+0x1a>
 8016f5c:	682b      	ldr	r3, [r5, #0]
 8016f5e:	b103      	cbz	r3, 8016f62 <_sbrk_r+0x1a>
 8016f60:	6023      	str	r3, [r4, #0]
 8016f62:	bd38      	pop	{r3, r4, r5, pc}
 8016f64:	2000159c 	.word	0x2000159c

08016f68 <__malloc_lock>:
 8016f68:	4801      	ldr	r0, [pc, #4]	; (8016f70 <__malloc_lock+0x8>)
 8016f6a:	f000 b809 	b.w	8016f80 <__retarget_lock_acquire_recursive>
 8016f6e:	bf00      	nop
 8016f70:	200015a0 	.word	0x200015a0

08016f74 <__malloc_unlock>:
 8016f74:	4801      	ldr	r0, [pc, #4]	; (8016f7c <__malloc_unlock+0x8>)
 8016f76:	f000 b804 	b.w	8016f82 <__retarget_lock_release_recursive>
 8016f7a:	bf00      	nop
 8016f7c:	200015a0 	.word	0x200015a0

08016f80 <__retarget_lock_acquire_recursive>:
 8016f80:	4770      	bx	lr

08016f82 <__retarget_lock_release_recursive>:
 8016f82:	4770      	bx	lr

08016f84 <_init>:
 8016f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f86:	bf00      	nop
 8016f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016f8a:	bc08      	pop	{r3}
 8016f8c:	469e      	mov	lr, r3
 8016f8e:	4770      	bx	lr

08016f90 <_fini>:
 8016f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f92:	bf00      	nop
 8016f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016f96:	bc08      	pop	{r3}
 8016f98:	469e      	mov	lr, r3
 8016f9a:	4770      	bx	lr
